
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001220c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0801240c  0801240c  0002240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125e4  080125e4  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080125e4  080125e4  000225e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125ec  080125ec  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125ec  080125ec  000225ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125f0  080125f0  000225f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080125f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  080127e8  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08012888  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006ed0  20000334  08012928  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007204  08012928  00037204  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .debug_info   000389de  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007076  00000000  00000000  00068d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028b0  00000000  00000000  0006fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000025a8  00000000  00000000  00072668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031f9e  00000000  00000000  00074c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036135  00000000  00000000  000a6bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00119fcc  00000000  00000000  000dcce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f6caf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ae14  00000000  00000000  001f6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	080123f4 	.word	0x080123f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	080123f4 	.word	0x080123f4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]

}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000354 	.word	0x20000354

08000564 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
  if (aRxBuffer[1] == send_temp_h || aRxBuffer[1] == send_temp_nh){
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	2be3      	cmp	r3, #227	; 0xe3
 8000578:	d003      	beq.n	8000582 <HAL_I2C_SlaveRxCpltCallback+0x1e>
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 800057c:	785b      	ldrb	r3, [r3, #1]
 800057e:	2bf3      	cmp	r3, #243	; 0xf3
 8000580:	d11f      	bne.n	80005c2 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	  uint8_t crc_val = HAL_CRC_Calculate(&hcrc, &temperature, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	492c      	ldr	r1, [pc, #176]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000586:	482d      	ldr	r0, [pc, #180]	; (800063c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000588:	f001 fde4 	bl	8002154 <HAL_CRC_Calculate>
 800058c:	4603      	mov	r3, r0
 800058e:	73bb      	strb	r3, [r7, #14]
	  aTxBuffer[0] = (temperature>>8) && 0xFF;
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf14      	ite	ne
 800059a:	2301      	movne	r3, #1
 800059c:	2300      	moveq	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005a4:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = temperature && 0xFF;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf14      	ite	ne
 80005ae:	2301      	movne	r3, #1
 80005b0:	2300      	moveq	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005b8:	705a      	strb	r2, [r3, #1]
	  aTxBuffer[2] = crc_val;
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	7093      	strb	r3, [r2, #2]
  if (aRxBuffer[1] == send_temp_h || aRxBuffer[1] == send_temp_nh){
 80005c0:	e026      	b.n	8000610 <HAL_I2C_SlaveRxCpltCallback+0xac>
  }
  else if (aRxBuffer[1] == send_hum_h || aRxBuffer[1] == send_hum_nh){
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2be5      	cmp	r3, #229	; 0xe5
 80005c8:	d003      	beq.n	80005d2 <HAL_I2C_SlaveRxCpltCallback+0x6e>
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2bf5      	cmp	r3, #245	; 0xf5
 80005d0:	d11e      	bne.n	8000610 <HAL_I2C_SlaveRxCpltCallback+0xac>
	  uint8_t crc_val = HAL_CRC_Calculate(&hcrc, &humidity, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	491b      	ldr	r1, [pc, #108]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 80005d8:	f001 fdbc 	bl	8002154 <HAL_CRC_Calculate>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]
	  aTxBuffer[0] = (humidity>>8) && 0xFF;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005f4:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = humidity && 0xFF;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf14      	ite	ne
 80005fe:	2301      	movne	r3, #1
 8000600:	2300      	moveq	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000608:	705a      	strb	r2, [r3, #1]
	  aTxBuffer[2] = crc_val;
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	7093      	strb	r3, [r2, #2]
  }
  aRxBuffer[0]=0x00;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 800061e:	2200      	movs	r2, #0
 8000620:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000624:	2200      	movs	r2, #0
 8000626:	70da      	strb	r2, [r3, #3]
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000354 	.word	0x20000354
 8000634:	2000079c 	.word	0x2000079c
 8000638:	20000358 	.word	0x20000358
 800063c:	200003c0 	.word	0x200003c0
 8000640:	20000798 	.word	0x20000798
 8000644:	2000035c 	.word	0x2000035c

08000648 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <HAL_I2C_AddrCallback+0x58>)
 800065c:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_I2C_AddrCallback+0x58>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00c      	beq.n	8000680 <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066a:	2203      	movs	r2, #3
 800066c:	490d      	ldr	r1, [pc, #52]	; (80006a4 <HAL_I2C_AddrCallback+0x5c>)
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <HAL_I2C_AddrCallback+0x60>)
 8000670:	f003 fa0c 	bl	8003a8c <HAL_I2C_Slave_Seq_Transmit_IT>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 800067a:	f000 fdb7 	bl	80011ec <Error_Handler>
    Error_Handler();
  }

  }

}
 800067e:	e00b      	b.n	8000698 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000684:	2203      	movs	r2, #3
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <HAL_I2C_AddrCallback+0x64>)
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <HAL_I2C_AddrCallback+0x60>)
 800068a:	f003 fab1 	bl	8003bf0 <HAL_I2C_Slave_Seq_Receive_IT>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 8000694:	f000 fdaa 	bl	80011ec <Error_Handler>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000350 	.word	0x20000350
 80006a4:	20000798 	.word	0x20000798
 80006a8:	200004a8 	.word	0x200004a8
 80006ac:	2000079c 	.word	0x2000079c

080006b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f003 fc0e 	bl	8003eee <HAL_I2C_GetError>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d001      	beq.n	80006dc <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80006d8:	f000 fd88 	bl	80011ec <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e8:	f3bf 8f4f 	dsb	sy
}
 80006ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ee:	f3bf 8f6f 	isb	sy
}
 80006f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <SCB_EnableICache+0x48>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006fc:	f3bf 8f4f 	dsb	sy
}
 8000700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000702:	f3bf 8f6f 	isb	sy
}
 8000706:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <SCB_EnableICache+0x48>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <SCB_EnableICache+0x48>)
 800070e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000712:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000714:	f3bf 8f4f 	dsb	sy
}
 8000718:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800071a:	f3bf 8f6f 	isb	sy
}
 800071e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SCB_EnableDCache+0x84>)
 8000738:	2200      	movs	r2, #0
 800073a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800073e:	f3bf 8f4f 	dsb	sy
}
 8000742:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <SCB_EnableDCache+0x84>)
 8000746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800074a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0b5b      	lsrs	r3, r3, #13
 8000750:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000754:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800075e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	015a      	lsls	r2, r3, #5
 8000764:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000768:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800076e:	4911      	ldr	r1, [pc, #68]	; (80007b4 <SCB_EnableDCache+0x84>)
 8000770:	4313      	orrs	r3, r2
 8000772:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	60ba      	str	r2, [r7, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1ef      	bne.n	8000760 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	60fa      	str	r2, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1e5      	bne.n	8000756 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800078a:	f3bf 8f4f 	dsb	sy
}
 800078e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <SCB_EnableDCache+0x84>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <SCB_EnableDCache+0x84>)
 8000796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800079a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800079c:	f3bf 8f4f 	dsb	sy
}
 80007a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a2:	f3bf 8f6f 	isb	sy
}
 80007a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80007bc:	f7ff ff92 	bl	80006e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80007c0:	f7ff ffb6 	bl	8000730 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f001 fa2a 	bl	8001c1c <HAL_Init>

  /* USER CODE BEGIN Init */
  init_i2c_buffer();
 80007c8:	f000 fd16 	bl	80011f8 <init_i2c_buffer>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f874 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 fb5e 	bl	8000e90 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007d4:	f000 f8e0 	bl	8000998 <MX_CAN1_Init>
  MX_DAC_Init();
 80007d8:	f000 f93c 	bl	8000a54 <MX_DAC_Init>
  MX_ETH_Init();
 80007dc:	f000 f964 	bl	8000aa8 <MX_ETH_Init>
  MX_I2C1_Init();
 80007e0:	f000 f9b0 	bl	8000b44 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007e4:	f000 f9ee 	bl	8000bc4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007e8:	f000 fa26 	bl	8000c38 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007ec:	f000 fa5e 	bl	8000cac <MX_TIM1_Init>
  MX_UART7_Init();
 80007f0:	f000 fb00 	bl	8000df4 <MX_UART7_Init>
  MX_DMA_Init();
 80007f4:	f000 fb2e 	bl	8000e54 <MX_DMA_Init>
  MX_CRC_Init();
 80007f8:	f000 f902 	bl	8000a00 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80007fc:	2100      	movs	r1, #0
 80007fe:	481c      	ldr	r0, [pc, #112]	; (8000870 <main+0xb8>)
 8000800:	f001 fe64 	bl	80024cc <HAL_DAC_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	491b      	ldr	r1, [pc, #108]	; (8000874 <main+0xbc>)
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <main+0xc0>)
 800080a:	f009 fecf 	bl	800a5ac <HAL_UARTEx_ReceiveToIdle_DMA>
  init_i2c_listen();
 800080e:	f000 fd13 	bl	8001238 <init_i2c_listen>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000812:	f00d fe69 	bl	800e4e8 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 8000816:	f00b fb69 	bl	800beec <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <main+0xc4>)
 800081c:	2100      	movs	r1, #0
 800081e:	4818      	ldr	r0, [pc, #96]	; (8000880 <main+0xc8>)
 8000820:	f00d fecc 	bl	800e5bc <osThreadNew>
 8000824:	4603      	mov	r3, r0
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <main+0xcc>)
 8000828:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <main+0xd0>)
 800082c:	2100      	movs	r1, #0
 800082e:	4817      	ldr	r0, [pc, #92]	; (800088c <main+0xd4>)
 8000830:	f00d fec4 	bl	800e5bc <osThreadNew>
 8000834:	4603      	mov	r3, r0
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <main+0xd8>)
 8000838:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <main+0xdc>)
 800083c:	2100      	movs	r1, #0
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <main+0xe0>)
 8000840:	f00d febc 	bl	800e5bc <osThreadNew>
 8000844:	4603      	mov	r3, r0
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <main+0xe4>)
 8000848:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <main+0xe8>)
 800084c:	2100      	movs	r1, #0
 800084e:	4815      	ldr	r0, [pc, #84]	; (80008a4 <main+0xec>)
 8000850:	f00d feb4 	bl	800e5bc <osThreadNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <main+0xf0>)
 8000858:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <main+0xf4>)
 800085c:	2100      	movs	r1, #0
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <main+0xf8>)
 8000860:	f00d feac 	bl	800e5bc <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <main+0xfc>)
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800086a:	f00d fe71 	bl	800e550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0xb6>
 8000870:	200003e4 	.word	0x200003e4
 8000874:	20000710 	.word	0x20000710
 8000878:	20000610 	.word	0x20000610
 800087c:	080124b0 	.word	0x080124b0
 8000880:	0800111d 	.word	0x0800111d
 8000884:	200006f8 	.word	0x200006f8
 8000888:	080124d4 	.word	0x080124d4
 800088c:	08001131 	.word	0x08001131
 8000890:	200006fc 	.word	0x200006fc
 8000894:	080124f8 	.word	0x080124f8
 8000898:	08001141 	.word	0x08001141
 800089c:	20000700 	.word	0x20000700
 80008a0:	0801251c 	.word	0x0801251c
 80008a4:	080011a9 	.word	0x080011a9
 80008a8:	20000704 	.word	0x20000704
 80008ac:	08012540 	.word	0x08012540
 80008b0:	080011b9 	.word	0x080011b9
 80008b4:	20000708 	.word	0x20000708

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f011 fc26 	bl	8012118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <SystemClock_Config+0xd8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <SystemClock_Config+0xd8>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <SystemClock_Config+0xd8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <SystemClock_Config+0xdc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <SystemClock_Config+0xdc>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <SystemClock_Config+0xdc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4618      	mov	r0, r3
 800093e:	f005 fed5 	bl	80066ec <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000948:	f000 fc50 	bl	80011ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800094c:	f005 fe7e 	bl	800664c <HAL_PWREx_EnableOverDrive>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000956:	f000 fc49 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2103      	movs	r1, #3
 8000976:	4618      	mov	r0, r3
 8000978:	f006 f966 	bl	8006c48 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000982:	f000 fc33 	bl	80011ec <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_CAN1_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_CAN1_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_CAN1_Init+0x60>)
 80009e6:	f001 f973 	bl	8001cd0 <HAL_CAN_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fbfc 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000398 	.word	0x20000398
 80009fc:	40006400 	.word	0x40006400

08000a00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_CRC_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 305;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a18:	f240 1231 	movw	r2, #305	; 0x131
 8000a1c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_CRC_Init+0x4c>)
 8000a38:	f001 fb28 	bl	800208c <HAL_CRC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_CRC_Init+0x46>
  {
    Error_Handler();
 8000a42:	f000 fbd3 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200003c0 	.word	0x200003c0
 8000a50:	40023000 	.word	0x40023000

08000a54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <MX_DAC_Init+0x50>)
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a6a:	f001 fd0d 	bl	8002488 <HAL_DAC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a74:	f000 fbba 	bl	80011ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a88:	f001 fdfb 	bl	8002682 <HAL_DAC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a92:	f000 fbab 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200003e4 	.word	0x200003e4
 8000aa4:	40007400 	.word	0x40007400

08000aa8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ETH_Init+0x84>)
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <MX_ETH_Init+0x88>)
 8000ab0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ac0:	22e1      	movs	r2, #225	; 0xe1
 8000ac2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ada:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ade:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ae2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <MX_ETH_Init+0x90>)
 8000ae8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_ETH_Init+0x84>)
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_ETH_Init+0x94>)
 8000aee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_ETH_Init+0x84>)
 8000af2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000af6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_ETH_Init+0x84>)
 8000afa:	f002 fa33 	bl	8002f64 <HAL_ETH_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b04:	f000 fb72 	bl	80011ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b08:	2238      	movs	r2, #56	; 0x38
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b0e:	f011 fb03 	bl	8012118 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b14:	2221      	movs	r2, #33	; 0x21
 8000b16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200003f8 	.word	0x200003f8
 8000b30:	40028000 	.word	0x40028000
 8000b34:	20000790 	.word	0x20000790
 8000b38:	20000294 	.word	0x20000294
 8000b3c:	200001f4 	.word	0x200001f4
 8000b40:	20000360 	.word	0x20000360

08000b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_I2C1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <MX_I2C1_Init+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b80:	f002 fef4 	bl	800396c <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f000 fb2f 	bl	80011ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b92:	f004 fa0b 	bl	8004fac <HAL_I2CEx_ConfigAnalogFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 fb26 	bl	80011ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000ba4:	f004 fa4d 	bl	8005042 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fb1d 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200004a8 	.word	0x200004a8
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	20303e5d 	.word	0x20303e5d

08000bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bca:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <MX_SPI1_Init+0x70>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000be2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_SPI1_Init+0x6c>)
 8000c1e:	f006 fe93 	bl	8007948 <HAL_SPI_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000c28:	f000 fae0 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200004fc 	.word	0x200004fc
 8000c34:	40013000 	.word	0x40013000

08000c38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <MX_SPI3_Init+0x70>)
 8000c40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_SPI3_Init+0x6c>)
 8000c92:	f006 fe59 	bl	8007948 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000c9c:	f000 faa6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000560 	.word	0x20000560
 8000ca8:	40003c00 	.word	0x40003c00

08000cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_TIM1_Init+0x140>)
 8000cea:	4a41      	ldr	r2, [pc, #260]	; (8000df0 <MX_TIM1_Init+0x144>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_TIM1_Init+0x140>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_TIM1_Init+0x140>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_TIM1_Init+0x140>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d14:	4835      	ldr	r0, [pc, #212]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d16:	f006 fec2 	bl	8007a9e <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d20:	f000 fa64 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2e:	4619      	mov	r1, r3
 8000d30:	482e      	ldr	r0, [pc, #184]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d32:	f007 fd25 	bl	8008780 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d3c:	f000 fa56 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d40:	482a      	ldr	r0, [pc, #168]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d42:	f006 ff7b 	bl	8007c3c <HAL_TIM_IC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d4c:	f000 fa4e 	bl	80011ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d50:	2304      	movs	r3, #4
 8000d52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d54:	2350      	movs	r3, #80	; 0x50
 8000d56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4820      	ldr	r0, [pc, #128]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d6c:	f007 fdd2 	bl	8008914 <HAL_TIM_SlaveConfigSynchro>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000d76:	f000 fa39 	bl	80011ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_TIM1_Init+0x140>)
 8000d94:	f007 fc57 	bl	8008646 <HAL_TIM_IC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d9e:	f000 fa25 	bl	80011ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2204      	movs	r2, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_TIM1_Init+0x140>)
 8000db4:	f007 fc47 	bl	8008646 <HAL_TIM_IC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000dbe:	f000 fa15 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_TIM1_Init+0x140>)
 8000dd4:	f008 f960 	bl	8009098 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000dde:	f000 fa05 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3740      	adds	r7, #64	; 0x40
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200005c4 	.word	0x200005c4
 8000df0:	40010000 	.word	0x40010000

08000df4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_UART7_Init+0x58>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_UART7_Init+0x5c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_UART7_Init+0x58>)
 8000e38:	f008 f9da 	bl	80091f0 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000e42:	f000 f9d3 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000610 	.word	0x20000610
 8000e50:	40007800 	.word	0x40007800

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2105      	movs	r1, #5
 8000e76:	200e      	movs	r0, #14
 8000e78:	f001 f8de 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e7c:	200e      	movs	r0, #14
 8000e7e:	f001 f8f7 	bl	8002070 <HAL_NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b95      	ldr	r3, [pc, #596]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a94      	ldr	r2, [pc, #592]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b92      	ldr	r3, [pc, #584]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b8f      	ldr	r3, [pc, #572]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a8e      	ldr	r2, [pc, #568]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed6:	4b89      	ldr	r3, [pc, #548]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a88      	ldr	r2, [pc, #544]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000edc:	f043 0320 	orr.w	r3, r3, #32
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b86      	ldr	r3, [pc, #536]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0320 	and.w	r3, r3, #32
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	4b83      	ldr	r3, [pc, #524]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a82      	ldr	r2, [pc, #520]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b80      	ldr	r3, [pc, #512]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b7d      	ldr	r3, [pc, #500]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a7c      	ldr	r2, [pc, #496]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b7a      	ldr	r3, [pc, #488]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a76      	ldr	r2, [pc, #472]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b74      	ldr	r3, [pc, #464]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a70      	ldr	r2, [pc, #448]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <MX_GPIO_Init+0x26c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4865      	ldr	r0, [pc, #404]	; (8001100 <MX_GPIO_Init+0x270>)
 8000f6c:	f002 fce4 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000f76:	4863      	ldr	r0, [pc, #396]	; (8001104 <MX_GPIO_Init+0x274>)
 8000f78:	f002 fcde 	bl	8003938 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	210c      	movs	r1, #12
 8000f80:	4861      	ldr	r0, [pc, #388]	; (8001108 <MX_GPIO_Init+0x278>)
 8000f82:	f002 fcd9 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000f8c:	485f      	ldr	r0, [pc, #380]	; (800110c <MX_GPIO_Init+0x27c>)
 8000f8e:	f002 fcd3 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f98:	485d      	ldr	r0, [pc, #372]	; (8001110 <MX_GPIO_Init+0x280>)
 8000f9a:	f002 fccd 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2174      	movs	r1, #116	; 0x74
 8000fa2:	485c      	ldr	r0, [pc, #368]	; (8001114 <MX_GPIO_Init+0x284>)
 8000fa4:	f002 fcc8 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000fa8:	f241 0308 	movw	r3, #4104	; 0x1008
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4856      	ldr	r0, [pc, #344]	; (8001118 <MX_GPIO_Init+0x288>)
 8000fbe:	f002 faf7 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000fc2:	f248 0305 	movw	r3, #32773	; 0x8005
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	484e      	ldr	r0, [pc, #312]	; (8001110 <MX_GPIO_Init+0x280>)
 8000fd8:	f002 faea 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4843      	ldr	r0, [pc, #268]	; (8001100 <MX_GPIO_Init+0x270>)
 8000ff4:	f002 fadc 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4840      	ldr	r0, [pc, #256]	; (800110c <MX_GPIO_Init+0x27c>)
 800100c:	f002 fad0 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8001010:	2301      	movs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4838      	ldr	r0, [pc, #224]	; (8001104 <MX_GPIO_Init+0x274>)
 8001024:	f002 fac4 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8001028:	f24c 4310 	movw	r3, #50192	; 0xc410
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800102e:	2311      	movs	r3, #17
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4830      	ldr	r0, [pc, #192]	; (8001104 <MX_GPIO_Init+0x274>)
 8001042:	f002 fab5 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8001046:	230c      	movs	r3, #12
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800104a:	2311      	movs	r3, #17
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <MX_GPIO_Init+0x278>)
 800105e:	f002 faa7 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8001062:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4824      	ldr	r0, [pc, #144]	; (800110c <MX_GPIO_Init+0x27c>)
 800107c:	f002 fa98 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <MX_GPIO_Init+0x280>)
 800109a:	f002 fa89 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 800109e:	2304      	movs	r3, #4
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_GPIO_Init+0x284>)
 80010b6:	f002 fa7b 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 80010ba:	2370      	movs	r3, #112	; 0x70
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010be:	2311      	movs	r3, #17
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <MX_GPIO_Init+0x284>)
 80010d2:	f002 fa6d 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_GPIO_Init+0x274>)
 80010ee:	f002 fa5f 	bl	80035b0 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3738      	adds	r7, #56	; 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40021400 	.word	0x40021400
 8001104:	40020400 	.word	0x40020400
 8001108:	40021800 	.word	0x40021800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000

0800111c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001124:	f010 fa0a 	bl	801153c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f00d faed 	bl	800e708 <osDelay>
 800112e:	e7fb      	b.n	8001128 <StartDefaultTask+0xc>

08001130 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f00d fae5 	bl	800e708 <osDelay>
 800113e:	e7fb      	b.n	8001138 <StartTask_gateway+0x8>

08001140 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if( USB_MSGQ_Rx != NULL )
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <StartTask_controller+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d024      	beq.n	800119a <StartTask_controller+0x5a>
	  {

			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <StartTask_controller+0x64>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f107 010c 	add.w	r1, r7, #12
 8001158:	2300      	movs	r3, #0
 800115a:	2200      	movs	r2, #0
 800115c:	f00d fbfc 	bl	800e958 <osMessageQueueGet>
 8001160:	6138      	str	r0, [r7, #16]

			if (status == osOK)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d118      	bne.n	800119a <StartTask_controller+0x5a>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00d      	b.n	800118a <StartTask_controller+0x4a>
				{
					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	7819      	ldrb	r1, [r3, #0]
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d9ee      	bls.n	800116e <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4618      	mov	r0, r3
 8001196:	f00a ff2f 	bl	800bff8 <HiL_controller_read_message>
			}
	  }

	  osDelay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f00d fab4 	bl	800e708 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 80011a0:	e7d2      	b.n	8001148 <StartTask_controller+0x8>
 80011a2:	bf00      	nop
 80011a4:	2000070c 	.word	0x2000070c

080011a8 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f00d faa9 	bl	800e708 <osDelay>
 80011b6:	e7fb      	b.n	80011b0 <StartTask_SHT20+0x8>

080011b8 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f00d faa1 	bl	800e708 <osDelay>
 80011c6:	e7fb      	b.n	80011c0 <StartTask_74HC595D+0x8>

080011c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011da:	f000 fd35 	bl	8001c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40001000 	.word	0x40001000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <init_i2c_buffer>:
uint8_t aTxBuffer[3];

uint8_t aRxBuffer[4];


void init_i2c_buffer(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	aRxBuffer[0]=0x00;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <init_i2c_buffer+0x38>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <init_i2c_buffer+0x38>)
 8001204:	2200      	movs	r2, #0
 8001206:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <init_i2c_buffer+0x38>)
 800120a:	2200      	movs	r2, #0
 800120c:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <init_i2c_buffer+0x38>)
 8001210:	2200      	movs	r2, #0
 8001212:	70da      	strb	r2, [r3, #3]
	aTxBuffer[0]=0x00;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <init_i2c_buffer+0x3c>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0x00;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <init_i2c_buffer+0x3c>)
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0x00;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <init_i2c_buffer+0x3c>)
 8001222:	2200      	movs	r2, #0
 8001224:	709a      	strb	r2, [r3, #2]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	2000079c 	.word	0x2000079c
 8001234:	20000798 	.word	0x20000798

08001238 <init_i2c_listen>:

void init_i2c_listen(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <init_i2c_listen+0x18>)
 800123e:	f002 fd89 	bl	8003d54 <HAL_I2C_EnableListen_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <init_i2c_listen+0x14>
	    {
	      /* Transfer error in reception process */
	      Error_Handler();
 8001248:	f7ff ffd0 	bl	80011ec <Error_Handler>
	    }
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200004a8 	.word	0x200004a8

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f000 fed1 	bl	8002038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_CAN_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d127      	bne.n	8001316 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_CAN_MspInit+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 80012f6:	2303      	movs	r3, #3
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001306:	2309      	movs	r3, #9
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_CAN_MspInit+0x84>)
 8001312:	f002 f94d 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40006400 	.word	0x40006400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00

0800132c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_CRC_MspInit+0x38>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10b      	bne.n	8001356 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_CRC_MspInit+0x3c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_CRC_MspInit+0x3c>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_CRC_MspInit+0x3c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023000 	.word	0x40023000
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_DAC_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12b      	bne.n	80013e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 8001394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_DAC_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 80013be:	2310      	movs	r3, #16
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_DAC_MspInit+0x8c>)
 80013d2:	f002 f8ed 	bl	80035b0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	210f      	movs	r1, #15
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f000 fe2c 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e0:	2036      	movs	r0, #54	; 0x36
 80013e2:	f000 fe45 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40007400 	.word	0x40007400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <HAL_ETH_MspInit+0x158>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f040 8096 	bne.w	800154c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	623b      	str	r3, [r7, #32]
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a46      	ldr	r2, [pc, #280]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800143e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001456:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 80014b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_ETH_MspInit+0x15c>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	481e      	ldr	r0, [pc, #120]	; (800155c <HAL_ETH_MspInit+0x160>)
 80014e4:	f002 f864 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80014e8:	2386      	movs	r3, #134	; 0x86
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f8:	230b      	movs	r3, #11
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <HAL_ETH_MspInit+0x164>)
 8001504:	f002 f854 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151a:	230b      	movs	r3, #11
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <HAL_ETH_MspInit+0x168>)
 8001526:	f002 f843 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800152a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800153c:	230b      	movs	r3, #11
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <HAL_ETH_MspInit+0x16c>)
 8001548:	f002 f832 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40028000 	.word	0x40028000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40021800 	.word	0x40021800

0800156c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ae      	sub	sp, #184	; 0xb8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2290      	movs	r2, #144	; 0x90
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f010 fdc3 	bl	8012118 <memset>
  if(hi2c->Instance==I2C1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_I2C_MspInit+0xd4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d14c      	bne.n	8001636 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800159c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fda4 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015b6:	f7ff fe19 	bl	80011ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 80015d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ec:	2304      	movs	r3, #4
 80015ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <HAL_I2C_MspInit+0xdc>)
 80015fa:	f001 ffd9 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 8001604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_I2C_MspInit+0xd8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2105      	movs	r1, #5
 800161a:	201f      	movs	r0, #31
 800161c:	f000 fd0c 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001620:	201f      	movs	r0, #31
 8001622:	f000 fd25 	bl	8002070 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2105      	movs	r1, #5
 800162a:	2020      	movs	r0, #32
 800162c:	f000 fd04 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001630:	2020      	movs	r0, #32
 8001632:	f000 fd1d 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	37b8      	adds	r7, #184	; 0xb8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_SPI_MspInit+0x148>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d144      	bne.n	80016f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a49      	ldr	r2, [pc, #292]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	4b44      	ldr	r3, [pc, #272]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a43      	ldr	r2, [pc, #268]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <HAL_SPI_MspInit+0x150>)
 80016d2:	f001 ff6d 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d6:	2308      	movs	r3, #8
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e6:	2305      	movs	r3, #5
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	482b      	ldr	r0, [pc, #172]	; (80017a0 <HAL_SPI_MspInit+0x154>)
 80016f2:	f001 ff5d 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016f6:	e049      	b.n	800178c <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a29      	ldr	r2, [pc, #164]	; (80017a4 <HAL_SPI_MspInit+0x158>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d144      	bne.n	800178c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_SPI_MspInit+0x14c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800174a:	2304      	movs	r3, #4
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800175a:	2307      	movs	r3, #7
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	480e      	ldr	r0, [pc, #56]	; (80017a0 <HAL_SPI_MspInit+0x154>)
 8001766:	f001 ff23 	bl	80035b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 800176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800177c:	2306      	movs	r3, #6
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4808      	ldr	r0, [pc, #32]	; (80017a8 <HAL_SPI_MspInit+0x15c>)
 8001788:	f001 ff12 	bl	80035b0 <HAL_GPIO_Init>
}
 800178c:	bf00      	nop
 800178e:	3738      	adds	r7, #56	; 0x38
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013000 	.word	0x40013000
 8001798:	40023800 	.word	0x40023800
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40003c00 	.word	0x40003c00
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d130      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x94>)
 800181c:	f001 fec8 	bl	80035b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2105      	movs	r1, #5
 8001824:	201b      	movs	r0, #27
 8001826:	f000 fc07 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800182a:	201b      	movs	r0, #27
 800182c:	f000 fc20 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010000 	.word	0x40010000
 800183c:	40023800 	.word	0x40023800
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0ae      	sub	sp, #184	; 0xb8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2290      	movs	r2, #144	; 0x90
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f010 fc57 	bl	8012118 <memset>
  if(huart->Instance==UART7)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_UART_MspInit+0x120>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d172      	bne.n	800195a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800187a:	2300      	movs	r3, #0
 800187c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4618      	mov	r0, r3
 8001884:	f005 fc38 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800188e:	f7ff fcad 	bl	80011ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_UART_MspInit+0x124>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_UART_MspInit+0x124>)
 8001898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_UART_MspInit+0x124>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_UART_MspInit+0x124>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a2e      	ldr	r2, [pc, #184]	; (8001968 <HAL_UART_MspInit+0x124>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_UART_MspInit+0x124>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80018c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80018dc:	2308      	movs	r3, #8
 80018de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <HAL_UART_MspInit+0x128>)
 80018ea:	f001 fe61 	bl	80035b0 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_UART_MspInit+0x12c>)
 80018f0:	4a20      	ldr	r2, [pc, #128]	; (8001974 <HAL_UART_MspInit+0x130>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_UART_MspInit+0x12c>)
 80018f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018fa:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_UART_MspInit+0x12c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_UART_MspInit+0x12c>)
 800190a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_UART_MspInit+0x12c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_UART_MspInit+0x12c>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001930:	f000 ff00 	bl	8002734 <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800193a:	f7ff fc57 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001942:	675a      	str	r2, [r3, #116]	; 0x74
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_UART_MspInit+0x12c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	2052      	movs	r0, #82	; 0x52
 8001950:	f000 fb72 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001954:	2052      	movs	r0, #82	; 0x52
 8001956:	f000 fb8b 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	37b8      	adds	r7, #184	; 0xb8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40007800 	.word	0x40007800
 8001968:	40023800 	.word	0x40023800
 800196c:	40021000 	.word	0x40021000
 8001970:	20000698 	.word	0x20000698
 8001974:	40026058 	.word	0x40026058

08001978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001988:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_InitTick+0xe0>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_InitTick+0xe0>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_InitTick+0xe0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a0:	f107 0210 	add.w	r2, r7, #16
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f005 fb72 	bl	8007094 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ba:	f005 fb43 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 80019be:	6378      	str	r0, [r7, #52]	; 0x34
 80019c0:	e004      	b.n	80019cc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019c2:	f005 fb3f 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <HAL_InitTick+0xe4>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	3b01      	subs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_InitTick+0xe8>)
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <HAL_InitTick+0xec>)
 80019de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_InitTick+0xe8>)
 80019e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_InitTick+0xe8>)
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_InitTick+0xe8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_InitTick+0xe8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_InitTick+0xe8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a00:	4817      	ldr	r0, [pc, #92]	; (8001a60 <HAL_InitTick+0xe8>)
 8001a02:	f006 f84c 	bl	8007a9e <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11b      	bne.n	8001a4c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <HAL_InitTick+0xe8>)
 8001a16:	f006 f899 	bl	8007b4c <HAL_TIM_Base_Start_IT>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d111      	bne.n	8001a4c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a28:	2036      	movs	r0, #54	; 0x36
 8001a2a:	f000 fb21 	bl	8002070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d808      	bhi.n	8001a46 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	2036      	movs	r0, #54	; 0x36
 8001a3a:	f000 fafd 	bl	8002038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_InitTick+0xf0>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e002      	b.n	8001a4c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	431bde83 	.word	0x431bde83
 8001a60:	200007a0 	.word	0x200007a0
 8001a64:	40001000 	.word	0x40001000
 8001a68:	20000004 	.word	0x20000004

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Stream3_IRQHandler+0x10>)
 8001a9e:	f000 ffe9 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000698 	.word	0x20000698

08001aac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM1_CC_IRQHandler+0x10>)
 8001ab2:	f006 fca9 	bl	8008408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200005c4 	.word	0x200005c4

08001ac0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <I2C1_EV_IRQHandler+0x10>)
 8001ac6:	f002 f965 	bl	8003d94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004a8 	.word	0x200004a8

08001ad4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <I2C1_ER_IRQHandler+0x10>)
 8001ada:	f002 f975 	bl	8003dc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200004a8 	.word	0x200004a8

08001ae8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <TIM6_DAC_IRQHandler+0x20>)
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <TIM6_DAC_IRQHandler+0x20>)
 8001af8:	f000 fd3a 	bl	8002570 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <TIM6_DAC_IRQHandler+0x24>)
 8001afe:	f006 fc83 	bl	8008408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200003e4 	.word	0x200003e4
 8001b0c:	200007a0 	.word	0x200007a0

08001b10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <OTG_FS_IRQHandler+0x10>)
 8001b16:	f003 fc26 	bl	8005366 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20006cec 	.word	0x20006cec

08001b24 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <UART7_IRQHandler+0x10>)
 8001b2a:	f007 fbaf 	bl	800928c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000610 	.word	0x20000610

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f010 fa8c 	bl	8012084 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20080000 	.word	0x20080000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	200007ec 	.word	0x200007ec
 8001ba0:	20007208 	.word	0x20007208

08001ba4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf2:	f7ff ffd7 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f010 fa4b 	bl	8012090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7fe fddd 	bl	80007b8 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001c0c:	080125f4 	.word	0x080125f4
  ldr r2, =_sbss
 8001c10:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001c14:	20007204 	.word	0x20007204

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f9f8 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fea0 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fb0c 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	200007f0 	.word	0x200007f0

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200007f0 	.word	0x200007f0

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0ed      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fad8 	bl	80012a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff ffb4 	bl	8001c70 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0a:	e012      	b.n	8001d32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff ffb0 	bl	8001c70 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90b      	bls.n	8001d32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0c5      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0e5      	beq.n	8001d0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0202 	bic.w	r2, r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff ff8e 	bl	8001c70 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff ff8a 	bl	8001c70 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09f      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e5      	bne.n	8001d58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7e5b      	ldrb	r3, [r3, #25]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e9b      	ldrb	r3, [r3, #26]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0220 	bic.w	r2, r2, #32
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7edb      	ldrb	r3, [r3, #27]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0210 	bic.w	r2, r2, #16
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e007      	b.n	8001e34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0210 	orr.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f1b      	ldrb	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d108      	bne.n	8001e4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0208 	orr.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7f5b      	ldrb	r3, [r3, #29]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e007      	b.n	8001e88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <__NVIC_SetPriorityGrouping>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <__NVIC_SetPriorityGrouping+0x40>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00
 8001f0c:	05fa0000 	.word	0x05fa0000

08001f10 <__NVIC_GetPriorityGrouping>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff4c 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204a:	f7ff ff61 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff ffb1 	bl	8001fbc <NVIC_EncodePriority>
 800205a:	4602      	mov	r2, r0
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff80 	bl	8001f68 <__NVIC_SetPriority>
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff54 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e054      	b.n	8002148 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f5b      	ldrb	r3, [r3, #29]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f93c 	bl	800132c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_CRC_Init+0xc4>)
 80020c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0218 	bic.w	r2, r2, #24
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	e00c      	b.n	80020f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	461a      	mov	r2, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f948 	bl	800237c <HAL_CRCEx_Polynomial_Set>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e028      	b.n	8002148 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	795b      	ldrb	r3, [r3, #5]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	e004      	b.n	8002114 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6912      	ldr	r2, [r2, #16]
 8002112:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	04c11db7 	.word	0x04c11db7

08002154 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2202      	movs	r2, #2
 8002168:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d006      	beq.n	8002190 <HAL_CRC_Calculate+0x3c>
 8002182:	2b03      	cmp	r3, #3
 8002184:	d829      	bhi.n	80021da <HAL_CRC_Calculate+0x86>
 8002186:	2b01      	cmp	r3, #1
 8002188:	d019      	beq.n	80021be <HAL_CRC_Calculate+0x6a>
 800218a:	2b02      	cmp	r3, #2
 800218c:	d01e      	beq.n	80021cc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800218e:	e024      	b.n	80021da <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e00a      	b.n	80021ac <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d3f0      	bcc.n	8002196 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	e00e      	b.n	80021dc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f812 	bl	80021ec <CRC_Handle_8>
 80021c8:	6138      	str	r0, [r7, #16]
      break;
 80021ca:	e007      	b.n	80021dc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f899 	bl	8002308 <CRC_Handle_16>
 80021d6:	6138      	str	r0, [r7, #16]
      break;
 80021d8:	e000      	b.n	80021dc <HAL_CRC_Calculate+0x88>
      break;
 80021da:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80021e2:	693b      	ldr	r3, [r7, #16]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	e023      	b.n	8002246 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3301      	adds	r3, #1
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	440b      	add	r3, r1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002218:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	440b      	add	r3, r1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002228:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	3303      	adds	r3, #3
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	440b      	add	r3, r1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800223c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800223e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3d6      	bcc.n	80021fe <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04d      	beq.n	80022f6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4413      	add	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d116      	bne.n	80022ac <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	3301      	adds	r3, #1
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	440b      	add	r3, r1
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	8b7a      	ldrh	r2, [r7, #26]
 80022aa:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d11f      	bne.n	80022f6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3301      	adds	r3, #1
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	440b      	add	r3, r1
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	8b7a      	ldrh	r2, [r7, #26]
 80022e2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e013      	b.n	8002342 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	440b      	add	r3, r1
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3e6      	bcc.n	800231a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	4413      	add	r3, r2
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800238c:	231f      	movs	r3, #31
 800238e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002390:	bf00      	nop
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	613a      	str	r2, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b18      	cmp	r3, #24
 80023b4:	d846      	bhi.n	8002444 <HAL_CRCEx_Polynomial_Set+0xc8>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	0800244b 	.word	0x0800244b
 80023c0:	08002445 	.word	0x08002445
 80023c4:	08002445 	.word	0x08002445
 80023c8:	08002445 	.word	0x08002445
 80023cc:	08002445 	.word	0x08002445
 80023d0:	08002445 	.word	0x08002445
 80023d4:	08002445 	.word	0x08002445
 80023d8:	08002445 	.word	0x08002445
 80023dc:	08002439 	.word	0x08002439
 80023e0:	08002445 	.word	0x08002445
 80023e4:	08002445 	.word	0x08002445
 80023e8:	08002445 	.word	0x08002445
 80023ec:	08002445 	.word	0x08002445
 80023f0:	08002445 	.word	0x08002445
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002445 	.word	0x08002445
 80023fc:	0800242d 	.word	0x0800242d
 8002400:	08002445 	.word	0x08002445
 8002404:	08002445 	.word	0x08002445
 8002408:	08002445 	.word	0x08002445
 800240c:	08002445 	.word	0x08002445
 8002410:	08002445 	.word	0x08002445
 8002414:	08002445 	.word	0x08002445
 8002418:	08002445 	.word	0x08002445
 800241c:	08002421 	.word	0x08002421
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b06      	cmp	r3, #6
 8002424:	d913      	bls.n	800244e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800242a:	e010      	b.n	800244e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d90f      	bls.n	8002452 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002436:	e00c      	b.n	8002452 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	d90b      	bls.n	8002456 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002442:	e008      	b.n	8002456 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	75fb      	strb	r3, [r7, #23]
      break;
 8002448:	e006      	b.n	8002458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800244a:	bf00      	nop
 800244c:	e004      	b.n	8002458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800244e:	bf00      	nop
 8002450:	e002      	b.n	8002458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002456:	bf00      	nop
  }
  if (status == HAL_OK)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 0118 	bic.w	r1, r3, #24
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800247a:	7dfb      	ldrb	r3, [r7, #23]
}
 800247c:	4618      	mov	r0, r3
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e014      	b.n	80024c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe ff5e 	bl	800136c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	795b      	ldrb	r3, [r3, #5]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_DAC_Start+0x16>
 80024de:	2302      	movs	r3, #2
 80024e0:	e040      	b.n	8002564 <HAL_DAC_Start+0x98>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002516:	2b3c      	cmp	r3, #60	; 0x3c
 8002518:	d11d      	bne.n	8002556 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	e014      	b.n	8002556 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	213c      	movs	r1, #60	; 0x3c
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	429a      	cmp	r2, r3
 8002544:	d107      	bne.n	8002556 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0202 	orr.w	r2, r2, #2
 8002554:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d120      	bne.n	80025ca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	d118      	bne.n	80025ca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2204      	movs	r2, #4
 800259c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f852 	bl	800266e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d8:	d120      	bne.n	800261c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e8:	d118      	bne.n	800261c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002604:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002614:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f882 	bl	8002720 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3308      	adds	r3, #8
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e004      	b.n	8002658 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3314      	adds	r3, #20
 8002656:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	795b      	ldrb	r3, [r3, #5]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_DAC_ConfigChannel+0x18>
 8002696:	2302      	movs	r3, #2
 8002698:	e03c      	b.n	8002714 <HAL_DAC_ConfigChannel+0x92>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2202      	movs	r2, #2
 80026a4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	22c0      	movs	r2, #192	; 0xc0
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff fa96 	bl	8001c70 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e099      	b.n	8002884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	e00f      	b.n	8002792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002772:	f7ff fa7d 	bl	8001c70 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b05      	cmp	r3, #5
 800277e:	d908      	bls.n	8002792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e078      	b.n	8002884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e8      	bne.n	8002772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_DMA_Init+0x158>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b04      	cmp	r3, #4
 8002824:	d117      	bne.n	8002856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fb17 	bl	8002e6c <DMA_CheckFifoParam>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002852:	2301      	movs	r3, #1
 8002854:	e016      	b.n	8002884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 face 	bl	8002e00 <DMA_CalcBaseAndBitshift>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e010803f 	.word	0xe010803f

08002890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Start_IT+0x26>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e048      	b.n	8002948 <HAL_DMA_Start_IT+0xb8>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d137      	bne.n	800293a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa60 	bl	8002da4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0216 	orr.w	r2, r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e005      	b.n	8002946 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800295e:	f7ff f987 	bl	8001c70 <HAL_GetTick>
 8002962:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e052      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_Abort+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	e013      	b.n	80029fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d4:	f7ff f94c 	bl	8001c70 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d90c      	bls.n	80029fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e015      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e4      	bne.n	80029d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	223f      	movs	r2, #63	; 0x3f
 8002a10:	409a      	lsls	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00c      	b.n	8002a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_DMA_IRQHandler+0x248>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_DMA_IRQHandler+0x24c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2204      	movs	r2, #4
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2210      	movs	r2, #16
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d043      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2210      	movs	r2, #16
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e01f      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2220      	movs	r2, #32
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808f 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8087 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d136      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0216 	bic.w	r2, r2, #22
 8002c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x1da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0208 	bic.w	r2, r2, #8
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	223f      	movs	r2, #63	; 0x3f
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
        }
        return;
 8002c8a:	e079      	b.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d031      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e02c      	b.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e01e      	b.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d032      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d307      	bcc.n	8002d5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f2      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x2cc>
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	e000      	b.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d80:	bf00      	nop
    }
  }
}
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d96:	b2db      	uxtb	r3, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d108      	bne.n	8002de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002de2:	e007      	b.n	8002df4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3b10      	subs	r3, #16
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <DMA_CalcBaseAndBitshift+0x60>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <DMA_CalcBaseAndBitshift+0x64>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d908      	bls.n	8002e40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <DMA_CalcBaseAndBitshift+0x68>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	1d1a      	adds	r2, r3, #4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3e:	e006      	b.n	8002e4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <DMA_CalcBaseAndBitshift+0x68>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	aaaaaaab 	.word	0xaaaaaaab
 8002e64:	0801257c 	.word	0x0801257c
 8002e68:	fffffc00 	.word	0xfffffc00

08002e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11f      	bne.n	8002ec6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d856      	bhi.n	8002f3a <DMA_CheckFifoParam+0xce>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x28>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb7 	.word	0x08002eb7
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002f3b 	.word	0x08002f3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d046      	beq.n	8002f3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e043      	b.n	8002f3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ebe:	d140      	bne.n	8002f42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e03d      	b.n	8002f42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	d121      	bne.n	8002f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d837      	bhi.n	8002f46 <DMA_CheckFifoParam+0xda>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <DMA_CheckFifoParam+0x70>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002ef3 	.word	0x08002ef3
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f05 	.word	0x08002f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e030      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d025      	beq.n	8002f4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e022      	b.n	8002f4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f0c:	d11f      	bne.n	8002f4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f12:	e01c      	b.n	8002f4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d903      	bls.n	8002f22 <DMA_CheckFifoParam+0xb6>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d003      	beq.n	8002f28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f20:	e018      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e015      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e00b      	b.n	8002f52 <DMA_CheckFifoParam+0xe6>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e00a      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e008      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e006      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e004      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e002      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
    }
  } 
  
  return status; 
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06a      	b.n	800304c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2223      	movs	r2, #35	; 0x23
 8002f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe fa37 	bl	80013fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_ETH_Init+0xf0>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_ETH_Init+0xf0>)
 8002f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_ETH_Init+0xf0>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_ETH_Init+0xf4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <HAL_ETH_Init+0xf4>)
 8002fac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fb0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_ETH_Init+0xf4>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4927      	ldr	r1, [pc, #156]	; (8003058 <HAL_ETH_Init+0xf4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_ETH_Init+0xf4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7fe fe48 	bl	8001c70 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002fe2:	e011      	b.n	8003008 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002fe4:	f7fe fe44 	bl	8001c70 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ff2:	d909      	bls.n	8003008 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	22e0      	movs	r2, #224	; 0xe0
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e021      	b.n	800304c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e4      	bne.n	8002fe4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f958 	bl	80032d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f9ff 	bl	8003424 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa55 	bl	80034d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461a      	mov	r2, r3
 8003032:	2100      	movs	r1, #0
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9bd 	bl	80033b4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2210      	movs	r2, #16
 8003046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40013800 	.word	0x40013800

0800305c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <ETH_SetMACConfig+0x15c>)
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	7c1b      	ldrb	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <ETH_SetMACConfig+0x28>
 800307e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003082:	e000      	b.n	8003086 <ETH_SetMACConfig+0x2a>
 8003084:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	7c5b      	ldrb	r3, [r3, #17]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <ETH_SetMACConfig+0x38>
 800308e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003092:	e000      	b.n	8003096 <ETH_SetMACConfig+0x3a>
 8003094:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003096:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800309c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7fdb      	ldrb	r3, [r3, #31]
 80030a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80030a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	7f92      	ldrb	r2, [r2, #30]
 80030b0:	2a00      	cmp	r2, #0
 80030b2:	d102      	bne.n	80030ba <ETH_SetMACConfig+0x5e>
 80030b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b8:	e000      	b.n	80030bc <ETH_SetMACConfig+0x60>
 80030ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80030bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	7f1b      	ldrb	r3, [r3, #28]
 80030c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80030d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80030da:	2a00      	cmp	r2, #0
 80030dc:	d102      	bne.n	80030e4 <ETH_SetMACConfig+0x88>
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	e000      	b.n	80030e6 <ETH_SetMACConfig+0x8a>
 80030e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	7bdb      	ldrb	r3, [r3, #15]
 80030ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030fe:	4313      	orrs	r3, r2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003116:	2001      	movs	r0, #1
 8003118:	f7fe fdb6 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003142:	2a00      	cmp	r2, #0
 8003144:	d101      	bne.n	800314a <ETH_SetMACConfig+0xee>
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	e000      	b.n	800314c <ETH_SetMACConfig+0xf0>
 800314a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800314c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003152:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800315a:	2a01      	cmp	r2, #1
 800315c:	d101      	bne.n	8003162 <ETH_SetMACConfig+0x106>
 800315e:	2208      	movs	r2, #8
 8003160:	e000      	b.n	8003164 <ETH_SetMACConfig+0x108>
 8003162:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003164:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800316c:	2a01      	cmp	r2, #1
 800316e:	d101      	bne.n	8003174 <ETH_SetMACConfig+0x118>
 8003170:	2204      	movs	r2, #4
 8003172:	e000      	b.n	8003176 <ETH_SetMACConfig+0x11a>
 8003174:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003176:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800317e:	2a01      	cmp	r2, #1
 8003180:	d101      	bne.n	8003186 <ETH_SetMACConfig+0x12a>
 8003182:	2202      	movs	r2, #2
 8003184:	e000      	b.n	8003188 <ETH_SetMACConfig+0x12c>
 8003186:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003188:	4313      	orrs	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fe fd71 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	ff20810f 	.word	0xff20810f

080031bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <ETH_SetDMAConfig+0x110>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	7b1b      	ldrb	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <ETH_SetDMAConfig+0x2c>
 80031e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031e6:	e000      	b.n	80031ea <ETH_SetDMAConfig+0x2e>
 80031e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7b5b      	ldrb	r3, [r3, #13]
 80031ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	7f52      	ldrb	r2, [r2, #29]
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	d102      	bne.n	8003200 <ETH_SetDMAConfig+0x44>
 80031fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031fe:	e000      	b.n	8003202 <ETH_SetDMAConfig+0x46>
 8003200:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003202:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	7b9b      	ldrb	r3, [r3, #14]
 8003208:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800320a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003210:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	7f1b      	ldrb	r3, [r3, #28]
 8003216:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003218:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	7f9b      	ldrb	r3, [r3, #30]
 800321e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003220:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003226:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003230:	4313      	orrs	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003240:	461a      	mov	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003252:	2001      	movs	r0, #1
 8003254:	f7fe fd18 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003260:	461a      	mov	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	791b      	ldrb	r3, [r3, #4]
 800326a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003270:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003276:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800327c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003284:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003286:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800328e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003294:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800329e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7fe fce9 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	f8de3f23 	.word	0xf8de3f23

080032d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0a6      	sub	sp, #152	; 0x98
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800330c:	2300      	movs	r3, #0
 800330e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003316:	2300      	movs	r3, #0
 8003318:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fe86 	bl	800305c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003350:	2301      	movs	r3, #1
 8003352:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003354:	2301      	movs	r3, #1
 8003356:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800335e:	2301      	movs	r3, #1
 8003360:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800337c:	2301      	movs	r3, #1
 800337e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003384:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800338c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003390:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003398:	2300      	movs	r3, #0
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033a0:	f107 0308 	add.w	r3, r7, #8
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ff08 	bl	80031bc <ETH_SetDMAConfig>
}
 80033ac:	bf00      	nop
 80033ae:	3798      	adds	r7, #152	; 0x98
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3305      	adds	r3, #5
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	3204      	adds	r2, #4
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <ETH_MACAddressConfig+0x68>)
 80033d6:	4413      	add	r3, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3303      	adds	r3, #3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	061a      	lsls	r2, r3, #24
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3302      	adds	r3, #2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3301      	adds	r3, #1
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	4313      	orrs	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <ETH_MACAddressConfig+0x6c>)
 8003406:	4413      	add	r3, r2
 8003408:	461a      	mov	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6013      	str	r3, [r2, #0]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40028040 	.word	0x40028040
 8003420:	40028044 	.word	0x40028044

08003424 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e03e      	b.n	80034b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	3206      	adds	r2, #6
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d80c      	bhi.n	8003494 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e004      	b.n	800349e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d9bd      	bls.n	8003432 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	611a      	str	r2, [r3, #16]
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e046      	b.n	8003572 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6919      	ldr	r1, [r3, #16]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003520:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003528:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	3212      	adds	r2, #18
 800353e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d80c      	bhi.n	8003562 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6919      	ldr	r1, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e004      	b.n	800356c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d9b5      	bls.n	80034e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a2:	60da      	str	r2, [r3, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e175      	b.n	80038bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f040 8164 	bne.w	80038b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d005      	beq.n	8003606 <HAL_GPIO_Init+0x56>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d130      	bne.n	8003668 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 0201 	and.w	r2, r3, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b03      	cmp	r3, #3
 8003672:	d017      	beq.n	80036a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2203      	movs	r2, #3
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d123      	bne.n	80036f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	08da      	lsrs	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3208      	adds	r2, #8
 80036b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	220f      	movs	r2, #15
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	08da      	lsrs	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3208      	adds	r2, #8
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80be 	beq.w	80038b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003752:	4a61      	ldr	r2, [pc, #388]	; (80038d8 <HAL_GPIO_Init+0x328>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_GPIO_Init+0x32c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d037      	beq.n	80037ee <HAL_GPIO_Init+0x23e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_GPIO_Init+0x23a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_GPIO_Init+0x334>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02b      	beq.n	80037e6 <HAL_GPIO_Init+0x236>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_GPIO_Init+0x338>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d025      	beq.n	80037e2 <HAL_GPIO_Init+0x232>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a54      	ldr	r2, [pc, #336]	; (80038ec <HAL_GPIO_Init+0x33c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <HAL_GPIO_Init+0x22e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a53      	ldr	r2, [pc, #332]	; (80038f0 <HAL_GPIO_Init+0x340>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d019      	beq.n	80037da <HAL_GPIO_Init+0x22a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_GPIO_Init+0x344>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x226>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_GPIO_Init+0x348>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x222>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_GPIO_Init+0x34c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x21e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <HAL_GPIO_Init+0x350>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x21a>
 80037c6:	2309      	movs	r3, #9
 80037c8:	e012      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037ca:	230a      	movs	r3, #10
 80037cc:	e010      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037ce:	2308      	movs	r3, #8
 80037d0:	e00e      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037d2:	2307      	movs	r3, #7
 80037d4:	e00c      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037d6:	2306      	movs	r3, #6
 80037d8:	e00a      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037da:	2305      	movs	r3, #5
 80037dc:	e008      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037de:	2304      	movs	r3, #4
 80037e0:	e006      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e004      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_GPIO_Init+0x240>
 80037ee:	2300      	movs	r3, #0
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f002 0203 	and.w	r2, r2, #3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4093      	lsls	r3, r2
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003800:	4935      	ldr	r1, [pc, #212]	; (80038d8 <HAL_GPIO_Init+0x328>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	3302      	adds	r3, #2
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_GPIO_Init+0x354>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003832:	4a34      	ldr	r2, [pc, #208]	; (8003904 <HAL_GPIO_Init+0x354>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_GPIO_Init+0x354>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_GPIO_Init+0x354>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003862:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_GPIO_Init+0x354>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003886:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_GPIO_Init+0x354>)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_GPIO_Init+0x354>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_GPIO_Init+0x354>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	f67f ae86 	bls.w	80035d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020c00 	.word	0x40020c00
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40021400 	.word	0x40021400
 80038f4:	40021800 	.word	0x40021800
 80038f8:	40021c00 	.word	0x40021c00
 80038fc:	40022000 	.word	0x40022000
 8003900:	40022400 	.word	0x40022400
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	887b      	ldrh	r3, [r7, #2]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	e001      	b.n	800392a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003954:	e003      	b.n	800395e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	041a      	lsls	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fdea 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	e006      	b.n	80039f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d104      	bne.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_I2C_Init+0x11c>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	02008000 	.word	0x02008000

08003a8c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aa8:	2b28      	cmp	r3, #40	; 0x28
 8003aaa:	f040 8098 	bne.w	8003bde <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e08c      	b.n	8003be0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ac6:	f248 0101 	movw	r1, #32769	; 0x8001
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 fa10 	bl	8004ef0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e080      	b.n	8003be0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b2a      	cmp	r3, #42	; 0x2a
 8003af0:	d12a      	bne.n	8003b48 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003af2:	2102      	movs	r1, #2
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f001 f9fb 	bl	8004ef0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d11e      	bne.n	8003b48 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b18:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe ff7e 	bl	8002a30 <HAL_DMA_Abort_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b44:	4610      	mov	r0, r2
 8003b46:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2229      	movs	r2, #41	; 0x29
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003bd0:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f001 f921 	bl	8004e1c <I2C_Enable_IRQ>

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	08004d7b 	.word	0x08004d7b
 8003bec:	08003f07 	.word	0x08003f07

08003bf0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c0c:	2b28      	cmp	r3, #40	; 0x28
 8003c0e:	f040 8098 	bne.w	8003d42 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e08c      	b.n	8003d44 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c2a:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f001 f95e 	bl	8004ef0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e080      	b.n	8003d44 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b29      	cmp	r3, #41	; 0x29
 8003c54:	d12a      	bne.n	8003cac <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c56:	2101      	movs	r1, #1
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 f949 	bl	8004ef0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6c:	d11e      	bne.n	8003cac <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003c8c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fecc 	bl	8002a30 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	222a      	movs	r2, #42	; 0x2a
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003d34:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f001 f86f 	bl	8004e1c <I2C_Enable_IRQ>

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08004d7b 	.word	0x08004d7b
 8003d50:	08003f07 	.word	0x08003f07

08003d54 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d10d      	bne.n	8003d84 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2228      	movs	r2, #40	; 0x28
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_I2C_EnableListen_IT+0x3c>)
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f001 f84e 	bl	8004e1c <I2C_Enable_IRQ>

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08003f07 	.word	0x08003f07

08003d94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	09db      	lsrs	r3, r3, #7
 8003df0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	0a9b      	lsrs	r3, r3, #10
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	09db      	lsrs	r3, r3, #7
 8003e1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f043 0202 	orr.w	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 030b 	and.w	r3, r3, #11
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fe61 	bl	8004b44 <I2C_ITError>
  }
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b086      	sub	sp, #24
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <I2C_Slave_ISR_IT+0x24>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0ec      	b.n	8004104 <I2C_Slave_ISR_IT+0x1fe>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f4a:	6939      	ldr	r1, [r7, #16]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fc99 	bl	8004884 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d04d      	beq.n	8003ffa <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d047      	beq.n	8003ffa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d128      	bne.n	8003fc6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b28      	cmp	r3, #40	; 0x28
 8003f7e:	d108      	bne.n	8003f92 <I2C_Slave_ISR_IT+0x8c>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f86:	d104      	bne.n	8003f92 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fd84 	bl	8004a98 <I2C_ITListenCplt>
 8003f90:	e032      	b.n	8003ff8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b29      	cmp	r3, #41	; 0x29
 8003f9c:	d10e      	bne.n	8003fbc <I2C_Slave_ISR_IT+0xb6>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d00a      	beq.n	8003fbc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 febf 	bl	8004d32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fb3d 	bl	8004634 <I2C_ITSlaveSeqCplt>
 8003fba:	e01d      	b.n	8003ff8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003fc4:	e096      	b.n	80040f4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <I2C_Slave_ISR_IT+0xe4>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe6:	f040 8085 	bne.w	80040f4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fda7 	bl	8004b44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ff6:	e07d      	b.n	80040f4 <I2C_Slave_ISR_IT+0x1ee>
 8003ff8:	e07c      	b.n	80040f4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d030      	beq.n	8004068 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02a      	beq.n	8004068 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d14f      	bne.n	80040f8 <I2C_Slave_ISR_IT+0x1f2>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405e:	d04b      	beq.n	80040f8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fae7 	bl	8004634 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004066:	e047      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa15 	bl	80044b2 <I2C_ITAddrCplt>
 8004088:	e037      	b.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d031      	beq.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02b      	beq.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d018      	beq.n	80040de <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
 80040dc:	e00d      	b.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e4:	d002      	beq.n	80040ec <I2C_Slave_ISR_IT+0x1e6>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 faa1 	bl	8004634 <I2C_ITSlaveSeqCplt>
 80040f2:	e002      	b.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80040f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <I2C_Master_ISR_DMA+0x1a>
 8004122:	2302      	movs	r3, #2
 8004124:	e0e1      	b.n	80042ea <I2C_Master_ISR_DMA+0x1de>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800415a:	2120      	movs	r1, #32
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fe5d 	bl	8004e1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fde5 	bl	8004d32 <I2C_Flush_TXDR>
 8004168:	e0ba      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d072      	beq.n	800425c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800417e:	2b00      	cmp	r3, #0
 8004180:	d06c      	beq.n	800425c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d04e      	beq.n	800423a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2bff      	cmp	r3, #255	; 0xff
 80041b2:	d906      	bls.n	80041c2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	22ff      	movs	r2, #255	; 0xff
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80041ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e010      	b.n	80041e4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d4:	d003      	beq.n	80041de <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e002      	b.n	80041e4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80041de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	8a79      	ldrh	r1, [r7, #18]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fde0 	bl	8004db8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b22      	cmp	r3, #34	; 0x22
 8004214:	d108      	bne.n	8004228 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004224:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004226:	e05b      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004236:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004238:	e052      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004248:	d003      	beq.n	8004252 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f9b5 	bl	80045ba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004250:	e046      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fc75 	bl	8004b44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800425a:	e041      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d029      	beq.n	80042bc <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d119      	bne.n	80042b2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d027      	beq.n	80042de <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004296:	d108      	bne.n	80042aa <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80042a8:	e019      	b.n	80042de <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f985 	bl	80045ba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80042b0:	e015      	b.n	80042de <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fc45 	bl	8004b44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042ba:	e010      	b.n	80042de <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fa0a 	bl	80046f0 <I2C_ITMasterCplt>
 80042dc:	e000      	b.n	80042e0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80042de:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b088      	sub	sp, #32
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <I2C_Slave_ISR_DMA+0x24>
 8004312:	2302      	movs	r3, #2
 8004314:	e0c9      	b.n	80044aa <I2C_Slave_ISR_DMA+0x1b8>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 faa3 	bl	8004884 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 809a 	beq.w	8004480 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8093 	beq.w	8004480 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0b9b      	lsrs	r3, r3, #14
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0bdb      	lsrs	r3, r3, #15
 800436a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800436e:	2b00      	cmp	r3, #0
 8004370:	d07f      	beq.n	8004472 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0bdb      	lsrs	r3, r3, #15
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004392:	2301      	movs	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0b9b      	lsrs	r3, r3, #14
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d128      	bne.n	8004412 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b28      	cmp	r3, #40	; 0x28
 80043ca:	d108      	bne.n	80043de <I2C_Slave_ISR_DMA+0xec>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d2:	d104      	bne.n	80043de <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fb5e 	bl	8004a98 <I2C_ITListenCplt>
 80043dc:	e048      	b.n	8004470 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b29      	cmp	r3, #41	; 0x29
 80043e8:	d10e      	bne.n	8004408 <I2C_Slave_ISR_DMA+0x116>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f0:	d00a      	beq.n	8004408 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2210      	movs	r2, #16
 80043f8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fc99 	bl	8004d32 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f917 	bl	8004634 <I2C_ITSlaveSeqCplt>
 8004406:	e033      	b.n	8004470 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2210      	movs	r2, #16
 800440e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004410:	e034      	b.n	800447c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2210      	movs	r2, #16
 8004418:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <I2C_Slave_ISR_DMA+0x14a>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443a:	d11f      	bne.n	800447c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b21      	cmp	r3, #33	; 0x21
 8004440:	d002      	beq.n	8004448 <I2C_Slave_ISR_DMA+0x156>
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b29      	cmp	r3, #41	; 0x29
 8004446:	d103      	bne.n	8004450 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2221      	movs	r2, #33	; 0x21
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	e008      	b.n	8004462 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	d002      	beq.n	800445c <I2C_Slave_ISR_DMA+0x16a>
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b2a      	cmp	r3, #42	; 0x2a
 800445a:	d102      	bne.n	8004462 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2222      	movs	r2, #34	; 0x22
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	4619      	mov	r1, r3
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fb6b 	bl	8004b44 <I2C_ITError>
      if (treatdmanack == 1U)
 800446e:	e005      	b.n	800447c <I2C_Slave_ISR_DMA+0x18a>
 8004470:	e004      	b.n	800447c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800447a:	e011      	b.n	80044a0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800447c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800447e:	e00f      	b.n	80044a0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	08db      	lsrs	r3, r3, #3
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	08db      	lsrs	r3, r3, #3
 8004490:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f809 	bl	80044b2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044c8:	2b28      	cmp	r3, #40	; 0x28
 80044ca:	d16a      	bne.n	80045a2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80044ea:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004506:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d138      	bne.n	8004582 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004510:	897b      	ldrh	r3, [r7, #10]
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	b29a      	uxth	r2, r3
 8004516:	89bb      	ldrh	r3, [r7, #12]
 8004518:	4053      	eors	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	f003 0306 	and.w	r3, r3, #6
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11c      	bne.n	800455e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004524:	897b      	ldrh	r3, [r7, #10]
 8004526:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	2b02      	cmp	r3, #2
 8004538:	d13b      	bne.n	80045b2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2208      	movs	r2, #8
 8004546:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004550:	89ba      	ldrh	r2, [r7, #12]
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc f876 	bl	8000648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800455c:	e029      	b.n	80045b2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fcc2 	bl	8004ef0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004574:	89ba      	ldrh	r2, [r7, #12]
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc f864 	bl	8000648 <HAL_I2C_AddrCallback>
}
 8004580:	e017      	b.n	80045b2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fcb2 	bl	8004ef0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004594:	89ba      	ldrh	r2, [r7, #12]
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc f854 	bl	8000648 <HAL_I2C_AddrCallback>
}
 80045a0:	e007      	b.n	80045b2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2208      	movs	r2, #8
 80045a8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b21      	cmp	r3, #33	; 0x21
 80045d4:	d115      	bne.n	8004602 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2211      	movs	r2, #17
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045ea:	2101      	movs	r1, #1
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fc7f 	bl	8004ef0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fc45 	bl	8003e8a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004600:	e014      	b.n	800462c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2212      	movs	r2, #18
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004616:	2102      	movs	r1, #2
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fc69 	bl	8004ef0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fc39 	bl	8003e9e <HAL_I2C_MasterRxCpltCallback>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0b9b      	lsrs	r3, r3, #14
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e00d      	b.n	8004686 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0bdb      	lsrs	r3, r3, #15
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004684:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b29      	cmp	r3, #41	; 0x29
 8004690:	d112      	bne.n	80046b8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2228      	movs	r2, #40	; 0x28
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2221      	movs	r2, #33	; 0x21
 800469e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046a0:	2101      	movs	r1, #1
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fc24 	bl	8004ef0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fb ff47 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046b6:	e017      	b.n	80046e8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b2a      	cmp	r3, #42	; 0x2a
 80046c2:	d111      	bne.n	80046e8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2228      	movs	r2, #40	; 0x28
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2222      	movs	r2, #34	; 0x22
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046d2:	2102      	movs	r1, #2
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fc0b 	bl	8004ef0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fb ff3e 	bl	8000564 <HAL_I2C_SlaveRxCpltCallback>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2220      	movs	r2, #32
 8004704:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b21      	cmp	r3, #33	; 0x21
 8004710:	d107      	bne.n	8004722 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004712:	2101      	movs	r1, #1
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fbeb 	bl	8004ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2211      	movs	r2, #17
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
 8004720:	e00c      	b.n	800473c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b22      	cmp	r3, #34	; 0x22
 800472c:	d106      	bne.n	800473c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800472e:	2102      	movs	r1, #2
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fbdd 	bl	8004ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2212      	movs	r2, #18
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b4d      	ldr	r3, [pc, #308]	; (800487c <I2C_ITMasterCplt+0x18c>)
 8004748:	400b      	ands	r3, r1
 800474a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <I2C_ITMasterCplt+0x190>)
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2210      	movs	r2, #16
 800476a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	f043 0204 	orr.w	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d10b      	bne.n	800479c <I2C_ITMasterCplt+0xac>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	b2db      	uxtb	r3, r3
 8004798:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800479a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fac8 	bl	8004d32 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b60      	cmp	r3, #96	; 0x60
 80047b2:	d002      	beq.n	80047ba <I2C_ITMasterCplt+0xca>
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9bf 	bl	8004b44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047c6:	e054      	b.n	8004872 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b21      	cmp	r3, #33	; 0x21
 80047d2:	d124      	bne.n	800481e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d10b      	bne.n	8004806 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fb57 	bl	8003eb2 <HAL_I2C_MemTxCpltCallback>
}
 8004804:	e035      	b.n	8004872 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fb37 	bl	8003e8a <HAL_I2C_MasterTxCpltCallback>
}
 800481c:	e029      	b.n	8004872 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b22      	cmp	r3, #34	; 0x22
 8004828:	d123      	bne.n	8004872 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d10b      	bne.n	800485c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fb36 	bl	8003ec6 <HAL_I2C_MemRxCpltCallback>
}
 800485a:	e00a      	b.n	8004872 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fb16 	bl	8003e9e <HAL_I2C_MasterRxCpltCallback>
}
 8004872:	bf00      	nop
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	fe00e800 	.word	0xfe00e800
 8004880:	ffff0000 	.word	0xffff0000

08004884 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2220      	movs	r2, #32
 80048a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b21      	cmp	r3, #33	; 0x21
 80048ae:	d002      	beq.n	80048b6 <I2C_ITSlaveCplt+0x32>
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b29      	cmp	r3, #41	; 0x29
 80048b4:	d108      	bne.n	80048c8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80048b6:	f248 0101 	movw	r1, #32769	; 0x8001
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb18 	bl	8004ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2221      	movs	r2, #33	; 0x21
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
 80048c6:	e00d      	b.n	80048e4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b22      	cmp	r3, #34	; 0x22
 80048cc:	d002      	beq.n	80048d4 <I2C_ITSlaveCplt+0x50>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d107      	bne.n	80048e4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80048d4:	f248 0102 	movw	r1, #32770	; 0x8002
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb09 	bl	8004ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2222      	movs	r2, #34	; 0x22
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b64      	ldr	r3, [pc, #400]	; (8004a90 <I2C_ITSlaveCplt+0x20c>)
 8004900:	400b      	ands	r3, r1
 8004902:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa14 	bl	8004d32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	0b9b      	lsrs	r3, r3, #14
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d013      	beq.n	800493e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004924:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d020      	beq.n	8004970 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800493c:	e018      	b.n	8004970 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	0bdb      	lsrs	r3, r3, #15
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004958:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8a7 	bl	8004b44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b28      	cmp	r3, #40	; 0x28
 8004a00:	d141      	bne.n	8004a86 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a02:	6979      	ldr	r1, [r7, #20]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f847 	bl	8004a98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a0a:	e03c      	b.n	8004a86 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a14:	d014      	beq.n	8004a40 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff fe0c 	bl	8004634 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <I2C_ITSlaveCplt+0x210>)
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fb fe39 	bl	80006b0 <HAL_I2C_ListenCpltCallback>
}
 8004a3e:	e022      	b.n	8004a86 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	; 0x22
 8004a4a:	d10e      	bne.n	8004a6a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fb fd7e 	bl	8000564 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a68:	e00d      	b.n	8004a86 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fb fd5f 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	fe00e800 	.word	0xfe00e800
 8004a94:	ffff0000 	.word	0xffff0000

08004a98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <I2C_ITListenCplt+0xa8>)
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d022      	beq.n	8004b16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d012      	beq.n	8004b16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b16:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9e8 	bl	8004ef0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2210      	movs	r2, #16
 8004b26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fb fdbd 	bl	80006b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <I2C_ITError+0x194>)
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b28      	cmp	r3, #40	; 0x28
 8004b7a:	d005      	beq.n	8004b88 <I2C_ITError+0x44>
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b29      	cmp	r3, #41	; 0x29
 8004b80:	d002      	beq.n	8004b88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b2a      	cmp	r3, #42	; 0x2a
 8004b86:	d10b      	bne.n	8004ba0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b88:	2103      	movs	r1, #3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9b0 	bl	8004ef0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2228      	movs	r2, #40	; 0x28
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <I2C_ITError+0x198>)
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b9e:	e011      	b.n	8004bc4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ba0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f9a3 	bl	8004ef0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b60      	cmp	r3, #96	; 0x60
 8004bb4:	d003      	beq.n	8004bbe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d039      	beq.n	8004c46 <I2C_ITError+0x102>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b11      	cmp	r3, #17
 8004bd6:	d002      	beq.n	8004bde <I2C_ITError+0x9a>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b21      	cmp	r3, #33	; 0x21
 8004bdc:	d133      	bne.n	8004c46 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bec:	d107      	bne.n	8004bfe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe f8c0 	bl	8002d88 <HAL_DMA_GetState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d017      	beq.n	8004c3e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	4a33      	ldr	r2, [pc, #204]	; (8004ce0 <I2C_ITError+0x19c>)
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd ff04 	bl	8002a30 <HAL_DMA_Abort_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04d      	beq.n	8004cca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c3c:	e045      	b.n	8004cca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f850 	bl	8004ce4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c44:	e041      	b.n	8004cca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d039      	beq.n	8004cc2 <I2C_ITError+0x17e>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b12      	cmp	r3, #18
 8004c52:	d002      	beq.n	8004c5a <I2C_ITError+0x116>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b22      	cmp	r3, #34	; 0x22
 8004c58:	d133      	bne.n	8004cc2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c68:	d107      	bne.n	8004c7a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c78:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe f882 	bl	8002d88 <HAL_DMA_GetState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d017      	beq.n	8004cba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <I2C_ITError+0x19c>)
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd fec6 	bl	8002a30 <HAL_DMA_Abort_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d011      	beq.n	8004cce <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cb8:	e009      	b.n	8004cce <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f812 	bl	8004ce4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc0:	e005      	b.n	8004cce <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f80e 	bl	8004ce4 <I2C_TreatErrorCallback>
  }
}
 8004cc8:	e002      	b.n	8004cd0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cce:	bf00      	nop
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	ffff0000 	.word	0xffff0000
 8004cdc:	08003f07 	.word	0x08003f07
 8004ce0:	08004d7b 	.word	0x08004d7b

08004ce4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b60      	cmp	r3, #96	; 0x60
 8004cf6:	d10e      	bne.n	8004d16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff f8e3 	bl	8003eda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d14:	e009      	b.n	8004d2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fb fccd 	bl	80006c4 <HAL_I2C_ErrorCallback>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d103      	bne.n	8004d50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d007      	beq.n	8004d6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	619a      	str	r2, [r3, #24]
  }
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	2200      	movs	r2, #0
 8004d96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	2200      	movs	r2, #0
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ff9b 	bl	8004ce4 <I2C_TreatErrorCallback>
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	817b      	strh	r3, [r7, #10]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dd0:	7a7b      	ldrb	r3, [r7, #9]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	0d5b      	lsrs	r3, r3, #21
 8004df2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <I2C_TransferConfig+0x60>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	ea02 0103 	and.w	r1, r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	03ff63ff 	.word	0x03ff63ff

08004e1c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <I2C_Enable_IRQ+0xcc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <I2C_Enable_IRQ+0xd0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d11d      	bne.n	8004e7c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da03      	bge.n	8004e50 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d103      	bne.n	8004e5e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004e5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d103      	bne.n	8004e6c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e6c:	887b      	ldrh	r3, [r7, #2]
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d12c      	bne.n	8004ecc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e7a:	e027      	b.n	8004ecc <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da03      	bge.n	8004e8c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e8c:	887b      	ldrh	r3, [r7, #2]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004e9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d103      	bne.n	8004ebe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ebc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d103      	bne.n	8004ecc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f043 0320 	orr.w	r3, r3, #32
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
}
 8004edc:	bf00      	nop
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	0800410d 	.word	0x0800410d
 8004eec:	080042f3 	.word	0x080042f3

08004ef0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00f      	beq.n	8004f2a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004f10:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f1e:	2b28      	cmp	r3, #40	; 0x28
 8004f20:	d003      	beq.n	8004f2a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004f28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00f      	beq.n	8004f54 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004f3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f48:	2b28      	cmp	r3, #40	; 0x28
 8004f4a:	d003      	beq.n	8004f54 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004f52:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	da03      	bge.n	8004f64 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d103      	bne.n	8004f72 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d103      	bne.n	8004f80 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f043 0320 	orr.w	r3, r3, #32
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d103      	bne.n	8004f8e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	43da      	mvns	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d138      	bne.n	8005034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e032      	b.n	8005036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6819      	ldr	r1, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b20      	cmp	r3, #32
 8005056:	d139      	bne.n	80050cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005062:	2302      	movs	r3, #2
 8005064:	e033      	b.n	80050ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	; 0x24
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005094:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050dc:	b08f      	sub	sp, #60	; 0x3c
 80050de:	af0a      	add	r7, sp, #40	; 0x28
 80050e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e116      	b.n	800531a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f00c fc4e 	bl	80119a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2203      	movs	r2, #3
 8005110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fb9d 	bl	800a86a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	687e      	ldr	r6, [r7, #4]
 8005138:	466d      	mov	r5, sp
 800513a:	f106 0410 	add.w	r4, r6, #16
 800513e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800514a:	e885 0003 	stmia.w	r5, {r0, r1}
 800514e:	1d33      	adds	r3, r6, #4
 8005150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f005 fa7e 	bl	800a654 <USB_CoreInit>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0d7      	b.n	800531a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f005 fb8b 	bl	800a88c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e04a      	b.n	8005212 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	333d      	adds	r3, #61	; 0x3d
 800518c:	2201      	movs	r2, #1
 800518e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	333c      	adds	r3, #60	; 0x3c
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	b298      	uxth	r0, r3
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3344      	adds	r3, #68	; 0x44
 80051b8:	4602      	mov	r2, r0
 80051ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3340      	adds	r3, #64	; 0x40
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3348      	adds	r3, #72	; 0x48
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	334c      	adds	r3, #76	; 0x4c
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3354      	adds	r3, #84	; 0x54
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	3301      	adds	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d3af      	bcc.n	800517c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521c:	2300      	movs	r3, #0
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e044      	b.n	80052ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	3301      	adds	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	7bfa      	ldrb	r2, [r7, #15]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d3b5      	bcc.n	8005222 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	687e      	ldr	r6, [r7, #4]
 80052be:	466d      	mov	r5, sp
 80052c0:	f106 0410 	add.w	r4, r6, #16
 80052c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80052d4:	1d33      	adds	r3, r6, #4
 80052d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052d8:	6838      	ldr	r0, [r7, #0]
 80052da:	f005 fb23 	bl	800a924 <USB_DevInit>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e014      	b.n	800531a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 f97b 	bl	8006604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f006 fc71 	bl	800bbfa <USB_DevDisconnect>

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005322 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_PCD_Start+0x16>
 8005334:	2302      	movs	r3, #2
 8005336:	e012      	b.n	800535e <HAL_PCD_Start+0x3c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f005 fa7f 	bl	800a848 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f006 fc32 	bl	800bbb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005366:	b590      	push	{r4, r7, lr}
 8005368:	b08d      	sub	sp, #52	; 0x34
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f006 fcf0 	bl	800bd62 <USB_GetMode>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 84b7 	bne.w	8005cf8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f006 fc54 	bl	800bc3c <USB_ReadInterrupts>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 84ad 	beq.w	8005cf6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f006 fc41 	bl	800bc3c <USB_ReadInterrupts>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d107      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f002 0202 	and.w	r2, r2, #2
 80053d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f006 fc2f 	bl	800bc3c <USB_ReadInterrupts>
 80053de:	4603      	mov	r3, r0
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d161      	bne.n	80054ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0210 	bic.w	r2, r2, #16
 80053f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	0c5b      	lsrs	r3, r3, #17
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	2b02      	cmp	r3, #2
 8005422:	d124      	bne.n	800546e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d035      	beq.n	800549c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6a38      	ldr	r0, [r7, #32]
 8005444:	f006 fa66 	bl	800b914 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005454:	441a      	add	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005466:	441a      	add	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
 800546c:	e016      	b.n	800549c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	0c5b      	lsrs	r3, r3, #17
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	2b06      	cmp	r3, #6
 8005478:	d110      	bne.n	800549c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005480:	2208      	movs	r2, #8
 8005482:	4619      	mov	r1, r3
 8005484:	6a38      	ldr	r0, [r7, #32]
 8005486:	f006 fa45 	bl	800b914 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005496:	441a      	add	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0210 	orr.w	r2, r2, #16
 80054aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f006 fbc3 	bl	800bc3c <USB_ReadInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054c0:	f040 80a7 	bne.w	8005612 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f006 fbc8 	bl	800bc62 <USB_ReadDevAllOutEpInterrupt>
 80054d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80054d4:	e099      	b.n	800560a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 808e 	beq.w	80055fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f006 fbec 	bl	800bcca <USB_ReadDevOutEPInterrupt>
 80054f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	461a      	mov	r2, r3
 800550c:	2301      	movs	r3, #1
 800550e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fef0 	bl	80062f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	461a      	mov	r2, r3
 8005530:	2308      	movs	r3, #8
 8005532:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 ffc6 	bl	80064c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	2310      	movs	r3, #16
 8005556:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d030      	beq.n	80055c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d109      	bne.n	8005582 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005580:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	3304      	adds	r3, #4
 8005596:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	78db      	ldrb	r3, [r3, #3]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d108      	bne.n	80055b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f00c fb1f 	bl	8011bf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	461a      	mov	r2, r3
 80055c0:	2302      	movs	r3, #2
 80055c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	461a      	mov	r2, r3
 80055dc:	2320      	movs	r3, #32
 80055de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f af62 	bne.w	80054d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f006 fb10 	bl	800bc3c <USB_ReadInterrupts>
 800561c:	4603      	mov	r3, r0
 800561e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005626:	f040 80db 	bne.w	80057e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f006 fb31 	bl	800bc96 <USB_ReadDevAllInEpInterrupt>
 8005634:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800563a:	e0cd      	b.n	80057d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80c2 	beq.w	80057cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f006 fb57 	bl	800bd06 <USB_ReadDevInEPInterrupt>
 8005658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d057      	beq.n	8005714 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	2201      	movs	r2, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	43db      	mvns	r3, r3
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005684:	4013      	ands	r3, r2
 8005686:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	461a      	mov	r2, r3
 8005696:	2301      	movs	r3, #1
 8005698:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d132      	bne.n	8005708 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334c      	adds	r3, #76	; 0x4c
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4403      	add	r3, r0
 80056c2:	3348      	adds	r3, #72	; 0x48
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4419      	add	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4403      	add	r3, r0
 80056d6:	334c      	adds	r3, #76	; 0x4c
 80056d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d113      	bne.n	8005708 <HAL_PCD_IRQHandler+0x3a2>
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005700:	461a      	mov	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	f006 fb60 	bl	800bdc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f00c f9e9 	bl	8011ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	461a      	mov	r2, r3
 800572c:	2308      	movs	r3, #8
 800572e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	461a      	mov	r2, r3
 8005748:	2310      	movs	r3, #16
 800574a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	461a      	mov	r2, r3
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d023      	beq.n	80057ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005774:	6a38      	ldr	r0, [r7, #32]
 8005776:	f005 fa33 	bl	800abe0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	3338      	adds	r3, #56	; 0x38
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d108      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f00c fa36 	bl	8011c14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	461a      	mov	r2, r3
 80057b6:	2302      	movs	r3, #2
 80057b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80057c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd08 	bl	80061dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	3301      	adds	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f47f af2e 	bne.w	800563c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f006 fa29 	bl	800bc3c <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d122      	bne.n	800583c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800581c:	2100      	movs	r1, #0
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f00c fbb0 	bl	8011f84 <HAL_PCDEx_LPM_Callback>
 8005824:	e002      	b.n	800582c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f00c f9d4 	bl	8011bd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800583a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f006 f9fb 	bl	800bc3c <USB_ReadInterrupts>
 8005846:	4603      	mov	r3, r0
 8005848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005850:	d112      	bne.n	8005878 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d102      	bne.n	8005868 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f00c f990 	bl	8011b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005876:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f006 f9dd 	bl	800bc3c <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588c:	d121      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800589c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d111      	bne.n	80058cc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80058c2:	2101      	movs	r1, #1
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f00c fb5d 	bl	8011f84 <HAL_PCDEx_LPM_Callback>
 80058ca:	e002      	b.n	80058d2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f00c f95b 	bl	8011b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f006 f9b0 	bl	800bc3c <USB_ReadInterrupts>
 80058dc:	4603      	mov	r3, r0
 80058de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	f040 80b7 	bne.w	8005a58 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2110      	movs	r1, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f005 f96b 	bl	800abe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590e:	e046      	b.n	800599e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	461a      	mov	r2, r3
 800591e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005922:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005956:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005996:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	3301      	adds	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d3b3      	bcc.n	8005910 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80059ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d016      	beq.n	80059f2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d4:	f043 030b 	orr.w	r3, r3, #11
 80059d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ea:	f043 030b 	orr.w	r3, r3, #11
 80059ee:	6453      	str	r3, [r2, #68]	; 0x44
 80059f0:	e015      	b.n	8005a1e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	4619      	mov	r1, r3
 8005a02:	f242 032b 	movw	r3, #8235	; 0x202b
 8005a06:	4313      	orrs	r3, r2
 8005a08:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a18:	f043 030b 	orr.w	r3, r3, #11
 8005a1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a42:	461a      	mov	r2, r3
 8005a44:	f006 f9c0 	bl	800bdc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f006 f8ed 	bl	800bc3c <USB_ReadInterrupts>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6c:	d124      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f006 f984 	bl	800bd80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f005 f92c 	bl	800acda <USB_GetDevSpeed>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681c      	ldr	r4, [r3, #0]
 8005a8e:	f001 facd 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8005a92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f004 fe31 	bl	800a704 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f00c f847 	bl	8011b36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f006 f8bd 	bl	800bc3c <USB_ReadInterrupts>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d10a      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f00c f824 	bl	8011b1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f002 0208 	and.w	r2, r2, #8
 8005ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f006 f8a8 	bl	800bc3c <USB_ReadInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d122      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b02:	2301      	movs	r3, #1
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	e014      	b.n	8005b32 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fb27 	bl	800617a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	3301      	adds	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3e5      	bcc.n	8005b08 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f006 f87b 	bl	800bc3c <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b50:	d13b      	bne.n	8005bca <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b52:	2301      	movs	r3, #1
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
 8005b56:	e02b      	b.n	8005bb0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3340      	adds	r3, #64	; 0x40
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d115      	bne.n	8005baa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da12      	bge.n	8005baa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	333f      	adds	r3, #63	; 0x3f
 8005b94:	2201      	movs	r2, #1
 8005b96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fae8 	bl	800617a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	3301      	adds	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3ce      	bcc.n	8005b58 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f006 f834 	bl	800bc3c <USB_ReadInterrupts>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bde:	d155      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005be0:	2301      	movs	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	e045      	b.n	8005c72 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d12e      	bne.n	8005c6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da2b      	bge.n	8005c6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d121      	bne.n	8005c6c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c68:	6053      	str	r3, [r2, #4]
            break;
 8005c6a:	e007      	b.n	8005c7c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3b4      	bcc.n	8005be6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f005 ffd3 	bl	800bc3c <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f00b ffc8 	bl	8011c38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f005 ffbd 	bl	800bc3c <USB_ReadInterrupts>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d115      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f00b ffb8 	bl	8011c54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	e000      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x992>
      return;
 8005cf6:	bf00      	nop
    }
  }
}
 8005cf8:	3734      	adds	r7, #52	; 0x34
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd90      	pop	{r4, r7, pc}

08005cfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_PCD_SetAddress+0x1a>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e013      	b.n	8005d40 <HAL_PCD_SetAddress+0x42>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f005 ff1b 	bl	800bb6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	70fb      	strb	r3, [r7, #3]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	803b      	strh	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da0f      	bge.n	8005d8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	3338      	adds	r3, #56	; 0x38
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	3304      	adds	r3, #4
 8005d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	705a      	strb	r2, [r3, #1]
 8005d8c:	e00f      	b.n	8005dae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	f003 020f 	and.w	r2, r3, #15
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	3304      	adds	r3, #4
 8005da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005dba:	883a      	ldrh	r2, [r7, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	78ba      	ldrb	r2, [r7, #2]
 8005dc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dd8:	78bb      	ldrb	r3, [r7, #2]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d102      	bne.n	8005de4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_PCD_EP_Open+0xaa>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e00e      	b.n	8005e10 <HAL_PCD_EP_Open+0xc8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f004 ff8f 	bl	800ad24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da0f      	bge.n	8005e4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3338      	adds	r3, #56	; 0x38
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	705a      	strb	r2, [r3, #1]
 8005e4a:	e00f      	b.n	8005e6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_PCD_EP_Close+0x6e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e00e      	b.n	8005ea4 <HAL_PCD_EP_Close+0x8c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f004 ffcd 	bl	800ae34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d102      	bne.n	8005f08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f08:	7afb      	ldrb	r3, [r7, #11]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	f005 fab4 	bl	800b48c <USB_EP0StartXfer>
 8005f24:	e008      	b.n	8005f38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6979      	ldr	r1, [r7, #20]
 8005f34:	f005 f85a 	bl	800afec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005f64:	681b      	ldr	r3, [r3, #0]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	f003 020f 	and.w	r2, r3, #15
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	3338      	adds	r3, #56	; 0x38
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	3304      	adds	r3, #4
 8005f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6979      	ldr	r1, [r7, #20]
 8005fe4:	f005 fa52 	bl	800b48c <USB_EP0StartXfer>
 8005fe8:	e008      	b.n	8005ffc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6979      	ldr	r1, [r7, #20]
 8005ff8:	f004 fff8 	bl	800afec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 020f 	and.w	r2, r3, #15
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d901      	bls.n	8006024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e050      	b.n	80060c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da0f      	bge.n	800604c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	f003 020f 	and.w	r2, r3, #15
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3338      	adds	r3, #56	; 0x38
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	3304      	adds	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	705a      	strb	r2, [r3, #1]
 800604a:	e00d      	b.n	8006068 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	3304      	adds	r3, #4
 8006060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_PCD_EP_SetStall+0x82>
 8006084:	2302      	movs	r3, #2
 8006086:	e01e      	b.n	80060c6 <HAL_PCD_EP_SetStall+0xc0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4618      	mov	r0, r3
 8006098:	f005 fc94 	bl	800b9c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	b2d9      	uxtb	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060b6:	461a      	mov	r2, r3
 80060b8:	f005 fe86 	bl	800bdc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d901      	bls.n	80060ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e042      	b.n	8006172 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da0f      	bge.n	8006114 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	3338      	adds	r3, #56	; 0x38
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	3304      	adds	r3, #4
 800610a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	705a      	strb	r2, [r3, #1]
 8006112:	e00f      	b.n	8006134 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	3304      	adds	r3, #4
 800612c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	b2da      	uxtb	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_PCD_EP_ClrStall+0x86>
 8006150:	2302      	movs	r3, #2
 8006152:	e00e      	b.n	8006172 <HAL_PCD_EP_ClrStall+0xa4>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	4618      	mov	r0, r3
 8006164:	f005 fc9c 	bl	800baa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800618a:	2b00      	cmp	r3, #0
 800618c:	da0c      	bge.n	80061a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	3338      	adds	r3, #56	; 0x38
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	3304      	adds	r3, #4
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e00c      	b.n	80061c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f005 fabb 	bl	800b744 <USB_EPStopXfer>
 80061ce:	4603      	mov	r3, r0
 80061d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061d2:	7afb      	ldrb	r3, [r7, #11]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3338      	adds	r3, #56	; 0x38
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d901      	bls.n	8006214 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e06c      	b.n	80062ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	429a      	cmp	r2, r3
 8006228:	d902      	bls.n	8006230 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3303      	adds	r3, #3
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006238:	e02b      	b.n	8006292 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	429a      	cmp	r2, r3
 800624e:	d902      	bls.n	8006256 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3303      	adds	r3, #3
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6919      	ldr	r1, [r3, #16]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800626e:	b2db      	uxtb	r3, r3
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4603      	mov	r3, r0
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f005 fb0f 	bl	800b898 <USB_WritePacket>

    ep->xfer_buff  += len;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	441a      	add	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	441a      	add	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d809      	bhi.n	80062bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d203      	bcs.n	80062bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1be      	bne.n	800623a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d811      	bhi.n	80062ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	6939      	ldr	r1, [r7, #16]
 80062e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e8:	4013      	ands	r3, r2
 80062ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	333c      	adds	r3, #60	; 0x3c
 8006310:	3304      	adds	r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d17b      	bne.n	8006426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4a61      	ldr	r2, [pc, #388]	; (80064c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	f240 80b9 	bls.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80b3 	beq.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	461a      	mov	r2, r3
 800635c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006360:	6093      	str	r3, [r2, #8]
 8006362:	e0a7      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	2320      	movs	r3, #32
 800637e:	6093      	str	r3, [r2, #8]
 8006380:	e098      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 8093 	bne.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4a4b      	ldr	r2, [pc, #300]	; (80064c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d90f      	bls.n	80063b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	e07e      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	0159      	lsls	r1, r3, #5
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d114      	bne.n	8006418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006400:	461a      	mov	r2, r3
 8006402:	2101      	movs	r1, #1
 8006404:	f005 fce0 	bl	800bdc8 <USB_EP0_OutStart>
 8006408:	e006      	b.n	8006418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f00b fb46 	bl	8011ab0 <HAL_PCD_DataOutStageCallback>
 8006424:	e046      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d124      	bne.n	8006478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644a:	6093      	str	r3, [r2, #8]
 800644c:	e032      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2320      	movs	r3, #32
 8006468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f00b fb1d 	bl	8011ab0 <HAL_PCD_DataOutStageCallback>
 8006476:	e01d      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d114      	bne.n	80064a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064a0:	461a      	mov	r2, r3
 80064a2:	2100      	movs	r1, #0
 80064a4:	f005 fc90 	bl	800bdc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f00b fafe 	bl	8011ab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	4f54300a 	.word	0x4f54300a
 80064c4:	4f54310a 	.word	0x4f54310a

080064c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	333c      	adds	r3, #60	; 0x3c
 80064e0:	3304      	adds	r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <PCD_EP_OutSetupPacket_int+0x88>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d90e      	bls.n	800651c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	461a      	mov	r2, r3
 8006516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f00b fab5 	bl	8011a8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a0a      	ldr	r2, [pc, #40]	; (8006550 <PCD_EP_OutSetupPacket_int+0x88>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d90c      	bls.n	8006544 <PCD_EP_OutSetupPacket_int+0x7c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d108      	bne.n	8006544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800653c:	461a      	mov	r2, r3
 800653e:	2101      	movs	r1, #1
 8006540:	f005 fc42 	bl	800bdc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	4f54300a 	.word	0x4f54300a

08006554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
 8006560:	4613      	mov	r3, r2
 8006562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006572:	883b      	ldrh	r3, [r7, #0]
 8006574:	0419      	lsls	r1, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	430a      	orrs	r2, r1
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
 8006580:	e028      	b.n	80065d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	e00d      	b.n	80065b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3340      	adds	r3, #64	; 0x40
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4413      	add	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	3301      	adds	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	7bfa      	ldrb	r2, [r7, #15]
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d3ec      	bcc.n	8006596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065bc:	883b      	ldrh	r3, [r7, #0]
 80065be:	0418      	lsls	r0, r3, #16
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	4302      	orrs	r2, r0
 80065cc:	3340      	adds	r3, #64	; 0x40
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_PCDEx_ActivateLPM+0x44>)
 8006634:	4313      	orrs	r3, r2
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	10000003 	.word	0x10000003

0800664c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006656:	4b23      	ldr	r3, [pc, #140]	; (80066e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006660:	6413      	str	r3, [r2, #64]	; 0x40
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800667a:	f7fb faf9 	bl	8001c70 <HAL_GetTick>
 800667e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006680:	e009      	b.n	8006696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006682:	f7fb faf5 	bl	8001c70 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006690:	d901      	bls.n	8006696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e022      	b.n	80066dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a2:	d1ee      	bne.n	8006682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a0f      	ldr	r2, [pc, #60]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066b0:	f7fb fade 	bl	8001c70 <HAL_GetTick>
 80066b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066b6:	e009      	b.n	80066cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066b8:	f7fb fada 	bl	8001c70 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066c6:	d901      	bls.n	80066cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e007      	b.n	80066dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d8:	d1ee      	bne.n	80066b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40023800 	.word	0x40023800
 80066e8:	40007000 	.word	0x40007000

080066ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80066f4:	2300      	movs	r3, #0
 80066f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e29b      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8087 	beq.w	800681e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006710:	4b96      	ldr	r3, [pc, #600]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 030c 	and.w	r3, r3, #12
 8006718:	2b04      	cmp	r3, #4
 800671a:	d00c      	beq.n	8006736 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800671c:	4b93      	ldr	r3, [pc, #588]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b08      	cmp	r3, #8
 8006726:	d112      	bne.n	800674e <HAL_RCC_OscConfig+0x62>
 8006728:	4b90      	ldr	r3, [pc, #576]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006734:	d10b      	bne.n	800674e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006736:	4b8d      	ldr	r3, [pc, #564]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d06c      	beq.n	800681c <HAL_RCC_OscConfig+0x130>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d168      	bne.n	800681c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e275      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d106      	bne.n	8006766 <HAL_RCC_OscConfig+0x7a>
 8006758:	4b84      	ldr	r3, [pc, #528]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a83      	ldr	r2, [pc, #524]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e02e      	b.n	80067c4 <HAL_RCC_OscConfig+0xd8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10c      	bne.n	8006788 <HAL_RCC_OscConfig+0x9c>
 800676e:	4b7f      	ldr	r3, [pc, #508]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7e      	ldr	r2, [pc, #504]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b7c      	ldr	r3, [pc, #496]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7b      	ldr	r2, [pc, #492]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e01d      	b.n	80067c4 <HAL_RCC_OscConfig+0xd8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006790:	d10c      	bne.n	80067ac <HAL_RCC_OscConfig+0xc0>
 8006792:	4b76      	ldr	r3, [pc, #472]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a75      	ldr	r2, [pc, #468]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b73      	ldr	r3, [pc, #460]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a72      	ldr	r2, [pc, #456]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	e00b      	b.n	80067c4 <HAL_RCC_OscConfig+0xd8>
 80067ac:	4b6f      	ldr	r3, [pc, #444]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6e      	ldr	r2, [pc, #440]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4b6c      	ldr	r3, [pc, #432]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6b      	ldr	r2, [pc, #428]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fb fa50 	bl	8001c70 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d4:	f7fb fa4c 	bl	8001c70 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	; 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e229      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	4b61      	ldr	r3, [pc, #388]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0xe8>
 80067f2:	e014      	b.n	800681e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fb fa3c 	bl	8001c70 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067fc:	f7fb fa38 	bl	8001c70 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	; 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e215      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	4b57      	ldr	r3, [pc, #348]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x110>
 800681a:	e000      	b.n	800681e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d069      	beq.n	80068fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800682a:	4b50      	ldr	r3, [pc, #320]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006836:	4b4d      	ldr	r3, [pc, #308]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b08      	cmp	r3, #8
 8006840:	d11c      	bne.n	800687c <HAL_RCC_OscConfig+0x190>
 8006842:	4b4a      	ldr	r3, [pc, #296]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d116      	bne.n	800687c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684e:	4b47      	ldr	r3, [pc, #284]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_RCC_OscConfig+0x17a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d001      	beq.n	8006866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e1e9      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006866:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	493d      	ldr	r1, [pc, #244]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687a:	e040      	b.n	80068fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d023      	beq.n	80068cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006884:	4b39      	ldr	r3, [pc, #228]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a38      	ldr	r2, [pc, #224]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fb f9ee 	bl	8001c70 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006898:	f7fb f9ea 	bl	8001c70 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e1c7      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b6:	4b2d      	ldr	r3, [pc, #180]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4929      	ldr	r1, [pc, #164]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]
 80068ca:	e018      	b.n	80068fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068cc:	4b27      	ldr	r3, [pc, #156]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb f9ca 	bl	8001c70 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fb f9c6 	bl	8001c70 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1a3      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d038      	beq.n	800697c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691e:	f7fb f9a7 	bl	8001c70 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006926:	f7fb f9a3 	bl	8001c70 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e180      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x23a>
 8006944:	e01a      	b.n	800697c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <HAL_RCC_OscConfig+0x280>)
 8006948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694a:	4a08      	ldr	r2, [pc, #32]	; (800696c <HAL_RCC_OscConfig+0x280>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006952:	f7fb f98d 	bl	8001c70 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006958:	e00a      	b.n	8006970 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695a:	f7fb f989 	bl	8001c70 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d903      	bls.n	8006970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e166      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
 800696c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006970:	4b92      	ldr	r3, [pc, #584]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ee      	bne.n	800695a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80a4 	beq.w	8006ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800698a:	4b8c      	ldr	r3, [pc, #560]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006996:	4b89      	ldr	r3, [pc, #548]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a88      	ldr	r2, [pc, #544]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 800699c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40
 80069a2:	4b86      	ldr	r3, [pc, #536]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b2:	4b83      	ldr	r3, [pc, #524]	; (8006bc0 <HAL_RCC_OscConfig+0x4d4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d118      	bne.n	80069f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069be:	4b80      	ldr	r3, [pc, #512]	; (8006bc0 <HAL_RCC_OscConfig+0x4d4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7f      	ldr	r2, [pc, #508]	; (8006bc0 <HAL_RCC_OscConfig+0x4d4>)
 80069c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ca:	f7fb f951 	bl	8001c70 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d2:	f7fb f94d 	bl	8001c70 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b64      	cmp	r3, #100	; 0x64
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e12a      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	4b76      	ldr	r3, [pc, #472]	; (8006bc0 <HAL_RCC_OscConfig+0x4d4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d106      	bne.n	8006a06 <HAL_RCC_OscConfig+0x31a>
 80069f8:	4b70      	ldr	r3, [pc, #448]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	4a6f      	ldr	r2, [pc, #444]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70
 8006a04:	e02d      	b.n	8006a62 <HAL_RCC_OscConfig+0x376>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCC_OscConfig+0x33c>
 8006a0e:	4b6b      	ldr	r3, [pc, #428]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a6a      	ldr	r2, [pc, #424]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	4b68      	ldr	r3, [pc, #416]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a67      	ldr	r2, [pc, #412]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	e01c      	b.n	8006a62 <HAL_RCC_OscConfig+0x376>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d10c      	bne.n	8006a4a <HAL_RCC_OscConfig+0x35e>
 8006a30:	4b62      	ldr	r3, [pc, #392]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a34:	4a61      	ldr	r2, [pc, #388]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a36:	f043 0304 	orr.w	r3, r3, #4
 8006a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3c:	4b5f      	ldr	r3, [pc, #380]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	4a5e      	ldr	r2, [pc, #376]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	6713      	str	r3, [r2, #112]	; 0x70
 8006a48:	e00b      	b.n	8006a62 <HAL_RCC_OscConfig+0x376>
 8006a4a:	4b5c      	ldr	r3, [pc, #368]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	4a5b      	ldr	r2, [pc, #364]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6713      	str	r3, [r2, #112]	; 0x70
 8006a56:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	4a58      	ldr	r2, [pc, #352]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d015      	beq.n	8006a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6a:	f7fb f901 	bl	8001c70 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a70:	e00a      	b.n	8006a88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a72:	f7fb f8fd 	bl	8001c70 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e0d8      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a88:	4b4c      	ldr	r3, [pc, #304]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ee      	beq.n	8006a72 <HAL_RCC_OscConfig+0x386>
 8006a94:	e014      	b.n	8006ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a96:	f7fb f8eb 	bl	8001c70 <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9e:	f7fb f8e7 	bl	8001c70 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0c2      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab4:	4b41      	ldr	r3, [pc, #260]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ee      	bne.n	8006a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d105      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac6:	4b3d      	ldr	r3, [pc, #244]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	4a3c      	ldr	r2, [pc, #240]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80ae 	beq.w	8006c38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006adc:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 030c 	and.w	r3, r3, #12
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d06d      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d14b      	bne.n	8006b88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af0:	4b32      	ldr	r3, [pc, #200]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a31      	ldr	r2, [pc, #196]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fb f8b8 	bl	8001c70 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b04:	f7fb f8b4 	bl	8001c70 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e091      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69da      	ldr	r2, [r3, #28]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	019b      	lsls	r3, r3, #6
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	041b      	lsls	r3, r3, #16
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	061b      	lsls	r3, r3, #24
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	071b      	lsls	r3, r3, #28
 8006b4e:	491b      	ldr	r1, [pc, #108]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fb f886 	bl	8001c70 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b68:	f7fb f882 	bl	8001c70 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e05f      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0x47c>
 8006b86:	e057      	b.n	8006c38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a0b      	ldr	r2, [pc, #44]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fb f86c 	bl	8001c70 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fb f868 	bl	8001c70 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e045      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bae:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <HAL_RCC_OscConfig+0x4d0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x4b0>
 8006bba:	e03d      	b.n	8006c38 <HAL_RCC_OscConfig+0x54c>
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006bc4:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <HAL_RCC_OscConfig+0x558>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d030      	beq.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d129      	bne.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d122      	bne.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d119      	bne.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d10f      	bne.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d107      	bne.n	8006c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800

08006c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0d0      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b67      	ldr	r3, [pc, #412]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	4965      	ldr	r1, [pc, #404]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0b8      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d020      	beq.n	8006cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ca8:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4a58      	ldr	r2, [pc, #352]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc0:	4b53      	ldr	r3, [pc, #332]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a52      	ldr	r2, [pc, #328]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ccc:	4b50      	ldr	r3, [pc, #320]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	494d      	ldr	r1, [pc, #308]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d040      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf2:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d115      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07f      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b41      	ldr	r3, [pc, #260]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e073      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e06b      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d2a:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f023 0203 	bic.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4936      	ldr	r1, [pc, #216]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3c:	f7fa ff98 	bl	8001c70 <HAL_GetTick>
 8006d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d44:	f7fa ff94 	bl	8001c70 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e053      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 020c 	and.w	r2, r3, #12
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d1eb      	bne.n	8006d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d6c:	4b27      	ldr	r3, [pc, #156]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d210      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f023 020f 	bic.w	r2, r3, #15
 8006d82:	4922      	ldr	r1, [pc, #136]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e032      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4916      	ldr	r1, [pc, #88]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	490e      	ldr	r1, [pc, #56]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dda:	f000 f821 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	490a      	ldr	r1, [pc, #40]	; (8006e14 <HAL_RCC_ClockConfig+0x1cc>)
 8006dec:	5ccb      	ldrb	r3, [r1, r3]
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <HAL_RCC_ClockConfig+0x1d0>)
 8006df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RCC_ClockConfig+0x1d4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fa fdbc 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40023c00 	.word	0x40023c00
 8006e10:	40023800 	.word	0x40023800
 8006e14:	08012564 	.word	0x08012564
 8006e18:	20000000 	.word	0x20000000
 8006e1c:	20000004 	.word	0x20000004

08006e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e24:	b094      	sub	sp, #80	; 0x50
 8006e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e30:	2300      	movs	r3, #0
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e38:	4b79      	ldr	r3, [pc, #484]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 030c 	and.w	r3, r3, #12
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d00d      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x40>
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	f200 80e1 	bhi.w	800700c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCC_GetSysClockFreq+0x34>
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d003      	beq.n	8006e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e52:	e0db      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e54:	4b73      	ldr	r3, [pc, #460]	; (8007024 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e58:	e0db      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e5a:	4b73      	ldr	r3, [pc, #460]	; (8007028 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e5e:	e0d8      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e60:	4b6f      	ldr	r3, [pc, #444]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e6a:	4b6d      	ldr	r3, [pc, #436]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d063      	beq.n	8006f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e76:	4b6a      	ldr	r3, [pc, #424]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	099b      	lsrs	r3, r3, #6
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	f04f 0000 	mov.w	r0, #0
 8006e9a:	f04f 0100 	mov.w	r1, #0
 8006e9e:	0159      	lsls	r1, r3, #5
 8006ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ea4:	0150      	lsls	r0, r2, #5
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4621      	mov	r1, r4
 8006eac:	1a51      	subs	r1, r2, r1
 8006eae:	6139      	str	r1, [r7, #16]
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	018b      	lsls	r3, r1, #6
 8006ec8:	4651      	mov	r1, sl
 8006eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ece:	4651      	mov	r1, sl
 8006ed0:	018a      	lsls	r2, r1, #6
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ed8:	4659      	mov	r1, fp
 8006eda:	eb63 0901 	sbc.w	r9, r3, r1
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	eb18 0303 	adds.w	r3, r8, r3
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	462b      	mov	r3, r5
 8006f00:	eb49 0303 	adc.w	r3, r9, r3
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f12:	4629      	mov	r1, r5
 8006f14:	024b      	lsls	r3, r1, #9
 8006f16:	4621      	mov	r1, r4
 8006f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	024a      	lsls	r2, r1, #9
 8006f20:	4610      	mov	r0, r2
 8006f22:	4619      	mov	r1, r3
 8006f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f26:	2200      	movs	r2, #0
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f30:	f7f9 f986 	bl	8000240 <__aeabi_uldivmod>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4613      	mov	r3, r2
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	e058      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f3e:	4b38      	ldr	r3, [pc, #224]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	099b      	lsrs	r3, r3, #6
 8006f44:	2200      	movs	r2, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	4611      	mov	r1, r2
 8006f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	2300      	movs	r3, #0
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
 8006f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	f04f 0000 	mov.w	r0, #0
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	0159      	lsls	r1, r3, #5
 8006f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f6a:	0150      	lsls	r0, r2, #5
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4641      	mov	r1, r8
 8006f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f76:	4649      	mov	r1, r9
 8006f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f90:	ebb2 040a 	subs.w	r4, r2, sl
 8006f94:	eb63 050b 	sbc.w	r5, r3, fp
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	00eb      	lsls	r3, r5, #3
 8006fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fa6:	00e2      	lsls	r2, r4, #3
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	4643      	mov	r3, r8
 8006fae:	18e3      	adds	r3, r4, r3
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	eb45 0303 	adc.w	r3, r5, r3
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	028b      	lsls	r3, r1, #10
 8006fca:	4621      	mov	r1, r4
 8006fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	028a      	lsls	r2, r1, #10
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	61fa      	str	r2, [r7, #28]
 8006fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe4:	f7f9 f92c 	bl	8000240 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4613      	mov	r3, r2
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800700a:	e002      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_RCC_GetSysClockFreq+0x204>)
 800700e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007014:	4618      	mov	r0, r3
 8007016:	3750      	adds	r7, #80	; 0x50
 8007018:	46bd      	mov	sp, r7
 800701a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800701e:	bf00      	nop
 8007020:	40023800 	.word	0x40023800
 8007024:	00f42400 	.word	0x00f42400
 8007028:	007a1200 	.word	0x007a1200

0800702c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <HAL_RCC_GetHCLKFreq+0x14>)
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000000 	.word	0x20000000

08007044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007048:	f7ff fff0 	bl	800702c <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	0a9b      	lsrs	r3, r3, #10
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4903      	ldr	r1, [pc, #12]	; (8007068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40023800 	.word	0x40023800
 8007068:	08012574 	.word	0x08012574

0800706c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007070:	f7ff ffdc 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8007074:	4602      	mov	r2, r0
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	0b5b      	lsrs	r3, r3, #13
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	4903      	ldr	r1, [pc, #12]	; (8007090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007082:	5ccb      	ldrb	r3, [r1, r3]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40023800 	.word	0x40023800
 8007090:	08012574 	.word	0x08012574

08007094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	220f      	movs	r2, #15
 80070a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0203 	and.w	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070b0:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	08db      	lsrs	r3, r3, #3
 80070ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <HAL_RCC_GetClockConfig+0x60>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 020f 	and.w	r2, r3, #15
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40023c00 	.word	0x40023c00

080070f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d012      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007120:	4b69      	ldr	r3, [pc, #420]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	4a68      	ldr	r2, [pc, #416]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800712a:	6093      	str	r3, [r2, #8]
 800712c:	4b66      	ldr	r3, [pc, #408]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	4964      	ldr	r1, [pc, #400]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007136:	4313      	orrs	r3, r2
 8007138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007142:	2301      	movs	r3, #1
 8007144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d017      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007152:	4b5d      	ldr	r3, [pc, #372]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007160:	4959      	ldr	r1, [pc, #356]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007170:	d101      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800717e:	2301      	movs	r3, #1
 8007180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d017      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800718e:	4b4e      	ldr	r3, [pc, #312]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	494a      	ldr	r1, [pc, #296]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ac:	d101      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 808b 	beq.w	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071dc:	4b3a      	ldr	r3, [pc, #232]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	4a39      	ldr	r2, [pc, #228]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e6:	6413      	str	r3, [r2, #64]	; 0x40
 80071e8:	4b37      	ldr	r3, [pc, #220]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071f4:	4b35      	ldr	r3, [pc, #212]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a34      	ldr	r2, [pc, #208]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007200:	f7fa fd36 	bl	8001c70 <HAL_GetTick>
 8007204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007206:	e008      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007208:	f7fa fd32 	bl	8001c70 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b64      	cmp	r3, #100	; 0x64
 8007214:	d901      	bls.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e38f      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800721a:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f0      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007226:	4b28      	ldr	r3, [pc, #160]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d035      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d02e      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724e:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800725a:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a1a      	ldr	r2, [pc, #104]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800726c:	4b16      	ldr	r3, [pc, #88]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d114      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fa fcfa 	bl	8001c70 <HAL_GetTick>
 800727c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727e:	e00a      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007280:	f7fa fcf6 	bl	8001c70 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f241 3288 	movw	r2, #5000	; 0x1388
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e351      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0ee      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ae:	d111      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072be:	400b      	ands	r3, r1
 80072c0:	4901      	ldr	r1, [pc, #4]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	608b      	str	r3, [r1, #8]
 80072c6:	e00b      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80072c8:	40023800 	.word	0x40023800
 80072cc:	40007000 	.word	0x40007000
 80072d0:	0ffffcff 	.word	0x0ffffcff
 80072d4:	4bac      	ldr	r3, [pc, #688]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4aab      	ldr	r2, [pc, #684]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072de:	6093      	str	r3, [r2, #8]
 80072e0:	4ba9      	ldr	r3, [pc, #676]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ec:	49a6      	ldr	r1, [pc, #664]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d010      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072fe:	4ba2      	ldr	r3, [pc, #648]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007304:	4aa0      	ldr	r2, [pc, #640]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800730e:	4b9e      	ldr	r3, [pc, #632]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	499b      	ldr	r1, [pc, #620]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800732c:	4b96      	ldr	r3, [pc, #600]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800733a:	4993      	ldr	r1, [pc, #588]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800734e:	4b8e      	ldr	r3, [pc, #568]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800735c:	498a      	ldr	r1, [pc, #552]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007370:	4b85      	ldr	r3, [pc, #532]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737e:	4982      	ldr	r1, [pc, #520]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007392:	4b7d      	ldr	r3, [pc, #500]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	4979      	ldr	r1, [pc, #484]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073b4:	4b74      	ldr	r3, [pc, #464]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	f023 0203 	bic.w	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	4971      	ldr	r1, [pc, #452]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d6:	4b6c      	ldr	r3, [pc, #432]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f023 020c 	bic.w	r2, r3, #12
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	4968      	ldr	r1, [pc, #416]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073f8:	4b63      	ldr	r3, [pc, #396]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	4960      	ldr	r1, [pc, #384]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800741a:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	4957      	ldr	r1, [pc, #348]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800743c:	4b52      	ldr	r3, [pc, #328]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800743e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	494f      	ldr	r1, [pc, #316]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800745e:	4b4a      	ldr	r3, [pc, #296]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746c:	4946      	ldr	r1, [pc, #280]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007480:	4b41      	ldr	r3, [pc, #260]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	493e      	ldr	r1, [pc, #248]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074a2:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	4935      	ldr	r1, [pc, #212]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d2:	492d      	ldr	r1, [pc, #180]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074e6:	4b28      	ldr	r3, [pc, #160]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f4:	4924      	ldr	r1, [pc, #144]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007504:	d101      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007506:	2301      	movs	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007516:	2301      	movs	r3, #1
 8007518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007534:	4914      	ldr	r1, [pc, #80]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007548:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007558:	490b      	ldr	r1, [pc, #44]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757c:	4902      	ldr	r1, [pc, #8]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007584:	e002      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007598:	4b8a      	ldr	r3, [pc, #552]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a8:	4986      	ldr	r1, [pc, #536]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80075bc:	4b81      	ldr	r3, [pc, #516]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075cc:	497d      	ldr	r1, [pc, #500]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d006      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80d6 	beq.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075e8:	4b76      	ldr	r3, [pc, #472]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a75      	ldr	r2, [pc, #468]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f4:	f7fa fb3c 	bl	8001c70 <HAL_GetTick>
 80075f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075fc:	f7fa fb38 	bl	8001c70 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b64      	cmp	r3, #100	; 0x64
 8007608:	d901      	bls.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e195      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800760e:	4b6d      	ldr	r3, [pc, #436]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d021      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11d      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800762e:	4b65      	ldr	r3, [pc, #404]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800763c:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007642:	0e1b      	lsrs	r3, r3, #24
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	019a      	lsls	r2, r3, #6
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	431a      	orrs	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	061b      	lsls	r3, r3, #24
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	071b      	lsls	r3, r3, #28
 8007662:	4958      	ldr	r1, [pc, #352]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02e      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007694:	d129      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007696:	4b4b      	ldr	r3, [pc, #300]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076a4:	4b47      	ldr	r3, [pc, #284]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076aa:	0f1b      	lsrs	r3, r3, #28
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	019a      	lsls	r2, r3, #6
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	061b      	lsls	r3, r3, #24
 80076c4:	431a      	orrs	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	071b      	lsls	r3, r3, #28
 80076ca:	493e      	ldr	r1, [pc, #248]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076d2:	4b3c      	ldr	r3, [pc, #240]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d8:	f023 021f 	bic.w	r2, r3, #31
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	3b01      	subs	r3, #1
 80076e2:	4938      	ldr	r1, [pc, #224]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01d      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076f6:	4b33      	ldr	r3, [pc, #204]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007704:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770a:	0f1b      	lsrs	r3, r3, #28
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	019a      	lsls	r2, r3, #6
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	431a      	orrs	r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	061b      	lsls	r3, r3, #24
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	4926      	ldr	r1, [pc, #152]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d011      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	019a      	lsls	r2, r3, #6
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	061b      	lsls	r3, r3, #24
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	071b      	lsls	r3, r3, #28
 800775a:	491a      	ldr	r1, [pc, #104]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007762:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fa fa7f 	bl	8001c70 <HAL_GetTick>
 8007772:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007774:	e008      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007776:	f7fa fa7b 	bl	8001c70 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b64      	cmp	r3, #100	; 0x64
 8007782:	d901      	bls.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e0d8      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f0      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2b01      	cmp	r3, #1
 8007798:	f040 80ce 	bne.w	8007938 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a8:	f7fa fa62 	bl	8001c70 <HAL_GetTick>
 80077ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077ae:	e00b      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077b0:	f7fa fa5e 	bl	8001c70 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	; 0x64
 80077bc:	d904      	bls.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e0bb      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80077c2:	bf00      	nop
 80077c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077c8:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d4:	d0ec      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02e      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d12a      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077fe:	4b51      	ldr	r3, [pc, #324]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800780c:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	0f1b      	lsrs	r3, r3, #28
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	019a      	lsls	r2, r3, #6
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	061b      	lsls	r3, r3, #24
 800782c:	431a      	orrs	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	4944      	ldr	r1, [pc, #272]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800783a:	4b42      	ldr	r3, [pc, #264]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	3b01      	subs	r3, #1
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	493d      	ldr	r1, [pc, #244]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d022      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007868:	d11d      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800786a:	4b36      	ldr	r3, [pc, #216]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	0e1b      	lsrs	r3, r3, #24
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007878:	4b32      	ldr	r3, [pc, #200]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	019a      	lsls	r2, r3, #6
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	431a      	orrs	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	071b      	lsls	r3, r3, #28
 800789e:	4929      	ldr	r1, [pc, #164]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d028      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b8:	0e1b      	lsrs	r3, r3, #24
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078c0:	4b20      	ldr	r3, [pc, #128]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c6:	0c1b      	lsrs	r3, r3, #16
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	019a      	lsls	r2, r3, #6
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	431a      	orrs	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	071b      	lsls	r3, r3, #28
 80078e6:	4917      	ldr	r1, [pc, #92]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4911      	ldr	r1, [pc, #68]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007904:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a0e      	ldr	r2, [pc, #56]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800790a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007910:	f7fa f9ae 	bl	8001c70 <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007916:	e008      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007918:	f7fa f9aa 	bl	8001c70 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	; 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e007      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800792a:	4b06      	ldr	r3, [pc, #24]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007936:	d1ef      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800

08007948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e09d      	b.n	8007a96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800796a:	d009      	beq.n	8007980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	61da      	str	r2, [r3, #28]
 8007972:	e005      	b.n	8007980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7f9 fe56 	bl	800164c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079c0:	d902      	bls.n	80079c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e002      	b.n	80079ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80079d6:	d007      	beq.n	80079e8 <HAL_SPI_Init+0xa0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079e0:	d002      	beq.n	80079e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	ea42 0103 	orr.w	r1, r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	0c1b      	lsrs	r3, r3, #16
 8007a44:	f003 0204 	and.w	r2, r3, #4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a64:	ea42 0103 	orr.w	r1, r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e049      	b.n	8007b44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f9 fe71 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f000 ffbd 	bl	8008a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d001      	beq.n	8007b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e054      	b.n	8007c0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a26      	ldr	r2, [pc, #152]	; (8007c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d01d      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a22      	ldr	r2, [pc, #136]	; (8007c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a21      	ldr	r2, [pc, #132]	; (8007c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1e      	ldr	r2, [pc, #120]	; (8007c2c <HAL_TIM_Base_Start_IT+0xe0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <HAL_TIM_Base_Start_IT+0xe4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_TIM_Base_Start_IT+0xe8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d115      	bne.n	8007bf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <HAL_TIM_Base_Start_IT+0xec>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d015      	beq.n	8007c0a <HAL_TIM_Base_Start_IT+0xbe>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be4:	d011      	beq.n	8007c0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf6:	e008      	b.n	8007c0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	e000      	b.n	8007c0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40000400 	.word	0x40000400
 8007c24:	40000800 	.word	0x40000800
 8007c28:	40000c00 	.word	0x40000c00
 8007c2c:	40010400 	.word	0x40010400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40001800 	.word	0x40001800
 8007c38:	00010007 	.word	0x00010007

08007c3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e049      	b.n	8007ce2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f841 	bl	8007cea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 feee 	bl	8008a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_IC_Start+0x1a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e023      	b.n	8007d62 <HAL_TIM_IC_Start+0x62>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_IC_Start+0x2a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e01b      	b.n	8007d62 <HAL_TIM_IC_Start+0x62>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_IC_Start+0x3a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	e013      	b.n	8007d62 <HAL_TIM_IC_Start+0x62>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b0c      	cmp	r3, #12
 8007d3e:	d104      	bne.n	8007d4a <HAL_TIM_IC_Start+0x4a>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	e00b      	b.n	8007d62 <HAL_TIM_IC_Start+0x62>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_IC_Start+0x5a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	e003      	b.n	8007d62 <HAL_TIM_IC_Start+0x62>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <HAL_TIM_IC_Start+0x74>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e013      	b.n	8007d9c <HAL_TIM_IC_Start+0x9c>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d104      	bne.n	8007d84 <HAL_TIM_IC_Start+0x84>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	e00b      	b.n	8007d9c <HAL_TIM_IC_Start+0x9c>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d104      	bne.n	8007d94 <HAL_TIM_IC_Start+0x94>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e003      	b.n	8007d9c <HAL_TIM_IC_Start+0x9c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e097      	b.n	8007ede <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_IC_Start+0xbe>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dbc:	e023      	b.n	8007e06 <HAL_TIM_IC_Start+0x106>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_IC_Start+0xce>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dcc:	e01b      	b.n	8007e06 <HAL_TIM_IC_Start+0x106>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d104      	bne.n	8007dde <HAL_TIM_IC_Start+0xde>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ddc:	e013      	b.n	8007e06 <HAL_TIM_IC_Start+0x106>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d104      	bne.n	8007dee <HAL_TIM_IC_Start+0xee>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dec:	e00b      	b.n	8007e06 <HAL_TIM_IC_Start+0x106>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_IC_Start+0xfe>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dfc:	e003      	b.n	8007e06 <HAL_TIM_IC_Start+0x106>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_IC_Start+0x116>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e14:	e013      	b.n	8007e3e <HAL_TIM_IC_Start+0x13e>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_IC_Start+0x126>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e24:	e00b      	b.n	8007e3e <HAL_TIM_IC_Start+0x13e>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_IC_Start+0x136>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e34:	e003      	b.n	8007e3e <HAL_TIM_IC_Start+0x13e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2201      	movs	r2, #1
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f001 f900 	bl	800904c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a25      	ldr	r2, [pc, #148]	; (8007ee8 <HAL_TIM_IC_Start+0x1e8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d022      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5e:	d01d      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a21      	ldr	r2, [pc, #132]	; (8007eec <HAL_TIM_IC_Start+0x1ec>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d018      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a20      	ldr	r2, [pc, #128]	; (8007ef0 <HAL_TIM_IC_Start+0x1f0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1e      	ldr	r2, [pc, #120]	; (8007ef4 <HAL_TIM_IC_Start+0x1f4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00e      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1d      	ldr	r2, [pc, #116]	; (8007ef8 <HAL_TIM_IC_Start+0x1f8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d009      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <HAL_TIM_IC_Start+0x1fc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_TIM_IC_Start+0x19c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1a      	ldr	r2, [pc, #104]	; (8007f00 <HAL_TIM_IC_Start+0x200>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d115      	bne.n	8007ec8 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <HAL_TIM_IC_Start+0x204>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b06      	cmp	r3, #6
 8007eac:	d015      	beq.n	8007eda <HAL_TIM_IC_Start+0x1da>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb4:	d011      	beq.n	8007eda <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0201 	orr.w	r2, r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec6:	e008      	b.n	8007eda <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e000      	b.n	8007edc <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40000400 	.word	0x40000400
 8007ef0:	40000800 	.word	0x40000800
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	40010400 	.word	0x40010400
 8007efc:	40014000 	.word	0x40014000
 8007f00:	40001800 	.word	0x40001800
 8007f04:	00010007 	.word	0x00010007

08007f08 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 f896 	bl	800904c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10f      	bne.n	8007f50 <HAL_TIM_IC_Stop+0x48>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a1a      	ldr	r2, [r3, #32]
 8007f36:	f240 4344 	movw	r3, #1092	; 0x444
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <HAL_TIM_IC_Stop+0x48>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d104      	bne.n	8007f60 <HAL_TIM_IC_Stop+0x58>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5e:	e023      	b.n	8007fa8 <HAL_TIM_IC_Stop+0xa0>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d104      	bne.n	8007f70 <HAL_TIM_IC_Stop+0x68>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f6e:	e01b      	b.n	8007fa8 <HAL_TIM_IC_Stop+0xa0>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d104      	bne.n	8007f80 <HAL_TIM_IC_Stop+0x78>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f7e:	e013      	b.n	8007fa8 <HAL_TIM_IC_Stop+0xa0>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b0c      	cmp	r3, #12
 8007f84:	d104      	bne.n	8007f90 <HAL_TIM_IC_Stop+0x88>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f8e:	e00b      	b.n	8007fa8 <HAL_TIM_IC_Stop+0xa0>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d104      	bne.n	8007fa0 <HAL_TIM_IC_Stop+0x98>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f9e:	e003      	b.n	8007fa8 <HAL_TIM_IC_Stop+0xa0>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <HAL_TIM_IC_Stop+0xb0>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb6:	e013      	b.n	8007fe0 <HAL_TIM_IC_Stop+0xd8>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d104      	bne.n	8007fc8 <HAL_TIM_IC_Stop+0xc0>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc6:	e00b      	b.n	8007fe0 <HAL_TIM_IC_Stop+0xd8>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d104      	bne.n	8007fd8 <HAL_TIM_IC_Stop+0xd0>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_IC_Stop+0xd8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <HAL_TIM_IC_Start_IT+0x1e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008006:	b2db      	uxtb	r3, r3
 8008008:	e023      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x66>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b04      	cmp	r3, #4
 800800e:	d104      	bne.n	800801a <HAL_TIM_IC_Start_IT+0x2e>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008016:	b2db      	uxtb	r3, r3
 8008018:	e01b      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x66>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b08      	cmp	r3, #8
 800801e:	d104      	bne.n	800802a <HAL_TIM_IC_Start_IT+0x3e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008026:	b2db      	uxtb	r3, r3
 8008028:	e013      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x66>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b0c      	cmp	r3, #12
 800802e:	d104      	bne.n	800803a <HAL_TIM_IC_Start_IT+0x4e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	e00b      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x66>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b10      	cmp	r3, #16
 800803e:	d104      	bne.n	800804a <HAL_TIM_IC_Start_IT+0x5e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008046:	b2db      	uxtb	r3, r3
 8008048:	e003      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x66>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008050:	b2db      	uxtb	r3, r3
 8008052:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <HAL_TIM_IC_Start_IT+0x78>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008060:	b2db      	uxtb	r3, r3
 8008062:	e013      	b.n	800808c <HAL_TIM_IC_Start_IT+0xa0>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b04      	cmp	r3, #4
 8008068:	d104      	bne.n	8008074 <HAL_TIM_IC_Start_IT+0x88>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008070:	b2db      	uxtb	r3, r3
 8008072:	e00b      	b.n	800808c <HAL_TIM_IC_Start_IT+0xa0>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b08      	cmp	r3, #8
 8008078:	d104      	bne.n	8008084 <HAL_TIM_IC_Start_IT+0x98>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008080:	b2db      	uxtb	r3, r3
 8008082:	e003      	b.n	800808c <HAL_TIM_IC_Start_IT+0xa0>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800808a:	b2db      	uxtb	r3, r3
 800808c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008094:	7b7b      	ldrb	r3, [r7, #13]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d001      	beq.n	800809e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e0e2      	b.n	8008264 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <HAL_TIM_IC_Start_IT+0xc2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ac:	e023      	b.n	80080f6 <HAL_TIM_IC_Start_IT+0x10a>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d104      	bne.n	80080be <HAL_TIM_IC_Start_IT+0xd2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080bc:	e01b      	b.n	80080f6 <HAL_TIM_IC_Start_IT+0x10a>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d104      	bne.n	80080ce <HAL_TIM_IC_Start_IT+0xe2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080cc:	e013      	b.n	80080f6 <HAL_TIM_IC_Start_IT+0x10a>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b0c      	cmp	r3, #12
 80080d2:	d104      	bne.n	80080de <HAL_TIM_IC_Start_IT+0xf2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080dc:	e00b      	b.n	80080f6 <HAL_TIM_IC_Start_IT+0x10a>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d104      	bne.n	80080ee <HAL_TIM_IC_Start_IT+0x102>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ec:	e003      	b.n	80080f6 <HAL_TIM_IC_Start_IT+0x10a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <HAL_TIM_IC_Start_IT+0x11a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008104:	e013      	b.n	800812e <HAL_TIM_IC_Start_IT+0x142>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b04      	cmp	r3, #4
 800810a:	d104      	bne.n	8008116 <HAL_TIM_IC_Start_IT+0x12a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008114:	e00b      	b.n	800812e <HAL_TIM_IC_Start_IT+0x142>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b08      	cmp	r3, #8
 800811a:	d104      	bne.n	8008126 <HAL_TIM_IC_Start_IT+0x13a>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008124:	e003      	b.n	800812e <HAL_TIM_IC_Start_IT+0x142>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d841      	bhi.n	80081b8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <HAL_TIM_IC_Start_IT+0x150>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008171 	.word	0x08008171
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081b9 	.word	0x080081b9
 8008148:	080081b9 	.word	0x080081b9
 800814c:	08008183 	.word	0x08008183
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	08008195 	.word	0x08008195
 8008160:	080081b9 	.word	0x080081b9
 8008164:	080081b9 	.word	0x080081b9
 8008168:	080081b9 	.word	0x080081b9
 800816c:	080081a7 	.word	0x080081a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0202 	orr.w	r2, r2, #2
 800817e:	60da      	str	r2, [r3, #12]
      break;
 8008180:	e01d      	b.n	80081be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0204 	orr.w	r2, r2, #4
 8008190:	60da      	str	r2, [r3, #12]
      break;
 8008192:	e014      	b.n	80081be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0208 	orr.w	r2, r2, #8
 80081a2:	60da      	str	r2, [r3, #12]
      break;
 80081a4:	e00b      	b.n	80081be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0210 	orr.w	r2, r2, #16
 80081b4:	60da      	str	r2, [r3, #12]
      break;
 80081b6:	e002      	b.n	80081be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
      break;
 80081bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d14e      	bne.n	8008262 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 ff3d 	bl	800904c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a25      	ldr	r2, [pc, #148]	; (800826c <HAL_TIM_IC_Start_IT+0x280>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d022      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e4:	d01d      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a21      	ldr	r2, [pc, #132]	; (8008270 <HAL_TIM_IC_Start_IT+0x284>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d018      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <HAL_TIM_IC_Start_IT+0x288>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <HAL_TIM_IC_Start_IT+0x28c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1c      	ldr	r2, [pc, #112]	; (800827c <HAL_TIM_IC_Start_IT+0x290>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1b      	ldr	r2, [pc, #108]	; (8008280 <HAL_TIM_IC_Start_IT+0x294>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_TIM_IC_Start_IT+0x236>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a19      	ldr	r2, [pc, #100]	; (8008284 <HAL_TIM_IC_Start_IT+0x298>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d115      	bne.n	800824e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <HAL_TIM_IC_Start_IT+0x29c>)
 800822a:	4013      	ands	r3, r2
 800822c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b06      	cmp	r3, #6
 8008232:	d015      	beq.n	8008260 <HAL_TIM_IC_Start_IT+0x274>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823a:	d011      	beq.n	8008260 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824c:	e008      	b.n	8008260 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e000      	b.n	8008262 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008260:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40010000 	.word	0x40010000
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40010400 	.word	0x40010400
 8008280:	40014000 	.word	0x40014000
 8008284:	40001800 	.word	0x40001800
 8008288:	00010007 	.word	0x00010007

0800828c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b0c      	cmp	r3, #12
 800829e:	d841      	bhi.n	8008324 <HAL_TIM_IC_Stop_IT+0x98>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	08008325 	.word	0x08008325
 80082b0:	08008325 	.word	0x08008325
 80082b4:	08008325 	.word	0x08008325
 80082b8:	080082ef 	.word	0x080082ef
 80082bc:	08008325 	.word	0x08008325
 80082c0:	08008325 	.word	0x08008325
 80082c4:	08008325 	.word	0x08008325
 80082c8:	08008301 	.word	0x08008301
 80082cc:	08008325 	.word	0x08008325
 80082d0:	08008325 	.word	0x08008325
 80082d4:	08008325 	.word	0x08008325
 80082d8:	08008313 	.word	0x08008313
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0202 	bic.w	r2, r2, #2
 80082ea:	60da      	str	r2, [r3, #12]
      break;
 80082ec:	e01d      	b.n	800832a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0204 	bic.w	r2, r2, #4
 80082fc:	60da      	str	r2, [r3, #12]
      break;
 80082fe:	e014      	b.n	800832a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0208 	bic.w	r2, r2, #8
 800830e:	60da      	str	r2, [r3, #12]
      break;
 8008310:	e00b      	b.n	800832a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0210 	bic.w	r2, r2, #16
 8008320:	60da      	str	r2, [r3, #12]
      break;
 8008322:	e002      	b.n	800832a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
      break;
 8008328:	bf00      	nop
  }

  if (status == HAL_OK)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d166      	bne.n	80083fe <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe87 	bl	800904c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	f241 1311 	movw	r3, #4369	; 0x1111
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10f      	bne.n	800836e <HAL_TIM_IC_Stop_IT+0xe2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6a1a      	ldr	r2, [r3, #32]
 8008354:	f240 4344 	movw	r3, #1092	; 0x444
 8008358:	4013      	ands	r3, r2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <HAL_TIM_IC_Stop_IT+0xe2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <HAL_TIM_IC_Stop_IT+0xf2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800837c:	e023      	b.n	80083c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d104      	bne.n	800838e <HAL_TIM_IC_Stop_IT+0x102>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800838c:	e01b      	b.n	80083c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b08      	cmp	r3, #8
 8008392:	d104      	bne.n	800839e <HAL_TIM_IC_Stop_IT+0x112>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800839c:	e013      	b.n	80083c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b0c      	cmp	r3, #12
 80083a2:	d104      	bne.n	80083ae <HAL_TIM_IC_Stop_IT+0x122>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ac:	e00b      	b.n	80083c6 <HAL_TIM_IC_Stop_IT+0x13a>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d104      	bne.n	80083be <HAL_TIM_IC_Stop_IT+0x132>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083bc:	e003      	b.n	80083c6 <HAL_TIM_IC_Stop_IT+0x13a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_IC_Stop_IT+0x14a>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d4:	e013      	b.n	80083fe <HAL_TIM_IC_Stop_IT+0x172>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d104      	bne.n	80083e6 <HAL_TIM_IC_Stop_IT+0x15a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e4:	e00b      	b.n	80083fe <HAL_TIM_IC_Stop_IT+0x172>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d104      	bne.n	80083f6 <HAL_TIM_IC_Stop_IT+0x16a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083f4:	e003      	b.n	80083fe <HAL_TIM_IC_Stop_IT+0x172>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d122      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d11b      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0202 	mvn.w	r2, #2
 8008434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f003 fd64 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fae4 	bl	8008a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 faeb 	bl	8008a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b04      	cmp	r3, #4
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b04      	cmp	r3, #4
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0204 	mvn.w	r2, #4
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f003 fd3a 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 faba 	bl	8008a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fac1 	bl	8008a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0208 	mvn.w	r2, #8
 80084dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f003 fd10 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa90 	bl	8008a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa97 	bl	8008a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b10      	cmp	r3, #16
 8008518:	d122      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b10      	cmp	r3, #16
 8008526:	d11b      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0210 	mvn.w	r2, #16
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2208      	movs	r2, #8
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f003 fce6 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa66 	bl	8008a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa6d 	bl	8008a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b01      	cmp	r3, #1
 800856c:	d10e      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b01      	cmp	r3, #1
 800857a:	d107      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0201 	mvn.w	r2, #1
 8008584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7f8 fe1e 	bl	80011c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d10e      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d107      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fe08 	bl	80091c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d10e      	bne.n	80085e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	d107      	bne.n	80085e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fdfb 	bl	80091dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b40      	cmp	r3, #64	; 0x40
 80085f2:	d10e      	bne.n	8008612 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d107      	bne.n	8008612 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800860a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa1b 	bl	8008a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 0320 	and.w	r3, r3, #32
 800861c:	2b20      	cmp	r3, #32
 800861e:	d10e      	bne.n	800863e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b20      	cmp	r3, #32
 800862c:	d107      	bne.n	800863e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f06f 0220 	mvn.w	r2, #32
 8008636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fdbb 	bl	80091b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008660:	2302      	movs	r3, #2
 8008662:	e088      	b.n	8008776 <HAL_TIM_IC_ConfigChannel+0x130>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11b      	bne.n	80086aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6819      	ldr	r1, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f000 fb1f 	bl	8008cc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 020c 	bic.w	r2, r2, #12
 8008694:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6999      	ldr	r1, [r3, #24]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	619a      	str	r2, [r3, #24]
 80086a8:	e060      	b.n	800876c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d11c      	bne.n	80086ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6819      	ldr	r1, [r3, #0]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f000 fba3 	bl	8008e0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80086d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6999      	ldr	r1, [r3, #24]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	021a      	lsls	r2, r3, #8
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	619a      	str	r2, [r3, #24]
 80086e8:	e040      	b.n	800876c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d11b      	bne.n	8008728 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f000 fbf0 	bl	8008ee4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 020c 	bic.w	r2, r2, #12
 8008712:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69d9      	ldr	r1, [r3, #28]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	61da      	str	r2, [r3, #28]
 8008726:	e021      	b.n	800876c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b0c      	cmp	r3, #12
 800872c:	d11c      	bne.n	8008768 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f000 fc0d 	bl	8008f5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008750:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69d9      	ldr	r1, [r3, #28]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	021a      	lsls	r2, r3, #8
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	61da      	str	r2, [r3, #28]
 8008766:	e001      	b.n	800876c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_TIM_ConfigClockSource+0x1c>
 8008798:	2302      	movs	r3, #2
 800879a:	e0b4      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x186>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	4b56      	ldr	r3, [pc, #344]	; (8008910 <HAL_TIM_ConfigClockSource+0x190>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d4:	d03e      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0xd4>
 80087d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087da:	f200 8087 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	f000 8086 	beq.w	80088f2 <HAL_TIM_ConfigClockSource+0x172>
 80087e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ea:	d87f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087ec:	2b70      	cmp	r3, #112	; 0x70
 80087ee:	d01a      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0xa6>
 80087f0:	2b70      	cmp	r3, #112	; 0x70
 80087f2:	d87b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087f4:	2b60      	cmp	r3, #96	; 0x60
 80087f6:	d050      	beq.n	800889a <HAL_TIM_ConfigClockSource+0x11a>
 80087f8:	2b60      	cmp	r3, #96	; 0x60
 80087fa:	d877      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087fc:	2b50      	cmp	r3, #80	; 0x50
 80087fe:	d03c      	beq.n	800887a <HAL_TIM_ConfigClockSource+0xfa>
 8008800:	2b50      	cmp	r3, #80	; 0x50
 8008802:	d873      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d058      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x13a>
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d86f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 800880c:	2b30      	cmp	r3, #48	; 0x30
 800880e:	d064      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008810:	2b30      	cmp	r3, #48	; 0x30
 8008812:	d86b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 8008814:	2b20      	cmp	r3, #32
 8008816:	d060      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d867      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d05c      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008820:	2b10      	cmp	r3, #16
 8008822:	d05a      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008824:	e062      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6899      	ldr	r1, [r3, #8]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f000 fbe9 	bl	800900c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	609a      	str	r2, [r3, #8]
      break;
 8008852:	e04f      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6899      	ldr	r1, [r3, #8]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f000 fbd2 	bl	800900c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008876:	609a      	str	r2, [r3, #8]
      break;
 8008878:	e03c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6859      	ldr	r1, [r3, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	461a      	mov	r2, r3
 8008888:	f000 fa90 	bl	8008dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2150      	movs	r1, #80	; 0x50
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fb9f 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 8008898:	e02c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 faec 	bl	8008e84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2160      	movs	r1, #96	; 0x60
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fb8f 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 80088b8:	e01c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fa70 	bl	8008dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2140      	movs	r1, #64	; 0x40
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fb7f 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 80088d8:	e00c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f000 fb76 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 80088ea:	e003      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e000      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	fffeff88 	.word	0xfffeff88

08008914 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008928:	2302      	movs	r3, #2
 800892a:	e031      	b.n	8008990 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f92c 	bl	8008b9c <TIM_SlaveTimer_SetConfig>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e018      	b.n	8008990 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800897c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b0c      	cmp	r3, #12
 80089aa:	d831      	bhi.n	8008a10 <HAL_TIM_ReadCapturedValue+0x78>
 80089ac:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	08008a11 	.word	0x08008a11
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	08008a11 	.word	0x08008a11
 80089c4:	080089f3 	.word	0x080089f3
 80089c8:	08008a11 	.word	0x08008a11
 80089cc:	08008a11 	.word	0x08008a11
 80089d0:	08008a11 	.word	0x08008a11
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a11 	.word	0x08008a11
 80089dc:	08008a11 	.word	0x08008a11
 80089e0:	08008a11 	.word	0x08008a11
 80089e4:	08008a07 	.word	0x08008a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	60fb      	str	r3, [r7, #12]

      break;
 80089f0:	e00f      	b.n	8008a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	60fb      	str	r3, [r7, #12]

      break;
 80089fa:	e00a      	b.n	8008a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	60fb      	str	r3, [r7, #12]

      break;
 8008a04:	e005      	b.n	8008a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	60fb      	str	r3, [r7, #12]

      break;
 8008a0e:	e000      	b.n	8008a12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008a10:	bf00      	nop
  }

  return tmpreg;
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a40      	ldr	r2, [pc, #256]	; (8008b70 <TIM_Base_SetConfig+0x114>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d013      	beq.n	8008a9c <TIM_Base_SetConfig+0x40>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7a:	d00f      	beq.n	8008a9c <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a3d      	ldr	r2, [pc, #244]	; (8008b74 <TIM_Base_SetConfig+0x118>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00b      	beq.n	8008a9c <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a3c      	ldr	r2, [pc, #240]	; (8008b78 <TIM_Base_SetConfig+0x11c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d007      	beq.n	8008a9c <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a3b      	ldr	r2, [pc, #236]	; (8008b7c <TIM_Base_SetConfig+0x120>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_Base_SetConfig+0x40>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a3a      	ldr	r2, [pc, #232]	; (8008b80 <TIM_Base_SetConfig+0x124>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d108      	bne.n	8008aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a2f      	ldr	r2, [pc, #188]	; (8008b70 <TIM_Base_SetConfig+0x114>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d02b      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abc:	d027      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a2c      	ldr	r2, [pc, #176]	; (8008b74 <TIM_Base_SetConfig+0x118>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d023      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a2b      	ldr	r2, [pc, #172]	; (8008b78 <TIM_Base_SetConfig+0x11c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01f      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2a      	ldr	r2, [pc, #168]	; (8008b7c <TIM_Base_SetConfig+0x120>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d01b      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a29      	ldr	r2, [pc, #164]	; (8008b80 <TIM_Base_SetConfig+0x124>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d017      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a28      	ldr	r2, [pc, #160]	; (8008b84 <TIM_Base_SetConfig+0x128>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d013      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a27      	ldr	r2, [pc, #156]	; (8008b88 <TIM_Base_SetConfig+0x12c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00f      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <TIM_Base_SetConfig+0x130>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00b      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a25      	ldr	r2, [pc, #148]	; (8008b90 <TIM_Base_SetConfig+0x134>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a24      	ldr	r2, [pc, #144]	; (8008b94 <TIM_Base_SetConfig+0x138>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a23      	ldr	r2, [pc, #140]	; (8008b98 <TIM_Base_SetConfig+0x13c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d108      	bne.n	8008b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <TIM_Base_SetConfig+0x114>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d003      	beq.n	8008b54 <TIM_Base_SetConfig+0xf8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	; (8008b80 <TIM_Base_SetConfig+0x124>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d103      	bne.n	8008b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	615a      	str	r2, [r3, #20]
}
 8008b62:	bf00      	nop
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40000400 	.word	0x40000400
 8008b78:	40000800 	.word	0x40000800
 8008b7c:	40000c00 	.word	0x40000c00
 8008b80:	40010400 	.word	0x40010400
 8008b84:	40014000 	.word	0x40014000
 8008b88:	40014400 	.word	0x40014400
 8008b8c:	40014800 	.word	0x40014800
 8008b90:	40001800 	.word	0x40001800
 8008b94:	40001c00 	.word	0x40001c00
 8008b98:	40002000 	.word	0x40002000

08008b9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	; (8008cc0 <TIM_SlaveTimer_SetConfig+0x124>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2b70      	cmp	r3, #112	; 0x70
 8008be4:	d01a      	beq.n	8008c1c <TIM_SlaveTimer_SetConfig+0x80>
 8008be6:	2b70      	cmp	r3, #112	; 0x70
 8008be8:	d860      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008bea:	2b60      	cmp	r3, #96	; 0x60
 8008bec:	d054      	beq.n	8008c98 <TIM_SlaveTimer_SetConfig+0xfc>
 8008bee:	2b60      	cmp	r3, #96	; 0x60
 8008bf0:	d85c      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008bf2:	2b50      	cmp	r3, #80	; 0x50
 8008bf4:	d046      	beq.n	8008c84 <TIM_SlaveTimer_SetConfig+0xe8>
 8008bf6:	2b50      	cmp	r3, #80	; 0x50
 8008bf8:	d858      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	d019      	beq.n	8008c32 <TIM_SlaveTimer_SetConfig+0x96>
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d854      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008c02:	2b30      	cmp	r3, #48	; 0x30
 8008c04:	d055      	beq.n	8008cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8008c06:	2b30      	cmp	r3, #48	; 0x30
 8008c08:	d850      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d051      	beq.n	8008cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d84c      	bhi.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d04d      	beq.n	8008cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d04b      	beq.n	8008cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8008c1a:	e047      	b.n	8008cac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68d9      	ldr	r1, [r3, #12]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f000 f9ee 	bl	800900c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008c30:	e040      	b.n	8008cb4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d101      	bne.n	8008c3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e03b      	b.n	8008cb6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6a1a      	ldr	r2, [r3, #32]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 0201 	bic.w	r2, r2, #1
 8008c54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	621a      	str	r2, [r3, #32]
      break;
 8008c82:	e017      	b.n	8008cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6899      	ldr	r1, [r3, #8]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	461a      	mov	r2, r3
 8008c92:	f000 f88b 	bl	8008dac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008c96:	e00d      	b.n	8008cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	6899      	ldr	r1, [r3, #8]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f000 f8ed 	bl	8008e84 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008caa:	e003      	b.n	8008cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb0:	e000      	b.n	8008cb4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008cb2:	bf00      	nop
  }

  return status;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	fffefff8 	.word	0xfffefff8

08008cc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a28      	ldr	r2, [pc, #160]	; (8008d90 <TIM_TI1_SetConfig+0xcc>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf8:	d017      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a25      	ldr	r2, [pc, #148]	; (8008d94 <TIM_TI1_SetConfig+0xd0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4a24      	ldr	r2, [pc, #144]	; (8008d98 <TIM_TI1_SetConfig+0xd4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a23      	ldr	r2, [pc, #140]	; (8008d9c <TIM_TI1_SetConfig+0xd8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a22      	ldr	r2, [pc, #136]	; (8008da0 <TIM_TI1_SetConfig+0xdc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4a21      	ldr	r2, [pc, #132]	; (8008da4 <TIM_TI1_SetConfig+0xe0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <TIM_TI1_SetConfig+0xe4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <TIM_TI1_SetConfig+0x6a>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <TIM_TI1_SetConfig+0x6c>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e003      	b.n	8008d4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f023 030a 	bic.w	r3, r3, #10
 8008d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f003 030a 	and.w	r3, r3, #10
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40001800 	.word	0x40001800

08008dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f023 030a 	bic.w	r3, r3, #10
 8008de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	621a      	str	r2, [r3, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b087      	sub	sp, #28
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f023 0210 	bic.w	r2, r3, #16
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	021b      	lsls	r3, r3, #8
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	031b      	lsls	r3, r3, #12
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	621a      	str	r2, [r3, #32]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f023 0210 	bic.w	r2, r3, #16
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	031b      	lsls	r3, r3, #12
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	621a      	str	r2, [r3, #32]
}
 8008ed8:	bf00      	nop
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008f34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	031b      	lsls	r3, r3, #12
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008fae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	031b      	lsls	r3, r3, #12
 8008fb4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	621a      	str	r2, [r3, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f043 0307 	orr.w	r3, r3, #7
 8008ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	609a      	str	r2, [r3, #8]
}
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	021a      	lsls	r2, r3, #8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	431a      	orrs	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4313      	orrs	r3, r2
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	609a      	str	r2, [r3, #8]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2201      	movs	r2, #1
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1a      	ldr	r2, [r3, #32]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	43db      	mvns	r3, r3
 800906e:	401a      	ands	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a1a      	ldr	r2, [r3, #32]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	fa01 f303 	lsl.w	r3, r1, r3
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	621a      	str	r2, [r3, #32]
}
 800908a:	bf00      	nop
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e06d      	b.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a30      	ldr	r2, [pc, #192]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a2f      	ldr	r2, [pc, #188]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d108      	bne.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a20      	ldr	r2, [pc, #128]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d022      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009122:	d01d      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a1d      	ldr	r2, [pc, #116]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d018      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a1c      	ldr	r2, [pc, #112]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d013      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1a      	ldr	r2, [pc, #104]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00e      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a15      	ldr	r2, [pc, #84]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d009      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a16      	ldr	r2, [pc, #88]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a15      	ldr	r2, [pc, #84]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d10c      	bne.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40010000 	.word	0x40010000
 800919c:	40010400 	.word	0x40010400
 80091a0:	40000400 	.word	0x40000400
 80091a4:	40000800 	.word	0x40000800
 80091a8:	40000c00 	.word	0x40000c00
 80091ac:	40014000 	.word	0x40014000
 80091b0:	40001800 	.word	0x40001800

080091b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e040      	b.n	8009284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7f8 fb16 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2224      	movs	r2, #36	; 0x24
 800921c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fb46 	bl	80098c0 <UART_SetConfig>
 8009234:	4603      	mov	r3, r0
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e022      	b.n	8009284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fd9e 	bl	8009d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800925a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800926a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fe25 	bl	8009ecc <UART_CheckIdleState>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b0ba      	sub	sp, #232	; 0xe8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80092ba:	4013      	ands	r3, r2
 80092bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d115      	bne.n	80092f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80092c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092cc:	f003 0320 	and.w	r3, r3, #32
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00f      	beq.n	80092f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 82ac 	beq.w	8009842 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
      }
      return;
 80092f2:	e2a6      	b.n	8009842 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8117 	beq.w	800952c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80092fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800930a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800930e:	4b85      	ldr	r3, [pc, #532]	; (8009524 <HAL_UART_IRQHandler+0x298>)
 8009310:	4013      	ands	r3, r2
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 810a 	beq.w	800952c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d011      	beq.n	8009348 <HAL_UART_IRQHandler+0xbc>
 8009324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2201      	movs	r2, #1
 8009336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933e:	f043 0201 	orr.w	r2, r3, #1
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d011      	beq.n	8009378 <HAL_UART_IRQHandler+0xec>
 8009354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2202      	movs	r2, #2
 8009366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936e:	f043 0204 	orr.w	r2, r3, #4
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d011      	beq.n	80093a8 <HAL_UART_IRQHandler+0x11c>
 8009384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2204      	movs	r2, #4
 8009396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939e:	f043 0202 	orr.w	r2, r3, #2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d017      	beq.n	80093e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80093c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2208      	movs	r2, #8
 80093d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093da:	f043 0208 	orr.w	r2, r3, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d012      	beq.n	8009416 <HAL_UART_IRQHandler+0x18a>
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00c      	beq.n	8009416 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8212 	beq.w	8009846 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800942e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d007      	beq.n	800944a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	2b40      	cmp	r3, #64	; 0x40
 8009460:	d005      	beq.n	800946e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009466:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800946a:	2b00      	cmp	r3, #0
 800946c:	d04f      	beq.n	800950e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 ff06 	bl	800a280 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d141      	bne.n	8009506 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800949c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d9      	bne.n	8009482 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094da:	4a13      	ldr	r2, [pc, #76]	; (8009528 <HAL_UART_IRQHandler+0x29c>)
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f9 faa4 	bl	8002a30 <HAL_DMA_Abort_IT>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d017      	beq.n	800951e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fc:	e00f      	b.n	800951e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9ca 	bl	8009898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009504:	e00b      	b.n	800951e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f9c6 	bl	8009898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	e007      	b.n	800951e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f9c2 	bl	8009898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800951c:	e193      	b.n	8009846 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951e:	bf00      	nop
    return;
 8009520:	e191      	b.n	8009846 <HAL_UART_IRQHandler+0x5ba>
 8009522:	bf00      	nop
 8009524:	04000120 	.word	0x04000120
 8009528:	0800a52d 	.word	0x0800a52d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009530:	2b01      	cmp	r3, #1
 8009532:	f040 814c 	bne.w	80097ce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 8145 	beq.w	80097ce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 813e 	beq.w	80097ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2210      	movs	r2, #16
 8009558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009564:	2b40      	cmp	r3, #64	; 0x40
 8009566:	f040 80b6 	bne.w	80096d6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009576:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 8165 	beq.w	800984a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800958a:	429a      	cmp	r2, r3
 800958c:	f080 815d 	bcs.w	800984a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a4:	f000 8086 	beq.w	80096b4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1da      	bne.n	80095a8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800961a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800961e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e1      	bne.n	80095f2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800963e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e3      	bne.n	800962e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009684:	f023 0310 	bic.w	r3, r3, #16
 8009688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009696:	65bb      	str	r3, [r7, #88]	; 0x58
 8009698:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800969c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e4      	bne.n	8009674 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f9 f94e 	bl	8002950 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fc52 	bl	800bf78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096d4:	e0b9      	b.n	800984a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80ab 	beq.w	800984e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80096f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 80a6 	beq.w	800984e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009724:	647b      	str	r3, [r7, #68]	; 0x44
 8009726:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800972a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e4      	bne.n	8009702 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3308      	adds	r3, #8
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	623b      	str	r3, [r7, #32]
   return(result);
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	f023 0301 	bic.w	r3, r3, #1
 800974e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800975c:	633a      	str	r2, [r7, #48]	; 0x30
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e3      	bne.n	8009738 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	60fb      	str	r3, [r7, #12]
   return(result);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f023 0310 	bic.w	r3, r3, #16
 8009798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	617b      	str	r3, [r7, #20]
   return(result);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e4      	bne.n	8009784 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f002 fbd6 	bl	800bf78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097cc:	e03f      	b.n	800984e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00e      	beq.n	80097f8 <HAL_UART_IRQHandler+0x56c>
 80097da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f85b 	bl	80098ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097f6:	e02d      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01c      	beq.n	8009852 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
    }
    return;
 8009820:	e017      	b.n	8009852 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d012      	beq.n	8009854 <HAL_UART_IRQHandler+0x5c8>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fe8c 	bl	800a558 <UART_EndTransmit_IT>
    return;
 8009840:	e008      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009842:	bf00      	nop
 8009844:	e006      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009846:	bf00      	nop
 8009848:	e004      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
      return;
 800984a:	bf00      	nop
 800984c:	e002      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
      return;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009852:	bf00      	nop
  }

}
 8009854:	37e8      	adds	r7, #232	; 0xe8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop

0800985c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4ba6      	ldr	r3, [pc, #664]	; (8009b84 <UART_SetConfig+0x2c4>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	6979      	ldr	r1, [r7, #20]
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	430a      	orrs	r2, r1
 8009930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a94      	ldr	r2, [pc, #592]	; (8009b88 <UART_SetConfig+0x2c8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d120      	bne.n	800997e <UART_SetConfig+0xbe>
 800993c:	4b93      	ldr	r3, [pc, #588]	; (8009b8c <UART_SetConfig+0x2cc>)
 800993e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	2b03      	cmp	r3, #3
 8009948:	d816      	bhi.n	8009978 <UART_SetConfig+0xb8>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0x90>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	08009961 	.word	0x08009961
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009967 	.word	0x08009967
 800995c:	08009973 	.word	0x08009973
 8009960:	2301      	movs	r3, #1
 8009962:	77fb      	strb	r3, [r7, #31]
 8009964:	e150      	b.n	8009c08 <UART_SetConfig+0x348>
 8009966:	2302      	movs	r3, #2
 8009968:	77fb      	strb	r3, [r7, #31]
 800996a:	e14d      	b.n	8009c08 <UART_SetConfig+0x348>
 800996c:	2304      	movs	r3, #4
 800996e:	77fb      	strb	r3, [r7, #31]
 8009970:	e14a      	b.n	8009c08 <UART_SetConfig+0x348>
 8009972:	2308      	movs	r3, #8
 8009974:	77fb      	strb	r3, [r7, #31]
 8009976:	e147      	b.n	8009c08 <UART_SetConfig+0x348>
 8009978:	2310      	movs	r3, #16
 800997a:	77fb      	strb	r3, [r7, #31]
 800997c:	e144      	b.n	8009c08 <UART_SetConfig+0x348>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a83      	ldr	r2, [pc, #524]	; (8009b90 <UART_SetConfig+0x2d0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d132      	bne.n	80099ee <UART_SetConfig+0x12e>
 8009988:	4b80      	ldr	r3, [pc, #512]	; (8009b8c <UART_SetConfig+0x2cc>)
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998e:	f003 030c 	and.w	r3, r3, #12
 8009992:	2b0c      	cmp	r3, #12
 8009994:	d828      	bhi.n	80099e8 <UART_SetConfig+0x128>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0xdc>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	080099e9 	.word	0x080099e9
 80099a4:	080099e9 	.word	0x080099e9
 80099a8:	080099e9 	.word	0x080099e9
 80099ac:	080099dd 	.word	0x080099dd
 80099b0:	080099e9 	.word	0x080099e9
 80099b4:	080099e9 	.word	0x080099e9
 80099b8:	080099e9 	.word	0x080099e9
 80099bc:	080099d7 	.word	0x080099d7
 80099c0:	080099e9 	.word	0x080099e9
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	080099e9 	.word	0x080099e9
 80099cc:	080099e3 	.word	0x080099e3
 80099d0:	2300      	movs	r3, #0
 80099d2:	77fb      	strb	r3, [r7, #31]
 80099d4:	e118      	b.n	8009c08 <UART_SetConfig+0x348>
 80099d6:	2302      	movs	r3, #2
 80099d8:	77fb      	strb	r3, [r7, #31]
 80099da:	e115      	b.n	8009c08 <UART_SetConfig+0x348>
 80099dc:	2304      	movs	r3, #4
 80099de:	77fb      	strb	r3, [r7, #31]
 80099e0:	e112      	b.n	8009c08 <UART_SetConfig+0x348>
 80099e2:	2308      	movs	r3, #8
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e10f      	b.n	8009c08 <UART_SetConfig+0x348>
 80099e8:	2310      	movs	r3, #16
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e10c      	b.n	8009c08 <UART_SetConfig+0x348>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a68      	ldr	r2, [pc, #416]	; (8009b94 <UART_SetConfig+0x2d4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d120      	bne.n	8009a3a <UART_SetConfig+0x17a>
 80099f8:	4b64      	ldr	r3, [pc, #400]	; (8009b8c <UART_SetConfig+0x2cc>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a02:	2b30      	cmp	r3, #48	; 0x30
 8009a04:	d013      	beq.n	8009a2e <UART_SetConfig+0x16e>
 8009a06:	2b30      	cmp	r3, #48	; 0x30
 8009a08:	d814      	bhi.n	8009a34 <UART_SetConfig+0x174>
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d009      	beq.n	8009a22 <UART_SetConfig+0x162>
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d810      	bhi.n	8009a34 <UART_SetConfig+0x174>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <UART_SetConfig+0x15c>
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d006      	beq.n	8009a28 <UART_SetConfig+0x168>
 8009a1a:	e00b      	b.n	8009a34 <UART_SetConfig+0x174>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e0f2      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a22:	2302      	movs	r3, #2
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e0ef      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e0ec      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e0e9      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a34:	2310      	movs	r3, #16
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e0e6      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a56      	ldr	r2, [pc, #344]	; (8009b98 <UART_SetConfig+0x2d8>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d120      	bne.n	8009a86 <UART_SetConfig+0x1c6>
 8009a44:	4b51      	ldr	r3, [pc, #324]	; (8009b8c <UART_SetConfig+0x2cc>)
 8009a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8009a50:	d013      	beq.n	8009a7a <UART_SetConfig+0x1ba>
 8009a52:	2bc0      	cmp	r3, #192	; 0xc0
 8009a54:	d814      	bhi.n	8009a80 <UART_SetConfig+0x1c0>
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d009      	beq.n	8009a6e <UART_SetConfig+0x1ae>
 8009a5a:	2b80      	cmp	r3, #128	; 0x80
 8009a5c:	d810      	bhi.n	8009a80 <UART_SetConfig+0x1c0>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <UART_SetConfig+0x1a8>
 8009a62:	2b40      	cmp	r3, #64	; 0x40
 8009a64:	d006      	beq.n	8009a74 <UART_SetConfig+0x1b4>
 8009a66:	e00b      	b.n	8009a80 <UART_SetConfig+0x1c0>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e0cc      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	77fb      	strb	r3, [r7, #31]
 8009a72:	e0c9      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a74:	2304      	movs	r3, #4
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e0c6      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	77fb      	strb	r3, [r7, #31]
 8009a7e:	e0c3      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a80:	2310      	movs	r3, #16
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e0c0      	b.n	8009c08 <UART_SetConfig+0x348>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a44      	ldr	r2, [pc, #272]	; (8009b9c <UART_SetConfig+0x2dc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d125      	bne.n	8009adc <UART_SetConfig+0x21c>
 8009a90:	4b3e      	ldr	r3, [pc, #248]	; (8009b8c <UART_SetConfig+0x2cc>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a9e:	d017      	beq.n	8009ad0 <UART_SetConfig+0x210>
 8009aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa4:	d817      	bhi.n	8009ad6 <UART_SetConfig+0x216>
 8009aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aaa:	d00b      	beq.n	8009ac4 <UART_SetConfig+0x204>
 8009aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab0:	d811      	bhi.n	8009ad6 <UART_SetConfig+0x216>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <UART_SetConfig+0x1fe>
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aba:	d006      	beq.n	8009aca <UART_SetConfig+0x20a>
 8009abc:	e00b      	b.n	8009ad6 <UART_SetConfig+0x216>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e0a1      	b.n	8009c08 <UART_SetConfig+0x348>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e09e      	b.n	8009c08 <UART_SetConfig+0x348>
 8009aca:	2304      	movs	r3, #4
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e09b      	b.n	8009c08 <UART_SetConfig+0x348>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e098      	b.n	8009c08 <UART_SetConfig+0x348>
 8009ad6:	2310      	movs	r3, #16
 8009ad8:	77fb      	strb	r3, [r7, #31]
 8009ada:	e095      	b.n	8009c08 <UART_SetConfig+0x348>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a2f      	ldr	r2, [pc, #188]	; (8009ba0 <UART_SetConfig+0x2e0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d125      	bne.n	8009b32 <UART_SetConfig+0x272>
 8009ae6:	4b29      	ldr	r3, [pc, #164]	; (8009b8c <UART_SetConfig+0x2cc>)
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009af4:	d017      	beq.n	8009b26 <UART_SetConfig+0x266>
 8009af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009afa:	d817      	bhi.n	8009b2c <UART_SetConfig+0x26c>
 8009afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b00:	d00b      	beq.n	8009b1a <UART_SetConfig+0x25a>
 8009b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b06:	d811      	bhi.n	8009b2c <UART_SetConfig+0x26c>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <UART_SetConfig+0x254>
 8009b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b10:	d006      	beq.n	8009b20 <UART_SetConfig+0x260>
 8009b12:	e00b      	b.n	8009b2c <UART_SetConfig+0x26c>
 8009b14:	2301      	movs	r3, #1
 8009b16:	77fb      	strb	r3, [r7, #31]
 8009b18:	e076      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	77fb      	strb	r3, [r7, #31]
 8009b1e:	e073      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b20:	2304      	movs	r3, #4
 8009b22:	77fb      	strb	r3, [r7, #31]
 8009b24:	e070      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b26:	2308      	movs	r3, #8
 8009b28:	77fb      	strb	r3, [r7, #31]
 8009b2a:	e06d      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	77fb      	strb	r3, [r7, #31]
 8009b30:	e06a      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1b      	ldr	r2, [pc, #108]	; (8009ba4 <UART_SetConfig+0x2e4>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d138      	bne.n	8009bae <UART_SetConfig+0x2ee>
 8009b3c:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <UART_SetConfig+0x2cc>)
 8009b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b4a:	d017      	beq.n	8009b7c <UART_SetConfig+0x2bc>
 8009b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b50:	d82a      	bhi.n	8009ba8 <UART_SetConfig+0x2e8>
 8009b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b56:	d00b      	beq.n	8009b70 <UART_SetConfig+0x2b0>
 8009b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5c:	d824      	bhi.n	8009ba8 <UART_SetConfig+0x2e8>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <UART_SetConfig+0x2aa>
 8009b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b66:	d006      	beq.n	8009b76 <UART_SetConfig+0x2b6>
 8009b68:	e01e      	b.n	8009ba8 <UART_SetConfig+0x2e8>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	77fb      	strb	r3, [r7, #31]
 8009b6e:	e04b      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b70:	2302      	movs	r3, #2
 8009b72:	77fb      	strb	r3, [r7, #31]
 8009b74:	e048      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b76:	2304      	movs	r3, #4
 8009b78:	77fb      	strb	r3, [r7, #31]
 8009b7a:	e045      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e042      	b.n	8009c08 <UART_SetConfig+0x348>
 8009b82:	bf00      	nop
 8009b84:	efff69f3 	.word	0xefff69f3
 8009b88:	40011000 	.word	0x40011000
 8009b8c:	40023800 	.word	0x40023800
 8009b90:	40004400 	.word	0x40004400
 8009b94:	40004800 	.word	0x40004800
 8009b98:	40004c00 	.word	0x40004c00
 8009b9c:	40005000 	.word	0x40005000
 8009ba0:	40011400 	.word	0x40011400
 8009ba4:	40007800 	.word	0x40007800
 8009ba8:	2310      	movs	r3, #16
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e02c      	b.n	8009c08 <UART_SetConfig+0x348>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a72      	ldr	r2, [pc, #456]	; (8009d7c <UART_SetConfig+0x4bc>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d125      	bne.n	8009c04 <UART_SetConfig+0x344>
 8009bb8:	4b71      	ldr	r3, [pc, #452]	; (8009d80 <UART_SetConfig+0x4c0>)
 8009bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009bc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bc6:	d017      	beq.n	8009bf8 <UART_SetConfig+0x338>
 8009bc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bcc:	d817      	bhi.n	8009bfe <UART_SetConfig+0x33e>
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd2:	d00b      	beq.n	8009bec <UART_SetConfig+0x32c>
 8009bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd8:	d811      	bhi.n	8009bfe <UART_SetConfig+0x33e>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <UART_SetConfig+0x326>
 8009bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009be2:	d006      	beq.n	8009bf2 <UART_SetConfig+0x332>
 8009be4:	e00b      	b.n	8009bfe <UART_SetConfig+0x33e>
 8009be6:	2300      	movs	r3, #0
 8009be8:	77fb      	strb	r3, [r7, #31]
 8009bea:	e00d      	b.n	8009c08 <UART_SetConfig+0x348>
 8009bec:	2302      	movs	r3, #2
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	e00a      	b.n	8009c08 <UART_SetConfig+0x348>
 8009bf2:	2304      	movs	r3, #4
 8009bf4:	77fb      	strb	r3, [r7, #31]
 8009bf6:	e007      	b.n	8009c08 <UART_SetConfig+0x348>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e004      	b.n	8009c08 <UART_SetConfig+0x348>
 8009bfe:	2310      	movs	r3, #16
 8009c00:	77fb      	strb	r3, [r7, #31]
 8009c02:	e001      	b.n	8009c08 <UART_SetConfig+0x348>
 8009c04:	2310      	movs	r3, #16
 8009c06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c10:	d15b      	bne.n	8009cca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009c12:	7ffb      	ldrb	r3, [r7, #31]
 8009c14:	2b08      	cmp	r3, #8
 8009c16:	d828      	bhi.n	8009c6a <UART_SetConfig+0x3aa>
 8009c18:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <UART_SetConfig+0x360>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c55 	.word	0x08009c55
 8009c2c:	08009c6b 	.word	0x08009c6b
 8009c30:	08009c5b 	.word	0x08009c5b
 8009c34:	08009c6b 	.word	0x08009c6b
 8009c38:	08009c6b 	.word	0x08009c6b
 8009c3c:	08009c6b 	.word	0x08009c6b
 8009c40:	08009c63 	.word	0x08009c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c44:	f7fd f9fe 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8009c48:	61b8      	str	r0, [r7, #24]
        break;
 8009c4a:	e013      	b.n	8009c74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c4c:	f7fd fa0e 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 8009c50:	61b8      	str	r0, [r7, #24]
        break;
 8009c52:	e00f      	b.n	8009c74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c54:	4b4b      	ldr	r3, [pc, #300]	; (8009d84 <UART_SetConfig+0x4c4>)
 8009c56:	61bb      	str	r3, [r7, #24]
        break;
 8009c58:	e00c      	b.n	8009c74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c5a:	f7fd f8e1 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 8009c5e:	61b8      	str	r0, [r7, #24]
        break;
 8009c60:	e008      	b.n	8009c74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c66:	61bb      	str	r3, [r7, #24]
        break;
 8009c68:	e004      	b.n	8009c74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	77bb      	strb	r3, [r7, #30]
        break;
 8009c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d074      	beq.n	8009d64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	005a      	lsls	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b0f      	cmp	r3, #15
 8009c94:	d916      	bls.n	8009cc4 <UART_SetConfig+0x404>
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9c:	d212      	bcs.n	8009cc4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	f023 030f 	bic.w	r3, r3, #15
 8009ca6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	085b      	lsrs	r3, r3, #1
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	89fb      	ldrh	r3, [r7, #14]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	89fa      	ldrh	r2, [r7, #14]
 8009cc0:	60da      	str	r2, [r3, #12]
 8009cc2:	e04f      	b.n	8009d64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	77bb      	strb	r3, [r7, #30]
 8009cc8:	e04c      	b.n	8009d64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cca:	7ffb      	ldrb	r3, [r7, #31]
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d828      	bhi.n	8009d22 <UART_SetConfig+0x462>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <UART_SetConfig+0x418>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cfd 	.word	0x08009cfd
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	08009d23 	.word	0x08009d23
 8009ce8:	08009d13 	.word	0x08009d13
 8009cec:	08009d23 	.word	0x08009d23
 8009cf0:	08009d23 	.word	0x08009d23
 8009cf4:	08009d23 	.word	0x08009d23
 8009cf8:	08009d1b 	.word	0x08009d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7fd f9a2 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8009d00:	61b8      	str	r0, [r7, #24]
        break;
 8009d02:	e013      	b.n	8009d2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d04:	f7fd f9b2 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 8009d08:	61b8      	str	r0, [r7, #24]
        break;
 8009d0a:	e00f      	b.n	8009d2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d0c:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <UART_SetConfig+0x4c4>)
 8009d0e:	61bb      	str	r3, [r7, #24]
        break;
 8009d10:	e00c      	b.n	8009d2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d12:	f7fd f885 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 8009d16:	61b8      	str	r0, [r7, #24]
        break;
 8009d18:	e008      	b.n	8009d2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d1e:	61bb      	str	r3, [r7, #24]
        break;
 8009d20:	e004      	b.n	8009d2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	77bb      	strb	r3, [r7, #30]
        break;
 8009d2a:	bf00      	nop
    }

    if (pclk != 0U)
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d018      	beq.n	8009d64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	085a      	lsrs	r2, r3, #1
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	441a      	add	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	2b0f      	cmp	r3, #15
 8009d4a:	d909      	bls.n	8009d60 <UART_SetConfig+0x4a0>
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d52:	d205      	bcs.n	8009d60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60da      	str	r2, [r3, #12]
 8009d5e:	e001      	b.n	8009d64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009d70:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	40007c00 	.word	0x40007c00
 8009d80:	40023800 	.word	0x40023800
 8009d84:	00f42400 	.word	0x00f42400

08009d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	f003 0308 	and.w	r3, r3, #8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01a      	beq.n	8009e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e86:	d10a      	bne.n	8009e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
  }
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009edc:	f7f7 fec8 	bl	8001c70 <HAL_GetTick>
 8009ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d10e      	bne.n	8009f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f831 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e027      	b.n	8009f5e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d10e      	bne.n	8009f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f81b 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e011      	b.n	8009f5e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b09c      	sub	sp, #112	; 0x70
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f76:	e0a7      	b.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	f000 80a3 	beq.w	800a0c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7f7 fe75 	bl	8001c70 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d13f      	bne.n	800a018 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fac:	667b      	str	r3, [r7, #100]	; 0x64
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	f023 0301 	bic.w	r3, r3, #1
 8009fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2220      	movs	r2, #32
 800a002:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2220      	movs	r2, #32
 800a008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e068      	b.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	2b00      	cmp	r3, #0
 800a024:	d050      	beq.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a034:	d148      	bne.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a054:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34
 800a060:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e6      	bne.n	800a040 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3308      	adds	r3, #8
 800a078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	613b      	str	r3, [r7, #16]
   return(result);
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	66bb      	str	r3, [r7, #104]	; 0x68
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a092:	623a      	str	r2, [r7, #32]
 800a094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	69f9      	ldr	r1, [r7, #28]
 800a098:	6a3a      	ldr	r2, [r7, #32]
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e5      	bne.n	800a072 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e010      	b.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69da      	ldr	r2, [r3, #28]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	bf0c      	ite	eq
 800a0d8:	2301      	moveq	r3, #1
 800a0da:	2300      	movne	r3, #0
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	f43f af48 	beq.w	8009f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3770      	adds	r7, #112	; 0x70
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b096      	sub	sp, #88	; 0x58
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	88fa      	ldrh	r2, [r7, #6]
 800a10c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2222      	movs	r2, #34	; 0x22
 800a11c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a124:	2b00      	cmp	r3, #0
 800a126:	d028      	beq.n	800a17a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12c:	4a3e      	ldr	r2, [pc, #248]	; (800a228 <UART_Start_Receive_DMA+0x134>)
 800a12e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a134:	4a3d      	ldr	r2, [pc, #244]	; (800a22c <UART_Start_Receive_DMA+0x138>)
 800a136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13c:	4a3c      	ldr	r2, [pc, #240]	; (800a230 <UART_Start_Receive_DMA+0x13c>)
 800a13e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a144:	2200      	movs	r2, #0
 800a146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3324      	adds	r3, #36	; 0x24
 800a152:	4619      	mov	r1, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a158:	461a      	mov	r2, r3
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	f7f8 fb98 	bl	8002890 <HAL_DMA_Start_IT>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2210      	movs	r2, #16
 800a16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2220      	movs	r2, #32
 800a172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e051      	b.n	800a21e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d018      	beq.n	800a1b4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a196:	657b      	str	r3, [r7, #84]	; 0x54
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1d4:	637a      	str	r2, [r7, #52]	; 0x34
 800a1d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a208:	623a      	str	r2, [r7, #32]
 800a20a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	69f9      	ldr	r1, [r7, #28]
 800a20e:	6a3a      	ldr	r2, [r7, #32]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	61bb      	str	r3, [r7, #24]
   return(result);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e5      	bne.n	800a1e8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3758      	adds	r7, #88	; 0x58
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	0800a349 	.word	0x0800a349
 800a22c:	0800a471 	.word	0x0800a471
 800a230:	0800a4af 	.word	0x0800a4af

0800a234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a234:	b480      	push	{r7}
 800a236:	b089      	sub	sp, #36	; 0x24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	60bb      	str	r3, [r7, #8]
   return(result);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a250:	61fb      	str	r3, [r7, #28]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	61bb      	str	r3, [r7, #24]
 800a25c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6979      	ldr	r1, [r7, #20]
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	613b      	str	r3, [r7, #16]
   return(result);
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e6      	bne.n	800a23c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a274:	bf00      	nop
 800a276:	3724      	adds	r7, #36	; 0x24
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b095      	sub	sp, #84	; 0x54
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a29c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e6      	bne.n	800a288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d118      	bne.n	800a328 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	60bb      	str	r3, [r7, #8]
   return(result);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f023 0310 	bic.w	r3, r3, #16
 800a30a:	647b      	str	r3, [r7, #68]	; 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	6979      	ldr	r1, [r7, #20]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	613b      	str	r3, [r7, #16]
   return(result);
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e6      	bne.n	800a2f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a33c:	bf00      	nop
 800a33e:	3754      	adds	r7, #84	; 0x54
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b09c      	sub	sp, #112	; 0x70
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a35e:	d071      	beq.n	800a444 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a362:	2200      	movs	r2, #0
 800a364:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a37c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a386:	65bb      	str	r3, [r7, #88]	; 0x58
 800a388:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a38c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e6      	bne.n	800a368 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3ba:	647a      	str	r2, [r7, #68]	; 0x44
 800a3bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3c2:	e841 2300 	strex	r3, r2, [r1]
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e5      	bne.n	800a39a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e4:	663b      	str	r3, [r7, #96]	; 0x60
 800a3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3ee:	633a      	str	r2, [r7, #48]	; 0x30
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e5      	bne.n	800a3ce <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d118      	bne.n	800a444 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0310 	bic.w	r3, r3, #16
 800a426:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
 800a42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	69b9      	ldr	r1, [r7, #24]
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	617b      	str	r3, [r7, #20]
   return(result);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e6      	bne.n	800a412 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a446:	2200      	movs	r2, #0
 800a448:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d107      	bne.n	800a462 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a458:	4619      	mov	r1, r3
 800a45a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a45c:	f001 fd8c 	bl	800bf78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a460:	e002      	b.n	800a468 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a462:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a464:	f7ff fa04 	bl	8009870 <HAL_UART_RxCpltCallback>
}
 800a468:	bf00      	nop
 800a46a:	3770      	adds	r7, #112	; 0x70
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d109      	bne.n	800a4a0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a492:	085b      	lsrs	r3, r3, #1
 800a494:	b29b      	uxth	r3, r3
 800a496:	4619      	mov	r1, r3
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f001 fd6d 	bl	800bf78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a49e:	e002      	b.n	800a4a6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff f9ef 	bl	8009884 <HAL_UART_RxHalfCpltCallback>
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b086      	sub	sp, #24
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d4:	2b80      	cmp	r3, #128	; 0x80
 800a4d6:	d109      	bne.n	800a4ec <UART_DMAError+0x3e>
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b21      	cmp	r3, #33	; 0x21
 800a4dc:	d106      	bne.n	800a4ec <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a4e6:	6978      	ldr	r0, [r7, #20]
 800a4e8:	f7ff fea4 	bl	800a234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d109      	bne.n	800a50e <UART_DMAError+0x60>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b22      	cmp	r3, #34	; 0x22
 800a4fe:	d106      	bne.n	800a50e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a508:	6978      	ldr	r0, [r7, #20]
 800a50a:	f7ff feb9 	bl	800a280 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a514:	f043 0210 	orr.w	r2, r3, #16
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f7ff f9ba 	bl	8009898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a524:	bf00      	nop
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7ff f9a4 	bl	8009898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a574:	61fb      	str	r3, [r7, #28]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	461a      	mov	r2, r3
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	61bb      	str	r3, [r7, #24]
 800a580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a582:	6979      	ldr	r1, [r7, #20]
 800a584:	69ba      	ldr	r2, [r7, #24]
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	613b      	str	r3, [r7, #16]
   return(result);
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e6      	bne.n	800a560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff f95c 	bl	800985c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5a4:	bf00      	nop
 800a5a6:	3720      	adds	r7, #32
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08c      	sub	sp, #48	; 0x30
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d142      	bne.n	800a64a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e03b      	b.n	800a64c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7ff fd84 	bl	800a0f4 <UART_Start_Receive_DMA>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a5f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d124      	bne.n	800a644 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d11d      	bne.n	800a63e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2210      	movs	r2, #16
 800a608:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	617b      	str	r3, [r7, #20]
   return(result);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f043 0310 	orr.w	r3, r3, #16
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	627b      	str	r3, [r7, #36]	; 0x24
 800a62a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	61fb      	str	r3, [r7, #28]
   return(result);
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e6      	bne.n	800a60a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a63c:	e002      	b.n	800a644 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a648:	e000      	b.n	800a64c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
  }
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3730      	adds	r7, #48	; 0x30
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a654:	b084      	sub	sp, #16
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	f107 001c 	add.w	r0, r7, #28
 800a662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d120      	bne.n	800a6ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68da      	ldr	r2, [r3, #12]
 800a67c:	4b20      	ldr	r3, [pc, #128]	; (800a700 <USB_CoreInit+0xac>)
 800a67e:	4013      	ands	r3, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d105      	bne.n	800a6a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 fbee 	bl	800be84 <USB_CoreReset>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]
 800a6ac:	e010      	b.n	800a6d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 fbe2 	bl	800be84 <USB_CoreReset>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d10b      	bne.n	800a6ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f043 0206 	orr.w	r2, r3, #6
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f043 0220 	orr.w	r2, r3, #32
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6fa:	b004      	add	sp, #16
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	ffbdffbf 	.word	0xffbdffbf

0800a704 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d165      	bne.n	800a7e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4a41      	ldr	r2, [pc, #260]	; (800a820 <USB_SetTurnaroundTime+0x11c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d906      	bls.n	800a72e <USB_SetTurnaroundTime+0x2a>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a40      	ldr	r2, [pc, #256]	; (800a824 <USB_SetTurnaroundTime+0x120>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d202      	bcs.n	800a72e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a728:	230f      	movs	r3, #15
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e062      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <USB_SetTurnaroundTime+0x120>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d306      	bcc.n	800a744 <USB_SetTurnaroundTime+0x40>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a3b      	ldr	r2, [pc, #236]	; (800a828 <USB_SetTurnaroundTime+0x124>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d202      	bcs.n	800a744 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a73e:	230e      	movs	r3, #14
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	e057      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4a38      	ldr	r2, [pc, #224]	; (800a828 <USB_SetTurnaroundTime+0x124>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d306      	bcc.n	800a75a <USB_SetTurnaroundTime+0x56>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a37      	ldr	r2, [pc, #220]	; (800a82c <USB_SetTurnaroundTime+0x128>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d202      	bcs.n	800a75a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a754:	230d      	movs	r3, #13
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e04c      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	4a33      	ldr	r2, [pc, #204]	; (800a82c <USB_SetTurnaroundTime+0x128>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d306      	bcc.n	800a770 <USB_SetTurnaroundTime+0x6c>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a32      	ldr	r2, [pc, #200]	; (800a830 <USB_SetTurnaroundTime+0x12c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d802      	bhi.n	800a770 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a76a:	230c      	movs	r3, #12
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e041      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4a2f      	ldr	r2, [pc, #188]	; (800a830 <USB_SetTurnaroundTime+0x12c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d906      	bls.n	800a786 <USB_SetTurnaroundTime+0x82>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a2e      	ldr	r2, [pc, #184]	; (800a834 <USB_SetTurnaroundTime+0x130>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d802      	bhi.n	800a786 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a780:	230b      	movs	r3, #11
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e036      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4a2a      	ldr	r2, [pc, #168]	; (800a834 <USB_SetTurnaroundTime+0x130>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d906      	bls.n	800a79c <USB_SetTurnaroundTime+0x98>
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	4a29      	ldr	r2, [pc, #164]	; (800a838 <USB_SetTurnaroundTime+0x134>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d802      	bhi.n	800a79c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a796:	230a      	movs	r3, #10
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	e02b      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4a26      	ldr	r2, [pc, #152]	; (800a838 <USB_SetTurnaroundTime+0x134>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d906      	bls.n	800a7b2 <USB_SetTurnaroundTime+0xae>
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4a25      	ldr	r2, [pc, #148]	; (800a83c <USB_SetTurnaroundTime+0x138>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d202      	bcs.n	800a7b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a7ac:	2309      	movs	r3, #9
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e020      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	4a21      	ldr	r2, [pc, #132]	; (800a83c <USB_SetTurnaroundTime+0x138>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d306      	bcc.n	800a7c8 <USB_SetTurnaroundTime+0xc4>
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4a20      	ldr	r2, [pc, #128]	; (800a840 <USB_SetTurnaroundTime+0x13c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d802      	bhi.n	800a7c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	617b      	str	r3, [r7, #20]
 800a7c6:	e015      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4a1d      	ldr	r2, [pc, #116]	; (800a840 <USB_SetTurnaroundTime+0x13c>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d906      	bls.n	800a7de <USB_SetTurnaroundTime+0xda>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4a1c      	ldr	r2, [pc, #112]	; (800a844 <USB_SetTurnaroundTime+0x140>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d202      	bcs.n	800a7de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7d8:	2307      	movs	r3, #7
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e00a      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7de:	2306      	movs	r3, #6
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e007      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7ea:	2309      	movs	r3, #9
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	e001      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7f0:	2309      	movs	r3, #9
 800a7f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	029b      	lsls	r3, r3, #10
 800a808:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	371c      	adds	r7, #28
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	00d8acbf 	.word	0x00d8acbf
 800a824:	00e4e1c0 	.word	0x00e4e1c0
 800a828:	00f42400 	.word	0x00f42400
 800a82c:	01067380 	.word	0x01067380
 800a830:	011a499f 	.word	0x011a499f
 800a834:	01312cff 	.word	0x01312cff
 800a838:	014ca43f 	.word	0x014ca43f
 800a83c:	016e3600 	.word	0x016e3600
 800a840:	01a6ab1f 	.word	0x01a6ab1f
 800a844:	01e84800 	.word	0x01e84800

0800a848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f043 0201 	orr.w	r2, r3, #1
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d115      	bne.n	800a8da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	f7f7 f9e4 	bl	8001c88 <HAL_Delay>
      ms++;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fa4b 	bl	800bd62 <USB_GetMode>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d01e      	beq.n	800a910 <USB_SetCurrentMode+0x84>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b31      	cmp	r3, #49	; 0x31
 800a8d6:	d9f0      	bls.n	800a8ba <USB_SetCurrentMode+0x2e>
 800a8d8:	e01a      	b.n	800a910 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d115      	bne.n	800a90c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f7f7 f9cb 	bl	8001c88 <HAL_Delay>
      ms++;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 fa32 	bl	800bd62 <USB_GetMode>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <USB_SetCurrentMode+0x84>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b31      	cmp	r3, #49	; 0x31
 800a908:	d9f0      	bls.n	800a8ec <USB_SetCurrentMode+0x60>
 800a90a:	e001      	b.n	800a910 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e005      	b.n	800a91c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b32      	cmp	r3, #50	; 0x32
 800a914:	d101      	bne.n	800a91a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a924:	b084      	sub	sp, #16
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	e009      	b.n	800a958 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	3340      	adds	r3, #64	; 0x40
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	3301      	adds	r3, #1
 800a956:	613b      	str	r3, [r7, #16]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2b0e      	cmp	r3, #14
 800a95c:	d9f2      	bls.n	800a944 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d11c      	bne.n	800a99e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a972:	f043 0302 	orr.w	r3, r3, #2
 800a976:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	e005      	b.n	800a9aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9bc:	4619      	mov	r1, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	680b      	ldr	r3, [r1, #0]
 800a9c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d10c      	bne.n	800a9ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d104      	bne.n	800a9e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f965 	bl	800aca8 <USB_SetDevSpeed>
 800a9de:	e008      	b.n	800a9f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f960 	bl	800aca8 <USB_SetDevSpeed>
 800a9e8:	e003      	b.n	800a9f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9ea:	2103      	movs	r1, #3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f95b 	bl	800aca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9f2:	2110      	movs	r1, #16
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f8f3 	bl	800abe0 <USB_FlushTxFifo>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f91f 	bl	800ac48 <USB_FlushRxFifo>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa26:	461a      	mov	r2, r3
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	461a      	mov	r2, r3
 800aa34:	2300      	movs	r3, #0
 800aa36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	613b      	str	r3, [r7, #16]
 800aa3c:	e043      	b.n	800aac6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa54:	d118      	bne.n	800aa88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	e013      	b.n	800aa9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	e008      	b.n	800aa9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa94:	461a      	mov	r2, r3
 800aa96:	2300      	movs	r3, #0
 800aa98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab8:	461a      	mov	r2, r3
 800aaba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aabe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3301      	adds	r3, #1
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d3b7      	bcc.n	800aa3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	e043      	b.n	800ab5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaea:	d118      	bne.n	800ab1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	461a      	mov	r2, r3
 800ab00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	e013      	b.n	800ab30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab14:	461a      	mov	r2, r3
 800ab16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	e008      	b.n	800ab30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	613b      	str	r3, [r7, #16]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d3b7      	bcc.n	800aad4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d105      	bne.n	800ab98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f043 0210 	orr.w	r2, r3, #16
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699a      	ldr	r2, [r3, #24]
 800ab9c:	4b0e      	ldr	r3, [pc, #56]	; (800abd8 <USB_DevInit+0x2b4>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f043 0208 	orr.w	r2, r3, #8
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d105      	bne.n	800abc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	699a      	ldr	r2, [r3, #24]
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <USB_DevInit+0x2b8>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abd4:	b004      	add	sp, #16
 800abd6:	4770      	bx	lr
 800abd8:	803c3800 	.word	0x803c3800
 800abdc:	40000004 	.word	0x40000004

0800abe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3301      	adds	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a13      	ldr	r2, [pc, #76]	; (800ac44 <USB_FlushTxFifo+0x64>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d901      	bls.n	800ac00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e01b      	b.n	800ac38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	daf2      	bge.n	800abee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	019b      	lsls	r3, r3, #6
 800ac10:	f043 0220 	orr.w	r2, r3, #32
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4a08      	ldr	r2, [pc, #32]	; (800ac44 <USB_FlushTxFifo+0x64>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e006      	b.n	800ac38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d0f0      	beq.n	800ac18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	00030d40 	.word	0x00030d40

0800ac48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3301      	adds	r3, #1
 800ac58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4a11      	ldr	r2, [pc, #68]	; (800aca4 <USB_FlushRxFifo+0x5c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d901      	bls.n	800ac66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e018      	b.n	800ac98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	daf2      	bge.n	800ac54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2210      	movs	r2, #16
 800ac76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4a08      	ldr	r2, [pc, #32]	; (800aca4 <USB_FlushRxFifo+0x5c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d901      	bls.n	800ac8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e006      	b.n	800ac98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f003 0310 	and.w	r3, r3, #16
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	d0f0      	beq.n	800ac78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	00030d40 	.word	0x00030d40

0800aca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acc8:	4313      	orrs	r3, r2
 800acca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800acda:	b480      	push	{r7}
 800acdc:	b087      	sub	sp, #28
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f003 0306 	and.w	r3, r3, #6
 800acf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acfa:	2300      	movs	r3, #0
 800acfc:	75fb      	strb	r3, [r7, #23]
 800acfe:	e00a      	b.n	800ad16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d002      	beq.n	800ad0c <USB_GetDevSpeed+0x32>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b06      	cmp	r3, #6
 800ad0a:	d102      	bne.n	800ad12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	75fb      	strb	r3, [r7, #23]
 800ad10:	e001      	b.n	800ad16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad12:	230f      	movs	r3, #15
 800ad14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d139      	bne.n	800adb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	69da      	ldr	r2, [r3, #28]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	2101      	movs	r1, #1
 800ad52:	fa01 f303 	lsl.w	r3, r1, r3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	68f9      	ldr	r1, [r7, #12]
 800ad5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d153      	bne.n	800ae20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	791b      	ldrb	r3, [r3, #4]
 800ad92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	059b      	lsls	r3, r3, #22
 800ad9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	0159      	lsls	r1, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	440b      	add	r3, r1
 800ada6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adaa:	4619      	mov	r1, r3
 800adac:	4b20      	ldr	r3, [pc, #128]	; (800ae30 <USB_ActivateEndpoint+0x10c>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	600b      	str	r3, [r1, #0]
 800adb2:	e035      	b.n	800ae20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adba:	69da      	ldr	r2, [r3, #28]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	2101      	movs	r1, #1
 800adc6:	fa01 f303 	lsl.w	r3, r1, r3
 800adca:	041b      	lsls	r3, r3, #16
 800adcc:	68f9      	ldr	r1, [r7, #12]
 800adce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800add2:	4313      	orrs	r3, r2
 800add4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d119      	bne.n	800ae20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	791b      	ldrb	r3, [r3, #4]
 800ae06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	0159      	lsls	r1, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	440b      	add	r3, r1
 800ae14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <USB_ActivateEndpoint+0x10c>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	10008000 	.word	0x10008000

0800ae34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d161      	bne.n	800af14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae66:	d11f      	bne.n	800aea8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	2101      	movs	r1, #1
 800aeba:	fa01 f303 	lsl.w	r3, r1, r3
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	43db      	mvns	r3, r3
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aec8:	4013      	ands	r3, r2
 800aeca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed2:	69da      	ldr	r2, [r3, #28]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 030f 	and.w	r3, r3, #15
 800aedc:	2101      	movs	r1, #1
 800aede:	fa01 f303 	lsl.w	r3, r1, r3
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	43db      	mvns	r3, r3
 800aee6:	68f9      	ldr	r1, [r7, #12]
 800aee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeec:	4013      	ands	r3, r2
 800aeee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	0159      	lsls	r1, r3, #5
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	440b      	add	r3, r1
 800af06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0a:	4619      	mov	r1, r3
 800af0c:	4b35      	ldr	r3, [pc, #212]	; (800afe4 <USB_DeactivateEndpoint+0x1b0>)
 800af0e:	4013      	ands	r3, r2
 800af10:	600b      	str	r3, [r1, #0]
 800af12:	e060      	b.n	800afd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af2a:	d11f      	bne.n	800af6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	440a      	add	r2, r1
 800af42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	0151      	lsls	r1, r2, #5
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	440a      	add	r2, r1
 800af62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	2101      	movs	r1, #1
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	041b      	lsls	r3, r3, #16
 800af84:	43db      	mvns	r3, r3
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af8c:	4013      	ands	r3, r2
 800af8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af96:	69da      	ldr	r2, [r3, #28]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	f003 030f 	and.w	r3, r3, #15
 800afa0:	2101      	movs	r1, #1
 800afa2:	fa01 f303 	lsl.w	r3, r1, r3
 800afa6:	041b      	lsls	r3, r3, #16
 800afa8:	43db      	mvns	r3, r3
 800afaa:	68f9      	ldr	r1, [r7, #12]
 800afac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afb0:	4013      	ands	r3, r2
 800afb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	0159      	lsls	r1, r3, #5
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	440b      	add	r3, r1
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	4619      	mov	r1, r3
 800afd0:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <USB_DeactivateEndpoint+0x1b4>)
 800afd2:	4013      	ands	r3, r2
 800afd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	ec337800 	.word	0xec337800
 800afe8:	eff37800 	.word	0xeff37800

0800afec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	; 0x28
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	f040 8163 	bne.w	800b2d4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d132      	bne.n	800b07c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b022:	691a      	ldr	r2, [r3, #16]
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	0159      	lsls	r1, r3, #5
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	440b      	add	r3, r1
 800b02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b030:	4619      	mov	r1, r3
 800b032:	4ba5      	ldr	r3, [pc, #660]	; (800b2c8 <USB_EPStartXfer+0x2dc>)
 800b034:	4013      	ands	r3, r2
 800b036:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	691a      	ldr	r2, [r3, #16]
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	0159      	lsls	r1, r3, #5
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	440b      	add	r3, r1
 800b06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b072:	4619      	mov	r1, r3
 800b074:	4b95      	ldr	r3, [pc, #596]	; (800b2cc <USB_EPStartXfer+0x2e0>)
 800b076:	4013      	ands	r3, r2
 800b078:	610b      	str	r3, [r1, #16]
 800b07a:	e074      	b.n	800b166 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	0159      	lsls	r1, r3, #5
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	440b      	add	r3, r1
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	4619      	mov	r1, r3
 800b098:	4b8c      	ldr	r3, [pc, #560]	; (800b2cc <USB_EPStartXfer+0x2e0>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	0159      	lsls	r1, r3, #5
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	440b      	add	r3, r1
 800b0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4b83      	ldr	r3, [pc, #524]	; (800b2c8 <USB_EPStartXfer+0x2dc>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6999      	ldr	r1, [r3, #24]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	440b      	add	r3, r1
 800b0d8:	1e59      	subs	r1, r3, #1
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0e4:	4b7a      	ldr	r3, [pc, #488]	; (800b2d0 <USB_EPStartXfer+0x2e4>)
 800b0e6:	400b      	ands	r3, r1
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	0148      	lsls	r0, r1, #5
 800b0ec:	69f9      	ldr	r1, [r7, #28]
 800b0ee:	4401      	add	r1, r0
 800b0f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	691a      	ldr	r2, [r3, #16]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b10e:	69b9      	ldr	r1, [r7, #24]
 800b110:	0148      	lsls	r0, r1, #5
 800b112:	69f9      	ldr	r1, [r7, #28]
 800b114:	4401      	add	r1, r0
 800b116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b11a:	4313      	orrs	r3, r2
 800b11c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	791b      	ldrb	r3, [r3, #4]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d11f      	bne.n	800b166 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	0151      	lsls	r1, r2, #5
 800b138:	69fa      	ldr	r2, [r7, #28]
 800b13a:	440a      	add	r2, r1
 800b13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b140:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b144:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b164:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d14b      	bne.n	800b204 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d009      	beq.n	800b188 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b180:	461a      	mov	r2, r3
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	791b      	ldrb	r3, [r3, #4]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d128      	bne.n	800b1e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d110      	bne.n	800b1c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	e00f      	b.n	800b1e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	0151      	lsls	r1, r2, #5
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	440a      	add	r2, r1
 800b1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e137      	b.n	800b474 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b222:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	791b      	ldrb	r3, [r3, #4]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d015      	beq.n	800b258 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 811f 	beq.w	800b474 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	f003 030f 	and.w	r3, r3, #15
 800b246:	2101      	movs	r1, #1
 800b248:	fa01 f303 	lsl.w	r3, r1, r3
 800b24c:	69f9      	ldr	r1, [r7, #28]
 800b24e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b252:	4313      	orrs	r3, r2
 800b254:	634b      	str	r3, [r1, #52]	; 0x34
 800b256:	e10d      	b.n	800b474 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b264:	2b00      	cmp	r3, #0
 800b266:	d110      	bne.n	800b28a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	0151      	lsls	r1, r2, #5
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	440a      	add	r2, r1
 800b27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e00f      	b.n	800b2aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	69ba      	ldr	r2, [r7, #24]
 800b29a:	0151      	lsls	r1, r2, #5
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	440a      	add	r2, r1
 800b2a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	6919      	ldr	r1, [r3, #16]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	b298      	uxth	r0, r3
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4603      	mov	r3, r0
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 faea 	bl	800b898 <USB_WritePacket>
 800b2c4:	e0d6      	b.n	800b474 <USB_EPStartXfer+0x488>
 800b2c6:	bf00      	nop
 800b2c8:	e007ffff 	.word	0xe007ffff
 800b2cc:	fff80000 	.word	0xfff80000
 800b2d0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e0:	691a      	ldr	r2, [r3, #16]
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	0159      	lsls	r1, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	440b      	add	r3, r1
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4b63      	ldr	r3, [pc, #396]	; (800b480 <USB_EPStartXfer+0x494>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	0159      	lsls	r1, r3, #5
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	440b      	add	r3, r1
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	4619      	mov	r1, r3
 800b312:	4b5c      	ldr	r3, [pc, #368]	; (800b484 <USB_EPStartXfer+0x498>)
 800b314:	4013      	ands	r3, r2
 800b316:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d123      	bne.n	800b368 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b336:	69b9      	ldr	r1, [r7, #24]
 800b338:	0148      	lsls	r0, r1, #5
 800b33a:	69f9      	ldr	r1, [r7, #28]
 800b33c:	4401      	add	r1, r0
 800b33e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b342:	4313      	orrs	r3, r2
 800b344:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	0151      	lsls	r1, r2, #5
 800b358:	69fa      	ldr	r2, [r7, #28]
 800b35a:	440a      	add	r2, r1
 800b35c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b364:	6113      	str	r3, [r2, #16]
 800b366:	e037      	b.n	800b3d8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	699a      	ldr	r2, [r3, #24]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	4413      	add	r3, r2
 800b372:	1e5a      	subs	r2, r3, #1
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	8afa      	ldrh	r2, [r7, #22]
 800b384:	fb03 f202 	mul.w	r2, r3, r2
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b398:	691a      	ldr	r2, [r3, #16]
 800b39a:	8afb      	ldrh	r3, [r7, #22]
 800b39c:	04d9      	lsls	r1, r3, #19
 800b39e:	4b3a      	ldr	r3, [pc, #232]	; (800b488 <USB_EPStartXfer+0x49c>)
 800b3a0:	400b      	ands	r3, r1
 800b3a2:	69b9      	ldr	r1, [r7, #24]
 800b3a4:	0148      	lsls	r0, r1, #5
 800b3a6:	69f9      	ldr	r1, [r7, #28]
 800b3a8:	4401      	add	r1, r0
 800b3aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3be:	691a      	ldr	r2, [r3, #16]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	0148      	lsls	r0, r1, #5
 800b3cc:	69f9      	ldr	r1, [r7, #28]
 800b3ce:	4401      	add	r1, r0
 800b3d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d10d      	bne.n	800b3fa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d009      	beq.n	800b3fa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	6919      	ldr	r1, [r3, #16]
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d128      	bne.n	800b454 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d110      	bne.n	800b434 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b430:	6013      	str	r3, [r2, #0]
 800b432:	e00f      	b.n	800b454 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69ba      	ldr	r2, [r7, #24]
 800b444:	0151      	lsls	r1, r2, #5
 800b446:	69fa      	ldr	r2, [r7, #28]
 800b448:	440a      	add	r2, r1
 800b44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b452:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	0151      	lsls	r1, r2, #5
 800b466:	69fa      	ldr	r2, [r7, #28]
 800b468:	440a      	add	r2, r1
 800b46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b46e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	fff80000 	.word	0xfff80000
 800b484:	e007ffff 	.word	0xe007ffff
 800b488:	1ff80000 	.word	0x1ff80000

0800b48c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	4613      	mov	r3, r2
 800b498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	f040 80ce 	bne.w	800b64a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d132      	bne.n	800b51c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c2:	691a      	ldr	r2, [r3, #16]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	0159      	lsls	r1, r3, #5
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	440b      	add	r3, r1
 800b4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4b9a      	ldr	r3, [pc, #616]	; (800b73c <USB_EP0StartXfer+0x2b0>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	0159      	lsls	r1, r3, #5
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	440b      	add	r3, r1
 800b50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b512:	4619      	mov	r1, r3
 800b514:	4b8a      	ldr	r3, [pc, #552]	; (800b740 <USB_EP0StartXfer+0x2b4>)
 800b516:	4013      	ands	r3, r2
 800b518:	610b      	str	r3, [r1, #16]
 800b51a:	e04e      	b.n	800b5ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b528:	691a      	ldr	r2, [r3, #16]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	0159      	lsls	r1, r3, #5
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	440b      	add	r3, r1
 800b532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b536:	4619      	mov	r1, r3
 800b538:	4b81      	ldr	r3, [pc, #516]	; (800b740 <USB_EP0StartXfer+0x2b4>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54a:	691a      	ldr	r2, [r3, #16]
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	0159      	lsls	r1, r3, #5
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	440b      	add	r3, r1
 800b554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b558:	4619      	mov	r1, r3
 800b55a:	4b78      	ldr	r3, [pc, #480]	; (800b73c <USB_EP0StartXfer+0x2b0>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	699a      	ldr	r2, [r3, #24]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d903      	bls.n	800b574 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	68da      	ldr	r2, [r3, #12]
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5aa:	6939      	ldr	r1, [r7, #16]
 800b5ac:	0148      	lsls	r0, r1, #5
 800b5ae:	6979      	ldr	r1, [r7, #20]
 800b5b0:	4401      	add	r1, r0
 800b5b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d11e      	bne.n	800b5fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d009      	beq.n	800b5dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	0151      	lsls	r1, r2, #5
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	440a      	add	r2, r1
 800b5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	e097      	b.n	800b72e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b618:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b61c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8083 	beq.w	800b72e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	2101      	movs	r1, #1
 800b63a:	fa01 f303 	lsl.w	r3, r1, r3
 800b63e:	6979      	ldr	r1, [r7, #20]
 800b640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b644:	4313      	orrs	r3, r2
 800b646:	634b      	str	r3, [r1, #52]	; 0x34
 800b648:	e071      	b.n	800b72e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	0159      	lsls	r1, r3, #5
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	440b      	add	r3, r1
 800b660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b664:	4619      	mov	r1, r3
 800b666:	4b36      	ldr	r3, [pc, #216]	; (800b740 <USB_EP0StartXfer+0x2b4>)
 800b668:	4013      	ands	r3, r2
 800b66a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b678:	691a      	ldr	r2, [r3, #16]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	0159      	lsls	r1, r3, #5
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	440b      	add	r3, r1
 800b682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b686:	4619      	mov	r1, r3
 800b688:	4b2c      	ldr	r3, [pc, #176]	; (800b73c <USB_EP0StartXfer+0x2b0>)
 800b68a:	4013      	ands	r3, r2
 800b68c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	015a      	lsls	r2, r3, #5
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	0151      	lsls	r1, r2, #5
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	440a      	add	r2, r1
 800b6bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6dc:	6939      	ldr	r1, [r7, #16]
 800b6de:	0148      	lsls	r0, r1, #5
 800b6e0:	6979      	ldr	r1, [r7, #20]
 800b6e2:	4401      	add	r1, r0
 800b6e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d10d      	bne.n	800b70e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d009      	beq.n	800b70e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6919      	ldr	r1, [r3, #16]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70a:	460a      	mov	r2, r1
 800b70c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	0151      	lsls	r1, r2, #5
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	440a      	add	r2, r1
 800b724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b728:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b72c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	e007ffff 	.word	0xe007ffff
 800b740:	fff80000 	.word	0xfff80000

0800b744 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b744:	b480      	push	{r7}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d14a      	bne.n	800b7f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b77a:	f040 8086 	bne.w	800b88a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	0151      	lsls	r1, r2, #5
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	440a      	add	r2, r1
 800b798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d902      	bls.n	800b7dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b7da:	e056      	b.n	800b88a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7f4:	d0e7      	beq.n	800b7c6 <USB_EPStopXfer+0x82>
 800b7f6:	e048      	b.n	800b88a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	015a      	lsls	r2, r3, #5
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	4413      	add	r3, r2
 800b802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b810:	d13b      	bne.n	800b88a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b834:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	7812      	ldrb	r2, [r2, #0]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f242 7210 	movw	r2, #10000	; 0x2710
 800b866:	4293      	cmp	r3, r2
 800b868:	d902      	bls.n	800b870 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]
          break;
 800b86e:	e00c      	b.n	800b88a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b888:	d0e7      	beq.n	800b85a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b898:	b480      	push	{r7}
 800b89a:	b089      	sub	sp, #36	; 0x24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	71fb      	strb	r3, [r7, #7]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b8b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d123      	bne.n	800b906 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b8be:	88bb      	ldrh	r3, [r7, #4]
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	089b      	lsrs	r3, r3, #2
 800b8c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	e018      	b.n	800b8fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b8cc:	79fb      	ldrb	r3, [r7, #7]
 800b8ce:	031a      	lsls	r2, r3, #12
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d8:	461a      	mov	r2, r3
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	61bb      	str	r3, [r7, #24]
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	429a      	cmp	r2, r3
 800b904:	d3e2      	bcc.n	800b8cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3724      	adds	r7, #36	; 0x24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b914:	b480      	push	{r7}
 800b916:	b08b      	sub	sp, #44	; 0x2c
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4613      	mov	r3, r2
 800b920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b92a:	88fb      	ldrh	r3, [r7, #6]
 800b92c:	089b      	lsrs	r3, r3, #2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b93a:	2300      	movs	r3, #0
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	e014      	b.n	800b96a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	3301      	adds	r3, #1
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	3301      	adds	r3, #1
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	3301      	adds	r3, #1
 800b95c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	3301      	adds	r3, #1
 800b962:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	3301      	adds	r3, #1
 800b968:	623b      	str	r3, [r7, #32]
 800b96a:	6a3a      	ldr	r2, [r7, #32]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d3e6      	bcc.n	800b940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b972:	8bfb      	ldrh	r3, [r7, #30]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01e      	beq.n	800b9b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b982:	461a      	mov	r2, r3
 800b984:	f107 0310 	add.w	r3, r7, #16
 800b988:	6812      	ldr	r2, [r2, #0]
 800b98a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	fa22 f303 	lsr.w	r3, r2, r3
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	701a      	strb	r2, [r3, #0]
      i++;
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b9aa:	8bfb      	ldrh	r3, [r7, #30]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b9b0:	8bfb      	ldrh	r3, [r7, #30]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1ea      	bne.n	800b98c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	372c      	adds	r7, #44	; 0x2c
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d12c      	bne.n	800ba3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	db12      	blt.n	800ba18 <USB_EPSetStall+0x54>
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00f      	beq.n	800ba18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	0151      	lsls	r1, r2, #5
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	440a      	add	r2, r1
 800ba0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	015a      	lsls	r2, r3, #5
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	0151      	lsls	r1, r2, #5
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	440a      	add	r2, r1
 800ba2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	e02b      	b.n	800ba92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	db12      	blt.n	800ba72 <USB_EPSetStall+0xae>
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00f      	beq.n	800ba72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	015a      	lsls	r2, r3, #5
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	0151      	lsls	r1, r2, #5
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	440a      	add	r2, r1
 800ba68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	0151      	lsls	r1, r2, #5
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	440a      	add	r2, r1
 800ba88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	785b      	ldrb	r3, [r3, #1]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d128      	bne.n	800bb0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	0151      	lsls	r1, r2, #5
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	440a      	add	r2, r1
 800bad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bada:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	791b      	ldrb	r3, [r3, #4]
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d003      	beq.n	800baec <USB_EPClearStall+0x4c>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	791b      	ldrb	r3, [r3, #4]
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d138      	bne.n	800bb5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	0151      	lsls	r1, r2, #5
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	440a      	add	r2, r1
 800bb02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	e027      	b.n	800bb5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	0151      	lsls	r1, r2, #5
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	440a      	add	r2, r1
 800bb24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	791b      	ldrb	r3, [r3, #4]
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d003      	beq.n	800bb3e <USB_EPClearStall+0x9e>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	791b      	ldrb	r3, [r3, #4]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d10f      	bne.n	800bb5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	0151      	lsls	r1, r2, #5
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	440a      	add	r2, r1
 800bb54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bba0:	68f9      	ldr	r1, [r7, #12]
 800bba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bba6:	4313      	orrs	r3, r2
 800bba8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbe6:	f023 0302 	bic.w	r3, r3, #2
 800bbea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc28:	f043 0302 	orr.w	r3, r3, #2
 800bc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4013      	ands	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc54:	68fb      	ldr	r3, [r7, #12]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	4013      	ands	r3, r2
 800bc84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	0c1b      	lsrs	r3, r3, #16
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	b29b      	uxth	r3, r3
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b087      	sub	sp, #28
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	460b      	mov	r3, r1
 800bd10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd2a:	78fb      	ldrb	r3, [r7, #3]
 800bd2c:	f003 030f 	and.w	r3, r3, #15
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	fa22 f303 	lsr.w	r3, r2, r3
 800bd36:	01db      	lsls	r3, r3, #7
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	015a      	lsls	r2, r3, #5
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	4413      	add	r3, r2
 800bd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	4013      	ands	r3, r2
 800bd52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd54:	68bb      	ldr	r3, [r7, #8]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
	...

0800bd80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <USB_ActivateSetup+0x44>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	fffff800 	.word	0xfffff800

0800bdc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	333c      	adds	r3, #60	; 0x3c
 800bdde:	3304      	adds	r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	4a26      	ldr	r2, [pc, #152]	; (800be80 <USB_EP0_OutStart+0xb8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d90a      	bls.n	800be02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdfc:	d101      	bne.n	800be02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e037      	b.n	800be72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	461a      	mov	r2, r3
 800be0a:	2300      	movs	r3, #0
 800be0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	697a      	ldr	r2, [r7, #20]
 800be2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be30:	f043 0318 	orr.w	r3, r3, #24
 800be34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10f      	bne.n	800be70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be56:	461a      	mov	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	4f54300a 	.word	0x4f54300a

0800be84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4a13      	ldr	r2, [pc, #76]	; (800bee8 <USB_CoreReset+0x64>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d901      	bls.n	800bea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e01b      	b.n	800beda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	daf2      	bge.n	800be90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4a09      	ldr	r2, [pc, #36]	; (800bee8 <USB_CoreReset+0x64>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d901      	bls.n	800becc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e006      	b.n	800beda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d0f0      	beq.n	800beba <USB_CoreReset+0x36>

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	00030d40 	.word	0x00030d40

0800beec <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;

uint8_t HiL_Init_MSGQ (void) {
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 800bef0:	2200      	movs	r2, #0
 800bef2:	2104      	movs	r1, #4
 800bef4:	200a      	movs	r0, #10
 800bef6:	f002 fc35 	bl	800e764 <osMessageQueueNew>
 800befa:	4603      	mov	r3, r0
 800befc:	4a05      	ldr	r2, [pc, #20]	; (800bf14 <HiL_Init_MSGQ+0x28>)
 800befe:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 800bf00:	4b04      	ldr	r3, [pc, #16]	; (800bf14 <HiL_Init_MSGQ+0x28>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <HiL_Init_MSGQ+0x20>
	  return -1;
 800bf08:	23ff      	movs	r3, #255	; 0xff
 800bf0a:	e000      	b.n	800bf0e <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	2000070c 	.word	0x2000070c

0800bf18 <HAL_TIM_IC_CaptureCallback>:
uint8_t uart_main_buffer[HIL_UART_BUFFER_SIZE] = "Default";
extern uint8_t uart_rx_buffer[HIL_UART_BUFFER_SIZE];
extern UART_HandleTypeDef huart7;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising and falling edges
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a10      	ldr	r2, [pc, #64]	; (800bf68 <HAL_TIM_IC_CaptureCallback+0x50>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d11a      	bne.n	800bf60 <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		//#define TIMER_CLOCK_FREQ 96000000 // APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 732 Hz
																				// -> Tested lowest measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fc fd33 	bl	8008998 <HAL_TIM_ReadCapturedValue>
 800bf32:	4603      	mov	r3, r0
 800bf34:	3301      	adds	r3, #1
 800bf36:	4a0d      	ldr	r2, [pc, #52]	; (800bf6c <HAL_TIM_IC_CaptureCallback+0x54>)
 800bf38:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800bf3a:	2104      	movs	r1, #4
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7fc fd2b 	bl	8008998 <HAL_TIM_ReadCapturedValue>
 800bf42:	4603      	mov	r3, r0
 800bf44:	4a0a      	ldr	r2, [pc, #40]	; (800bf70 <HAL_TIM_IC_CaptureCallback+0x58>)
 800bf46:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <HAL_TIM_IC_CaptureCallback+0x58>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2264      	movs	r2, #100	; 0x64
 800bf4e:	fb03 f202 	mul.w	r2, r3, r2
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <HAL_TIM_IC_CaptureCallback+0x54>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800bf5e:	701a      	strb	r2, [r3, #0]
	}
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	40010000 	.word	0x40010000
 800bf6c:	200007f4 	.word	0x200007f4
 800bf70:	200007f8 	.word	0x200007f8
 800bf74:	200007fc 	.word	0x200007fc

0800bf78 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <HAL_UARTEx_RxEventCallback+0x34>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d10a      	bne.n	800bfa4 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(uart_main_buffer,uart_rx_buffer,Size);
 800bf8e:	887b      	ldrh	r3, [r7, #2]
 800bf90:	461a      	mov	r2, r3
 800bf92:	4907      	ldr	r1, [pc, #28]	; (800bfb0 <HAL_UARTEx_RxEventCallback+0x38>)
 800bf94:	4807      	ldr	r0, [pc, #28]	; (800bfb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 800bf96:	f006 f8b1 	bl	80120fc <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800bf9a:	2280      	movs	r2, #128	; 0x80
 800bf9c:	4904      	ldr	r1, [pc, #16]	; (800bfb0 <HAL_UARTEx_RxEventCallback+0x38>)
 800bf9e:	4806      	ldr	r0, [pc, #24]	; (800bfb8 <HAL_UARTEx_RxEventCallback+0x40>)
 800bfa0:	f7fe fb04 	bl	800a5ac <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40007800 	.word	0x40007800
 800bfb0:	20000710 	.word	0x20000710
 800bfb4:	2000000c 	.word	0x2000000c
 800bfb8:	20000610 	.word	0x20000610

0800bfbc <HiL_controller_copy_array>:

static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
 800bfc8:	e009      	b.n	800bfde <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	441a      	add	r2, r3
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	7811      	ldrb	r1, [r2, #0]
 800bfd4:	4a07      	ldr	r2, [pc, #28]	; (800bff4 <HiL_controller_copy_array+0x38>)
 800bfd6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d9f2      	bls.n	800bfca <HiL_controller_copy_array+0xe>
	}
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20000800 	.word	0x20000800

0800bff8 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c002:	2200      	movs	r2, #0
 800c004:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 800c006:	4b31      	ldr	r3, [pc, #196]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c008:	2200      	movs	r2, #0
 800c00a:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ffd5 	bl	800bfbc <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b03      	cmp	r3, #3
 800c018:	d847      	bhi.n	800c0aa <HiL_controller_read_message+0xb2>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <HiL_controller_read_message+0x28>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c031 	.word	0x0800c031
 800c024:	0800c037 	.word	0x0800c037
 800c028:	0800c065 	.word	0x0800c065
 800c02c:	0800c093 	.word	0x0800c093
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800c030:	f000 f84e 	bl	800c0d0 <HiL_controller_send_message>
			break;
 800c034:	e045      	b.n	800c0c2 <HiL_controller_read_message+0xca>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800c03a:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f000 f8db 	bl	800c200 <HiL_mcu_commands_binary_action>
 800c04a:	4603      	mov	r3, r0
 800c04c:	461a      	mov	r2, r3
 800c04e:	4b1f      	ldr	r3, [pc, #124]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c050:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c052:	4b1e      	ldr	r3, [pc, #120]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	4a1d      	ldr	r2, [pc, #116]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c058:	7852      	ldrb	r2, [r2, #1]
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f895 	bl	800c18c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 800c062:	e02e      	b.n	800c0c2 <HiL_controller_read_message+0xca>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800c068:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f000 f8a0 	bl	800c1b8 <HiL_mcu_commands_potentiometer_emulator>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c07e:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c080:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	4a11      	ldr	r2, [pc, #68]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c086:	7852      	ldrb	r2, [r2, #1]
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 f87e 	bl	800c18c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 800c090:	e017      	b.n	800c0c2 <HiL_controller_read_message+0xca>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800c092:	4b0e      	ldr	r3, [pc, #56]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c094:	2202      	movs	r2, #2
 800c096:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c098:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	4a0b      	ldr	r2, [pc, #44]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c09e:	7852      	ldrb	r2, [r2, #1]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f872 	bl	800c18c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800c0a8:	e00b      	b.n	800c0c2 <HiL_controller_read_message+0xca>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800c0aa:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	4a05      	ldr	r2, [pc, #20]	; (800c0cc <HiL_controller_read_message+0xd4>)
 800c0b6:	7852      	ldrb	r2, [r2, #1]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 f866 	bl	800c18c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000804 	.word	0x20000804

0800c0d0 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800c0d6:	4b2b      	ldr	r3, [pc, #172]	; (800c184 <HiL_controller_send_message+0xb4>)
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d027      	beq.n	800c12e <HiL_controller_send_message+0x5e>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	dc43      	bgt.n	800c16a <HiL_controller_send_message+0x9a>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <HiL_controller_send_message+0x1c>
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d012      	beq.n	800c110 <HiL_controller_send_message+0x40>
 800c0ea:	e03e      	b.n	800c16a <HiL_controller_send_message+0x9a>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800c0ec:	4b25      	ldr	r3, [pc, #148]	; (800c184 <HiL_controller_send_message+0xb4>)
 800c0ee:	789b      	ldrb	r3, [r3, #2]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f92f 	bl	800c354 <HiL_mcu_commands_binary_status>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4b23      	ldr	r3, [pc, #140]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c0fc:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c0fe:	4b22      	ldr	r3, [pc, #136]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	4a21      	ldr	r2, [pc, #132]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c104:	7852      	ldrb	r2, [r2, #1]
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 f83f 	bl	800c18c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800c10e:	e034      	b.n	800c17a <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_PWM:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800c110:	f000 f9aa 	bl	800c468 <HiL_mcu_commands_PWM_measure>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	4b1b      	ldr	r3, [pc, #108]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c11a:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c11c:	4b1a      	ldr	r3, [pc, #104]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	4a19      	ldr	r2, [pc, #100]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c122:	7852      	ldrb	r2, [r2, #1]
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f830 	bl	800c18c <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800c12c:	e025      	b.n	800c17a <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_DATA_STREAMS:

			if (recieved_data[CONTROLLER_GET_OBJECT] == DATA_STREAM_OBJECTS_UART)
 800c12e:	4b15      	ldr	r3, [pc, #84]	; (800c184 <HiL_controller_send_message+0xb4>)
 800c130:	789b      	ldrb	r3, [r3, #2]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d119      	bne.n	800c16a <HiL_controller_send_message+0x9a>
			{

				uint16_t function_return = HiL_mcu_commands_UART_handler(recieved_data[CONTROLLER_GET_ACTION]);
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <HiL_controller_send_message+0xb4>)
 800c138:	78db      	ldrb	r3, [r3, #3]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 f9b2 	bl	800c4a4 <HiL_mcu_commands_UART_handler>
 800c140:	4603      	mov	r3, r0
 800c142:	80fb      	strh	r3, [r7, #6]

				controller_reply[CONTROLLER_VALUE1] =  function_return       & 0xff;
 800c144:	88fb      	ldrh	r3, [r7, #6]
 800c146:	b2da      	uxtb	r2, r3
 800c148:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c14a:	701a      	strb	r2, [r3, #0]
				controller_reply[CONTROLLER_VALUE2] = (function_return >> 8) & 0xff;
 800c14c:	88fb      	ldrh	r3, [r7, #6]
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	b29b      	uxth	r3, r3
 800c152:	b2da      	uxtb	r2, r3
 800c154:	4b0c      	ldr	r3, [pc, #48]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c156:	705a      	strb	r2, [r3, #1]

				HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800c158:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	4a0a      	ldr	r2, [pc, #40]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c15e:	7852      	ldrb	r2, [r2, #1]
 800c160:	4611      	mov	r1, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f000 f812 	bl	800c18c <HiL_gateway_transmit_message>
										     controller_reply[CONTROLLER_VALUE2]);

				break;
 800c168:	e007      	b.n	800c17a <HiL_controller_send_message+0xaa>



		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800c16a:	4b07      	ldr	r3, [pc, #28]	; (800c188 <HiL_controller_send_message+0xb8>)
 800c16c:	2202      	movs	r2, #2
 800c16e:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 800c170:	2120      	movs	r1, #32
 800c172:	2000      	movs	r0, #0
 800c174:	f000 f80a 	bl	800c18c <HiL_gateway_transmit_message>
	}
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20000800 	.word	0x20000800
 800c188:	20000804 	.word	0x20000804

0800c18c <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	460a      	mov	r2, r1
 800c196:	71fb      	strb	r3, [r7, #7]
 800c198:	4613      	mov	r3, r2
 800c19a:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800c1a0:	79bb      	ldrb	r3, [r7, #6]
 800c1a2:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 800c1a4:	f107 030c 	add.w	r3, r7, #12
 800c1a8:	2102      	movs	r1, #2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f005 faa2 	bl	80116f4 <CDC_Transmit_FS>
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HiL_mcu_commands_potentiometer_emulator>:
uint8_t uart_main_buffer_pointer = 0;



uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	460a      	mov	r2, r1
 800c1c2:	71fb      	strb	r3, [r7, #7]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	79bb      	ldrb	r3, [r7, #6]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	021b      	lsls	r3, r3, #8
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	4413      	add	r3, r2
 800c1d6:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800c1d8:	89fb      	ldrh	r3, [r7, #14]
 800c1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1de:	d301      	bcc.n	800c1e4 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e006      	b.n	800c1f2 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 800c1e4:	89fb      	ldrh	r3, [r7, #14]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	4804      	ldr	r0, [pc, #16]	; (800c1fc <HiL_mcu_commands_potentiometer_emulator+0x44>)
 800c1ec:	f7f6 fa1a 	bl	8002624 <HAL_DAC_SetValue>
	return 0;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200003e4 	.word	0x200003e4

0800c200 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	460a      	mov	r2, r1
 800c20a:	71fb      	strb	r3, [r7, #7]
 800c20c:	4613      	mov	r3, r2
 800c20e:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 800c210:	79bb      	ldrb	r3, [r7, #6]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d102      	bne.n	800c21c <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800c216:	2301      	movs	r3, #1
 800c218:	73fb      	strb	r3, [r7, #15]
 800c21a:	e007      	b.n	800c22c <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 800c21c:	79bb      	ldrb	r3, [r7, #6]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d102      	bne.n	800c228 <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]
 800c226:	e001      	b.n	800c22c <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800c228:	2303      	movs	r3, #3
 800c22a:	e082      	b.n	800c332 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	2b0c      	cmp	r3, #12
 800c230:	d87c      	bhi.n	800c32c <HiL_mcu_commands_binary_action+0x12c>
 800c232:	a201      	add	r2, pc, #4	; (adr r2, 800c238 <HiL_mcu_commands_binary_action+0x38>)
 800c234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c238:	0800c26d 	.word	0x0800c26d
 800c23c:	0800c27d 	.word	0x0800c27d
 800c240:	0800c28d 	.word	0x0800c28d
 800c244:	0800c29b 	.word	0x0800c29b
 800c248:	0800c2ab 	.word	0x0800c2ab
 800c24c:	0800c2b9 	.word	0x0800c2b9
 800c250:	0800c2c7 	.word	0x0800c2c7
 800c254:	0800c2d5 	.word	0x0800c2d5
 800c258:	0800c2e3 	.word	0x0800c2e3
 800c25c:	0800c2f1 	.word	0x0800c2f1
 800c260:	0800c301 	.word	0x0800c301
 800c264:	0800c30f 	.word	0x0800c30f
 800c268:	0800c31f 	.word	0x0800c31f
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	461a      	mov	r2, r3
 800c270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c274:	4831      	ldr	r0, [pc, #196]	; (800c33c <HiL_mcu_commands_binary_action+0x13c>)
 800c276:	f7f7 fb5f 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c27a:	e059      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	461a      	mov	r2, r3
 800c280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c284:	482d      	ldr	r0, [pc, #180]	; (800c33c <HiL_mcu_commands_binary_action+0x13c>)
 800c286:	f7f7 fb57 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c28a:	e051      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	461a      	mov	r2, r3
 800c290:	2110      	movs	r1, #16
 800c292:	482a      	ldr	r0, [pc, #168]	; (800c33c <HiL_mcu_commands_binary_action+0x13c>)
 800c294:	f7f7 fb50 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c298:	e04a      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	461a      	mov	r2, r3
 800c29e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c2a2:	4826      	ldr	r0, [pc, #152]	; (800c33c <HiL_mcu_commands_binary_action+0x13c>)
 800c2a4:	f7f7 fb48 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2a8:	e042      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	2108      	movs	r1, #8
 800c2b0:	4823      	ldr	r0, [pc, #140]	; (800c340 <HiL_mcu_commands_binary_action+0x140>)
 800c2b2:	f7f7 fb41 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2b6:	e03b      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	2104      	movs	r1, #4
 800c2be:	4820      	ldr	r0, [pc, #128]	; (800c340 <HiL_mcu_commands_binary_action+0x140>)
 800c2c0:	f7f7 fb3a 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2c4:	e034      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	2110      	movs	r1, #16
 800c2cc:	481d      	ldr	r0, [pc, #116]	; (800c344 <HiL_mcu_commands_binary_action+0x144>)
 800c2ce:	f7f7 fb33 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2d2:	e02d      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	2120      	movs	r1, #32
 800c2da:	481a      	ldr	r0, [pc, #104]	; (800c344 <HiL_mcu_commands_binary_action+0x144>)
 800c2dc:	f7f7 fb2c 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2e0:	e026      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	2140      	movs	r1, #64	; 0x40
 800c2e8:	4816      	ldr	r0, [pc, #88]	; (800c344 <HiL_mcu_commands_binary_action+0x144>)
 800c2ea:	f7f7 fb25 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2ee:	e01f      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c2f8:	4813      	ldr	r0, [pc, #76]	; (800c348 <HiL_mcu_commands_binary_action+0x148>)
 800c2fa:	f7f7 fb1d 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c2fe:	e017      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	461a      	mov	r2, r3
 800c304:	2180      	movs	r1, #128	; 0x80
 800c306:	4811      	ldr	r0, [pc, #68]	; (800c34c <HiL_mcu_commands_binary_action+0x14c>)
 800c308:	f7f7 fb16 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c30c:	e010      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	461a      	mov	r2, r3
 800c312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c316:	480e      	ldr	r0, [pc, #56]	; (800c350 <HiL_mcu_commands_binary_action+0x150>)
 800c318:	f7f7 fb0e 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c31c:	e008      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	461a      	mov	r2, r3
 800c322:	2104      	movs	r1, #4
 800c324:	4807      	ldr	r0, [pc, #28]	; (800c344 <HiL_mcu_commands_binary_action+0x144>)
 800c326:	f7f7 fb07 	bl	8003938 <HAL_GPIO_WritePin>
			break;
 800c32a:	e001      	b.n	800c330 <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800c32c:	2302      	movs	r3, #2
 800c32e:	e000      	b.n	800c332 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800c330:	2300      	movs	r3, #0
	
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	40020400 	.word	0x40020400
 800c340:	40021800 	.word	0x40021800
 800c344:	40020c00 	.word	0x40020c00
 800c348:	40020800 	.word	0x40020800
 800c34c:	40021400 	.word	0x40021400
 800c350:	40020000 	.word	0x40020000

0800c354 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	2b0c      	cmp	r3, #12
 800c362:	d870      	bhi.n	800c446 <HiL_mcu_commands_binary_status+0xf2>
 800c364:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <HiL_mcu_commands_binary_status+0x18>)
 800c366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36a:	bf00      	nop
 800c36c:	0800c3a1 	.word	0x0800c3a1
 800c370:	0800c3af 	.word	0x0800c3af
 800c374:	0800c3bd 	.word	0x0800c3bd
 800c378:	0800c3c9 	.word	0x0800c3c9
 800c37c:	0800c3d7 	.word	0x0800c3d7
 800c380:	0800c3e3 	.word	0x0800c3e3
 800c384:	0800c3ef 	.word	0x0800c3ef
 800c388:	0800c3fb 	.word	0x0800c3fb
 800c38c:	0800c407 	.word	0x0800c407
 800c390:	0800c413 	.word	0x0800c413
 800c394:	0800c421 	.word	0x0800c421
 800c398:	0800c42d 	.word	0x0800c42d
 800c39c:	0800c43b 	.word	0x0800c43b
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800c3a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c3a4:	482a      	ldr	r0, [pc, #168]	; (800c450 <HiL_mcu_commands_binary_status+0xfc>)
 800c3a6:	f7f7 faaf 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	e04c      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800c3ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c3b2:	4827      	ldr	r0, [pc, #156]	; (800c450 <HiL_mcu_commands_binary_status+0xfc>)
 800c3b4:	f7f7 faa8 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	e045      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800c3bc:	2110      	movs	r1, #16
 800c3be:	4824      	ldr	r0, [pc, #144]	; (800c450 <HiL_mcu_commands_binary_status+0xfc>)
 800c3c0:	f7f7 faa2 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	e03f      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800c3c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c3cc:	4820      	ldr	r0, [pc, #128]	; (800c450 <HiL_mcu_commands_binary_status+0xfc>)
 800c3ce:	f7f7 fa9b 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	e038      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800c3d6:	2108      	movs	r1, #8
 800c3d8:	481e      	ldr	r0, [pc, #120]	; (800c454 <HiL_mcu_commands_binary_status+0x100>)
 800c3da:	f7f7 fa95 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	e032      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 800c3e2:	2104      	movs	r1, #4
 800c3e4:	481b      	ldr	r0, [pc, #108]	; (800c454 <HiL_mcu_commands_binary_status+0x100>)
 800c3e6:	f7f7 fa8f 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	e02c      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800c3ee:	2110      	movs	r1, #16
 800c3f0:	4819      	ldr	r0, [pc, #100]	; (800c458 <HiL_mcu_commands_binary_status+0x104>)
 800c3f2:	f7f7 fa89 	bl	8003908 <HAL_GPIO_ReadPin>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	e026      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800c3fa:	2120      	movs	r1, #32
 800c3fc:	4816      	ldr	r0, [pc, #88]	; (800c458 <HiL_mcu_commands_binary_status+0x104>)
 800c3fe:	f7f7 fa83 	bl	8003908 <HAL_GPIO_ReadPin>
 800c402:	4603      	mov	r3, r0
 800c404:	e020      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800c406:	2140      	movs	r1, #64	; 0x40
 800c408:	4813      	ldr	r0, [pc, #76]	; (800c458 <HiL_mcu_commands_binary_status+0x104>)
 800c40a:	f7f7 fa7d 	bl	8003908 <HAL_GPIO_ReadPin>
 800c40e:	4603      	mov	r3, r0
 800c410:	e01a      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 800c412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c416:	4811      	ldr	r0, [pc, #68]	; (800c45c <HiL_mcu_commands_binary_status+0x108>)
 800c418:	f7f7 fa76 	bl	8003908 <HAL_GPIO_ReadPin>
 800c41c:	4603      	mov	r3, r0
 800c41e:	e013      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800c420:	2180      	movs	r1, #128	; 0x80
 800c422:	480f      	ldr	r0, [pc, #60]	; (800c460 <HiL_mcu_commands_binary_status+0x10c>)
 800c424:	f7f7 fa70 	bl	8003908 <HAL_GPIO_ReadPin>
 800c428:	4603      	mov	r3, r0
 800c42a:	e00d      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 800c42c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c430:	480c      	ldr	r0, [pc, #48]	; (800c464 <HiL_mcu_commands_binary_status+0x110>)
 800c432:	f7f7 fa69 	bl	8003908 <HAL_GPIO_ReadPin>
 800c436:	4603      	mov	r3, r0
 800c438:	e006      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 800c43a:	2104      	movs	r1, #4
 800c43c:	4806      	ldr	r0, [pc, #24]	; (800c458 <HiL_mcu_commands_binary_status+0x104>)
 800c43e:	f7f7 fa63 	bl	8003908 <HAL_GPIO_ReadPin>
 800c442:	4603      	mov	r3, r0
 800c444:	e000      	b.n	800c448 <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800c446:	2302      	movs	r3, #2

	}
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	40020400 	.word	0x40020400
 800c454:	40021800 	.word	0x40021800
 800c458:	40020c00 	.word	0x40020c00
 800c45c:	40020800 	.word	0x40020800
 800c460:	40021400 	.word	0x40021400
 800c464:	40020000 	.word	0x40020000

0800c468 <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800c46c:	2100      	movs	r1, #0
 800c46e:	480b      	ldr	r0, [pc, #44]	; (800c49c <HiL_mcu_commands_PWM_measure+0x34>)
 800c470:	f7fb fdbc 	bl	8007fec <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800c474:	2104      	movs	r1, #4
 800c476:	4809      	ldr	r0, [pc, #36]	; (800c49c <HiL_mcu_commands_PWM_measure+0x34>)
 800c478:	f7fb fc42 	bl	8007d00 <HAL_TIM_IC_Start>

		osDelay(1);				//	Wait for  pwm-period to complete. Smallest tick time is currently 1 millisecond. PWM freq is 8 kHz, so this is slow
 800c47c:	2001      	movs	r0, #1
 800c47e:	f002 f943 	bl	800e708 <osDelay>

												   // Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800c482:	2100      	movs	r1, #0
 800c484:	4805      	ldr	r0, [pc, #20]	; (800c49c <HiL_mcu_commands_PWM_measure+0x34>)
 800c486:	f7fb ff01 	bl	800828c <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800c48a:	2104      	movs	r1, #4
 800c48c:	4803      	ldr	r0, [pc, #12]	; (800c49c <HiL_mcu_commands_PWM_measure+0x34>)
 800c48e:	f7fb fd3b 	bl	8007f08 <HAL_TIM_IC_Stop>

		return Duty;
 800c492:	4b03      	ldr	r3, [pc, #12]	; (800c4a0 <HiL_mcu_commands_PWM_measure+0x38>)
 800c494:	781b      	ldrb	r3, [r3, #0]
}
 800c496:	4618      	mov	r0, r3
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	200005c4 	.word	0x200005c4
 800c4a0:	200007fc 	.word	0x200007fc

0800c4a4 <HiL_mcu_commands_UART_handler>:


uint16_t HiL_mcu_commands_UART_handler (uint8_t controller_get_action)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	71fb      	strb	r3, [r7, #7]
	if (controller_get_action == 0)
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d104      	bne.n	800c4be <HiL_mcu_commands_UART_handler+0x1a>
	{
		uart_main_buffer_pointer = 0;
 800c4b4:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <HiL_mcu_commands_UART_handler+0x54>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	701a      	strb	r2, [r3, #0]
		return 0<<12; // transaction status: all good
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e016      	b.n	800c4ec <HiL_mcu_commands_UART_handler+0x48>
	}
	else
	{
		uint16_t return_value = uart_main_buffer[uart_main_buffer_pointer];
 800c4be:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <HiL_mcu_commands_UART_handler+0x54>)
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <HiL_mcu_commands_UART_handler+0x58>)
 800c4c6:	5c9b      	ldrb	r3, [r3, r2]
 800c4c8:	81fb      	strh	r3, [r7, #14]

		if (return_value != 0)
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00c      	beq.n	800c4ea <HiL_mcu_commands_UART_handler+0x46>
		{
			uart_main_buffer_pointer = (uart_main_buffer_pointer < HIL_UART_BUFFER_SIZE ? uart_main_buffer_pointer+1 : 0);
 800c4d0:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <HiL_mcu_commands_UART_handler+0x54>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	db04      	blt.n	800c4e4 <HiL_mcu_commands_UART_handler+0x40>
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <HiL_mcu_commands_UART_handler+0x54>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	e000      	b.n	800c4e6 <HiL_mcu_commands_UART_handler+0x42>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4a04      	ldr	r2, [pc, #16]	; (800c4f8 <HiL_mcu_commands_UART_handler+0x54>)
 800c4e8:	7013      	strb	r3, [r2, #0]
		}

		return return_value;
 800c4ea:	89fb      	ldrh	r3, [r7, #14]
	}

}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	20000806 	.word	0x20000806
 800c4fc:	2000000c 	.word	0x2000000c

0800c500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c50c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c510:	f005 fde4 	bl	80120dc <malloc>
 800c514:	4603      	mov	r3, r0
 800c516:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	32b0      	adds	r2, #176	; 0xb0
 800c528:	2100      	movs	r1, #0
 800c52a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c52e:	2302      	movs	r3, #2
 800c530:	e0d4      	b.n	800c6dc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c532:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c536:	2100      	movs	r1, #0
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f005 fded 	bl	8012118 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	32b0      	adds	r2, #176	; 0xb0
 800c548:	68f9      	ldr	r1, [r7, #12]
 800c54a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	32b0      	adds	r2, #176	; 0xb0
 800c558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7c1b      	ldrb	r3, [r3, #16]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d138      	bne.n	800c5dc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c56a:	4b5e      	ldr	r3, [pc, #376]	; (800c6e4 <USBD_CDC_Init+0x1e4>)
 800c56c:	7819      	ldrb	r1, [r3, #0]
 800c56e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c572:	2202      	movs	r2, #2
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f005 fbe2 	bl	8011d3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c57a:	4b5a      	ldr	r3, [pc, #360]	; (800c6e4 <USBD_CDC_Init+0x1e4>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f003 020f 	and.w	r2, r3, #15
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	3324      	adds	r3, #36	; 0x24
 800c590:	2201      	movs	r2, #1
 800c592:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c594:	4b54      	ldr	r3, [pc, #336]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c596:	7819      	ldrb	r1, [r3, #0]
 800c598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c59c:	2202      	movs	r2, #2
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f005 fbcd 	bl	8011d3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c5a4:	4b50      	ldr	r3, [pc, #320]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 020f 	and.w	r2, r3, #15
 800c5ac:	6879      	ldr	r1, [r7, #4]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	440b      	add	r3, r1
 800c5b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5bc:	2201      	movs	r2, #1
 800c5be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c5c0:	4b4a      	ldr	r3, [pc, #296]	; (800c6ec <USBD_CDC_Init+0x1ec>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	f003 020f 	and.w	r2, r3, #15
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	440b      	add	r3, r1
 800c5d4:	3326      	adds	r3, #38	; 0x26
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	801a      	strh	r2, [r3, #0]
 800c5da:	e035      	b.n	800c648 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c5dc:	4b41      	ldr	r3, [pc, #260]	; (800c6e4 <USBD_CDC_Init+0x1e4>)
 800c5de:	7819      	ldrb	r1, [r3, #0]
 800c5e0:	2340      	movs	r3, #64	; 0x40
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f005 fbaa 	bl	8011d3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c5ea:	4b3e      	ldr	r3, [pc, #248]	; (800c6e4 <USBD_CDC_Init+0x1e4>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	f003 020f 	and.w	r2, r3, #15
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	440b      	add	r3, r1
 800c5fe:	3324      	adds	r3, #36	; 0x24
 800c600:	2201      	movs	r2, #1
 800c602:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c604:	4b38      	ldr	r3, [pc, #224]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c606:	7819      	ldrb	r1, [r3, #0]
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	2202      	movs	r2, #2
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f005 fb96 	bl	8011d3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c612:	4b35      	ldr	r3, [pc, #212]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	f003 020f 	and.w	r2, r3, #15
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	440b      	add	r3, r1
 800c626:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c62a:	2201      	movs	r2, #1
 800c62c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c62e:	4b2f      	ldr	r3, [pc, #188]	; (800c6ec <USBD_CDC_Init+0x1ec>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	f003 020f 	and.w	r2, r3, #15
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	440b      	add	r3, r1
 800c642:	3326      	adds	r3, #38	; 0x26
 800c644:	2210      	movs	r2, #16
 800c646:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c648:	4b28      	ldr	r3, [pc, #160]	; (800c6ec <USBD_CDC_Init+0x1ec>)
 800c64a:	7819      	ldrb	r1, [r3, #0]
 800c64c:	2308      	movs	r3, #8
 800c64e:	2203      	movs	r2, #3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f005 fb74 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c656:	4b25      	ldr	r3, [pc, #148]	; (800c6ec <USBD_CDC_Init+0x1ec>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	f003 020f 	and.w	r2, r3, #15
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	440b      	add	r3, r1
 800c66a:	3324      	adds	r3, #36	; 0x24
 800c66c:	2201      	movs	r2, #1
 800c66e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	33b0      	adds	r3, #176	; 0xb0
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c6a6:	2302      	movs	r3, #2
 800c6a8:	e018      	b.n	800c6dc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7c1b      	ldrb	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c6b4:	7819      	ldrb	r1, [r3, #0]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f005 fc2b 	bl	8011f1c <USBD_LL_PrepareReceive>
 800c6c6:	e008      	b.n	800c6da <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6c8:	4b07      	ldr	r3, [pc, #28]	; (800c6e8 <USBD_CDC_Init+0x1e8>)
 800c6ca:	7819      	ldrb	r1, [r3, #0]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6d2:	2340      	movs	r3, #64	; 0x40
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f005 fc21 	bl	8011f1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20000113 	.word	0x20000113
 800c6e8:	20000114 	.word	0x20000114
 800c6ec:	20000115 	.word	0x20000115

0800c6f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c6fc:	4b3a      	ldr	r3, [pc, #232]	; (800c7e8 <USBD_CDC_DeInit+0xf8>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f005 fb41 	bl	8011d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c708:	4b37      	ldr	r3, [pc, #220]	; (800c7e8 <USBD_CDC_DeInit+0xf8>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	f003 020f 	and.w	r2, r3, #15
 800c710:	6879      	ldr	r1, [r7, #4]
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	440b      	add	r3, r1
 800c71c:	3324      	adds	r3, #36	; 0x24
 800c71e:	2200      	movs	r2, #0
 800c720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c722:	4b32      	ldr	r3, [pc, #200]	; (800c7ec <USBD_CDC_DeInit+0xfc>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f005 fb2e 	bl	8011d8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c72e:	4b2f      	ldr	r3, [pc, #188]	; (800c7ec <USBD_CDC_DeInit+0xfc>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	f003 020f 	and.w	r2, r3, #15
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c746:	2200      	movs	r2, #0
 800c748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c74a:	4b29      	ldr	r3, [pc, #164]	; (800c7f0 <USBD_CDC_DeInit+0x100>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f005 fb1a 	bl	8011d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c756:	4b26      	ldr	r3, [pc, #152]	; (800c7f0 <USBD_CDC_DeInit+0x100>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	f003 020f 	and.w	r2, r3, #15
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	440b      	add	r3, r1
 800c76a:	3324      	adds	r3, #36	; 0x24
 800c76c:	2200      	movs	r2, #0
 800c76e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c770:	4b1f      	ldr	r3, [pc, #124]	; (800c7f0 <USBD_CDC_DeInit+0x100>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f003 020f 	and.w	r2, r3, #15
 800c778:	6879      	ldr	r1, [r7, #4]
 800c77a:	4613      	mov	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	440b      	add	r3, r1
 800c784:	3326      	adds	r3, #38	; 0x26
 800c786:	2200      	movs	r2, #0
 800c788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	32b0      	adds	r2, #176	; 0xb0
 800c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01f      	beq.n	800c7dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	33b0      	adds	r3, #176	; 0xb0
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	32b0      	adds	r2, #176	; 0xb0
 800c7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f005 fc94 	bl	80120ec <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	32b0      	adds	r2, #176	; 0xb0
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000113 	.word	0x20000113
 800c7ec:	20000114 	.word	0x20000114
 800c7f0:	20000115 	.word	0x20000115

0800c7f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	32b0      	adds	r2, #176	; 0xb0
 800c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c820:	2303      	movs	r3, #3
 800c822:	e0bf      	b.n	800c9a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d050      	beq.n	800c8d2 <USBD_CDC_Setup+0xde>
 800c830:	2b20      	cmp	r3, #32
 800c832:	f040 80af 	bne.w	800c994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	88db      	ldrh	r3, [r3, #6]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d03a      	beq.n	800c8b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b25b      	sxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	da1b      	bge.n	800c880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	33b0      	adds	r3, #176	; 0xb0
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c85e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	88d2      	ldrh	r2, [r2, #6]
 800c864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	88db      	ldrh	r3, [r3, #6]
 800c86a:	2b07      	cmp	r3, #7
 800c86c:	bf28      	it	cs
 800c86e:	2307      	movcs	r3, #7
 800c870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	89fa      	ldrh	r2, [r7, #14]
 800c876:	4619      	mov	r1, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 fdad 	bl	800e3d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c87e:	e090      	b.n	800c9a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	785a      	ldrb	r2, [r3, #1]
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	88db      	ldrh	r3, [r3, #6]
 800c88e:	2b3f      	cmp	r3, #63	; 0x3f
 800c890:	d803      	bhi.n	800c89a <USBD_CDC_Setup+0xa6>
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	88db      	ldrh	r3, [r3, #6]
 800c896:	b2da      	uxtb	r2, r3
 800c898:	e000      	b.n	800c89c <USBD_CDC_Setup+0xa8>
 800c89a:	2240      	movs	r2, #64	; 0x40
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c8a2:	6939      	ldr	r1, [r7, #16]
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 fdbf 	bl	800e430 <USBD_CtlPrepareRx>
      break;
 800c8b2:	e076      	b.n	800c9a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	33b0      	adds	r3, #176	; 0xb0
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	7850      	ldrb	r0, [r2, #1]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	4798      	blx	r3
      break;
 800c8d0:	e067      	b.n	800c9a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	785b      	ldrb	r3, [r3, #1]
 800c8d6:	2b0b      	cmp	r3, #11
 800c8d8:	d851      	bhi.n	800c97e <USBD_CDC_Setup+0x18a>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <USBD_CDC_Setup+0xec>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c911 	.word	0x0800c911
 800c8e4:	0800c98d 	.word	0x0800c98d
 800c8e8:	0800c97f 	.word	0x0800c97f
 800c8ec:	0800c97f 	.word	0x0800c97f
 800c8f0:	0800c97f 	.word	0x0800c97f
 800c8f4:	0800c97f 	.word	0x0800c97f
 800c8f8:	0800c97f 	.word	0x0800c97f
 800c8fc:	0800c97f 	.word	0x0800c97f
 800c900:	0800c97f 	.word	0x0800c97f
 800c904:	0800c97f 	.word	0x0800c97f
 800c908:	0800c93b 	.word	0x0800c93b
 800c90c:	0800c965 	.word	0x0800c965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d107      	bne.n	800c92c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c91c:	f107 030a 	add.w	r3, r7, #10
 800c920:	2202      	movs	r2, #2
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f001 fd57 	bl	800e3d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c92a:	e032      	b.n	800c992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f001 fce1 	bl	800e2f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c934:	2303      	movs	r3, #3
 800c936:	75fb      	strb	r3, [r7, #23]
          break;
 800c938:	e02b      	b.n	800c992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b03      	cmp	r3, #3
 800c944:	d107      	bne.n	800c956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c946:	f107 030d 	add.w	r3, r7, #13
 800c94a:	2201      	movs	r2, #1
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f001 fd42 	bl	800e3d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c954:	e01d      	b.n	800c992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f001 fccc 	bl	800e2f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c95e:	2303      	movs	r3, #3
 800c960:	75fb      	strb	r3, [r7, #23]
          break;
 800c962:	e016      	b.n	800c992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d00f      	beq.n	800c990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 fcbf 	bl	800e2f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c978:	2303      	movs	r3, #3
 800c97a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c97c:	e008      	b.n	800c990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 fcb8 	bl	800e2f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c986:	2303      	movs	r3, #3
 800c988:	75fb      	strb	r3, [r7, #23]
          break;
 800c98a:	e002      	b.n	800c992 <USBD_CDC_Setup+0x19e>
          break;
 800c98c:	bf00      	nop
 800c98e:	e008      	b.n	800c9a2 <USBD_CDC_Setup+0x1ae>
          break;
 800c990:	bf00      	nop
      }
      break;
 800c992:	e006      	b.n	800c9a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f001 fcad 	bl	800e2f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c99c:	2303      	movs	r3, #3
 800c99e:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	32b0      	adds	r2, #176	; 0xb0
 800c9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e065      	b.n	800caa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	32b0      	adds	r2, #176	; 0xb0
 800c9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c9e6:	78fb      	ldrb	r3, [r7, #3]
 800c9e8:	f003 020f 	and.w	r2, r3, #15
 800c9ec:	6879      	ldr	r1, [r7, #4]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	440b      	add	r3, r1
 800c9f8:	3318      	adds	r3, #24
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02f      	beq.n	800ca60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	f003 020f 	and.w	r2, r3, #15
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	4413      	add	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	440b      	add	r3, r1
 800ca12:	3318      	adds	r3, #24
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	78fb      	ldrb	r3, [r7, #3]
 800ca18:	f003 010f 	and.w	r1, r3, #15
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	440b      	add	r3, r1
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	4403      	add	r3, r0
 800ca28:	3348      	adds	r3, #72	; 0x48
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca30:	fb01 f303 	mul.w	r3, r1, r3
 800ca34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d112      	bne.n	800ca60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	f003 020f 	and.w	r2, r3, #15
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	440b      	add	r3, r1
 800ca4c:	3318      	adds	r3, #24
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca52:	78f9      	ldrb	r1, [r7, #3]
 800ca54:	2300      	movs	r3, #0
 800ca56:	2200      	movs	r2, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f005 fa3e 	bl	8011eda <USBD_LL_Transmit>
 800ca5e:	e01f      	b.n	800caa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	33b0      	adds	r3, #176	; 0xb0
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d010      	beq.n	800caa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	33b0      	adds	r3, #176	; 0xb0
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ca9c:	78fa      	ldrb	r2, [r7, #3]
 800ca9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	460b      	mov	r3, r1
 800cab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	32b0      	adds	r2, #176	; 0xb0
 800cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	32b0      	adds	r2, #176	; 0xb0
 800cad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d101      	bne.n	800cadc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	e01a      	b.n	800cb12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f005 fa3c 	bl	8011f5e <USBD_LL_GetRxDataSize>
 800cae6:	4602      	mov	r2, r0
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	33b0      	adds	r3, #176	; 0xb0
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	32b0      	adds	r2, #176	; 0xb0
 800cb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e025      	b.n	800cb88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	33b0      	adds	r3, #176	; 0xb0
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01a      	beq.n	800cb86 <USBD_CDC_EP0_RxReady+0x6c>
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cb56:	2bff      	cmp	r3, #255	; 0xff
 800cb58:	d015      	beq.n	800cb86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	33b0      	adds	r3, #176	; 0xb0
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cb72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb7a:	b292      	uxth	r2, r2
 800cb7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	22ff      	movs	r2, #255	; 0xff
 800cb82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb98:	2182      	movs	r1, #130	; 0x82
 800cb9a:	4818      	ldr	r0, [pc, #96]	; (800cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb9c:	f000 fd49 	bl	800d632 <USBD_GetEpDesc>
 800cba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cba2:	2101      	movs	r1, #1
 800cba4:	4815      	ldr	r0, [pc, #84]	; (800cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cba6:	f000 fd44 	bl	800d632 <USBD_GetEpDesc>
 800cbaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cbac:	2181      	movs	r1, #129	; 0x81
 800cbae:	4813      	ldr	r0, [pc, #76]	; (800cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbb0:	f000 fd3f 	bl	800d632 <USBD_GetEpDesc>
 800cbb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2210      	movs	r2, #16
 800cbc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbd0:	711a      	strb	r2, [r3, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d006      	beq.n	800cbea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbe4:	711a      	strb	r2, [r3, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2243      	movs	r2, #67	; 0x43
 800cbee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cbf0:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3718      	adds	r7, #24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	200000d0 	.word	0x200000d0

0800cc00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc08:	2182      	movs	r1, #130	; 0x82
 800cc0a:	4818      	ldr	r0, [pc, #96]	; (800cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc0c:	f000 fd11 	bl	800d632 <USBD_GetEpDesc>
 800cc10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc12:	2101      	movs	r1, #1
 800cc14:	4815      	ldr	r0, [pc, #84]	; (800cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc16:	f000 fd0c 	bl	800d632 <USBD_GetEpDesc>
 800cc1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc1c:	2181      	movs	r1, #129	; 0x81
 800cc1e:	4813      	ldr	r0, [pc, #76]	; (800cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc20:	f000 fd07 	bl	800d632 <USBD_GetEpDesc>
 800cc24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	2210      	movs	r2, #16
 800cc30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	711a      	strb	r2, [r3, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f042 0202 	orr.w	r2, r2, #2
 800cc44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d006      	beq.n	800cc5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	711a      	strb	r2, [r3, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f042 0202 	orr.w	r2, r2, #2
 800cc58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2243      	movs	r2, #67	; 0x43
 800cc5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc60:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3718      	adds	r7, #24
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200000d0 	.word	0x200000d0

0800cc70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc78:	2182      	movs	r1, #130	; 0x82
 800cc7a:	4818      	ldr	r0, [pc, #96]	; (800ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc7c:	f000 fcd9 	bl	800d632 <USBD_GetEpDesc>
 800cc80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc82:	2101      	movs	r1, #1
 800cc84:	4815      	ldr	r0, [pc, #84]	; (800ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc86:	f000 fcd4 	bl	800d632 <USBD_GetEpDesc>
 800cc8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc8c:	2181      	movs	r1, #129	; 0x81
 800cc8e:	4813      	ldr	r0, [pc, #76]	; (800ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc90:	f000 fccf 	bl	800d632 <USBD_GetEpDesc>
 800cc94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2210      	movs	r2, #16
 800cca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d006      	beq.n	800ccb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccb0:	711a      	strb	r2, [r3, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d006      	beq.n	800ccca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccc4:	711a      	strb	r2, [r3, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2243      	movs	r2, #67	; 0x43
 800ccce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccd0:	4b02      	ldr	r3, [pc, #8]	; (800ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	200000d0 	.word	0x200000d0

0800cce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	220a      	movs	r2, #10
 800ccec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ccee:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	2000008c 	.word	0x2000008c

0800cd00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e009      	b.n	800cd28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	33b0      	adds	r3, #176	; 0xb0
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4413      	add	r3, r2
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	32b0      	adds	r2, #176	; 0xb0
 800cd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e008      	b.n	800cd6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	32b0      	adds	r2, #176	; 0xb0
 800cd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e004      	b.n	800cda6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
	...

0800cdb4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	32b0      	adds	r2, #176	; 0xb0
 800cdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e025      	b.n	800ce26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d11f      	bne.n	800ce24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <USBD_CDC_TransmitPacket+0x7c>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f003 020f 	and.w	r2, r3, #15
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4403      	add	r3, r0
 800ce06:	3318      	adds	r3, #24
 800ce08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ce0a:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <USBD_CDC_TransmitPacket+0x7c>)
 800ce0c:	7819      	ldrb	r1, [r3, #0]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f005 f85d 	bl	8011eda <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20000113 	.word	0x20000113

0800ce34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	32b0      	adds	r2, #176	; 0xb0
 800ce46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	32b0      	adds	r2, #176	; 0xb0
 800ce56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	e018      	b.n	800ce94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	7c1b      	ldrb	r3, [r3, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce6a:	4b0c      	ldr	r3, [pc, #48]	; (800ce9c <USBD_CDC_ReceivePacket+0x68>)
 800ce6c:	7819      	ldrb	r1, [r3, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f005 f84f 	bl	8011f1c <USBD_LL_PrepareReceive>
 800ce7e:	e008      	b.n	800ce92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce80:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <USBD_CDC_ReceivePacket+0x68>)
 800ce82:	7819      	ldrb	r1, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce8a:	2340      	movs	r3, #64	; 0x40
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f005 f845 	bl	8011f1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000114 	.word	0x20000114

0800cea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e01f      	b.n	800cef8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	79fa      	ldrb	r2, [r7, #7]
 800ceea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f004 febf 	bl	8011c70 <USBD_LL_Init>
 800cef2:	4603      	mov	r3, r0
 800cef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e025      	b.n	800cf64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	32ae      	adds	r2, #174	; 0xae
 800cf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00f      	beq.n	800cf54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	32ae      	adds	r2, #174	; 0xae
 800cf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	f107 020e 	add.w	r2, r7, #14
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4798      	blx	r3
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f004 fec7 	bl	8011d08 <USBD_LL_Start>
 800cf7a:	4603      	mov	r3, r0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d009      	beq.n	800cfc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	78fa      	ldrb	r2, [r7, #3]
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	4798      	blx	r3
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	78fa      	ldrb	r2, [r7, #3]
 800cfec:	4611      	mov	r1, r2
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	4798      	blx	r3
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cff8:	2303      	movs	r3, #3
 800cffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	4618      	mov	r0, r3
 800d01a:	f001 f932 	bl	800e282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d02c:	461a      	mov	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d03a:	f003 031f 	and.w	r3, r3, #31
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d01a      	beq.n	800d078 <USBD_LL_SetupStage+0x72>
 800d042:	2b02      	cmp	r3, #2
 800d044:	d822      	bhi.n	800d08c <USBD_LL_SetupStage+0x86>
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <USBD_LL_SetupStage+0x4a>
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d00a      	beq.n	800d064 <USBD_LL_SetupStage+0x5e>
 800d04e:	e01d      	b.n	800d08c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fb5f 	bl	800d71c <USBD_StdDevReq>
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]
      break;
 800d062:	e020      	b.n	800d0a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fbc7 	bl	800d800 <USBD_StdItfReq>
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]
      break;
 800d076:	e016      	b.n	800d0a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fc29 	bl	800d8d8 <USBD_StdEPReq>
 800d086:	4603      	mov	r3, r0
 800d088:	73fb      	strb	r3, [r7, #15]
      break;
 800d08a:	e00c      	b.n	800d0a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d096:	b2db      	uxtb	r3, r3
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f004 fe94 	bl	8011dc8 <USBD_LL_StallEP>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a4:	bf00      	nop
  }

  return ret;
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d0c2:	7afb      	ldrb	r3, [r7, #11]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d16e      	bne.n	800d1a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d0ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	f040 8098 	bne.w	800d20c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	689a      	ldr	r2, [r3, #8]
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d913      	bls.n	800d110 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	689a      	ldr	r2, [r3, #8]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	1ad2      	subs	r2, r2, r3
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	68da      	ldr	r2, [r3, #12]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	4293      	cmp	r3, r2
 800d100:	bf28      	it	cs
 800d102:	4613      	movcs	r3, r2
 800d104:	461a      	mov	r2, r3
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f001 f9ae 	bl	800e46a <USBD_CtlContinueRx>
 800d10e:	e07d      	b.n	800d20c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d116:	f003 031f 	and.w	r3, r3, #31
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d014      	beq.n	800d148 <USBD_LL_DataOutStage+0x98>
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d81d      	bhi.n	800d15e <USBD_LL_DataOutStage+0xae>
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <USBD_LL_DataOutStage+0x7c>
 800d126:	2b01      	cmp	r3, #1
 800d128:	d003      	beq.n	800d132 <USBD_LL_DataOutStage+0x82>
 800d12a:	e018      	b.n	800d15e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	75bb      	strb	r3, [r7, #22]
            break;
 800d130:	e018      	b.n	800d164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	4619      	mov	r1, r3
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 fa5e 	bl	800d5fe <USBD_CoreFindIF>
 800d142:	4603      	mov	r3, r0
 800d144:	75bb      	strb	r3, [r7, #22]
            break;
 800d146:	e00d      	b.n	800d164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	4619      	mov	r1, r3
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f000 fa60 	bl	800d618 <USBD_CoreFindEP>
 800d158:	4603      	mov	r3, r0
 800d15a:	75bb      	strb	r3, [r7, #22]
            break;
 800d15c:	e002      	b.n	800d164 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d15e:	2300      	movs	r3, #0
 800d160:	75bb      	strb	r3, [r7, #22]
            break;
 800d162:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d164:	7dbb      	ldrb	r3, [r7, #22]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d119      	bne.n	800d19e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b03      	cmp	r3, #3
 800d174:	d113      	bne.n	800d19e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d176:	7dba      	ldrb	r2, [r7, #22]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	32ae      	adds	r2, #174	; 0xae
 800d17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00b      	beq.n	800d19e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d186:	7dba      	ldrb	r2, [r7, #22]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d18e:	7dba      	ldrb	r2, [r7, #22]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	32ae      	adds	r2, #174	; 0xae
 800d194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f001 f974 	bl	800e48c <USBD_CtlSendStatus>
 800d1a4:	e032      	b.n	800d20c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d1a6:	7afb      	ldrb	r3, [r7, #11]
 800d1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 fa31 	bl	800d618 <USBD_CoreFindEP>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1ba:	7dbb      	ldrb	r3, [r7, #22]
 800d1bc:	2bff      	cmp	r3, #255	; 0xff
 800d1be:	d025      	beq.n	800d20c <USBD_LL_DataOutStage+0x15c>
 800d1c0:	7dbb      	ldrb	r3, [r7, #22]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d122      	bne.n	800d20c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d117      	bne.n	800d202 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d1d2:	7dba      	ldrb	r2, [r7, #22]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	32ae      	adds	r2, #174	; 0xae
 800d1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00f      	beq.n	800d202 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d1e2:	7dba      	ldrb	r2, [r7, #22]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d1ea:	7dba      	ldrb	r2, [r7, #22]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	32ae      	adds	r2, #174	; 0xae
 800d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	7afa      	ldrb	r2, [r7, #11]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	4798      	blx	r3
 800d1fe:	4603      	mov	r3, r0
 800d200:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	e000      	b.n	800d20e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b086      	sub	sp, #24
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	460b      	mov	r3, r1
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d224:	7afb      	ldrb	r3, [r7, #11]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d16f      	bne.n	800d30a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3314      	adds	r3, #20
 800d22e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d236:	2b02      	cmp	r3, #2
 800d238:	d15a      	bne.n	800d2f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	429a      	cmp	r2, r3
 800d244:	d914      	bls.n	800d270 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	689a      	ldr	r2, [r3, #8]
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	1ad2      	subs	r2, r2, r3
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	461a      	mov	r2, r3
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f001 f8d6 	bl	800e40e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d262:	2300      	movs	r3, #0
 800d264:	2200      	movs	r2, #0
 800d266:	2100      	movs	r1, #0
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f004 fe57 	bl	8011f1c <USBD_LL_PrepareReceive>
 800d26e:	e03f      	b.n	800d2f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	68da      	ldr	r2, [r3, #12]
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d11c      	bne.n	800d2b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d284:	429a      	cmp	r2, r3
 800d286:	d316      	bcc.n	800d2b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d292:	429a      	cmp	r2, r3
 800d294:	d20f      	bcs.n	800d2b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d296:	2200      	movs	r2, #0
 800d298:	2100      	movs	r1, #0
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f001 f8b7 	bl	800e40e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f004 fe34 	bl	8011f1c <USBD_LL_PrepareReceive>
 800d2b4:	e01c      	b.n	800d2f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d10f      	bne.n	800d2e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d009      	beq.n	800d2e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2e2:	2180      	movs	r1, #128	; 0x80
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f004 fd6f 	bl	8011dc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f001 f8e1 	bl	800e4b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d03a      	beq.n	800d370 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7ff fe42 	bl	800cf84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d308:	e032      	b.n	800d370 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d30a:	7afb      	ldrb	r3, [r7, #11]
 800d30c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d310:	b2db      	uxtb	r3, r3
 800d312:	4619      	mov	r1, r3
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f97f 	bl	800d618 <USBD_CoreFindEP>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	2bff      	cmp	r3, #255	; 0xff
 800d322:	d025      	beq.n	800d370 <USBD_LL_DataInStage+0x15a>
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d122      	bne.n	800d370 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b03      	cmp	r3, #3
 800d334:	d11c      	bne.n	800d370 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d336:	7dfa      	ldrb	r2, [r7, #23]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	32ae      	adds	r2, #174	; 0xae
 800d33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d014      	beq.n	800d370 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d346:	7dfa      	ldrb	r2, [r7, #23]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d34e:	7dfa      	ldrb	r2, [r7, #23]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	32ae      	adds	r2, #174	; 0xae
 800d354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	7afa      	ldrb	r2, [r7, #11]
 800d35c:	4611      	mov	r1, r2
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	4798      	blx	r3
 800d362:	4603      	mov	r3, r0
 800d364:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d366:	7dbb      	ldrb	r3, [r7, #22]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d36c:	7dbb      	ldrb	r3, [r7, #22]
 800d36e:	e000      	b.n	800d372 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d014      	beq.n	800d3e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00e      	beq.n	800d3e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6852      	ldr	r2, [r2, #4]
 800d3ce:	b2d2      	uxtb	r2, r2
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	4798      	blx	r3
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3e0:	2340      	movs	r3, #64	; 0x40
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f004 fca9 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2240      	movs	r2, #64	; 0x40
 800d3f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	2200      	movs	r2, #0
 800d400:	2180      	movs	r1, #128	; 0x80
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f004 fc9b 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2240      	movs	r2, #64	; 0x40
 800d412:	621a      	str	r2, [r3, #32]

  return ret;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d41e:	b480      	push	{r7}
 800d420:	b083      	sub	sp, #12
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	460b      	mov	r3, r1
 800d428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	78fa      	ldrb	r2, [r7, #3]
 800d42e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2204      	movs	r2, #4
 800d458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b083      	sub	sp, #12
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	d106      	bne.n	800d48c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d484:	b2da      	uxtb	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d48c:	2300      	movs	r3, #0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b082      	sub	sp, #8
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d110      	bne.n	800d4d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00b      	beq.n	800d4d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4be:	69db      	ldr	r3, [r3, #28]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d005      	beq.n	800d4d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	69db      	ldr	r3, [r3, #28]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	32ae      	adds	r2, #174	; 0xae
 800d4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e01c      	b.n	800d536 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b03      	cmp	r3, #3
 800d506:	d115      	bne.n	800d534 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	32ae      	adds	r2, #174	; 0xae
 800d512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	32ae      	adds	r2, #174	; 0xae
 800d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	78fa      	ldrb	r2, [r7, #3]
 800d52e:	4611      	mov	r1, r2
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	460b      	mov	r3, r1
 800d548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	32ae      	adds	r2, #174	; 0xae
 800d554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e01c      	b.n	800d59a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d115      	bne.n	800d598 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	32ae      	adds	r2, #174	; 0xae
 800d576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	32ae      	adds	r2, #174	; 0xae
 800d58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	78fa      	ldrb	r2, [r7, #3]
 800d592:	4611      	mov	r1, r2
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00e      	beq.n	800d5f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	6852      	ldr	r2, [r2, #4]
 800d5e2:	b2d2      	uxtb	r2, r2
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	4798      	blx	r3
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b083      	sub	sp, #12
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	460b      	mov	r3, r1
 800d608:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d60a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d624:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b086      	sub	sp, #24
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d646:	2300      	movs	r3, #0
 800d648:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	885b      	ldrh	r3, [r3, #2]
 800d64e:	b29a      	uxth	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	b29b      	uxth	r3, r3
 800d656:	429a      	cmp	r2, r3
 800d658:	d920      	bls.n	800d69c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d662:	e013      	b.n	800d68c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d664:	f107 030a 	add.w	r3, r7, #10
 800d668:	4619      	mov	r1, r3
 800d66a:	6978      	ldr	r0, [r7, #20]
 800d66c:	f000 f81b 	bl	800d6a6 <USBD_GetNextDesc>
 800d670:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	2b05      	cmp	r3, #5
 800d678:	d108      	bne.n	800d68c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	789b      	ldrb	r3, [r3, #2]
 800d682:	78fa      	ldrb	r2, [r7, #3]
 800d684:	429a      	cmp	r2, r3
 800d686:	d008      	beq.n	800d69a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d688:	2300      	movs	r3, #0
 800d68a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	885b      	ldrh	r3, [r3, #2]
 800d690:	b29a      	uxth	r2, r3
 800d692:	897b      	ldrh	r3, [r7, #10]
 800d694:	429a      	cmp	r2, r3
 800d696:	d8e5      	bhi.n	800d664 <USBD_GetEpDesc+0x32>
 800d698:	e000      	b.n	800d69c <USBD_GetEpDesc+0x6a>
          break;
 800d69a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d69c:	693b      	ldr	r3, [r7, #16]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3718      	adds	r7, #24
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d6a6:	b480      	push	{r7}
 800d6a8:	b085      	sub	sp, #20
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	881a      	ldrh	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	4413      	add	r3, r2
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d6fe:	8a3b      	ldrh	r3, [r7, #16]
 800d700:	021b      	lsls	r3, r3, #8
 800d702:	b21a      	sxth	r2, r3
 800d704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d708:	4313      	orrs	r3, r2
 800d70a:	b21b      	sxth	r3, r3
 800d70c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d70e:	89fb      	ldrh	r3, [r7, #14]
}
 800d710:	4618      	mov	r0, r3
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d732:	2b40      	cmp	r3, #64	; 0x40
 800d734:	d005      	beq.n	800d742 <USBD_StdDevReq+0x26>
 800d736:	2b40      	cmp	r3, #64	; 0x40
 800d738:	d857      	bhi.n	800d7ea <USBD_StdDevReq+0xce>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00f      	beq.n	800d75e <USBD_StdDevReq+0x42>
 800d73e:	2b20      	cmp	r3, #32
 800d740:	d153      	bne.n	800d7ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	32ae      	adds	r2, #174	; 0xae
 800d74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	4798      	blx	r3
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]
      break;
 800d75c:	e04a      	b.n	800d7f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	785b      	ldrb	r3, [r3, #1]
 800d762:	2b09      	cmp	r3, #9
 800d764:	d83b      	bhi.n	800d7de <USBD_StdDevReq+0xc2>
 800d766:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <USBD_StdDevReq+0x50>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d7c1 	.word	0x0800d7c1
 800d770:	0800d7d5 	.word	0x0800d7d5
 800d774:	0800d7df 	.word	0x0800d7df
 800d778:	0800d7cb 	.word	0x0800d7cb
 800d77c:	0800d7df 	.word	0x0800d7df
 800d780:	0800d79f 	.word	0x0800d79f
 800d784:	0800d795 	.word	0x0800d795
 800d788:	0800d7df 	.word	0x0800d7df
 800d78c:	0800d7b7 	.word	0x0800d7b7
 800d790:	0800d7a9 	.word	0x0800d7a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fa3c 	bl	800dc14 <USBD_GetDescriptor>
          break;
 800d79c:	e024      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fbcb 	bl	800df3c <USBD_SetAddress>
          break;
 800d7a6:	e01f      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fc0a 	bl	800dfc4 <USBD_SetConfig>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]
          break;
 800d7b4:	e018      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fcad 	bl	800e118 <USBD_GetConfig>
          break;
 800d7be:	e013      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fcde 	bl	800e184 <USBD_GetStatus>
          break;
 800d7c8:	e00e      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 fd0d 	bl	800e1ec <USBD_SetFeature>
          break;
 800d7d2:	e009      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 fd31 	bl	800e23e <USBD_ClrFeature>
          break;
 800d7dc:	e004      	b.n	800d7e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fd88 	bl	800e2f6 <USBD_CtlError>
          break;
 800d7e6:	bf00      	nop
      }
      break;
 800d7e8:	e004      	b.n	800d7f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fd82 	bl	800e2f6 <USBD_CtlError>
      break;
 800d7f2:	bf00      	nop
  }

  return ret;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop

0800d800 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d80a:	2300      	movs	r3, #0
 800d80c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d816:	2b40      	cmp	r3, #64	; 0x40
 800d818:	d005      	beq.n	800d826 <USBD_StdItfReq+0x26>
 800d81a:	2b40      	cmp	r3, #64	; 0x40
 800d81c:	d852      	bhi.n	800d8c4 <USBD_StdItfReq+0xc4>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <USBD_StdItfReq+0x26>
 800d822:	2b20      	cmp	r3, #32
 800d824:	d14e      	bne.n	800d8c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	3b01      	subs	r3, #1
 800d830:	2b02      	cmp	r3, #2
 800d832:	d840      	bhi.n	800d8b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	889b      	ldrh	r3, [r3, #4]
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d836      	bhi.n	800d8ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	889b      	ldrh	r3, [r3, #4]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fed9 	bl	800d5fe <USBD_CoreFindIF>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2bff      	cmp	r3, #255	; 0xff
 800d854:	d01d      	beq.n	800d892 <USBD_StdItfReq+0x92>
 800d856:	7bbb      	ldrb	r3, [r7, #14]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d11a      	bne.n	800d892 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d85c:	7bba      	ldrb	r2, [r7, #14]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	32ae      	adds	r2, #174	; 0xae
 800d862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00f      	beq.n	800d88c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d86c:	7bba      	ldrb	r2, [r7, #14]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d874:	7bba      	ldrb	r2, [r7, #14]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	32ae      	adds	r2, #174	; 0xae
 800d87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4798      	blx	r3
 800d886:	4603      	mov	r3, r0
 800d888:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d88a:	e004      	b.n	800d896 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d890:	e001      	b.n	800d896 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d892:	2303      	movs	r3, #3
 800d894:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	88db      	ldrh	r3, [r3, #6]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d110      	bne.n	800d8c0 <USBD_StdItfReq+0xc0>
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10d      	bne.n	800d8c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 fdf1 	bl	800e48c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8aa:	e009      	b.n	800d8c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fd21 	bl	800e2f6 <USBD_CtlError>
          break;
 800d8b4:	e004      	b.n	800d8c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fd1c 	bl	800e2f6 <USBD_CtlError>
          break;
 800d8be:	e000      	b.n	800d8c2 <USBD_StdItfReq+0xc2>
          break;
 800d8c0:	bf00      	nop
      }
      break;
 800d8c2:	e004      	b.n	800d8ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fd15 	bl	800e2f6 <USBD_CtlError>
      break;
 800d8cc:	bf00      	nop
  }

  return ret;
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	889b      	ldrh	r3, [r3, #4]
 800d8ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8f4:	2b40      	cmp	r3, #64	; 0x40
 800d8f6:	d007      	beq.n	800d908 <USBD_StdEPReq+0x30>
 800d8f8:	2b40      	cmp	r3, #64	; 0x40
 800d8fa:	f200 817f 	bhi.w	800dbfc <USBD_StdEPReq+0x324>
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d02a      	beq.n	800d958 <USBD_StdEPReq+0x80>
 800d902:	2b20      	cmp	r3, #32
 800d904:	f040 817a 	bne.w	800dbfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d908:	7bbb      	ldrb	r3, [r7, #14]
 800d90a:	4619      	mov	r1, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff fe83 	bl	800d618 <USBD_CoreFindEP>
 800d912:	4603      	mov	r3, r0
 800d914:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d916:	7b7b      	ldrb	r3, [r7, #13]
 800d918:	2bff      	cmp	r3, #255	; 0xff
 800d91a:	f000 8174 	beq.w	800dc06 <USBD_StdEPReq+0x32e>
 800d91e:	7b7b      	ldrb	r3, [r7, #13]
 800d920:	2b00      	cmp	r3, #0
 800d922:	f040 8170 	bne.w	800dc06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d926:	7b7a      	ldrb	r2, [r7, #13]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d92e:	7b7a      	ldrb	r2, [r7, #13]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	32ae      	adds	r2, #174	; 0xae
 800d934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f000 8163 	beq.w	800dc06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d940:	7b7a      	ldrb	r2, [r7, #13]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	32ae      	adds	r2, #174	; 0xae
 800d946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	6839      	ldr	r1, [r7, #0]
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	4798      	blx	r3
 800d952:	4603      	mov	r3, r0
 800d954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d956:	e156      	b.n	800dc06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d008      	beq.n	800d972 <USBD_StdEPReq+0x9a>
 800d960:	2b03      	cmp	r3, #3
 800d962:	f300 8145 	bgt.w	800dbf0 <USBD_StdEPReq+0x318>
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 809b 	beq.w	800daa2 <USBD_StdEPReq+0x1ca>
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d03c      	beq.n	800d9ea <USBD_StdEPReq+0x112>
 800d970:	e13e      	b.n	800dbf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d002      	beq.n	800d984 <USBD_StdEPReq+0xac>
 800d97e:	2b03      	cmp	r3, #3
 800d980:	d016      	beq.n	800d9b0 <USBD_StdEPReq+0xd8>
 800d982:	e02c      	b.n	800d9de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00d      	beq.n	800d9a6 <USBD_StdEPReq+0xce>
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	2b80      	cmp	r3, #128	; 0x80
 800d98e:	d00a      	beq.n	800d9a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f004 fa17 	bl	8011dc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d99a:	2180      	movs	r1, #128	; 0x80
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f004 fa13 	bl	8011dc8 <USBD_LL_StallEP>
 800d9a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9a4:	e020      	b.n	800d9e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fca4 	bl	800e2f6 <USBD_CtlError>
              break;
 800d9ae:	e01b      	b.n	800d9e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	885b      	ldrh	r3, [r3, #2]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10e      	bne.n	800d9d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00b      	beq.n	800d9d6 <USBD_StdEPReq+0xfe>
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
 800d9c0:	2b80      	cmp	r3, #128	; 0x80
 800d9c2:	d008      	beq.n	800d9d6 <USBD_StdEPReq+0xfe>
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	88db      	ldrh	r3, [r3, #6]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d104      	bne.n	800d9d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9cc:	7bbb      	ldrb	r3, [r7, #14]
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f004 f9f9 	bl	8011dc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fd58 	bl	800e48c <USBD_CtlSendStatus>

              break;
 800d9dc:	e004      	b.n	800d9e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fc88 	bl	800e2f6 <USBD_CtlError>
              break;
 800d9e6:	bf00      	nop
          }
          break;
 800d9e8:	e107      	b.n	800dbfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d002      	beq.n	800d9fc <USBD_StdEPReq+0x124>
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d016      	beq.n	800da28 <USBD_StdEPReq+0x150>
 800d9fa:	e04b      	b.n	800da94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00d      	beq.n	800da1e <USBD_StdEPReq+0x146>
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	2b80      	cmp	r3, #128	; 0x80
 800da06:	d00a      	beq.n	800da1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f004 f9db 	bl	8011dc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da12:	2180      	movs	r1, #128	; 0x80
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f004 f9d7 	bl	8011dc8 <USBD_LL_StallEP>
 800da1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da1c:	e040      	b.n	800daa0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fc68 	bl	800e2f6 <USBD_CtlError>
              break;
 800da26:	e03b      	b.n	800daa0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	885b      	ldrh	r3, [r3, #2]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d136      	bne.n	800da9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da36:	2b00      	cmp	r3, #0
 800da38:	d004      	beq.n	800da44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da3a:	7bbb      	ldrb	r3, [r7, #14]
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f004 f9e1 	bl	8011e06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fd21 	bl	800e48c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da4a:	7bbb      	ldrb	r3, [r7, #14]
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff fde2 	bl	800d618 <USBD_CoreFindEP>
 800da54:	4603      	mov	r3, r0
 800da56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da58:	7b7b      	ldrb	r3, [r7, #13]
 800da5a:	2bff      	cmp	r3, #255	; 0xff
 800da5c:	d01f      	beq.n	800da9e <USBD_StdEPReq+0x1c6>
 800da5e:	7b7b      	ldrb	r3, [r7, #13]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d11c      	bne.n	800da9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800da64:	7b7a      	ldrb	r2, [r7, #13]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800da6c:	7b7a      	ldrb	r2, [r7, #13]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	32ae      	adds	r2, #174	; 0xae
 800da72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d010      	beq.n	800da9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da7c:	7b7a      	ldrb	r2, [r7, #13]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	32ae      	adds	r2, #174	; 0xae
 800da82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
 800da8e:	4603      	mov	r3, r0
 800da90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800da92:	e004      	b.n	800da9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fc2d 	bl	800e2f6 <USBD_CtlError>
              break;
 800da9c:	e000      	b.n	800daa0 <USBD_StdEPReq+0x1c8>
              break;
 800da9e:	bf00      	nop
          }
          break;
 800daa0:	e0ab      	b.n	800dbfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d002      	beq.n	800dab4 <USBD_StdEPReq+0x1dc>
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d032      	beq.n	800db18 <USBD_StdEPReq+0x240>
 800dab2:	e097      	b.n	800dbe4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d007      	beq.n	800daca <USBD_StdEPReq+0x1f2>
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	2b80      	cmp	r3, #128	; 0x80
 800dabe:	d004      	beq.n	800daca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fc17 	bl	800e2f6 <USBD_CtlError>
                break;
 800dac8:	e091      	b.n	800dbee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da0b      	bge.n	800daea <USBD_StdEPReq+0x212>
 800dad2:	7bbb      	ldrb	r3, [r7, #14]
 800dad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dad8:	4613      	mov	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	3310      	adds	r3, #16
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	4413      	add	r3, r2
 800dae6:	3304      	adds	r3, #4
 800dae8:	e00b      	b.n	800db02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800daea:	7bbb      	ldrb	r3, [r7, #14]
 800daec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	4413      	add	r3, r2
 800db00:	3304      	adds	r3, #4
 800db02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2200      	movs	r2, #0
 800db08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	2202      	movs	r2, #2
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fc61 	bl	800e3d8 <USBD_CtlSendData>
              break;
 800db16:	e06a      	b.n	800dbee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	da11      	bge.n	800db44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	f003 020f 	and.w	r2, r3, #15
 800db26:	6879      	ldr	r1, [r7, #4]
 800db28:	4613      	mov	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	440b      	add	r3, r1
 800db32:	3324      	adds	r3, #36	; 0x24
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d117      	bne.n	800db6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fbda 	bl	800e2f6 <USBD_CtlError>
                  break;
 800db42:	e054      	b.n	800dbee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db44:	7bbb      	ldrb	r3, [r7, #14]
 800db46:	f003 020f 	and.w	r2, r3, #15
 800db4a:	6879      	ldr	r1, [r7, #4]
 800db4c:	4613      	mov	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4413      	add	r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	440b      	add	r3, r1
 800db56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db5a:	881b      	ldrh	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d104      	bne.n	800db6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db60:	6839      	ldr	r1, [r7, #0]
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fbc7 	bl	800e2f6 <USBD_CtlError>
                  break;
 800db68:	e041      	b.n	800dbee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da0b      	bge.n	800db8a <USBD_StdEPReq+0x2b2>
 800db72:	7bbb      	ldrb	r3, [r7, #14]
 800db74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db78:	4613      	mov	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	3310      	adds	r3, #16
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	4413      	add	r3, r2
 800db86:	3304      	adds	r3, #4
 800db88:	e00b      	b.n	800dba2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
 800db8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4413      	add	r3, r2
 800dba0:	3304      	adds	r3, #4
 800dba2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dba4:	7bbb      	ldrb	r3, [r7, #14]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <USBD_StdEPReq+0x2d8>
 800dbaa:	7bbb      	ldrb	r3, [r7, #14]
 800dbac:	2b80      	cmp	r3, #128	; 0x80
 800dbae:	d103      	bne.n	800dbb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	e00e      	b.n	800dbd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f004 f941 	bl	8011e44 <USBD_LL_IsStallEP>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e002      	b.n	800dbd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fbfb 	bl	800e3d8 <USBD_CtlSendData>
              break;
 800dbe2:	e004      	b.n	800dbee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fb85 	bl	800e2f6 <USBD_CtlError>
              break;
 800dbec:	bf00      	nop
          }
          break;
 800dbee:	e004      	b.n	800dbfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fb7f 	bl	800e2f6 <USBD_CtlError>
          break;
 800dbf8:	bf00      	nop
      }
      break;
 800dbfa:	e005      	b.n	800dc08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fb79 	bl	800e2f6 <USBD_CtlError>
      break;
 800dc04:	e000      	b.n	800dc08 <USBD_StdEPReq+0x330>
      break;
 800dc06:	bf00      	nop
  }

  return ret;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc26:	2300      	movs	r3, #0
 800dc28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	885b      	ldrh	r3, [r3, #2]
 800dc2e:	0a1b      	lsrs	r3, r3, #8
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	3b01      	subs	r3, #1
 800dc34:	2b0e      	cmp	r3, #14
 800dc36:	f200 8152 	bhi.w	800dede <USBD_GetDescriptor+0x2ca>
 800dc3a:	a201      	add	r2, pc, #4	; (adr r2, 800dc40 <USBD_GetDescriptor+0x2c>)
 800dc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc40:	0800dcb1 	.word	0x0800dcb1
 800dc44:	0800dcc9 	.word	0x0800dcc9
 800dc48:	0800dd09 	.word	0x0800dd09
 800dc4c:	0800dedf 	.word	0x0800dedf
 800dc50:	0800dedf 	.word	0x0800dedf
 800dc54:	0800de7f 	.word	0x0800de7f
 800dc58:	0800deab 	.word	0x0800deab
 800dc5c:	0800dedf 	.word	0x0800dedf
 800dc60:	0800dedf 	.word	0x0800dedf
 800dc64:	0800dedf 	.word	0x0800dedf
 800dc68:	0800dedf 	.word	0x0800dedf
 800dc6c:	0800dedf 	.word	0x0800dedf
 800dc70:	0800dedf 	.word	0x0800dedf
 800dc74:	0800dedf 	.word	0x0800dedf
 800dc78:	0800dc7d 	.word	0x0800dc7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc82:	69db      	ldr	r3, [r3, #28]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00b      	beq.n	800dca0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	7c12      	ldrb	r2, [r2, #16]
 800dc94:	f107 0108 	add.w	r1, r7, #8
 800dc98:	4610      	mov	r0, r2
 800dc9a:	4798      	blx	r3
 800dc9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc9e:	e126      	b.n	800deee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fb27 	bl	800e2f6 <USBD_CtlError>
        err++;
 800dca8:	7afb      	ldrb	r3, [r7, #11]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	72fb      	strb	r3, [r7, #11]
      break;
 800dcae:	e11e      	b.n	800deee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	7c12      	ldrb	r2, [r2, #16]
 800dcbc:	f107 0108 	add.w	r1, r7, #8
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4798      	blx	r3
 800dcc4:	60f8      	str	r0, [r7, #12]
      break;
 800dcc6:	e112      	b.n	800deee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7c1b      	ldrb	r3, [r3, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10d      	bne.n	800dcec <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd8:	f107 0208 	add.w	r2, r7, #8
 800dcdc:	4610      	mov	r0, r2
 800dcde:	4798      	blx	r3
 800dce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3301      	adds	r3, #1
 800dce6:	2202      	movs	r2, #2
 800dce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dcea:	e100      	b.n	800deee <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf4:	f107 0208 	add.w	r2, r7, #8
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	4798      	blx	r3
 800dcfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3301      	adds	r3, #1
 800dd02:	2202      	movs	r2, #2
 800dd04:	701a      	strb	r2, [r3, #0]
      break;
 800dd06:	e0f2      	b.n	800deee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	885b      	ldrh	r3, [r3, #2]
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b05      	cmp	r3, #5
 800dd10:	f200 80ac 	bhi.w	800de6c <USBD_GetDescriptor+0x258>
 800dd14:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <USBD_GetDescriptor+0x108>)
 800dd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1a:	bf00      	nop
 800dd1c:	0800dd35 	.word	0x0800dd35
 800dd20:	0800dd69 	.word	0x0800dd69
 800dd24:	0800dd9d 	.word	0x0800dd9d
 800dd28:	0800ddd1 	.word	0x0800ddd1
 800dd2c:	0800de05 	.word	0x0800de05
 800dd30:	0800de39 	.word	0x0800de39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	7c12      	ldrb	r2, [r2, #16]
 800dd4c:	f107 0108 	add.w	r1, r7, #8
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
 800dd54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd56:	e091      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 facb 	bl	800e2f6 <USBD_CtlError>
            err++;
 800dd60:	7afb      	ldrb	r3, [r7, #11]
 800dd62:	3301      	adds	r3, #1
 800dd64:	72fb      	strb	r3, [r7, #11]
          break;
 800dd66:	e089      	b.n	800de7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00b      	beq.n	800dd8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	7c12      	ldrb	r2, [r2, #16]
 800dd80:	f107 0108 	add.w	r1, r7, #8
 800dd84:	4610      	mov	r0, r2
 800dd86:	4798      	blx	r3
 800dd88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd8a:	e077      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fab1 	bl	800e2f6 <USBD_CtlError>
            err++;
 800dd94:	7afb      	ldrb	r3, [r7, #11]
 800dd96:	3301      	adds	r3, #1
 800dd98:	72fb      	strb	r3, [r7, #11]
          break;
 800dd9a:	e06f      	b.n	800de7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	7c12      	ldrb	r2, [r2, #16]
 800ddb4:	f107 0108 	add.w	r1, r7, #8
 800ddb8:	4610      	mov	r0, r2
 800ddba:	4798      	blx	r3
 800ddbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddbe:	e05d      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fa97 	bl	800e2f6 <USBD_CtlError>
            err++;
 800ddc8:	7afb      	ldrb	r3, [r7, #11]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	72fb      	strb	r3, [r7, #11]
          break;
 800ddce:	e055      	b.n	800de7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00b      	beq.n	800ddf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	7c12      	ldrb	r2, [r2, #16]
 800dde8:	f107 0108 	add.w	r1, r7, #8
 800ddec:	4610      	mov	r0, r2
 800ddee:	4798      	blx	r3
 800ddf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddf2:	e043      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fa7d 	bl	800e2f6 <USBD_CtlError>
            err++;
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	3301      	adds	r3, #1
 800de00:	72fb      	strb	r3, [r7, #11]
          break;
 800de02:	e03b      	b.n	800de7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00b      	beq.n	800de28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	7c12      	ldrb	r2, [r2, #16]
 800de1c:	f107 0108 	add.w	r1, r7, #8
 800de20:	4610      	mov	r0, r2
 800de22:	4798      	blx	r3
 800de24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de26:	e029      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fa63 	bl	800e2f6 <USBD_CtlError>
            err++;
 800de30:	7afb      	ldrb	r3, [r7, #11]
 800de32:	3301      	adds	r3, #1
 800de34:	72fb      	strb	r3, [r7, #11]
          break;
 800de36:	e021      	b.n	800de7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	7c12      	ldrb	r2, [r2, #16]
 800de50:	f107 0108 	add.w	r1, r7, #8
 800de54:	4610      	mov	r0, r2
 800de56:	4798      	blx	r3
 800de58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de5a:	e00f      	b.n	800de7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa49 	bl	800e2f6 <USBD_CtlError>
            err++;
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	3301      	adds	r3, #1
 800de68:	72fb      	strb	r3, [r7, #11]
          break;
 800de6a:	e007      	b.n	800de7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 fa41 	bl	800e2f6 <USBD_CtlError>
          err++;
 800de74:	7afb      	ldrb	r3, [r7, #11]
 800de76:	3301      	adds	r3, #1
 800de78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800de7a:	bf00      	nop
      }
      break;
 800de7c:	e037      	b.n	800deee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7c1b      	ldrb	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d109      	bne.n	800de9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de8e:	f107 0208 	add.w	r2, r7, #8
 800de92:	4610      	mov	r0, r2
 800de94:	4798      	blx	r3
 800de96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de98:	e029      	b.n	800deee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fa2a 	bl	800e2f6 <USBD_CtlError>
        err++;
 800dea2:	7afb      	ldrb	r3, [r7, #11]
 800dea4:	3301      	adds	r3, #1
 800dea6:	72fb      	strb	r3, [r7, #11]
      break;
 800dea8:	e021      	b.n	800deee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7c1b      	ldrb	r3, [r3, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10d      	bne.n	800dece <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deba:	f107 0208 	add.w	r2, r7, #8
 800debe:	4610      	mov	r0, r2
 800dec0:	4798      	blx	r3
 800dec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	2207      	movs	r2, #7
 800deca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800decc:	e00f      	b.n	800deee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fa10 	bl	800e2f6 <USBD_CtlError>
        err++;
 800ded6:	7afb      	ldrb	r3, [r7, #11]
 800ded8:	3301      	adds	r3, #1
 800deda:	72fb      	strb	r3, [r7, #11]
      break;
 800dedc:	e007      	b.n	800deee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fa08 	bl	800e2f6 <USBD_CtlError>
      err++;
 800dee6:	7afb      	ldrb	r3, [r7, #11]
 800dee8:	3301      	adds	r3, #1
 800deea:	72fb      	strb	r3, [r7, #11]
      break;
 800deec:	bf00      	nop
  }

  if (err != 0U)
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d11e      	bne.n	800df32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d016      	beq.n	800df2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800defc:	893b      	ldrh	r3, [r7, #8]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00e      	beq.n	800df20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	88da      	ldrh	r2, [r3, #6]
 800df06:	893b      	ldrh	r3, [r7, #8]
 800df08:	4293      	cmp	r3, r2
 800df0a:	bf28      	it	cs
 800df0c:	4613      	movcs	r3, r2
 800df0e:	b29b      	uxth	r3, r3
 800df10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df12:	893b      	ldrh	r3, [r7, #8]
 800df14:	461a      	mov	r2, r3
 800df16:	68f9      	ldr	r1, [r7, #12]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 fa5d 	bl	800e3d8 <USBD_CtlSendData>
 800df1e:	e009      	b.n	800df34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f9e7 	bl	800e2f6 <USBD_CtlError>
 800df28:	e004      	b.n	800df34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 faae 	bl	800e48c <USBD_CtlSendStatus>
 800df30:	e000      	b.n	800df34 <USBD_GetDescriptor+0x320>
    return;
 800df32:	bf00      	nop
  }
}
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop

0800df3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	889b      	ldrh	r3, [r3, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d131      	bne.n	800dfb2 <USBD_SetAddress+0x76>
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	88db      	ldrh	r3, [r3, #6]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d12d      	bne.n	800dfb2 <USBD_SetAddress+0x76>
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	885b      	ldrh	r3, [r3, #2]
 800df5a:	2b7f      	cmp	r3, #127	; 0x7f
 800df5c:	d829      	bhi.n	800dfb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	885b      	ldrh	r3, [r3, #2]
 800df62:	b2db      	uxtb	r3, r3
 800df64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b03      	cmp	r3, #3
 800df74:	d104      	bne.n	800df80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f9bc 	bl	800e2f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7e:	e01d      	b.n	800dfbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	7bfa      	ldrb	r2, [r7, #15]
 800df84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df88:	7bfb      	ldrb	r3, [r7, #15]
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f003 ff85 	bl	8011e9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fa7a 	bl	800e48c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfa6:	e009      	b.n	800dfbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfb0:	e004      	b.n	800dfbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f99e 	bl	800e2f6 <USBD_CtlError>
  }
}
 800dfba:	bf00      	nop
 800dfbc:	bf00      	nop
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	885b      	ldrh	r3, [r3, #2]
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	4b4e      	ldr	r3, [pc, #312]	; (800e114 <USBD_SetConfig+0x150>)
 800dfda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dfdc:	4b4d      	ldr	r3, [pc, #308]	; (800e114 <USBD_SetConfig+0x150>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d905      	bls.n	800dff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dfe4:	6839      	ldr	r1, [r7, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f985 	bl	800e2f6 <USBD_CtlError>
    return USBD_FAIL;
 800dfec:	2303      	movs	r3, #3
 800dfee:	e08c      	b.n	800e10a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d002      	beq.n	800e002 <USBD_SetConfig+0x3e>
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d029      	beq.n	800e054 <USBD_SetConfig+0x90>
 800e000:	e075      	b.n	800e0ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e002:	4b44      	ldr	r3, [pc, #272]	; (800e114 <USBD_SetConfig+0x150>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d020      	beq.n	800e04c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e00a:	4b42      	ldr	r3, [pc, #264]	; (800e114 <USBD_SetConfig+0x150>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e014:	4b3f      	ldr	r3, [pc, #252]	; (800e114 <USBD_SetConfig+0x150>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	4619      	mov	r1, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7fe ffbd 	bl	800cf9a <USBD_SetClassConfig>
 800e020:	4603      	mov	r3, r0
 800e022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e024:	7bfb      	ldrb	r3, [r7, #15]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d008      	beq.n	800e03c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f962 	bl	800e2f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2202      	movs	r2, #2
 800e036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e03a:	e065      	b.n	800e108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fa25 	bl	800e48c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2203      	movs	r2, #3
 800e046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e04a:	e05d      	b.n	800e108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fa1d 	bl	800e48c <USBD_CtlSendStatus>
      break;
 800e052:	e059      	b.n	800e108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e054:	4b2f      	ldr	r3, [pc, #188]	; (800e114 <USBD_SetConfig+0x150>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d112      	bne.n	800e082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2202      	movs	r2, #2
 800e060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e064:	4b2b      	ldr	r3, [pc, #172]	; (800e114 <USBD_SetConfig+0x150>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	461a      	mov	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e06e:	4b29      	ldr	r3, [pc, #164]	; (800e114 <USBD_SetConfig+0x150>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7fe ffac 	bl	800cfd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fa06 	bl	800e48c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e080:	e042      	b.n	800e108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e082:	4b24      	ldr	r3, [pc, #144]	; (800e114 <USBD_SetConfig+0x150>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d02a      	beq.n	800e0e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	b2db      	uxtb	r3, r3
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7fe ff9a 	bl	800cfd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e09e:	4b1d      	ldr	r3, [pc, #116]	; (800e114 <USBD_SetConfig+0x150>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0a8:	4b1a      	ldr	r3, [pc, #104]	; (800e114 <USBD_SetConfig+0x150>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7fe ff73 	bl	800cf9a <USBD_SetClassConfig>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00f      	beq.n	800e0de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f918 	bl	800e2f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7fe ff7f 	bl	800cfd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0dc:	e014      	b.n	800e108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f9d4 	bl	800e48c <USBD_CtlSendStatus>
      break;
 800e0e4:	e010      	b.n	800e108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f9d0 	bl	800e48c <USBD_CtlSendStatus>
      break;
 800e0ec:	e00c      	b.n	800e108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f900 	bl	800e2f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0f6:	4b07      	ldr	r3, [pc, #28]	; (800e114 <USBD_SetConfig+0x150>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7fe ff68 	bl	800cfd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e102:	2303      	movs	r3, #3
 800e104:	73fb      	strb	r3, [r7, #15]
      break;
 800e106:	bf00      	nop
  }

  return ret;
 800e108:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	20000807 	.word	0x20000807

0800e118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	88db      	ldrh	r3, [r3, #6]
 800e126:	2b01      	cmp	r3, #1
 800e128:	d004      	beq.n	800e134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f8e2 	bl	800e2f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e132:	e023      	b.n	800e17c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	dc02      	bgt.n	800e146 <USBD_GetConfig+0x2e>
 800e140:	2b00      	cmp	r3, #0
 800e142:	dc03      	bgt.n	800e14c <USBD_GetConfig+0x34>
 800e144:	e015      	b.n	800e172 <USBD_GetConfig+0x5a>
 800e146:	2b03      	cmp	r3, #3
 800e148:	d00b      	beq.n	800e162 <USBD_GetConfig+0x4a>
 800e14a:	e012      	b.n	800e172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	3308      	adds	r3, #8
 800e156:	2201      	movs	r2, #1
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f93c 	bl	800e3d8 <USBD_CtlSendData>
        break;
 800e160:	e00c      	b.n	800e17c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3304      	adds	r3, #4
 800e166:	2201      	movs	r2, #1
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f934 	bl	800e3d8 <USBD_CtlSendData>
        break;
 800e170:	e004      	b.n	800e17c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f8be 	bl	800e2f6 <USBD_CtlError>
        break;
 800e17a:	bf00      	nop
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e194:	b2db      	uxtb	r3, r3
 800e196:	3b01      	subs	r3, #1
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d81e      	bhi.n	800e1da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	88db      	ldrh	r3, [r3, #6]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d004      	beq.n	800e1ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f8a5 	bl	800e2f6 <USBD_CtlError>
        break;
 800e1ac:	e01a      	b.n	800e1e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f043 0202 	orr.w	r2, r3, #2
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	330c      	adds	r3, #12
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f900 	bl	800e3d8 <USBD_CtlSendData>
      break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f88a 	bl	800e2f6 <USBD_CtlError>
      break;
 800e1e2:	bf00      	nop
  }
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	885b      	ldrh	r3, [r3, #2]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d107      	bne.n	800e20e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f940 	bl	800e48c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e20c:	e013      	b.n	800e236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	885b      	ldrh	r3, [r3, #2]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d10b      	bne.n	800e22e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	889b      	ldrh	r3, [r3, #4]
 800e21a:	0a1b      	lsrs	r3, r3, #8
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f930 	bl	800e48c <USBD_CtlSendStatus>
}
 800e22c:	e003      	b.n	800e236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f860 	bl	800e2f6 <USBD_CtlError>
}
 800e236:	bf00      	nop
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	3b01      	subs	r3, #1
 800e252:	2b02      	cmp	r3, #2
 800e254:	d80b      	bhi.n	800e26e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	885b      	ldrh	r3, [r3, #2]
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d10c      	bne.n	800e278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f910 	bl	800e48c <USBD_CtlSendStatus>
      }
      break;
 800e26c:	e004      	b.n	800e278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e26e:	6839      	ldr	r1, [r7, #0]
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 f840 	bl	800e2f6 <USBD_CtlError>
      break;
 800e276:	e000      	b.n	800e27a <USBD_ClrFeature+0x3c>
      break;
 800e278:	bf00      	nop
  }
}
 800e27a:	bf00      	nop
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b084      	sub	sp, #16
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	3301      	adds	r3, #1
 800e29c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	781a      	ldrb	r2, [r3, #0]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f7ff fa17 	bl	800d6e0 <SWAPBYTE>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7ff fa0a 	bl	800d6e0 <SWAPBYTE>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7ff f9fd 	bl	800d6e0 <SWAPBYTE>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	80da      	strh	r2, [r3, #6]
}
 800e2ee:	bf00      	nop
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e300:	2180      	movs	r1, #128	; 0x80
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f003 fd60 	bl	8011dc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e308:	2100      	movs	r1, #0
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f003 fd5c 	bl	8011dc8 <USBD_LL_StallEP>
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e324:	2300      	movs	r3, #0
 800e326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d036      	beq.n	800e39c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e332:	6938      	ldr	r0, [r7, #16]
 800e334:	f000 f836 	bl	800e3a4 <USBD_GetLen>
 800e338:	4603      	mov	r3, r0
 800e33a:	3301      	adds	r3, #1
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	b29a      	uxth	r2, r3
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	4413      	add	r3, r2
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	7812      	ldrb	r2, [r2, #0]
 800e350:	701a      	strb	r2, [r3, #0]
  idx++;
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	3301      	adds	r3, #1
 800e356:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e358:	7dfb      	ldrb	r3, [r7, #23]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	4413      	add	r3, r2
 800e35e:	2203      	movs	r2, #3
 800e360:	701a      	strb	r2, [r3, #0]
  idx++;
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	3301      	adds	r3, #1
 800e366:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e368:	e013      	b.n	800e392 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e36a:	7dfb      	ldrb	r3, [r7, #23]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	4413      	add	r3, r2
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	7812      	ldrb	r2, [r2, #0]
 800e374:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	3301      	adds	r3, #1
 800e37a:	613b      	str	r3, [r7, #16]
    idx++;
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	3301      	adds	r3, #1
 800e380:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e382:	7dfb      	ldrb	r3, [r7, #23]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	4413      	add	r3, r2
 800e388:	2200      	movs	r2, #0
 800e38a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	3301      	adds	r3, #1
 800e390:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1e7      	bne.n	800e36a <USBD_GetString+0x52>
 800e39a:	e000      	b.n	800e39e <USBD_GetString+0x86>
    return;
 800e39c:	bf00      	nop
  }
}
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e3b4:	e005      	b.n	800e3c2 <USBD_GetLen+0x1e>
  {
    len++;
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1f5      	bne.n	800e3b6 <USBD_GetLen+0x12>
  }

  return len;
 800e3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	f003 fd6b 	bl	8011eda <USBD_LL_Transmit>

  return USBD_OK;
 800e404:	2300      	movs	r3, #0
}
 800e406:	4618      	mov	r0, r3
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e40e:	b580      	push	{r7, lr}
 800e410:	b084      	sub	sp, #16
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	2100      	movs	r1, #0
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f003 fd5a 	bl	8011eda <USBD_LL_Transmit>

  return USBD_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2203      	movs	r2, #3
 800e440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68ba      	ldr	r2, [r7, #8]
 800e458:	2100      	movs	r1, #0
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f003 fd5e 	bl	8011f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e460:	2300      	movs	r3, #0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b084      	sub	sp, #16
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	2100      	movs	r1, #0
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f003 fd4d 	bl	8011f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2204      	movs	r2, #4
 800e498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e49c:	2300      	movs	r3, #0
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f003 fd19 	bl	8011eda <USBD_LL_Transmit>

  return USBD_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2205      	movs	r2, #5
 800e4be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f003 fd27 	bl	8011f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e4d8:	b480      	push	{r7}
 800e4da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e4dc:	bf00      	nop
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
	...

0800e4e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4ee:	f3ef 8305 	mrs	r3, IPSR
 800e4f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10f      	bne.n	800e51a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e4fe:	607b      	str	r3, [r7, #4]
  return(result);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d105      	bne.n	800e512 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e506:	f3ef 8311 	mrs	r3, BASEPRI
 800e50a:	603b      	str	r3, [r7, #0]
  return(result);
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d007      	beq.n	800e522 <osKernelInitialize+0x3a>
 800e512:	4b0e      	ldr	r3, [pc, #56]	; (800e54c <osKernelInitialize+0x64>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b02      	cmp	r3, #2
 800e518:	d103      	bne.n	800e522 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e51a:	f06f 0305 	mvn.w	r3, #5
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	e00c      	b.n	800e53c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e522:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <osKernelInitialize+0x64>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d105      	bne.n	800e536 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e52a:	4b08      	ldr	r3, [pc, #32]	; (800e54c <osKernelInitialize+0x64>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	e002      	b.n	800e53c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e536:	f04f 33ff 	mov.w	r3, #4294967295
 800e53a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e53c:	68fb      	ldr	r3, [r7, #12]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	20000808 	.word	0x20000808

0800e550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e556:	f3ef 8305 	mrs	r3, IPSR
 800e55a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e55c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d10f      	bne.n	800e582 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e562:	f3ef 8310 	mrs	r3, PRIMASK
 800e566:	607b      	str	r3, [r7, #4]
  return(result);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e56e:	f3ef 8311 	mrs	r3, BASEPRI
 800e572:	603b      	str	r3, [r7, #0]
  return(result);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d007      	beq.n	800e58a <osKernelStart+0x3a>
 800e57a:	4b0f      	ldr	r3, [pc, #60]	; (800e5b8 <osKernelStart+0x68>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d103      	bne.n	800e58a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e582:	f06f 0305 	mvn.w	r3, #5
 800e586:	60fb      	str	r3, [r7, #12]
 800e588:	e010      	b.n	800e5ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e58a:	4b0b      	ldr	r3, [pc, #44]	; (800e5b8 <osKernelStart+0x68>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d109      	bne.n	800e5a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e592:	f7ff ffa1 	bl	800e4d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e596:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <osKernelStart+0x68>)
 800e598:	2202      	movs	r2, #2
 800e59a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e59c:	f001 fafe 	bl	800fb9c <vTaskStartScheduler>
      stat = osOK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	e002      	b.n	800e5ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20000808 	.word	0x20000808

0800e5bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b090      	sub	sp, #64	; 0x40
 800e5c0:	af04      	add	r7, sp, #16
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5cc:	f3ef 8305 	mrs	r3, IPSR
 800e5d0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e5d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f040 8090 	bne.w	800e6fa <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5da:	f3ef 8310 	mrs	r3, PRIMASK
 800e5de:	61bb      	str	r3, [r7, #24]
  return(result);
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d105      	bne.n	800e5f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800e5ea:	617b      	str	r3, [r7, #20]
  return(result);
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d003      	beq.n	800e5fa <osThreadNew+0x3e>
 800e5f2:	4b44      	ldr	r3, [pc, #272]	; (800e704 <osThreadNew+0x148>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d07f      	beq.n	800e6fa <osThreadNew+0x13e>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d07c      	beq.n	800e6fa <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e604:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e606:	2318      	movs	r3, #24
 800e608:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e60e:	f04f 33ff 	mov.w	r3, #4294967295
 800e612:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d045      	beq.n	800e6a6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <osThreadNew+0x6c>
        name = attr->name;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d002      	beq.n	800e636 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d008      	beq.n	800e64e <osThreadNew+0x92>
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	2b38      	cmp	r3, #56	; 0x38
 800e640:	d805      	bhi.n	800e64e <osThreadNew+0x92>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d001      	beq.n	800e652 <osThreadNew+0x96>
        return (NULL);
 800e64e:	2300      	movs	r3, #0
 800e650:	e054      	b.n	800e6fc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	089b      	lsrs	r3, r3, #2
 800e660:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00e      	beq.n	800e688 <osThreadNew+0xcc>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	2bbb      	cmp	r3, #187	; 0xbb
 800e670:	d90a      	bls.n	800e688 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <osThreadNew+0xcc>
        mem = 1;
 800e682:	2301      	movs	r3, #1
 800e684:	623b      	str	r3, [r7, #32]
 800e686:	e010      	b.n	800e6aa <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10c      	bne.n	800e6aa <osThreadNew+0xee>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d108      	bne.n	800e6aa <osThreadNew+0xee>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d104      	bne.n	800e6aa <osThreadNew+0xee>
          mem = 0;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	623b      	str	r3, [r7, #32]
 800e6a4:	e001      	b.n	800e6aa <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e6aa:	6a3b      	ldr	r3, [r7, #32]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d110      	bne.n	800e6d2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e6b8:	9202      	str	r2, [sp, #8]
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	9300      	str	r3, [sp, #0]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f001 f872 	bl	800f7b0 <xTaskCreateStatic>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	e013      	b.n	800e6fa <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d110      	bne.n	800e6fa <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	f107 0310 	add.w	r3, r7, #16
 800e6e0:	9301      	str	r3, [sp, #4]
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f001 f8c3 	bl	800f876 <xTaskCreate>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d001      	beq.n	800e6fa <osThreadNew+0x13e>
          hTask = NULL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e6fa:	693b      	ldr	r3, [r7, #16]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3730      	adds	r7, #48	; 0x30
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	20000808 	.word	0x20000808

0800e708 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e710:	f3ef 8305 	mrs	r3, IPSR
 800e714:	613b      	str	r3, [r7, #16]
  return(result);
 800e716:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d10f      	bne.n	800e73c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e71c:	f3ef 8310 	mrs	r3, PRIMASK
 800e720:	60fb      	str	r3, [r7, #12]
  return(result);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d105      	bne.n	800e734 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e728:	f3ef 8311 	mrs	r3, BASEPRI
 800e72c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d007      	beq.n	800e744 <osDelay+0x3c>
 800e734:	4b0a      	ldr	r3, [pc, #40]	; (800e760 <osDelay+0x58>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d103      	bne.n	800e744 <osDelay+0x3c>
    stat = osErrorISR;
 800e73c:	f06f 0305 	mvn.w	r3, #5
 800e740:	617b      	str	r3, [r7, #20]
 800e742:	e007      	b.n	800e754 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e744:	2300      	movs	r3, #0
 800e746:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f001 f9ee 	bl	800fb30 <vTaskDelay>
    }
  }

  return (stat);
 800e754:	697b      	ldr	r3, [r7, #20]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20000808 	.word	0x20000808

0800e764 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e764:	b580      	push	{r7, lr}
 800e766:	b08c      	sub	sp, #48	; 0x30
 800e768:	af02      	add	r7, sp, #8
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e774:	f3ef 8305 	mrs	r3, IPSR
 800e778:	61bb      	str	r3, [r7, #24]
  return(result);
 800e77a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d16f      	bne.n	800e860 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e780:	f3ef 8310 	mrs	r3, PRIMASK
 800e784:	617b      	str	r3, [r7, #20]
  return(result);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d105      	bne.n	800e798 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e78c:	f3ef 8311 	mrs	r3, BASEPRI
 800e790:	613b      	str	r3, [r7, #16]
  return(result);
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <osMessageQueueNew+0x3c>
 800e798:	4b34      	ldr	r3, [pc, #208]	; (800e86c <osMessageQueueNew+0x108>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d05f      	beq.n	800e860 <osMessageQueueNew+0xfc>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d05c      	beq.n	800e860 <osMessageQueueNew+0xfc>
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d059      	beq.n	800e860 <osMessageQueueNew+0xfc>
    mem = -1;
 800e7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d029      	beq.n	800e80c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d012      	beq.n	800e7e6 <osMessageQueueNew+0x82>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	2b4f      	cmp	r3, #79	; 0x4f
 800e7c6:	d90e      	bls.n	800e7e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00a      	beq.n	800e7e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	695a      	ldr	r2, [r3, #20]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	fb01 f303 	mul.w	r3, r1, r3
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d302      	bcc.n	800e7e6 <osMessageQueueNew+0x82>
        mem = 1;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	623b      	str	r3, [r7, #32]
 800e7e4:	e014      	b.n	800e810 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d110      	bne.n	800e810 <osMessageQueueNew+0xac>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10c      	bne.n	800e810 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d108      	bne.n	800e810 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d104      	bne.n	800e810 <osMessageQueueNew+0xac>
          mem = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	623b      	str	r3, [r7, #32]
 800e80a:	e001      	b.n	800e810 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d10b      	bne.n	800e82e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	691a      	ldr	r2, [r3, #16]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	2100      	movs	r1, #0
 800e820:	9100      	str	r1, [sp, #0]
 800e822:	68b9      	ldr	r1, [r7, #8]
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	f000 fa5b 	bl	800ece0 <xQueueGenericCreateStatic>
 800e82a:	6278      	str	r0, [r7, #36]	; 0x24
 800e82c:	e008      	b.n	800e840 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d105      	bne.n	800e840 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e834:	2200      	movs	r2, #0
 800e836:	68b9      	ldr	r1, [r7, #8]
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 fad3 	bl	800ede4 <xQueueGenericCreate>
 800e83e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00c      	beq.n	800e860 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <osMessageQueueNew+0xf0>
        name = attr->name;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	61fb      	str	r3, [r7, #28]
 800e852:	e001      	b.n	800e858 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800e854:	2300      	movs	r3, #0
 800e856:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e858:	69f9      	ldr	r1, [r7, #28]
 800e85a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e85c:	f000 ff4a 	bl	800f6f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e862:	4618      	mov	r0, r3
 800e864:	3728      	adds	r7, #40	; 0x28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	20000808 	.word	0x20000808

0800e870 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e870:	b580      	push	{r7, lr}
 800e872:	b08a      	sub	sp, #40	; 0x28
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	603b      	str	r3, [r7, #0]
 800e87c:	4613      	mov	r3, r2
 800e87e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e884:	2300      	movs	r3, #0
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e888:	f3ef 8305 	mrs	r3, IPSR
 800e88c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e88e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10f      	bne.n	800e8b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e894:	f3ef 8310 	mrs	r3, PRIMASK
 800e898:	61bb      	str	r3, [r7, #24]
  return(result);
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d105      	bne.n	800e8ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8a0:	f3ef 8311 	mrs	r3, BASEPRI
 800e8a4:	617b      	str	r3, [r7, #20]
  return(result);
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d02c      	beq.n	800e906 <osMessageQueuePut+0x96>
 800e8ac:	4b28      	ldr	r3, [pc, #160]	; (800e950 <osMessageQueuePut+0xe0>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d128      	bne.n	800e906 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d005      	beq.n	800e8c6 <osMessageQueuePut+0x56>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <osMessageQueuePut+0x56>
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e8c6:	f06f 0303 	mvn.w	r3, #3
 800e8ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e8cc:	e039      	b.n	800e942 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e8d2:	f107 0210 	add.w	r2, r7, #16
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	6a38      	ldr	r0, [r7, #32]
 800e8dc:	f000 fbee 	bl	800f0bc <xQueueGenericSendFromISR>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d003      	beq.n	800e8ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e8e6:	f06f 0302 	mvn.w	r3, #2
 800e8ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e8ec:	e029      	b.n	800e942 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d026      	beq.n	800e942 <osMessageQueuePut+0xd2>
 800e8f4:	4b17      	ldr	r3, [pc, #92]	; (800e954 <osMessageQueuePut+0xe4>)
 800e8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e904:	e01d      	b.n	800e942 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <osMessageQueuePut+0xa2>
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d103      	bne.n	800e91a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e912:	f06f 0303 	mvn.w	r3, #3
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
 800e918:	e014      	b.n	800e944 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e91a:	2300      	movs	r3, #0
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	6a38      	ldr	r0, [r7, #32]
 800e922:	f000 fac5 	bl	800eeb0 <xQueueGenericSend>
 800e926:	4603      	mov	r3, r0
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d00b      	beq.n	800e944 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d003      	beq.n	800e93a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e932:	f06f 0301 	mvn.w	r3, #1
 800e936:	627b      	str	r3, [r7, #36]	; 0x24
 800e938:	e004      	b.n	800e944 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e93a:	f06f 0302 	mvn.w	r3, #2
 800e93e:	627b      	str	r3, [r7, #36]	; 0x24
 800e940:	e000      	b.n	800e944 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e942:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e946:	4618      	mov	r0, r3
 800e948:	3728      	adds	r7, #40	; 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	20000808 	.word	0x20000808
 800e954:	e000ed04 	.word	0xe000ed04

0800e958 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e96e:	f3ef 8305 	mrs	r3, IPSR
 800e972:	61fb      	str	r3, [r7, #28]
  return(result);
 800e974:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10f      	bne.n	800e99a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e97a:	f3ef 8310 	mrs	r3, PRIMASK
 800e97e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d105      	bne.n	800e992 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e986:	f3ef 8311 	mrs	r3, BASEPRI
 800e98a:	617b      	str	r3, [r7, #20]
  return(result);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d02c      	beq.n	800e9ec <osMessageQueueGet+0x94>
 800e992:	4b28      	ldr	r3, [pc, #160]	; (800ea34 <osMessageQueueGet+0xdc>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d128      	bne.n	800e9ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d005      	beq.n	800e9ac <osMessageQueueGet+0x54>
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <osMessageQueueGet+0x54>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e9ac:	f06f 0303 	mvn.w	r3, #3
 800e9b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e9b2:	e038      	b.n	800ea26 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e9b8:	f107 0310 	add.w	r3, r7, #16
 800e9bc:	461a      	mov	r2, r3
 800e9be:	68b9      	ldr	r1, [r7, #8]
 800e9c0:	6a38      	ldr	r0, [r7, #32]
 800e9c2:	f000 fd01 	bl	800f3c8 <xQueueReceiveFromISR>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d003      	beq.n	800e9d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e9cc:	f06f 0302 	mvn.w	r3, #2
 800e9d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e9d2:	e028      	b.n	800ea26 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d025      	beq.n	800ea26 <osMessageQueueGet+0xce>
 800e9da:	4b17      	ldr	r3, [pc, #92]	; (800ea38 <osMessageQueueGet+0xe0>)
 800e9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e9ea:	e01c      	b.n	800ea26 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <osMessageQueueGet+0xa0>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d103      	bne.n	800ea00 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e9f8:	f06f 0303 	mvn.w	r3, #3
 800e9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fe:	e013      	b.n	800ea28 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	68b9      	ldr	r1, [r7, #8]
 800ea04:	6a38      	ldr	r0, [r7, #32]
 800ea06:	f000 fbf9 	bl	800f1fc <xQueueReceive>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d00b      	beq.n	800ea28 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d003      	beq.n	800ea1e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ea16:	f06f 0301 	mvn.w	r3, #1
 800ea1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea1c:	e004      	b.n	800ea28 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ea1e:	f06f 0302 	mvn.w	r3, #2
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
 800ea24:	e000      	b.n	800ea28 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ea26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3728      	adds	r7, #40	; 0x28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20000808 	.word	0x20000808
 800ea38:	e000ed04 	.word	0xe000ed04

0800ea3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	4a07      	ldr	r2, [pc, #28]	; (800ea68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	4a06      	ldr	r2, [pc, #24]	; (800ea6c <vApplicationGetIdleTaskMemory+0x30>)
 800ea52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea5a:	601a      	str	r2, [r3, #0]
}
 800ea5c:	bf00      	nop
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr
 800ea68:	2000080c 	.word	0x2000080c
 800ea6c:	200008c8 	.word	0x200008c8

0800ea70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	4a07      	ldr	r2, [pc, #28]	; (800ea9c <vApplicationGetTimerTaskMemory+0x2c>)
 800ea80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	4a06      	ldr	r2, [pc, #24]	; (800eaa0 <vApplicationGetTimerTaskMemory+0x30>)
 800ea86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea8e:	601a      	str	r2, [r3, #0]
}
 800ea90:	bf00      	nop
 800ea92:	3714      	adds	r7, #20
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20000cc8 	.word	0x20000cc8
 800eaa0:	20000d84 	.word	0x20000d84

0800eaa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f103 0208 	add.w	r2, r3, #8
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f04f 32ff 	mov.w	r2, #4294967295
 800eabc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f103 0208 	add.w	r2, r3, #8
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f103 0208 	add.w	r2, r3, #8
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eaf2:	bf00      	nop
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eafe:	b480      	push	{r7}
 800eb00:	b085      	sub	sp, #20
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	689a      	ldr	r2, [r3, #8]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
}
 800eb3a:	bf00      	nop
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb46:	b480      	push	{r7}
 800eb48:	b085      	sub	sp, #20
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5c:	d103      	bne.n	800eb66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e00c      	b.n	800eb80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3308      	adds	r3, #8
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	e002      	b.n	800eb74 <vListInsert+0x2e>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d2f6      	bcs.n	800eb6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	601a      	str	r2, [r3, #0]
}
 800ebac:	bf00      	nop
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	6892      	ldr	r2, [r2, #8]
 800ebce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	6852      	ldr	r2, [r2, #4]
 800ebd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d103      	bne.n	800ebec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	1e5a      	subs	r2, r3, #1
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10c      	bne.n	800ec3a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	b672      	cpsid	i
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	b662      	cpsie	i
 800ec34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec36:	bf00      	nop
 800ec38:	e7fe      	b.n	800ec38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ec3a:	f002 f96f 	bl	8010f1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec46:	68f9      	ldr	r1, [r7, #12]
 800ec48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec4a:	fb01 f303 	mul.w	r3, r1, r3
 800ec4e:	441a      	add	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	68f9      	ldr	r1, [r7, #12]
 800ec6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec70:	fb01 f303 	mul.w	r3, r1, r3
 800ec74:	441a      	add	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	22ff      	movs	r2, #255	; 0xff
 800ec7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	22ff      	movs	r2, #255	; 0xff
 800ec86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d114      	bne.n	800ecba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d01a      	beq.n	800ecce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3310      	adds	r3, #16
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f001 fa25 	bl	80100ec <xTaskRemoveFromEventList>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d012      	beq.n	800ecce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eca8:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <xQueueGenericReset+0xd0>)
 800ecaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	e009      	b.n	800ecce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	3310      	adds	r3, #16
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff fef0 	bl	800eaa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	3324      	adds	r3, #36	; 0x24
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff feeb 	bl	800eaa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ecce:	f002 f959 	bl	8010f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ecd2:	2301      	movs	r3, #1
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	e000ed04 	.word	0xe000ed04

0800ece0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08e      	sub	sp, #56	; 0x38
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10c      	bne.n	800ed0e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf8:	b672      	cpsid	i
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
 800ed06:	b662      	cpsie	i
 800ed08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed0a:	bf00      	nop
 800ed0c:	e7fe      	b.n	800ed0c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10c      	bne.n	800ed2e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	b672      	cpsid	i
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	b662      	cpsie	i
 800ed28:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed2a:	bf00      	nop
 800ed2c:	e7fe      	b.n	800ed2c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <xQueueGenericCreateStatic+0x5a>
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <xQueueGenericCreateStatic+0x5e>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e000      	b.n	800ed40 <xQueueGenericCreateStatic+0x60>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10c      	bne.n	800ed5e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed48:	b672      	cpsid	i
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	b662      	cpsie	i
 800ed58:	623b      	str	r3, [r7, #32]
}
 800ed5a:	bf00      	nop
 800ed5c:	e7fe      	b.n	800ed5c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d102      	bne.n	800ed6a <xQueueGenericCreateStatic+0x8a>
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <xQueueGenericCreateStatic+0x8e>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e000      	b.n	800ed70 <xQueueGenericCreateStatic+0x90>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10c      	bne.n	800ed8e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed78:	b672      	cpsid	i
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	b662      	cpsie	i
 800ed88:	61fb      	str	r3, [r7, #28]
}
 800ed8a:	bf00      	nop
 800ed8c:	e7fe      	b.n	800ed8c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed8e:	2350      	movs	r3, #80	; 0x50
 800ed90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2b50      	cmp	r3, #80	; 0x50
 800ed96:	d00c      	beq.n	800edb2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9c:	b672      	cpsid	i
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	b662      	cpsie	i
 800edac:	61bb      	str	r3, [r7, #24]
}
 800edae:	bf00      	nop
 800edb0:	e7fe      	b.n	800edb0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800edb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00d      	beq.n	800edda <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	4613      	mov	r3, r2
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	68b9      	ldr	r1, [r7, #8]
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 f847 	bl	800ee68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eddc:	4618      	mov	r0, r3
 800edde:	3730      	adds	r7, #48	; 0x30
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08a      	sub	sp, #40	; 0x28
 800ede8:	af02      	add	r7, sp, #8
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	4613      	mov	r3, r2
 800edf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10c      	bne.n	800ee12 <xQueueGenericCreate+0x2e>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	b672      	cpsid	i
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	b662      	cpsie	i
 800ee0c:	613b      	str	r3, [r7, #16]
}
 800ee0e:	bf00      	nop
 800ee10:	e7fe      	b.n	800ee10 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d102      	bne.n	800ee1e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	61fb      	str	r3, [r7, #28]
 800ee1c:	e004      	b.n	800ee28 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	fb02 f303 	mul.w	r3, r2, r3
 800ee26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	3350      	adds	r3, #80	; 0x50
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f002 f9a1 	bl	8011174 <pvPortMalloc>
 800ee32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d011      	beq.n	800ee5e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	3350      	adds	r3, #80	; 0x50
 800ee42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4613      	mov	r3, r2
 800ee54:	697a      	ldr	r2, [r7, #20]
 800ee56:	68b9      	ldr	r1, [r7, #8]
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 f805 	bl	800ee68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee5e:	69bb      	ldr	r3, [r7, #24]
	}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3720      	adds	r7, #32
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d103      	bne.n	800ee84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	69ba      	ldr	r2, [r7, #24]
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	e002      	b.n	800ee8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee96:	2101      	movs	r1, #1
 800ee98:	69b8      	ldr	r0, [r7, #24]
 800ee9a:	f7ff feb7 	bl	800ec0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	78fa      	ldrb	r2, [r7, #3]
 800eea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08e      	sub	sp, #56	; 0x38
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eebe:	2300      	movs	r3, #0
 800eec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10c      	bne.n	800eee6 <xQueueGenericSend+0x36>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	b672      	cpsid	i
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	b662      	cpsie	i
 800eee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d103      	bne.n	800eef4 <xQueueGenericSend+0x44>
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <xQueueGenericSend+0x48>
 800eef4:	2301      	movs	r3, #1
 800eef6:	e000      	b.n	800eefa <xQueueGenericSend+0x4a>
 800eef8:	2300      	movs	r3, #0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d10c      	bne.n	800ef18 <xQueueGenericSend+0x68>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef02:	b672      	cpsid	i
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	b662      	cpsie	i
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef14:	bf00      	nop
 800ef16:	e7fe      	b.n	800ef16 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d103      	bne.n	800ef26 <xQueueGenericSend+0x76>
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d101      	bne.n	800ef2a <xQueueGenericSend+0x7a>
 800ef26:	2301      	movs	r3, #1
 800ef28:	e000      	b.n	800ef2c <xQueueGenericSend+0x7c>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10c      	bne.n	800ef4a <xQueueGenericSend+0x9a>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	b672      	cpsid	i
 800ef36:	f383 8811 	msr	BASEPRI, r3
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	b662      	cpsie	i
 800ef44:	623b      	str	r3, [r7, #32]
}
 800ef46:	bf00      	nop
 800ef48:	e7fe      	b.n	800ef48 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef4a:	f001 fa99 	bl	8010480 <xTaskGetSchedulerState>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <xQueueGenericSend+0xaa>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d101      	bne.n	800ef5e <xQueueGenericSend+0xae>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e000      	b.n	800ef60 <xQueueGenericSend+0xb0>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10c      	bne.n	800ef7e <xQueueGenericSend+0xce>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	b672      	cpsid	i
 800ef6a:	f383 8811 	msr	BASEPRI, r3
 800ef6e:	f3bf 8f6f 	isb	sy
 800ef72:	f3bf 8f4f 	dsb	sy
 800ef76:	b662      	cpsie	i
 800ef78:	61fb      	str	r3, [r7, #28]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef7e:	f001 ffcd 	bl	8010f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d302      	bcc.n	800ef94 <xQueueGenericSend+0xe4>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d129      	bne.n	800efe8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef9a:	f000 fa9b 	bl	800f4d4 <prvCopyDataToQueue>
 800ef9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d010      	beq.n	800efca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	3324      	adds	r3, #36	; 0x24
 800efac:	4618      	mov	r0, r3
 800efae:	f001 f89d 	bl	80100ec <xTaskRemoveFromEventList>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d013      	beq.n	800efe0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efb8:	4b3f      	ldr	r3, [pc, #252]	; (800f0b8 <xQueueGenericSend+0x208>)
 800efba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	e00a      	b.n	800efe0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d007      	beq.n	800efe0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efd0:	4b39      	ldr	r3, [pc, #228]	; (800f0b8 <xQueueGenericSend+0x208>)
 800efd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800efe0:	f001 ffd0 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800efe4:	2301      	movs	r3, #1
 800efe6:	e063      	b.n	800f0b0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d103      	bne.n	800eff6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efee:	f001 ffc9 	bl	8010f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e05c      	b.n	800f0b0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d106      	bne.n	800f00a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800effc:	f107 0314 	add.w	r3, r7, #20
 800f000:	4618      	mov	r0, r3
 800f002:	f001 f8d9 	bl	80101b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f006:	2301      	movs	r3, #1
 800f008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f00a:	f001 ffbb 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f00e:	f000 fe39 	bl	800fc84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f012:	f001 ff83 	bl	8010f1c <vPortEnterCritical>
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f01c:	b25b      	sxtb	r3, r3
 800f01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f022:	d103      	bne.n	800f02c <xQueueGenericSend+0x17c>
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	2200      	movs	r2, #0
 800f028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f032:	b25b      	sxtb	r3, r3
 800f034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f038:	d103      	bne.n	800f042 <xQueueGenericSend+0x192>
 800f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f042:	f001 ff9f 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f046:	1d3a      	adds	r2, r7, #4
 800f048:	f107 0314 	add.w	r3, r7, #20
 800f04c:	4611      	mov	r1, r2
 800f04e:	4618      	mov	r0, r3
 800f050:	f001 f8c8 	bl	80101e4 <xTaskCheckForTimeOut>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d124      	bne.n	800f0a4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f05a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f05c:	f000 fb32 	bl	800f6c4 <prvIsQueueFull>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d018      	beq.n	800f098 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	3310      	adds	r3, #16
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 ffe8 	bl	8010044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f076:	f000 fabd 	bl	800f5f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f07a:	f000 fe11 	bl	800fca0 <xTaskResumeAll>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	f47f af7c 	bne.w	800ef7e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f086:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <xQueueGenericSend+0x208>)
 800f088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	e772      	b.n	800ef7e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f09a:	f000 faab 	bl	800f5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f09e:	f000 fdff 	bl	800fca0 <xTaskResumeAll>
 800f0a2:	e76c      	b.n	800ef7e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0a6:	f000 faa5 	bl	800f5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0aa:	f000 fdf9 	bl	800fca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3738      	adds	r7, #56	; 0x38
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	e000ed04 	.word	0xe000ed04

0800f0bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08e      	sub	sp, #56	; 0x38
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10c      	bne.n	800f0ee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	b672      	cpsid	i
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	b662      	cpsie	i
 800f0e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d103      	bne.n	800f0fc <xQueueGenericSendFromISR+0x40>
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d101      	bne.n	800f100 <xQueueGenericSendFromISR+0x44>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e000      	b.n	800f102 <xQueueGenericSendFromISR+0x46>
 800f100:	2300      	movs	r3, #0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10c      	bne.n	800f120 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10a:	b672      	cpsid	i
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	b662      	cpsie	i
 800f11a:	623b      	str	r3, [r7, #32]
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b02      	cmp	r3, #2
 800f124:	d103      	bne.n	800f12e <xQueueGenericSendFromISR+0x72>
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <xQueueGenericSendFromISR+0x76>
 800f12e:	2301      	movs	r3, #1
 800f130:	e000      	b.n	800f134 <xQueueGenericSendFromISR+0x78>
 800f132:	2300      	movs	r3, #0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10c      	bne.n	800f152 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	b672      	cpsid	i
 800f13e:	f383 8811 	msr	BASEPRI, r3
 800f142:	f3bf 8f6f 	isb	sy
 800f146:	f3bf 8f4f 	dsb	sy
 800f14a:	b662      	cpsie	i
 800f14c:	61fb      	str	r3, [r7, #28]
}
 800f14e:	bf00      	nop
 800f150:	e7fe      	b.n	800f150 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f152:	f001 ffcb 	bl	80110ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f156:	f3ef 8211 	mrs	r2, BASEPRI
 800f15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15e:	b672      	cpsid	i
 800f160:	f383 8811 	msr	BASEPRI, r3
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	b662      	cpsie	i
 800f16e:	61ba      	str	r2, [r7, #24]
 800f170:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f172:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f17e:	429a      	cmp	r2, r3
 800f180:	d302      	bcc.n	800f188 <xQueueGenericSendFromISR+0xcc>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b02      	cmp	r3, #2
 800f186:	d12c      	bne.n	800f1e2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f18e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	68b9      	ldr	r1, [r7, #8]
 800f196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f198:	f000 f99c 	bl	800f4d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f19c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a4:	d112      	bne.n	800f1cc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d016      	beq.n	800f1dc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	3324      	adds	r3, #36	; 0x24
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 ff9a 	bl	80100ec <xTaskRemoveFromEventList>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00e      	beq.n	800f1dc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00b      	beq.n	800f1dc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	e007      	b.n	800f1dc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f1cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	b25a      	sxtb	r2, r3
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f1e0:	e001      	b.n	800f1e6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f1f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3738      	adds	r7, #56	; 0x38
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08c      	sub	sp, #48	; 0x30
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f208:	2300      	movs	r3, #0
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10c      	bne.n	800f230 <xQueueReceive+0x34>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	b672      	cpsid	i
 800f21c:	f383 8811 	msr	BASEPRI, r3
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	f3bf 8f4f 	dsb	sy
 800f228:	b662      	cpsie	i
 800f22a:	623b      	str	r3, [r7, #32]
}
 800f22c:	bf00      	nop
 800f22e:	e7fe      	b.n	800f22e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d103      	bne.n	800f23e <xQueueReceive+0x42>
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <xQueueReceive+0x46>
 800f23e:	2301      	movs	r3, #1
 800f240:	e000      	b.n	800f244 <xQueueReceive+0x48>
 800f242:	2300      	movs	r3, #0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10c      	bne.n	800f262 <xQueueReceive+0x66>
	__asm volatile
 800f248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24c:	b672      	cpsid	i
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	b662      	cpsie	i
 800f25c:	61fb      	str	r3, [r7, #28]
}
 800f25e:	bf00      	nop
 800f260:	e7fe      	b.n	800f260 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f262:	f001 f90d 	bl	8010480 <xTaskGetSchedulerState>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d102      	bne.n	800f272 <xQueueReceive+0x76>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d101      	bne.n	800f276 <xQueueReceive+0x7a>
 800f272:	2301      	movs	r3, #1
 800f274:	e000      	b.n	800f278 <xQueueReceive+0x7c>
 800f276:	2300      	movs	r3, #0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10c      	bne.n	800f296 <xQueueReceive+0x9a>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	b672      	cpsid	i
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	b662      	cpsie	i
 800f290:	61bb      	str	r3, [r7, #24]
}
 800f292:	bf00      	nop
 800f294:	e7fe      	b.n	800f294 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f296:	f001 fe41 	bl	8010f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f29e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d01f      	beq.n	800f2e6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2a6:	68b9      	ldr	r1, [r7, #8]
 800f2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2aa:	f000 f97d 	bl	800f5a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	1e5a      	subs	r2, r3, #1
 800f2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00f      	beq.n	800f2de <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	3310      	adds	r3, #16
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 ff12 	bl	80100ec <xTaskRemoveFromEventList>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d007      	beq.n	800f2de <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2ce:	4b3d      	ldr	r3, [pc, #244]	; (800f3c4 <xQueueReceive+0x1c8>)
 800f2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2de:	f001 fe51 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e069      	b.n	800f3ba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d103      	bne.n	800f2f4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f2ec:	f001 fe4a 	bl	8010f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	e062      	b.n	800f3ba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d106      	bne.n	800f308 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2fa:	f107 0310 	add.w	r3, r7, #16
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 ff5a 	bl	80101b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f304:	2301      	movs	r3, #1
 800f306:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f308:	f001 fe3c 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f30c:	f000 fcba 	bl	800fc84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f310:	f001 fe04 	bl	8010f1c <vPortEnterCritical>
 800f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f31a:	b25b      	sxtb	r3, r3
 800f31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f320:	d103      	bne.n	800f32a <xQueueReceive+0x12e>
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f330:	b25b      	sxtb	r3, r3
 800f332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f336:	d103      	bne.n	800f340 <xQueueReceive+0x144>
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f340:	f001 fe20 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f344:	1d3a      	adds	r2, r7, #4
 800f346:	f107 0310 	add.w	r3, r7, #16
 800f34a:	4611      	mov	r1, r2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 ff49 	bl	80101e4 <xTaskCheckForTimeOut>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d123      	bne.n	800f3a0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f35a:	f000 f99d 	bl	800f698 <prvIsQueueEmpty>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d017      	beq.n	800f394 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	3324      	adds	r3, #36	; 0x24
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	4611      	mov	r1, r2
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 fe69 	bl	8010044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f374:	f000 f93e 	bl	800f5f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f378:	f000 fc92 	bl	800fca0 <xTaskResumeAll>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d189      	bne.n	800f296 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f382:	4b10      	ldr	r3, [pc, #64]	; (800f3c4 <xQueueReceive+0x1c8>)
 800f384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	e780      	b.n	800f296 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f396:	f000 f92d 	bl	800f5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f39a:	f000 fc81 	bl	800fca0 <xTaskResumeAll>
 800f39e:	e77a      	b.n	800f296 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3a2:	f000 f927 	bl	800f5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3a6:	f000 fc7b 	bl	800fca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ac:	f000 f974 	bl	800f698 <prvIsQueueEmpty>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f43f af6f 	beq.w	800f296 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3730      	adds	r7, #48	; 0x30
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	e000ed04 	.word	0xe000ed04

0800f3c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08e      	sub	sp, #56	; 0x38
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10c      	bne.n	800f3f8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	b672      	cpsid	i
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	b662      	cpsie	i
 800f3f2:	623b      	str	r3, [r7, #32]
}
 800f3f4:	bf00      	nop
 800f3f6:	e7fe      	b.n	800f3f6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d103      	bne.n	800f406 <xQueueReceiveFromISR+0x3e>
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <xQueueReceiveFromISR+0x42>
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <xQueueReceiveFromISR+0x44>
 800f40a:	2300      	movs	r3, #0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10c      	bne.n	800f42a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	b672      	cpsid	i
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	b662      	cpsie	i
 800f424:	61fb      	str	r3, [r7, #28]
}
 800f426:	bf00      	nop
 800f428:	e7fe      	b.n	800f428 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f42a:	f001 fe5f 	bl	80110ec <vPortValidateInterruptPriority>
	__asm volatile
 800f42e:	f3ef 8211 	mrs	r2, BASEPRI
 800f432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f436:	b672      	cpsid	i
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	b662      	cpsie	i
 800f446:	61ba      	str	r2, [r7, #24]
 800f448:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f44a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f44c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f452:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	2b00      	cmp	r3, #0
 800f458:	d02f      	beq.n	800f4ba <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f464:	68b9      	ldr	r1, [r7, #8]
 800f466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f468:	f000 f89e 	bl	800f5a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	1e5a      	subs	r2, r3, #1
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47c:	d112      	bne.n	800f4a4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	691b      	ldr	r3, [r3, #16]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d016      	beq.n	800f4b4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f488:	3310      	adds	r3, #16
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 fe2e 	bl	80100ec <xTaskRemoveFromEventList>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00e      	beq.n	800f4b4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00b      	beq.n	800f4b4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	e007      	b.n	800f4b4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	b25a      	sxtb	r2, r3
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b8:	e001      	b.n	800f4be <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f383 8811 	msr	BASEPRI, r3
}
 800f4c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3738      	adds	r7, #56	; 0x38
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10d      	bne.n	800f50e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d14d      	bne.n	800f596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 ffdc 	bl	80104bc <xTaskPriorityDisinherit>
 800f504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	609a      	str	r2, [r3, #8]
 800f50c:	e043      	b.n	800f596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d119      	bne.n	800f548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6858      	ldr	r0, [r3, #4]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51c:	461a      	mov	r2, r3
 800f51e:	68b9      	ldr	r1, [r7, #8]
 800f520:	f002 fdec 	bl	80120fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52c:	441a      	add	r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d32b      	bcc.n	800f596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	605a      	str	r2, [r3, #4]
 800f546:	e026      	b.n	800f596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	68d8      	ldr	r0, [r3, #12]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f550:	461a      	mov	r2, r3
 800f552:	68b9      	ldr	r1, [r7, #8]
 800f554:	f002 fdd2 	bl	80120fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68da      	ldr	r2, [r3, #12]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f560:	425b      	negs	r3, r3
 800f562:	441a      	add	r2, r3
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68da      	ldr	r2, [r3, #12]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	d207      	bcs.n	800f584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	689a      	ldr	r2, [r3, #8]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57c:	425b      	negs	r3, r3
 800f57e:	441a      	add	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2b02      	cmp	r3, #2
 800f588:	d105      	bne.n	800f596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	3b01      	subs	r3, #1
 800f594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f59e:	697b      	ldr	r3, [r7, #20]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d018      	beq.n	800f5ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68da      	ldr	r2, [r3, #12]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c2:	441a      	add	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68da      	ldr	r2, [r3, #12]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d303      	bcc.n	800f5dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68d9      	ldr	r1, [r3, #12]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6838      	ldr	r0, [r7, #0]
 800f5e8:	f002 fd88 	bl	80120fc <memcpy>
	}
}
 800f5ec:	bf00      	nop
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f5fc:	f001 fc8e 	bl	8010f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f608:	e011      	b.n	800f62e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d012      	beq.n	800f638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3324      	adds	r3, #36	; 0x24
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fd68 	bl	80100ec <xTaskRemoveFromEventList>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f622:	f000 fe45 	bl	80102b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	3b01      	subs	r3, #1
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f632:	2b00      	cmp	r3, #0
 800f634:	dce9      	bgt.n	800f60a <prvUnlockQueue+0x16>
 800f636:	e000      	b.n	800f63a <prvUnlockQueue+0x46>
					break;
 800f638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	22ff      	movs	r2, #255	; 0xff
 800f63e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f642:	f001 fc9f 	bl	8010f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f646:	f001 fc69 	bl	8010f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f652:	e011      	b.n	800f678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d012      	beq.n	800f682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3310      	adds	r3, #16
 800f660:	4618      	mov	r0, r3
 800f662:	f000 fd43 	bl	80100ec <xTaskRemoveFromEventList>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f66c:	f000 fe20 	bl	80102b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f670:	7bbb      	ldrb	r3, [r7, #14]
 800f672:	3b01      	subs	r3, #1
 800f674:	b2db      	uxtb	r3, r3
 800f676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	dce9      	bgt.n	800f654 <prvUnlockQueue+0x60>
 800f680:	e000      	b.n	800f684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	22ff      	movs	r2, #255	; 0xff
 800f688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f68c:	f001 fc7a 	bl	8010f84 <vPortExitCritical>
}
 800f690:	bf00      	nop
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6a0:	f001 fc3c 	bl	8010f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	e001      	b.n	800f6b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6b6:	f001 fc65 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3710      	adds	r7, #16
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6cc:	f001 fc26 	bl	8010f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d102      	bne.n	800f6e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	e001      	b.n	800f6e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6e6:	f001 fc4d 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f6fe:	2300      	movs	r3, #0
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e014      	b.n	800f72e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f704:	4a0f      	ldr	r2, [pc, #60]	; (800f744 <vQueueAddToRegistry+0x50>)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10b      	bne.n	800f728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f710:	490c      	ldr	r1, [pc, #48]	; (800f744 <vQueueAddToRegistry+0x50>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f71a:	4a0a      	ldr	r2, [pc, #40]	; (800f744 <vQueueAddToRegistry+0x50>)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	00db      	lsls	r3, r3, #3
 800f720:	4413      	add	r3, r2
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f726:	e006      	b.n	800f736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	3301      	adds	r3, #1
 800f72c:	60fb      	str	r3, [r7, #12]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2b07      	cmp	r3, #7
 800f732:	d9e7      	bls.n	800f704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f734:	bf00      	nop
 800f736:	bf00      	nop
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	20001584 	.word	0x20001584

0800f748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f758:	f001 fbe0 	bl	8010f1c <vPortEnterCritical>
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f762:	b25b      	sxtb	r3, r3
 800f764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f768:	d103      	bne.n	800f772 <vQueueWaitForMessageRestricted+0x2a>
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f778:	b25b      	sxtb	r3, r3
 800f77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77e:	d103      	bne.n	800f788 <vQueueWaitForMessageRestricted+0x40>
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2200      	movs	r2, #0
 800f784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f788:	f001 fbfc 	bl	8010f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f790:	2b00      	cmp	r3, #0
 800f792:	d106      	bne.n	800f7a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	3324      	adds	r3, #36	; 0x24
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f000 fc77 	bl	8010090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f7a2:	6978      	ldr	r0, [r7, #20]
 800f7a4:	f7ff ff26 	bl	800f5f4 <prvUnlockQueue>
	}
 800f7a8:	bf00      	nop
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08e      	sub	sp, #56	; 0x38
 800f7b4:	af04      	add	r7, sp, #16
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10c      	bne.n	800f7de <xTaskCreateStatic+0x2e>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c8:	b672      	cpsid	i
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	b662      	cpsie	i
 800f7d8:	623b      	str	r3, [r7, #32]
}
 800f7da:	bf00      	nop
 800f7dc:	e7fe      	b.n	800f7dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d10c      	bne.n	800f7fe <xTaskCreateStatic+0x4e>
	__asm volatile
 800f7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e8:	b672      	cpsid	i
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	b662      	cpsie	i
 800f7f8:	61fb      	str	r3, [r7, #28]
}
 800f7fa:	bf00      	nop
 800f7fc:	e7fe      	b.n	800f7fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7fe:	23bc      	movs	r3, #188	; 0xbc
 800f800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2bbc      	cmp	r3, #188	; 0xbc
 800f806:	d00c      	beq.n	800f822 <xTaskCreateStatic+0x72>
	__asm volatile
 800f808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80c:	b672      	cpsid	i
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	b662      	cpsie	i
 800f81c:	61bb      	str	r3, [r7, #24]
}
 800f81e:	bf00      	nop
 800f820:	e7fe      	b.n	800f820 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f822:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f826:	2b00      	cmp	r3, #0
 800f828:	d01e      	beq.n	800f868 <xTaskCreateStatic+0xb8>
 800f82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01b      	beq.n	800f868 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f838:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	2202      	movs	r2, #2
 800f83e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f842:	2300      	movs	r3, #0
 800f844:	9303      	str	r3, [sp, #12]
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	9302      	str	r3, [sp, #8]
 800f84a:	f107 0314 	add.w	r3, r7, #20
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f000 f850 	bl	800f900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f862:	f000 f8f5 	bl	800fa50 <prvAddNewTaskToReadyList>
 800f866:	e001      	b.n	800f86c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f868:	2300      	movs	r3, #0
 800f86a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f86c:	697b      	ldr	r3, [r7, #20]
	}
 800f86e:	4618      	mov	r0, r3
 800f870:	3728      	adds	r7, #40	; 0x28
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f876:	b580      	push	{r7, lr}
 800f878:	b08c      	sub	sp, #48	; 0x30
 800f87a:	af04      	add	r7, sp, #16
 800f87c:	60f8      	str	r0, [r7, #12]
 800f87e:	60b9      	str	r1, [r7, #8]
 800f880:	603b      	str	r3, [r7, #0]
 800f882:	4613      	mov	r3, r2
 800f884:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f001 fc72 	bl	8011174 <pvPortMalloc>
 800f890:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00e      	beq.n	800f8b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f898:	20bc      	movs	r0, #188	; 0xbc
 800f89a:	f001 fc6b 	bl	8011174 <pvPortMalloc>
 800f89e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	631a      	str	r2, [r3, #48]	; 0x30
 800f8ac:	e005      	b.n	800f8ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f8ae:	6978      	ldr	r0, [r7, #20]
 800f8b0:	f001 fd2a 	bl	8011308 <vPortFree>
 800f8b4:	e001      	b.n	800f8ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d017      	beq.n	800f8f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f8c8:	88fa      	ldrh	r2, [r7, #6]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	9303      	str	r3, [sp, #12]
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	9302      	str	r3, [sp, #8]
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	68b9      	ldr	r1, [r7, #8]
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f000 f80e 	bl	800f900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8e4:	69f8      	ldr	r0, [r7, #28]
 800f8e6:	f000 f8b3 	bl	800fa50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	61bb      	str	r3, [r7, #24]
 800f8ee:	e002      	b.n	800f8f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8f6:	69bb      	ldr	r3, [r7, #24]
	}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3720      	adds	r7, #32
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b088      	sub	sp, #32
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f910:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	461a      	mov	r2, r3
 800f918:	21a5      	movs	r1, #165	; 0xa5
 800f91a:	f002 fbfd 	bl	8012118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f922:	6879      	ldr	r1, [r7, #4]
 800f924:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f928:	440b      	add	r3, r1
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	f023 0307 	bic.w	r3, r3, #7
 800f936:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	f003 0307 	and.w	r3, r3, #7
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00c      	beq.n	800f95c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f946:	b672      	cpsid	i
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	b662      	cpsie	i
 800f956:	617b      	str	r3, [r7, #20]
}
 800f958:	bf00      	nop
 800f95a:	e7fe      	b.n	800f95a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d01f      	beq.n	800f9a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f962:	2300      	movs	r3, #0
 800f964:	61fb      	str	r3, [r7, #28]
 800f966:	e012      	b.n	800f98e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f968:	68ba      	ldr	r2, [r7, #8]
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	4413      	add	r3, r2
 800f96e:	7819      	ldrb	r1, [r3, #0]
 800f970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	4413      	add	r3, r2
 800f976:	3334      	adds	r3, #52	; 0x34
 800f978:	460a      	mov	r2, r1
 800f97a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	4413      	add	r3, r2
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d006      	beq.n	800f996 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	3301      	adds	r3, #1
 800f98c:	61fb      	str	r3, [r7, #28]
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	2b0f      	cmp	r3, #15
 800f992:	d9e9      	bls.n	800f968 <prvInitialiseNewTask+0x68>
 800f994:	e000      	b.n	800f998 <prvInitialiseNewTask+0x98>
			{
				break;
 800f996:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9a0:	e003      	b.n	800f9aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	2b37      	cmp	r3, #55	; 0x37
 800f9ae:	d901      	bls.n	800f9b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f9b0:	2337      	movs	r3, #55	; 0x37
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff f88a 	bl	800eae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	3318      	adds	r3, #24
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7ff f885 	bl	800eae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa02:	3354      	adds	r3, #84	; 0x54
 800fa04:	2260      	movs	r2, #96	; 0x60
 800fa06:	2100      	movs	r1, #0
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f002 fb85 	bl	8012118 <memset>
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	4a0c      	ldr	r2, [pc, #48]	; (800fa44 <prvInitialiseNewTask+0x144>)
 800fa12:	659a      	str	r2, [r3, #88]	; 0x58
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	4a0c      	ldr	r2, [pc, #48]	; (800fa48 <prvInitialiseNewTask+0x148>)
 800fa18:	65da      	str	r2, [r3, #92]	; 0x5c
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	4a0b      	ldr	r2, [pc, #44]	; (800fa4c <prvInitialiseNewTask+0x14c>)
 800fa1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa20:	683a      	ldr	r2, [r7, #0]
 800fa22:	68f9      	ldr	r1, [r7, #12]
 800fa24:	69b8      	ldr	r0, [r7, #24]
 800fa26:	f001 f96b 	bl	8010d00 <pxPortInitialiseStack>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa3c:	bf00      	nop
 800fa3e:	3720      	adds	r7, #32
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	080125a4 	.word	0x080125a4
 800fa48:	080125c4 	.word	0x080125c4
 800fa4c:	08012584 	.word	0x08012584

0800fa50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fa58:	f001 fa60 	bl	8010f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fa5c:	4b2d      	ldr	r3, [pc, #180]	; (800fb14 <prvAddNewTaskToReadyList+0xc4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	3301      	adds	r3, #1
 800fa62:	4a2c      	ldr	r2, [pc, #176]	; (800fb14 <prvAddNewTaskToReadyList+0xc4>)
 800fa64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa66:	4b2c      	ldr	r3, [pc, #176]	; (800fb18 <prvAddNewTaskToReadyList+0xc8>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d109      	bne.n	800fa82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa6e:	4a2a      	ldr	r2, [pc, #168]	; (800fb18 <prvAddNewTaskToReadyList+0xc8>)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa74:	4b27      	ldr	r3, [pc, #156]	; (800fb14 <prvAddNewTaskToReadyList+0xc4>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d110      	bne.n	800fa9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fa7c:	f000 fc3c 	bl	80102f8 <prvInitialiseTaskLists>
 800fa80:	e00d      	b.n	800fa9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fa82:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <prvAddNewTaskToReadyList+0xcc>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d109      	bne.n	800fa9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa8a:	4b23      	ldr	r3, [pc, #140]	; (800fb18 <prvAddNewTaskToReadyList+0xc8>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d802      	bhi.n	800fa9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa98:	4a1f      	ldr	r2, [pc, #124]	; (800fb18 <prvAddNewTaskToReadyList+0xc8>)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa9e:	4b20      	ldr	r3, [pc, #128]	; (800fb20 <prvAddNewTaskToReadyList+0xd0>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	3301      	adds	r3, #1
 800faa4:	4a1e      	ldr	r2, [pc, #120]	; (800fb20 <prvAddNewTaskToReadyList+0xd0>)
 800faa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800faa8:	4b1d      	ldr	r3, [pc, #116]	; (800fb20 <prvAddNewTaskToReadyList+0xd0>)
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fab4:	4b1b      	ldr	r3, [pc, #108]	; (800fb24 <prvAddNewTaskToReadyList+0xd4>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d903      	bls.n	800fac4 <prvAddNewTaskToReadyList+0x74>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac0:	4a18      	ldr	r2, [pc, #96]	; (800fb24 <prvAddNewTaskToReadyList+0xd4>)
 800fac2:	6013      	str	r3, [r2, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac8:	4613      	mov	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	4a15      	ldr	r2, [pc, #84]	; (800fb28 <prvAddNewTaskToReadyList+0xd8>)
 800fad2:	441a      	add	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	3304      	adds	r3, #4
 800fad8:	4619      	mov	r1, r3
 800fada:	4610      	mov	r0, r2
 800fadc:	f7ff f80f 	bl	800eafe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fae0:	f001 fa50 	bl	8010f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fae4:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <prvAddNewTaskToReadyList+0xcc>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00e      	beq.n	800fb0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800faec:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <prvAddNewTaskToReadyList+0xc8>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d207      	bcs.n	800fb0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fafa:	4b0c      	ldr	r3, [pc, #48]	; (800fb2c <prvAddNewTaskToReadyList+0xdc>)
 800fafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb0a:	bf00      	nop
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	20001a98 	.word	0x20001a98
 800fb18:	200015c4 	.word	0x200015c4
 800fb1c:	20001aa4 	.word	0x20001aa4
 800fb20:	20001ab4 	.word	0x20001ab4
 800fb24:	20001aa0 	.word	0x20001aa0
 800fb28:	200015c8 	.word	0x200015c8
 800fb2c:	e000ed04 	.word	0xe000ed04

0800fb30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d019      	beq.n	800fb76 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fb42:	4b14      	ldr	r3, [pc, #80]	; (800fb94 <vTaskDelay+0x64>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00c      	beq.n	800fb64 <vTaskDelay+0x34>
	__asm volatile
 800fb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4e:	b672      	cpsid	i
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	b662      	cpsie	i
 800fb5e:	60bb      	str	r3, [r7, #8]
}
 800fb60:	bf00      	nop
 800fb62:	e7fe      	b.n	800fb62 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fb64:	f000 f88e 	bl	800fc84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb68:	2100      	movs	r1, #0
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fd18 	bl	80105a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fb70:	f000 f896 	bl	800fca0 <xTaskResumeAll>
 800fb74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d107      	bne.n	800fb8c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fb7c:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <vTaskDelay+0x68>)
 800fb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb82:	601a      	str	r2, [r3, #0]
 800fb84:	f3bf 8f4f 	dsb	sy
 800fb88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb8c:	bf00      	nop
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20001ac0 	.word	0x20001ac0
 800fb98:	e000ed04 	.word	0xe000ed04

0800fb9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b08a      	sub	sp, #40	; 0x28
 800fba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fba2:	2300      	movs	r3, #0
 800fba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fbaa:	463a      	mov	r2, r7
 800fbac:	1d39      	adds	r1, r7, #4
 800fbae:	f107 0308 	add.w	r3, r7, #8
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe ff42 	bl	800ea3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fbb8:	6839      	ldr	r1, [r7, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68ba      	ldr	r2, [r7, #8]
 800fbbe:	9202      	str	r2, [sp, #8]
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	460a      	mov	r2, r1
 800fbca:	4926      	ldr	r1, [pc, #152]	; (800fc64 <vTaskStartScheduler+0xc8>)
 800fbcc:	4826      	ldr	r0, [pc, #152]	; (800fc68 <vTaskStartScheduler+0xcc>)
 800fbce:	f7ff fdef 	bl	800f7b0 <xTaskCreateStatic>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	4a25      	ldr	r2, [pc, #148]	; (800fc6c <vTaskStartScheduler+0xd0>)
 800fbd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fbd8:	4b24      	ldr	r3, [pc, #144]	; (800fc6c <vTaskStartScheduler+0xd0>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	617b      	str	r3, [r7, #20]
 800fbe4:	e001      	b.n	800fbea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d102      	bne.n	800fbf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fbf0:	f000 fd2a 	bl	8010648 <xTimerCreateTimerTask>
 800fbf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d11d      	bne.n	800fc38 <vTaskStartScheduler+0x9c>
	__asm volatile
 800fbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc00:	b672      	cpsid	i
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	b662      	cpsie	i
 800fc10:	613b      	str	r3, [r7, #16]
}
 800fc12:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc14:	4b16      	ldr	r3, [pc, #88]	; (800fc70 <vTaskStartScheduler+0xd4>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3354      	adds	r3, #84	; 0x54
 800fc1a:	4a16      	ldr	r2, [pc, #88]	; (800fc74 <vTaskStartScheduler+0xd8>)
 800fc1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fc1e:	4b16      	ldr	r3, [pc, #88]	; (800fc78 <vTaskStartScheduler+0xdc>)
 800fc20:	f04f 32ff 	mov.w	r2, #4294967295
 800fc24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fc26:	4b15      	ldr	r3, [pc, #84]	; (800fc7c <vTaskStartScheduler+0xe0>)
 800fc28:	2201      	movs	r2, #1
 800fc2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fc2c:	4b14      	ldr	r3, [pc, #80]	; (800fc80 <vTaskStartScheduler+0xe4>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fc32:	f001 f8f5 	bl	8010e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fc36:	e010      	b.n	800fc5a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc3e:	d10c      	bne.n	800fc5a <vTaskStartScheduler+0xbe>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	b672      	cpsid	i
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	b662      	cpsie	i
 800fc54:	60fb      	str	r3, [r7, #12]
}
 800fc56:	bf00      	nop
 800fc58:	e7fe      	b.n	800fc58 <vTaskStartScheduler+0xbc>
}
 800fc5a:	bf00      	nop
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	08012454 	.word	0x08012454
 800fc68:	080102c9 	.word	0x080102c9
 800fc6c:	20001abc 	.word	0x20001abc
 800fc70:	200015c4 	.word	0x200015c4
 800fc74:	20000190 	.word	0x20000190
 800fc78:	20001ab8 	.word	0x20001ab8
 800fc7c:	20001aa4 	.word	0x20001aa4
 800fc80:	20001a9c 	.word	0x20001a9c

0800fc84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fc88:	4b04      	ldr	r3, [pc, #16]	; (800fc9c <vTaskSuspendAll+0x18>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	4a03      	ldr	r2, [pc, #12]	; (800fc9c <vTaskSuspendAll+0x18>)
 800fc90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fc92:	bf00      	nop
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	20001ac0 	.word	0x20001ac0

0800fca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fca6:	2300      	movs	r3, #0
 800fca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fcae:	4b43      	ldr	r3, [pc, #268]	; (800fdbc <xTaskResumeAll+0x11c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10c      	bne.n	800fcd0 <xTaskResumeAll+0x30>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	b672      	cpsid	i
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	b662      	cpsie	i
 800fcca:	603b      	str	r3, [r7, #0]
}
 800fccc:	bf00      	nop
 800fcce:	e7fe      	b.n	800fcce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fcd0:	f001 f924 	bl	8010f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fcd4:	4b39      	ldr	r3, [pc, #228]	; (800fdbc <xTaskResumeAll+0x11c>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	4a38      	ldr	r2, [pc, #224]	; (800fdbc <xTaskResumeAll+0x11c>)
 800fcdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcde:	4b37      	ldr	r3, [pc, #220]	; (800fdbc <xTaskResumeAll+0x11c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d162      	bne.n	800fdac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fce6:	4b36      	ldr	r3, [pc, #216]	; (800fdc0 <xTaskResumeAll+0x120>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d05e      	beq.n	800fdac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fcee:	e02f      	b.n	800fd50 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf0:	4b34      	ldr	r3, [pc, #208]	; (800fdc4 <xTaskResumeAll+0x124>)
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	3318      	adds	r3, #24
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe ff5b 	bl	800ebb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3304      	adds	r3, #4
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe ff56 	bl	800ebb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd10:	4b2d      	ldr	r3, [pc, #180]	; (800fdc8 <xTaskResumeAll+0x128>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d903      	bls.n	800fd20 <xTaskResumeAll+0x80>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	4a2a      	ldr	r2, [pc, #168]	; (800fdc8 <xTaskResumeAll+0x128>)
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd24:	4613      	mov	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	4a27      	ldr	r2, [pc, #156]	; (800fdcc <xTaskResumeAll+0x12c>)
 800fd2e:	441a      	add	r2, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4619      	mov	r1, r3
 800fd36:	4610      	mov	r0, r2
 800fd38:	f7fe fee1 	bl	800eafe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd40:	4b23      	ldr	r3, [pc, #140]	; (800fdd0 <xTaskResumeAll+0x130>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d302      	bcc.n	800fd50 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800fd4a:	4b22      	ldr	r3, [pc, #136]	; (800fdd4 <xTaskResumeAll+0x134>)
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd50:	4b1c      	ldr	r3, [pc, #112]	; (800fdc4 <xTaskResumeAll+0x124>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1cb      	bne.n	800fcf0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d001      	beq.n	800fd62 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fd5e:	f000 fb6f 	bl	8010440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fd62:	4b1d      	ldr	r3, [pc, #116]	; (800fdd8 <xTaskResumeAll+0x138>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d010      	beq.n	800fd90 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fd6e:	f000 f847 	bl	800fe00 <xTaskIncrementTick>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fd78:	4b16      	ldr	r3, [pc, #88]	; (800fdd4 <xTaskResumeAll+0x134>)
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	3b01      	subs	r3, #1
 800fd82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1f1      	bne.n	800fd6e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fd8a:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <xTaskResumeAll+0x138>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fd90:	4b10      	ldr	r3, [pc, #64]	; (800fdd4 <xTaskResumeAll+0x134>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d009      	beq.n	800fdac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fd9c:	4b0f      	ldr	r3, [pc, #60]	; (800fddc <xTaskResumeAll+0x13c>)
 800fd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fdac:	f001 f8ea 	bl	8010f84 <vPortExitCritical>

	return xAlreadyYielded;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	20001ac0 	.word	0x20001ac0
 800fdc0:	20001a98 	.word	0x20001a98
 800fdc4:	20001a58 	.word	0x20001a58
 800fdc8:	20001aa0 	.word	0x20001aa0
 800fdcc:	200015c8 	.word	0x200015c8
 800fdd0:	200015c4 	.word	0x200015c4
 800fdd4:	20001aac 	.word	0x20001aac
 800fdd8:	20001aa8 	.word	0x20001aa8
 800fddc:	e000ed04 	.word	0xe000ed04

0800fde0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fde6:	4b05      	ldr	r3, [pc, #20]	; (800fdfc <xTaskGetTickCount+0x1c>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fdec:	687b      	ldr	r3, [r7, #4]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	20001a9c 	.word	0x20001a9c

0800fe00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b086      	sub	sp, #24
 800fe04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fe06:	2300      	movs	r3, #0
 800fe08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe0a:	4b50      	ldr	r3, [pc, #320]	; (800ff4c <xTaskIncrementTick+0x14c>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f040 808b 	bne.w	800ff2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fe14:	4b4e      	ldr	r3, [pc, #312]	; (800ff50 <xTaskIncrementTick+0x150>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fe1c:	4a4c      	ldr	r2, [pc, #304]	; (800ff50 <xTaskIncrementTick+0x150>)
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d122      	bne.n	800fe6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fe28:	4b4a      	ldr	r3, [pc, #296]	; (800ff54 <xTaskIncrementTick+0x154>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00c      	beq.n	800fe4c <xTaskIncrementTick+0x4c>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	b672      	cpsid	i
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	b662      	cpsie	i
 800fe46:	603b      	str	r3, [r7, #0]
}
 800fe48:	bf00      	nop
 800fe4a:	e7fe      	b.n	800fe4a <xTaskIncrementTick+0x4a>
 800fe4c:	4b41      	ldr	r3, [pc, #260]	; (800ff54 <xTaskIncrementTick+0x154>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	4b41      	ldr	r3, [pc, #260]	; (800ff58 <xTaskIncrementTick+0x158>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a3f      	ldr	r2, [pc, #252]	; (800ff54 <xTaskIncrementTick+0x154>)
 800fe58:	6013      	str	r3, [r2, #0]
 800fe5a:	4a3f      	ldr	r2, [pc, #252]	; (800ff58 <xTaskIncrementTick+0x158>)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	4b3e      	ldr	r3, [pc, #248]	; (800ff5c <xTaskIncrementTick+0x15c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	4a3d      	ldr	r2, [pc, #244]	; (800ff5c <xTaskIncrementTick+0x15c>)
 800fe68:	6013      	str	r3, [r2, #0]
 800fe6a:	f000 fae9 	bl	8010440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe6e:	4b3c      	ldr	r3, [pc, #240]	; (800ff60 <xTaskIncrementTick+0x160>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	693a      	ldr	r2, [r7, #16]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d349      	bcc.n	800ff0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe78:	4b36      	ldr	r3, [pc, #216]	; (800ff54 <xTaskIncrementTick+0x154>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d104      	bne.n	800fe8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe82:	4b37      	ldr	r3, [pc, #220]	; (800ff60 <xTaskIncrementTick+0x160>)
 800fe84:	f04f 32ff 	mov.w	r2, #4294967295
 800fe88:	601a      	str	r2, [r3, #0]
					break;
 800fe8a:	e03f      	b.n	800ff0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe8c:	4b31      	ldr	r3, [pc, #196]	; (800ff54 <xTaskIncrementTick+0x154>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d203      	bcs.n	800feac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fea4:	4a2e      	ldr	r2, [pc, #184]	; (800ff60 <xTaskIncrementTick+0x160>)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800feaa:	e02f      	b.n	800ff0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	3304      	adds	r3, #4
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fe fe81 	bl	800ebb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feba:	2b00      	cmp	r3, #0
 800febc:	d004      	beq.n	800fec8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	3318      	adds	r3, #24
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fe fe78 	bl	800ebb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fecc:	4b25      	ldr	r3, [pc, #148]	; (800ff64 <xTaskIncrementTick+0x164>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d903      	bls.n	800fedc <xTaskIncrementTick+0xdc>
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed8:	4a22      	ldr	r2, [pc, #136]	; (800ff64 <xTaskIncrementTick+0x164>)
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee0:	4613      	mov	r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	4413      	add	r3, r2
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4a1f      	ldr	r2, [pc, #124]	; (800ff68 <xTaskIncrementTick+0x168>)
 800feea:	441a      	add	r2, r3
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	3304      	adds	r3, #4
 800fef0:	4619      	mov	r1, r3
 800fef2:	4610      	mov	r0, r2
 800fef4:	f7fe fe03 	bl	800eafe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fefc:	4b1b      	ldr	r3, [pc, #108]	; (800ff6c <xTaskIncrementTick+0x16c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d3b8      	bcc.n	800fe78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ff06:	2301      	movs	r3, #1
 800ff08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff0a:	e7b5      	b.n	800fe78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ff0c:	4b17      	ldr	r3, [pc, #92]	; (800ff6c <xTaskIncrementTick+0x16c>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff12:	4915      	ldr	r1, [pc, #84]	; (800ff68 <xTaskIncrementTick+0x168>)
 800ff14:	4613      	mov	r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	440b      	add	r3, r1
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d907      	bls.n	800ff34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ff24:	2301      	movs	r3, #1
 800ff26:	617b      	str	r3, [r7, #20]
 800ff28:	e004      	b.n	800ff34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ff2a:	4b11      	ldr	r3, [pc, #68]	; (800ff70 <xTaskIncrementTick+0x170>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	4a0f      	ldr	r2, [pc, #60]	; (800ff70 <xTaskIncrementTick+0x170>)
 800ff32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ff34:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <xTaskIncrementTick+0x174>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ff40:	697b      	ldr	r3, [r7, #20]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3718      	adds	r7, #24
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20001ac0 	.word	0x20001ac0
 800ff50:	20001a9c 	.word	0x20001a9c
 800ff54:	20001a50 	.word	0x20001a50
 800ff58:	20001a54 	.word	0x20001a54
 800ff5c:	20001ab0 	.word	0x20001ab0
 800ff60:	20001ab8 	.word	0x20001ab8
 800ff64:	20001aa0 	.word	0x20001aa0
 800ff68:	200015c8 	.word	0x200015c8
 800ff6c:	200015c4 	.word	0x200015c4
 800ff70:	20001aa8 	.word	0x20001aa8
 800ff74:	20001aac 	.word	0x20001aac

0800ff78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff7e:	4b2b      	ldr	r3, [pc, #172]	; (801002c <vTaskSwitchContext+0xb4>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d003      	beq.n	800ff8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff86:	4b2a      	ldr	r3, [pc, #168]	; (8010030 <vTaskSwitchContext+0xb8>)
 800ff88:	2201      	movs	r2, #1
 800ff8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff8c:	e048      	b.n	8010020 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ff8e:	4b28      	ldr	r3, [pc, #160]	; (8010030 <vTaskSwitchContext+0xb8>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff94:	4b27      	ldr	r3, [pc, #156]	; (8010034 <vTaskSwitchContext+0xbc>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	60fb      	str	r3, [r7, #12]
 800ff9a:	e012      	b.n	800ffc2 <vTaskSwitchContext+0x4a>
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10c      	bne.n	800ffbc <vTaskSwitchContext+0x44>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa6:	b672      	cpsid	i
 800ffa8:	f383 8811 	msr	BASEPRI, r3
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	b662      	cpsie	i
 800ffb6:	607b      	str	r3, [r7, #4]
}
 800ffb8:	bf00      	nop
 800ffba:	e7fe      	b.n	800ffba <vTaskSwitchContext+0x42>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	491d      	ldr	r1, [pc, #116]	; (8010038 <vTaskSwitchContext+0xc0>)
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0e2      	beq.n	800ff9c <vTaskSwitchContext+0x24>
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	4613      	mov	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	4413      	add	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4a15      	ldr	r2, [pc, #84]	; (8010038 <vTaskSwitchContext+0xc0>)
 800ffe2:	4413      	add	r3, r2
 800ffe4:	60bb      	str	r3, [r7, #8]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	605a      	str	r2, [r3, #4]
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	3308      	adds	r3, #8
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d104      	bne.n	8010006 <vTaskSwitchContext+0x8e>
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	605a      	str	r2, [r3, #4]
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	4a0b      	ldr	r2, [pc, #44]	; (801003c <vTaskSwitchContext+0xc4>)
 801000e:	6013      	str	r3, [r2, #0]
 8010010:	4a08      	ldr	r2, [pc, #32]	; (8010034 <vTaskSwitchContext+0xbc>)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010016:	4b09      	ldr	r3, [pc, #36]	; (801003c <vTaskSwitchContext+0xc4>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3354      	adds	r3, #84	; 0x54
 801001c:	4a08      	ldr	r2, [pc, #32]	; (8010040 <vTaskSwitchContext+0xc8>)
 801001e:	6013      	str	r3, [r2, #0]
}
 8010020:	bf00      	nop
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	20001ac0 	.word	0x20001ac0
 8010030:	20001aac 	.word	0x20001aac
 8010034:	20001aa0 	.word	0x20001aa0
 8010038:	200015c8 	.word	0x200015c8
 801003c:	200015c4 	.word	0x200015c4
 8010040:	20000190 	.word	0x20000190

08010044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10c      	bne.n	801006e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	b672      	cpsid	i
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	b662      	cpsie	i
 8010068:	60fb      	str	r3, [r7, #12]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801006e:	4b07      	ldr	r3, [pc, #28]	; (801008c <vTaskPlaceOnEventList+0x48>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3318      	adds	r3, #24
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7fe fd65 	bl	800eb46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801007c:	2101      	movs	r1, #1
 801007e:	6838      	ldr	r0, [r7, #0]
 8010080:	f000 fa8e 	bl	80105a0 <prvAddCurrentTaskToDelayedList>
}
 8010084:	bf00      	nop
 8010086:	3710      	adds	r7, #16
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	200015c4 	.word	0x200015c4

08010090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10c      	bne.n	80100bc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80100a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a6:	b672      	cpsid	i
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	b662      	cpsie	i
 80100b6:	617b      	str	r3, [r7, #20]
}
 80100b8:	bf00      	nop
 80100ba:	e7fe      	b.n	80100ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100bc:	4b0a      	ldr	r3, [pc, #40]	; (80100e8 <vTaskPlaceOnEventListRestricted+0x58>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	3318      	adds	r3, #24
 80100c2:	4619      	mov	r1, r3
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f7fe fd1a 	bl	800eafe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80100d0:	f04f 33ff 	mov.w	r3, #4294967295
 80100d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	68b8      	ldr	r0, [r7, #8]
 80100da:	f000 fa61 	bl	80105a0 <prvAddCurrentTaskToDelayedList>
	}
 80100de:	bf00      	nop
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	200015c4 	.word	0x200015c4

080100ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10c      	bne.n	801011c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010106:	b672      	cpsid	i
 8010108:	f383 8811 	msr	BASEPRI, r3
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	b662      	cpsie	i
 8010116:	60fb      	str	r3, [r7, #12]
}
 8010118:	bf00      	nop
 801011a:	e7fe      	b.n	801011a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	3318      	adds	r3, #24
 8010120:	4618      	mov	r0, r3
 8010122:	f7fe fd49 	bl	800ebb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010126:	4b1e      	ldr	r3, [pc, #120]	; (80101a0 <xTaskRemoveFromEventList+0xb4>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d11d      	bne.n	801016a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	3304      	adds	r3, #4
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe fd40 	bl	800ebb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801013c:	4b19      	ldr	r3, [pc, #100]	; (80101a4 <xTaskRemoveFromEventList+0xb8>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d903      	bls.n	801014c <xTaskRemoveFromEventList+0x60>
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010148:	4a16      	ldr	r2, [pc, #88]	; (80101a4 <xTaskRemoveFromEventList+0xb8>)
 801014a:	6013      	str	r3, [r2, #0]
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010150:	4613      	mov	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	4413      	add	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	4a13      	ldr	r2, [pc, #76]	; (80101a8 <xTaskRemoveFromEventList+0xbc>)
 801015a:	441a      	add	r2, r3
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	3304      	adds	r3, #4
 8010160:	4619      	mov	r1, r3
 8010162:	4610      	mov	r0, r2
 8010164:	f7fe fccb 	bl	800eafe <vListInsertEnd>
 8010168:	e005      	b.n	8010176 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	3318      	adds	r3, #24
 801016e:	4619      	mov	r1, r3
 8010170:	480e      	ldr	r0, [pc, #56]	; (80101ac <xTaskRemoveFromEventList+0xc0>)
 8010172:	f7fe fcc4 	bl	800eafe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801017a:	4b0d      	ldr	r3, [pc, #52]	; (80101b0 <xTaskRemoveFromEventList+0xc4>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010180:	429a      	cmp	r2, r3
 8010182:	d905      	bls.n	8010190 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010184:	2301      	movs	r3, #1
 8010186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010188:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <xTaskRemoveFromEventList+0xc8>)
 801018a:	2201      	movs	r2, #1
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	e001      	b.n	8010194 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010194:	697b      	ldr	r3, [r7, #20]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	20001ac0 	.word	0x20001ac0
 80101a4:	20001aa0 	.word	0x20001aa0
 80101a8:	200015c8 	.word	0x200015c8
 80101ac:	20001a58 	.word	0x20001a58
 80101b0:	200015c4 	.word	0x200015c4
 80101b4:	20001aac 	.word	0x20001aac

080101b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80101c0:	4b06      	ldr	r3, [pc, #24]	; (80101dc <vTaskInternalSetTimeOutState+0x24>)
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80101c8:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <vTaskInternalSetTimeOutState+0x28>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	605a      	str	r2, [r3, #4]
}
 80101d0:	bf00      	nop
 80101d2:	370c      	adds	r7, #12
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	20001ab0 	.word	0x20001ab0
 80101e0:	20001a9c 	.word	0x20001a9c

080101e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b088      	sub	sp, #32
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10c      	bne.n	801020e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80101f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f8:	b672      	cpsid	i
 80101fa:	f383 8811 	msr	BASEPRI, r3
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f3bf 8f4f 	dsb	sy
 8010206:	b662      	cpsie	i
 8010208:	613b      	str	r3, [r7, #16]
}
 801020a:	bf00      	nop
 801020c:	e7fe      	b.n	801020c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10c      	bne.n	801022e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010218:	b672      	cpsid	i
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	b662      	cpsie	i
 8010228:	60fb      	str	r3, [r7, #12]
}
 801022a:	bf00      	nop
 801022c:	e7fe      	b.n	801022c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801022e:	f000 fe75 	bl	8010f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010232:	4b1d      	ldr	r3, [pc, #116]	; (80102a8 <xTaskCheckForTimeOut+0xc4>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	69ba      	ldr	r2, [r7, #24]
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024a:	d102      	bne.n	8010252 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801024c:	2300      	movs	r3, #0
 801024e:	61fb      	str	r3, [r7, #28]
 8010250:	e023      	b.n	801029a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	4b15      	ldr	r3, [pc, #84]	; (80102ac <xTaskCheckForTimeOut+0xc8>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	429a      	cmp	r2, r3
 801025c:	d007      	beq.n	801026e <xTaskCheckForTimeOut+0x8a>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	429a      	cmp	r2, r3
 8010266:	d302      	bcc.n	801026e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010268:	2301      	movs	r3, #1
 801026a:	61fb      	str	r3, [r7, #28]
 801026c:	e015      	b.n	801029a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	429a      	cmp	r2, r3
 8010276:	d20b      	bcs.n	8010290 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	1ad2      	subs	r2, r2, r3
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff ff97 	bl	80101b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801028a:	2300      	movs	r3, #0
 801028c:	61fb      	str	r3, [r7, #28]
 801028e:	e004      	b.n	801029a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	2200      	movs	r2, #0
 8010294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010296:	2301      	movs	r3, #1
 8010298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801029a:	f000 fe73 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 801029e:	69fb      	ldr	r3, [r7, #28]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3720      	adds	r7, #32
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	20001a9c 	.word	0x20001a9c
 80102ac:	20001ab0 	.word	0x20001ab0

080102b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80102b0:	b480      	push	{r7}
 80102b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80102b4:	4b03      	ldr	r3, [pc, #12]	; (80102c4 <vTaskMissedYield+0x14>)
 80102b6:	2201      	movs	r2, #1
 80102b8:	601a      	str	r2, [r3, #0]
}
 80102ba:	bf00      	nop
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	20001aac 	.word	0x20001aac

080102c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80102d0:	f000 f852 	bl	8010378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80102d4:	4b06      	ldr	r3, [pc, #24]	; (80102f0 <prvIdleTask+0x28>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d9f9      	bls.n	80102d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80102dc:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <prvIdleTask+0x2c>)
 80102de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80102ec:	e7f0      	b.n	80102d0 <prvIdleTask+0x8>
 80102ee:	bf00      	nop
 80102f0:	200015c8 	.word	0x200015c8
 80102f4:	e000ed04 	.word	0xe000ed04

080102f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102fe:	2300      	movs	r3, #0
 8010300:	607b      	str	r3, [r7, #4]
 8010302:	e00c      	b.n	801031e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	4613      	mov	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4413      	add	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4a12      	ldr	r2, [pc, #72]	; (8010358 <prvInitialiseTaskLists+0x60>)
 8010310:	4413      	add	r3, r2
 8010312:	4618      	mov	r0, r3
 8010314:	f7fe fbc6 	bl	800eaa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3301      	adds	r3, #1
 801031c:	607b      	str	r3, [r7, #4]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2b37      	cmp	r3, #55	; 0x37
 8010322:	d9ef      	bls.n	8010304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010324:	480d      	ldr	r0, [pc, #52]	; (801035c <prvInitialiseTaskLists+0x64>)
 8010326:	f7fe fbbd 	bl	800eaa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801032a:	480d      	ldr	r0, [pc, #52]	; (8010360 <prvInitialiseTaskLists+0x68>)
 801032c:	f7fe fbba 	bl	800eaa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010330:	480c      	ldr	r0, [pc, #48]	; (8010364 <prvInitialiseTaskLists+0x6c>)
 8010332:	f7fe fbb7 	bl	800eaa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010336:	480c      	ldr	r0, [pc, #48]	; (8010368 <prvInitialiseTaskLists+0x70>)
 8010338:	f7fe fbb4 	bl	800eaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801033c:	480b      	ldr	r0, [pc, #44]	; (801036c <prvInitialiseTaskLists+0x74>)
 801033e:	f7fe fbb1 	bl	800eaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010342:	4b0b      	ldr	r3, [pc, #44]	; (8010370 <prvInitialiseTaskLists+0x78>)
 8010344:	4a05      	ldr	r2, [pc, #20]	; (801035c <prvInitialiseTaskLists+0x64>)
 8010346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010348:	4b0a      	ldr	r3, [pc, #40]	; (8010374 <prvInitialiseTaskLists+0x7c>)
 801034a:	4a05      	ldr	r2, [pc, #20]	; (8010360 <prvInitialiseTaskLists+0x68>)
 801034c:	601a      	str	r2, [r3, #0]
}
 801034e:	bf00      	nop
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	200015c8 	.word	0x200015c8
 801035c:	20001a28 	.word	0x20001a28
 8010360:	20001a3c 	.word	0x20001a3c
 8010364:	20001a58 	.word	0x20001a58
 8010368:	20001a6c 	.word	0x20001a6c
 801036c:	20001a84 	.word	0x20001a84
 8010370:	20001a50 	.word	0x20001a50
 8010374:	20001a54 	.word	0x20001a54

08010378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801037e:	e019      	b.n	80103b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010380:	f000 fdcc 	bl	8010f1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010384:	4b10      	ldr	r3, [pc, #64]	; (80103c8 <prvCheckTasksWaitingTermination+0x50>)
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	3304      	adds	r3, #4
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe fc11 	bl	800ebb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010396:	4b0d      	ldr	r3, [pc, #52]	; (80103cc <prvCheckTasksWaitingTermination+0x54>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	3b01      	subs	r3, #1
 801039c:	4a0b      	ldr	r2, [pc, #44]	; (80103cc <prvCheckTasksWaitingTermination+0x54>)
 801039e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80103a0:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <prvCheckTasksWaitingTermination+0x58>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	4a0a      	ldr	r2, [pc, #40]	; (80103d0 <prvCheckTasksWaitingTermination+0x58>)
 80103a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80103aa:	f000 fdeb 	bl	8010f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f810 	bl	80103d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80103b4:	4b06      	ldr	r3, [pc, #24]	; (80103d0 <prvCheckTasksWaitingTermination+0x58>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1e1      	bne.n	8010380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80103bc:	bf00      	nop
 80103be:	bf00      	nop
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20001a6c 	.word	0x20001a6c
 80103cc:	20001a98 	.word	0x20001a98
 80103d0:	20001a80 	.word	0x20001a80

080103d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3354      	adds	r3, #84	; 0x54
 80103e0:	4618      	mov	r0, r3
 80103e2:	f001 ff8f 	bl	8012304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d108      	bne.n	8010402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 ff87 	bl	8011308 <vPortFree>
				vPortFree( pxTCB );
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 ff84 	bl	8011308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010400:	e01a      	b.n	8010438 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010408:	2b01      	cmp	r3, #1
 801040a:	d103      	bne.n	8010414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 ff7b 	bl	8011308 <vPortFree>
	}
 8010412:	e011      	b.n	8010438 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801041a:	2b02      	cmp	r3, #2
 801041c:	d00c      	beq.n	8010438 <prvDeleteTCB+0x64>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	b672      	cpsid	i
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	b662      	cpsie	i
 8010432:	60fb      	str	r3, [r7, #12]
}
 8010434:	bf00      	nop
 8010436:	e7fe      	b.n	8010436 <prvDeleteTCB+0x62>
	}
 8010438:	bf00      	nop
 801043a:	3710      	adds	r7, #16
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010446:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <prvResetNextTaskUnblockTime+0x38>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d104      	bne.n	801045a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010450:	4b0a      	ldr	r3, [pc, #40]	; (801047c <prvResetNextTaskUnblockTime+0x3c>)
 8010452:	f04f 32ff 	mov.w	r2, #4294967295
 8010456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010458:	e008      	b.n	801046c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801045a:	4b07      	ldr	r3, [pc, #28]	; (8010478 <prvResetNextTaskUnblockTime+0x38>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	4a04      	ldr	r2, [pc, #16]	; (801047c <prvResetNextTaskUnblockTime+0x3c>)
 801046a:	6013      	str	r3, [r2, #0]
}
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	20001a50 	.word	0x20001a50
 801047c:	20001ab8 	.word	0x20001ab8

08010480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010486:	4b0b      	ldr	r3, [pc, #44]	; (80104b4 <xTaskGetSchedulerState+0x34>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801048e:	2301      	movs	r3, #1
 8010490:	607b      	str	r3, [r7, #4]
 8010492:	e008      	b.n	80104a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010494:	4b08      	ldr	r3, [pc, #32]	; (80104b8 <xTaskGetSchedulerState+0x38>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d102      	bne.n	80104a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801049c:	2302      	movs	r3, #2
 801049e:	607b      	str	r3, [r7, #4]
 80104a0:	e001      	b.n	80104a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80104a2:	2300      	movs	r3, #0
 80104a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80104a6:	687b      	ldr	r3, [r7, #4]
	}
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr
 80104b4:	20001aa4 	.word	0x20001aa4
 80104b8:	20001ac0 	.word	0x20001ac0

080104bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80104c8:	2300      	movs	r3, #0
 80104ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d05a      	beq.n	8010588 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80104d2:	4b30      	ldr	r3, [pc, #192]	; (8010594 <xTaskPriorityDisinherit+0xd8>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d00c      	beq.n	80104f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	b672      	cpsid	i
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	b662      	cpsie	i
 80104f0:	60fb      	str	r3, [r7, #12]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d10c      	bne.n	8010518 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010502:	b672      	cpsid	i
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	b662      	cpsie	i
 8010512:	60bb      	str	r3, [r7, #8]
}
 8010514:	bf00      	nop
 8010516:	e7fe      	b.n	8010516 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801051c:	1e5a      	subs	r2, r3, #1
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801052a:	429a      	cmp	r2, r3
 801052c:	d02c      	beq.n	8010588 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010532:	2b00      	cmp	r3, #0
 8010534:	d128      	bne.n	8010588 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	3304      	adds	r3, #4
 801053a:	4618      	mov	r0, r3
 801053c:	f7fe fb3c 	bl	800ebb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010558:	4b0f      	ldr	r3, [pc, #60]	; (8010598 <xTaskPriorityDisinherit+0xdc>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	429a      	cmp	r2, r3
 801055e:	d903      	bls.n	8010568 <xTaskPriorityDisinherit+0xac>
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010564:	4a0c      	ldr	r2, [pc, #48]	; (8010598 <xTaskPriorityDisinherit+0xdc>)
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801056c:	4613      	mov	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4413      	add	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4a09      	ldr	r2, [pc, #36]	; (801059c <xTaskPriorityDisinherit+0xe0>)
 8010576:	441a      	add	r2, r3
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	3304      	adds	r3, #4
 801057c:	4619      	mov	r1, r3
 801057e:	4610      	mov	r0, r2
 8010580:	f7fe fabd 	bl	800eafe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010584:	2301      	movs	r3, #1
 8010586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010588:	697b      	ldr	r3, [r7, #20]
	}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	200015c4 	.word	0x200015c4
 8010598:	20001aa0 	.word	0x20001aa0
 801059c:	200015c8 	.word	0x200015c8

080105a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105aa:	4b21      	ldr	r3, [pc, #132]	; (8010630 <prvAddCurrentTaskToDelayedList+0x90>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105b0:	4b20      	ldr	r3, [pc, #128]	; (8010634 <prvAddCurrentTaskToDelayedList+0x94>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3304      	adds	r3, #4
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fafe 	bl	800ebb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105c2:	d10a      	bne.n	80105da <prvAddCurrentTaskToDelayedList+0x3a>
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d007      	beq.n	80105da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105ca:	4b1a      	ldr	r3, [pc, #104]	; (8010634 <prvAddCurrentTaskToDelayedList+0x94>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	3304      	adds	r3, #4
 80105d0:	4619      	mov	r1, r3
 80105d2:	4819      	ldr	r0, [pc, #100]	; (8010638 <prvAddCurrentTaskToDelayedList+0x98>)
 80105d4:	f7fe fa93 	bl	800eafe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80105d8:	e026      	b.n	8010628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4413      	add	r3, r2
 80105e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80105e2:	4b14      	ldr	r3, [pc, #80]	; (8010634 <prvAddCurrentTaskToDelayedList+0x94>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d209      	bcs.n	8010606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105f2:	4b12      	ldr	r3, [pc, #72]	; (801063c <prvAddCurrentTaskToDelayedList+0x9c>)
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	4b0f      	ldr	r3, [pc, #60]	; (8010634 <prvAddCurrentTaskToDelayedList+0x94>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3304      	adds	r3, #4
 80105fc:	4619      	mov	r1, r3
 80105fe:	4610      	mov	r0, r2
 8010600:	f7fe faa1 	bl	800eb46 <vListInsert>
}
 8010604:	e010      	b.n	8010628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010606:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	4b0a      	ldr	r3, [pc, #40]	; (8010634 <prvAddCurrentTaskToDelayedList+0x94>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3304      	adds	r3, #4
 8010610:	4619      	mov	r1, r3
 8010612:	4610      	mov	r0, r2
 8010614:	f7fe fa97 	bl	800eb46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <prvAddCurrentTaskToDelayedList+0xa4>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	429a      	cmp	r2, r3
 8010620:	d202      	bcs.n	8010628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010622:	4a08      	ldr	r2, [pc, #32]	; (8010644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	6013      	str	r3, [r2, #0]
}
 8010628:	bf00      	nop
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	20001a9c 	.word	0x20001a9c
 8010634:	200015c4 	.word	0x200015c4
 8010638:	20001a84 	.word	0x20001a84
 801063c:	20001a54 	.word	0x20001a54
 8010640:	20001a50 	.word	0x20001a50
 8010644:	20001ab8 	.word	0x20001ab8

08010648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b08a      	sub	sp, #40	; 0x28
 801064c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801064e:	2300      	movs	r3, #0
 8010650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010652:	f000 fb15 	bl	8010c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010656:	4b1d      	ldr	r3, [pc, #116]	; (80106cc <xTimerCreateTimerTask+0x84>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d021      	beq.n	80106a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801065e:	2300      	movs	r3, #0
 8010660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010666:	1d3a      	adds	r2, r7, #4
 8010668:	f107 0108 	add.w	r1, r7, #8
 801066c:	f107 030c 	add.w	r3, r7, #12
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe f9fd 	bl	800ea70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010676:	6879      	ldr	r1, [r7, #4]
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	9202      	str	r2, [sp, #8]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	2302      	movs	r3, #2
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	2300      	movs	r3, #0
 8010686:	460a      	mov	r2, r1
 8010688:	4911      	ldr	r1, [pc, #68]	; (80106d0 <xTimerCreateTimerTask+0x88>)
 801068a:	4812      	ldr	r0, [pc, #72]	; (80106d4 <xTimerCreateTimerTask+0x8c>)
 801068c:	f7ff f890 	bl	800f7b0 <xTaskCreateStatic>
 8010690:	4603      	mov	r3, r0
 8010692:	4a11      	ldr	r2, [pc, #68]	; (80106d8 <xTimerCreateTimerTask+0x90>)
 8010694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010696:	4b10      	ldr	r3, [pc, #64]	; (80106d8 <xTimerCreateTimerTask+0x90>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801069e:	2301      	movs	r3, #1
 80106a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10c      	bne.n	80106c2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80106a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ac:	b672      	cpsid	i
 80106ae:	f383 8811 	msr	BASEPRI, r3
 80106b2:	f3bf 8f6f 	isb	sy
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	b662      	cpsie	i
 80106bc:	613b      	str	r3, [r7, #16]
}
 80106be:	bf00      	nop
 80106c0:	e7fe      	b.n	80106c0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80106c2:	697b      	ldr	r3, [r7, #20]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	20001af4 	.word	0x20001af4
 80106d0:	0801245c 	.word	0x0801245c
 80106d4:	08010819 	.word	0x08010819
 80106d8:	20001af8 	.word	0x20001af8

080106dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08a      	sub	sp, #40	; 0x28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10c      	bne.n	801070e <xTimerGenericCommand+0x32>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	b672      	cpsid	i
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	b662      	cpsie	i
 8010708:	623b      	str	r3, [r7, #32]
}
 801070a:	bf00      	nop
 801070c:	e7fe      	b.n	801070c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801070e:	4b1a      	ldr	r3, [pc, #104]	; (8010778 <xTimerGenericCommand+0x9c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d02a      	beq.n	801076c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	2b05      	cmp	r3, #5
 8010726:	dc18      	bgt.n	801075a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010728:	f7ff feaa 	bl	8010480 <xTaskGetSchedulerState>
 801072c:	4603      	mov	r3, r0
 801072e:	2b02      	cmp	r3, #2
 8010730:	d109      	bne.n	8010746 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010732:	4b11      	ldr	r3, [pc, #68]	; (8010778 <xTimerGenericCommand+0x9c>)
 8010734:	6818      	ldr	r0, [r3, #0]
 8010736:	f107 0110 	add.w	r1, r7, #16
 801073a:	2300      	movs	r3, #0
 801073c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801073e:	f7fe fbb7 	bl	800eeb0 <xQueueGenericSend>
 8010742:	6278      	str	r0, [r7, #36]	; 0x24
 8010744:	e012      	b.n	801076c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010746:	4b0c      	ldr	r3, [pc, #48]	; (8010778 <xTimerGenericCommand+0x9c>)
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	f107 0110 	add.w	r1, r7, #16
 801074e:	2300      	movs	r3, #0
 8010750:	2200      	movs	r2, #0
 8010752:	f7fe fbad 	bl	800eeb0 <xQueueGenericSend>
 8010756:	6278      	str	r0, [r7, #36]	; 0x24
 8010758:	e008      	b.n	801076c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801075a:	4b07      	ldr	r3, [pc, #28]	; (8010778 <xTimerGenericCommand+0x9c>)
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	f107 0110 	add.w	r1, r7, #16
 8010762:	2300      	movs	r3, #0
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	f7fe fca9 	bl	800f0bc <xQueueGenericSendFromISR>
 801076a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801076e:	4618      	mov	r0, r3
 8010770:	3728      	adds	r7, #40	; 0x28
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	20001af4 	.word	0x20001af4

0801077c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b088      	sub	sp, #32
 8010780:	af02      	add	r7, sp, #8
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010786:	4b23      	ldr	r3, [pc, #140]	; (8010814 <prvProcessExpiredTimer+0x98>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	3304      	adds	r3, #4
 8010794:	4618      	mov	r0, r3
 8010796:	f7fe fa0f 	bl	800ebb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107a0:	f003 0304 	and.w	r3, r3, #4
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d024      	beq.n	80107f2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	699a      	ldr	r2, [r3, #24]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	18d1      	adds	r1, r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	683a      	ldr	r2, [r7, #0]
 80107b4:	6978      	ldr	r0, [r7, #20]
 80107b6:	f000 f8d3 	bl	8010960 <prvInsertTimerInActiveList>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d021      	beq.n	8010804 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107c0:	2300      	movs	r3, #0
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	2300      	movs	r3, #0
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	2100      	movs	r1, #0
 80107ca:	6978      	ldr	r0, [r7, #20]
 80107cc:	f7ff ff86 	bl	80106dc <xTimerGenericCommand>
 80107d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d115      	bne.n	8010804 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	b672      	cpsid	i
 80107de:	f383 8811 	msr	BASEPRI, r3
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	f3bf 8f4f 	dsb	sy
 80107ea:	b662      	cpsie	i
 80107ec:	60fb      	str	r3, [r7, #12]
}
 80107ee:	bf00      	nop
 80107f0:	e7fe      	b.n	80107f0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107f8:	f023 0301 	bic.w	r3, r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	6a1b      	ldr	r3, [r3, #32]
 8010808:	6978      	ldr	r0, [r7, #20]
 801080a:	4798      	blx	r3
}
 801080c:	bf00      	nop
 801080e:	3718      	adds	r7, #24
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	20001aec 	.word	0x20001aec

08010818 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010820:	f107 0308 	add.w	r3, r7, #8
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f857 	bl	80108d8 <prvGetNextExpireTime>
 801082a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	4619      	mov	r1, r3
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f000 f803 	bl	801083c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010836:	f000 f8d5 	bl	80109e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801083a:	e7f1      	b.n	8010820 <prvTimerTask+0x8>

0801083c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010846:	f7ff fa1d 	bl	800fc84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801084a:	f107 0308 	add.w	r3, r7, #8
 801084e:	4618      	mov	r0, r3
 8010850:	f000 f866 	bl	8010920 <prvSampleTimeNow>
 8010854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d130      	bne.n	80108be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10a      	bne.n	8010878 <prvProcessTimerOrBlockTask+0x3c>
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	429a      	cmp	r2, r3
 8010868:	d806      	bhi.n	8010878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801086a:	f7ff fa19 	bl	800fca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801086e:	68f9      	ldr	r1, [r7, #12]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f7ff ff83 	bl	801077c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010876:	e024      	b.n	80108c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d008      	beq.n	8010890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <prvProcessTimerOrBlockTask+0x90>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d101      	bne.n	801088c <prvProcessTimerOrBlockTask+0x50>
 8010888:	2301      	movs	r3, #1
 801088a:	e000      	b.n	801088e <prvProcessTimerOrBlockTask+0x52>
 801088c:	2300      	movs	r3, #0
 801088e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010890:	4b0f      	ldr	r3, [pc, #60]	; (80108d0 <prvProcessTimerOrBlockTask+0x94>)
 8010892:	6818      	ldr	r0, [r3, #0]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	4619      	mov	r1, r3
 801089e:	f7fe ff53 	bl	800f748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80108a2:	f7ff f9fd 	bl	800fca0 <xTaskResumeAll>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10a      	bne.n	80108c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80108ac:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <prvProcessTimerOrBlockTask+0x98>)
 80108ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	f3bf 8f6f 	isb	sy
}
 80108bc:	e001      	b.n	80108c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80108be:	f7ff f9ef 	bl	800fca0 <xTaskResumeAll>
}
 80108c2:	bf00      	nop
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	20001af0 	.word	0x20001af0
 80108d0:	20001af4 	.word	0x20001af4
 80108d4:	e000ed04 	.word	0xe000ed04

080108d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80108e0:	4b0e      	ldr	r3, [pc, #56]	; (801091c <prvGetNextExpireTime+0x44>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <prvGetNextExpireTime+0x16>
 80108ea:	2201      	movs	r2, #1
 80108ec:	e000      	b.n	80108f0 <prvGetNextExpireTime+0x18>
 80108ee:	2200      	movs	r2, #0
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d105      	bne.n	8010908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108fc:	4b07      	ldr	r3, [pc, #28]	; (801091c <prvGetNextExpireTime+0x44>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	e001      	b.n	801090c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010908:	2300      	movs	r3, #0
 801090a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801090c:	68fb      	ldr	r3, [r7, #12]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	20001aec 	.word	0x20001aec

08010920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010928:	f7ff fa5a 	bl	800fde0 <xTaskGetTickCount>
 801092c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801092e:	4b0b      	ldr	r3, [pc, #44]	; (801095c <prvSampleTimeNow+0x3c>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	429a      	cmp	r2, r3
 8010936:	d205      	bcs.n	8010944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010938:	f000 f93c 	bl	8010bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	601a      	str	r2, [r3, #0]
 8010942:	e002      	b.n	801094a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801094a:	4a04      	ldr	r2, [pc, #16]	; (801095c <prvSampleTimeNow+0x3c>)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010950:	68fb      	ldr	r3, [r7, #12]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20001afc 	.word	0x20001afc

08010960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
 801096c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801096e:	2300      	movs	r3, #0
 8010970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	429a      	cmp	r2, r3
 8010984:	d812      	bhi.n	80109ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	1ad2      	subs	r2, r2, r3
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	429a      	cmp	r2, r3
 8010992:	d302      	bcc.n	801099a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010994:	2301      	movs	r3, #1
 8010996:	617b      	str	r3, [r7, #20]
 8010998:	e01b      	b.n	80109d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801099a:	4b10      	ldr	r3, [pc, #64]	; (80109dc <prvInsertTimerInActiveList+0x7c>)
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3304      	adds	r3, #4
 80109a2:	4619      	mov	r1, r3
 80109a4:	4610      	mov	r0, r2
 80109a6:	f7fe f8ce 	bl	800eb46 <vListInsert>
 80109aa:	e012      	b.n	80109d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d206      	bcs.n	80109c2 <prvInsertTimerInActiveList+0x62>
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d302      	bcc.n	80109c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80109bc:	2301      	movs	r3, #1
 80109be:	617b      	str	r3, [r7, #20]
 80109c0:	e007      	b.n	80109d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109c2:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <prvInsertTimerInActiveList+0x80>)
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3304      	adds	r3, #4
 80109ca:	4619      	mov	r1, r3
 80109cc:	4610      	mov	r0, r2
 80109ce:	f7fe f8ba 	bl	800eb46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80109d2:	697b      	ldr	r3, [r7, #20]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20001af0 	.word	0x20001af0
 80109e0:	20001aec 	.word	0x20001aec

080109e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08e      	sub	sp, #56	; 0x38
 80109e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109ea:	e0d0      	b.n	8010b8e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	da1a      	bge.n	8010a28 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80109f2:	1d3b      	adds	r3, r7, #4
 80109f4:	3304      	adds	r3, #4
 80109f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80109f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10c      	bne.n	8010a18 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	b672      	cpsid	i
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	b662      	cpsie	i
 8010a12:	61fb      	str	r3, [r7, #28]
}
 8010a14:	bf00      	nop
 8010a16:	e7fe      	b.n	8010a16 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a1e:	6850      	ldr	r0, [r2, #4]
 8010a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a22:	6892      	ldr	r2, [r2, #8]
 8010a24:	4611      	mov	r1, r2
 8010a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f2c0 80ae 	blt.w	8010b8c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fe f8b9 	bl	800ebb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a46:	463b      	mov	r3, r7
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff ff69 	bl	8010920 <prvSampleTimeNow>
 8010a4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b09      	cmp	r3, #9
 8010a54:	f200 809b 	bhi.w	8010b8e <prvProcessReceivedCommands+0x1aa>
 8010a58:	a201      	add	r2, pc, #4	; (adr r2, 8010a60 <prvProcessReceivedCommands+0x7c>)
 8010a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5e:	bf00      	nop
 8010a60:	08010a89 	.word	0x08010a89
 8010a64:	08010a89 	.word	0x08010a89
 8010a68:	08010a89 	.word	0x08010a89
 8010a6c:	08010b01 	.word	0x08010b01
 8010a70:	08010b15 	.word	0x08010b15
 8010a74:	08010b63 	.word	0x08010b63
 8010a78:	08010a89 	.word	0x08010a89
 8010a7c:	08010a89 	.word	0x08010a89
 8010a80:	08010b01 	.word	0x08010b01
 8010a84:	08010b15 	.word	0x08010b15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a8e:	f043 0301 	orr.w	r3, r3, #1
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9e:	699b      	ldr	r3, [r3, #24]
 8010aa0:	18d1      	adds	r1, r2, r3
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aa8:	f7ff ff5a 	bl	8010960 <prvInsertTimerInActiveList>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d06d      	beq.n	8010b8e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac0:	f003 0304 	and.w	r3, r3, #4
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d062      	beq.n	8010b8e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	441a      	add	r2, r3
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ada:	f7ff fdff 	bl	80106dc <xTimerGenericCommand>
 8010ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010ae0:	6a3b      	ldr	r3, [r7, #32]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d153      	bne.n	8010b8e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aea:	b672      	cpsid	i
 8010aec:	f383 8811 	msr	BASEPRI, r3
 8010af0:	f3bf 8f6f 	isb	sy
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	b662      	cpsie	i
 8010afa:	61bb      	str	r3, [r7, #24]
}
 8010afc:	bf00      	nop
 8010afe:	e7fe      	b.n	8010afe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b06:	f023 0301 	bic.w	r3, r3, #1
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b12:	e03c      	b.n	8010b8e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b1a:	f043 0301 	orr.w	r3, r3, #1
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d10c      	bne.n	8010b4e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b38:	b672      	cpsid	i
 8010b3a:	f383 8811 	msr	BASEPRI, r3
 8010b3e:	f3bf 8f6f 	isb	sy
 8010b42:	f3bf 8f4f 	dsb	sy
 8010b46:	b662      	cpsie	i
 8010b48:	617b      	str	r3, [r7, #20]
}
 8010b4a:	bf00      	nop
 8010b4c:	e7fe      	b.n	8010b4c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b50:	699a      	ldr	r2, [r3, #24]
 8010b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b54:	18d1      	adds	r1, r2, r3
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b5c:	f7ff ff00 	bl	8010960 <prvInsertTimerInActiveList>
					break;
 8010b60:	e015      	b.n	8010b8e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b68:	f003 0302 	and.w	r3, r3, #2
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d103      	bne.n	8010b78 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b72:	f000 fbc9 	bl	8011308 <vPortFree>
 8010b76:	e00a      	b.n	8010b8e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b7e:	f023 0301 	bic.w	r3, r3, #1
 8010b82:	b2da      	uxtb	r2, r3
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010b8a:	e000      	b.n	8010b8e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010b8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b8e:	4b08      	ldr	r3, [pc, #32]	; (8010bb0 <prvProcessReceivedCommands+0x1cc>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	1d39      	adds	r1, r7, #4
 8010b94:	2200      	movs	r2, #0
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fb30 	bl	800f1fc <xQueueReceive>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f47f af24 	bne.w	80109ec <prvProcessReceivedCommands+0x8>
	}
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	3730      	adds	r7, #48	; 0x30
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	20001af4 	.word	0x20001af4

08010bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b088      	sub	sp, #32
 8010bb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bba:	e04a      	b.n	8010c52 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bbc:	4b2e      	ldr	r3, [pc, #184]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bc6:	4b2c      	ldr	r3, [pc, #176]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fd ffef 	bl	800ebb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	6a1b      	ldr	r3, [r3, #32]
 8010bde:	68f8      	ldr	r0, [r7, #12]
 8010be0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010be8:	f003 0304 	and.w	r3, r3, #4
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d030      	beq.n	8010c52 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	699b      	ldr	r3, [r3, #24]
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010bfa:	68ba      	ldr	r2, [r7, #8]
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d90e      	bls.n	8010c20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c0e:	4b1a      	ldr	r3, [pc, #104]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	3304      	adds	r3, #4
 8010c16:	4619      	mov	r1, r3
 8010c18:	4610      	mov	r0, r2
 8010c1a:	f7fd ff94 	bl	800eb46 <vListInsert>
 8010c1e:	e018      	b.n	8010c52 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c20:	2300      	movs	r3, #0
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	2300      	movs	r3, #0
 8010c26:	693a      	ldr	r2, [r7, #16]
 8010c28:	2100      	movs	r1, #0
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f7ff fd56 	bl	80106dc <xTimerGenericCommand>
 8010c30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d10c      	bne.n	8010c52 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3c:	b672      	cpsid	i
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	b662      	cpsie	i
 8010c4c:	603b      	str	r3, [r7, #0]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c52:	4b09      	ldr	r3, [pc, #36]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1af      	bne.n	8010bbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c5c:	4b06      	ldr	r3, [pc, #24]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c62:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <prvSwitchTimerLists+0xc8>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a04      	ldr	r2, [pc, #16]	; (8010c78 <prvSwitchTimerLists+0xc4>)
 8010c68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c6a:	4a04      	ldr	r2, [pc, #16]	; (8010c7c <prvSwitchTimerLists+0xc8>)
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	6013      	str	r3, [r2, #0]
}
 8010c70:	bf00      	nop
 8010c72:	3718      	adds	r7, #24
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	20001aec 	.word	0x20001aec
 8010c7c:	20001af0 	.word	0x20001af0

08010c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010c86:	f000 f949 	bl	8010f1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010c8a:	4b15      	ldr	r3, [pc, #84]	; (8010ce0 <prvCheckForValidListAndQueue+0x60>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d120      	bne.n	8010cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c92:	4814      	ldr	r0, [pc, #80]	; (8010ce4 <prvCheckForValidListAndQueue+0x64>)
 8010c94:	f7fd ff06 	bl	800eaa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c98:	4813      	ldr	r0, [pc, #76]	; (8010ce8 <prvCheckForValidListAndQueue+0x68>)
 8010c9a:	f7fd ff03 	bl	800eaa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c9e:	4b13      	ldr	r3, [pc, #76]	; (8010cec <prvCheckForValidListAndQueue+0x6c>)
 8010ca0:	4a10      	ldr	r2, [pc, #64]	; (8010ce4 <prvCheckForValidListAndQueue+0x64>)
 8010ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ca4:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <prvCheckForValidListAndQueue+0x70>)
 8010ca6:	4a10      	ldr	r2, [pc, #64]	; (8010ce8 <prvCheckForValidListAndQueue+0x68>)
 8010ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010caa:	2300      	movs	r3, #0
 8010cac:	9300      	str	r3, [sp, #0]
 8010cae:	4b11      	ldr	r3, [pc, #68]	; (8010cf4 <prvCheckForValidListAndQueue+0x74>)
 8010cb0:	4a11      	ldr	r2, [pc, #68]	; (8010cf8 <prvCheckForValidListAndQueue+0x78>)
 8010cb2:	2110      	movs	r1, #16
 8010cb4:	200a      	movs	r0, #10
 8010cb6:	f7fe f813 	bl	800ece0 <xQueueGenericCreateStatic>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	4a08      	ldr	r2, [pc, #32]	; (8010ce0 <prvCheckForValidListAndQueue+0x60>)
 8010cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010cc0:	4b07      	ldr	r3, [pc, #28]	; (8010ce0 <prvCheckForValidListAndQueue+0x60>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d005      	beq.n	8010cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cc8:	4b05      	ldr	r3, [pc, #20]	; (8010ce0 <prvCheckForValidListAndQueue+0x60>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	490b      	ldr	r1, [pc, #44]	; (8010cfc <prvCheckForValidListAndQueue+0x7c>)
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fe fd10 	bl	800f6f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010cd4:	f000 f956 	bl	8010f84 <vPortExitCritical>
}
 8010cd8:	bf00      	nop
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	20001af4 	.word	0x20001af4
 8010ce4:	20001ac4 	.word	0x20001ac4
 8010ce8:	20001ad8 	.word	0x20001ad8
 8010cec:	20001aec 	.word	0x20001aec
 8010cf0:	20001af0 	.word	0x20001af0
 8010cf4:	20001ba0 	.word	0x20001ba0
 8010cf8:	20001b00 	.word	0x20001b00
 8010cfc:	08012464 	.word	0x08012464

08010d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	3b04      	subs	r3, #4
 8010d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3b04      	subs	r3, #4
 8010d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	f023 0201 	bic.w	r2, r3, #1
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	3b04      	subs	r3, #4
 8010d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d30:	4a0c      	ldr	r2, [pc, #48]	; (8010d64 <pxPortInitialiseStack+0x64>)
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3b14      	subs	r3, #20
 8010d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3b04      	subs	r3, #4
 8010d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f06f 0202 	mvn.w	r2, #2
 8010d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	3b20      	subs	r3, #32
 8010d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d56:	68fb      	ldr	r3, [r7, #12]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3714      	adds	r7, #20
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr
 8010d64:	08010d69 	.word	0x08010d69

08010d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b085      	sub	sp, #20
 8010d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d72:	4b14      	ldr	r3, [pc, #80]	; (8010dc4 <prvTaskExitError+0x5c>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d7a:	d00c      	beq.n	8010d96 <prvTaskExitError+0x2e>
	__asm volatile
 8010d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d80:	b672      	cpsid	i
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	b662      	cpsie	i
 8010d90:	60fb      	str	r3, [r7, #12]
}
 8010d92:	bf00      	nop
 8010d94:	e7fe      	b.n	8010d94 <prvTaskExitError+0x2c>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	60bb      	str	r3, [r7, #8]
}
 8010dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dae:	bf00      	nop
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d0fc      	beq.n	8010db0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010db6:	bf00      	nop
 8010db8:	bf00      	nop
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr
 8010dc4:	20000118 	.word	0x20000118
	...

08010dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010dd0:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <pxCurrentTCBConst2>)
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	6808      	ldr	r0, [r1, #0]
 8010dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	f380 8809 	msr	PSP, r0
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f04f 0000 	mov.w	r0, #0
 8010de6:	f380 8811 	msr	BASEPRI, r0
 8010dea:	4770      	bx	lr
 8010dec:	f3af 8000 	nop.w

08010df0 <pxCurrentTCBConst2>:
 8010df0:	200015c4 	.word	0x200015c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010df4:	bf00      	nop
 8010df6:	bf00      	nop

08010df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010df8:	4808      	ldr	r0, [pc, #32]	; (8010e1c <prvPortStartFirstTask+0x24>)
 8010dfa:	6800      	ldr	r0, [r0, #0]
 8010dfc:	6800      	ldr	r0, [r0, #0]
 8010dfe:	f380 8808 	msr	MSP, r0
 8010e02:	f04f 0000 	mov.w	r0, #0
 8010e06:	f380 8814 	msr	CONTROL, r0
 8010e0a:	b662      	cpsie	i
 8010e0c:	b661      	cpsie	f
 8010e0e:	f3bf 8f4f 	dsb	sy
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	df00      	svc	0
 8010e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e1a:	bf00      	nop
 8010e1c:	e000ed08 	.word	0xe000ed08

08010e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e26:	4b37      	ldr	r3, [pc, #220]	; (8010f04 <xPortStartScheduler+0xe4>)
 8010e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	22ff      	movs	r2, #255	; 0xff
 8010e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b2f      	ldr	r3, [pc, #188]	; (8010f08 <xPortStartScheduler+0xe8>)
 8010e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e4e:	4b2f      	ldr	r3, [pc, #188]	; (8010f0c <xPortStartScheduler+0xec>)
 8010e50:	2207      	movs	r2, #7
 8010e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e54:	e009      	b.n	8010e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010e56:	4b2d      	ldr	r3, [pc, #180]	; (8010f0c <xPortStartScheduler+0xec>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	4a2b      	ldr	r2, [pc, #172]	; (8010f0c <xPortStartScheduler+0xec>)
 8010e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e6a:	78fb      	ldrb	r3, [r7, #3]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e72:	2b80      	cmp	r3, #128	; 0x80
 8010e74:	d0ef      	beq.n	8010e56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <xPortStartScheduler+0xec>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f1c3 0307 	rsb	r3, r3, #7
 8010e7e:	2b04      	cmp	r3, #4
 8010e80:	d00c      	beq.n	8010e9c <xPortStartScheduler+0x7c>
	__asm volatile
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	b672      	cpsid	i
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	b662      	cpsie	i
 8010e96:	60bb      	str	r3, [r7, #8]
}
 8010e98:	bf00      	nop
 8010e9a:	e7fe      	b.n	8010e9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e9c:	4b1b      	ldr	r3, [pc, #108]	; (8010f0c <xPortStartScheduler+0xec>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	021b      	lsls	r3, r3, #8
 8010ea2:	4a1a      	ldr	r2, [pc, #104]	; (8010f0c <xPortStartScheduler+0xec>)
 8010ea4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ea6:	4b19      	ldr	r3, [pc, #100]	; (8010f0c <xPortStartScheduler+0xec>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010eae:	4a17      	ldr	r2, [pc, #92]	; (8010f0c <xPortStartScheduler+0xec>)
 8010eb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010eba:	4b15      	ldr	r3, [pc, #84]	; (8010f10 <xPortStartScheduler+0xf0>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a14      	ldr	r2, [pc, #80]	; (8010f10 <xPortStartScheduler+0xf0>)
 8010ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ec4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ec6:	4b12      	ldr	r3, [pc, #72]	; (8010f10 <xPortStartScheduler+0xf0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a11      	ldr	r2, [pc, #68]	; (8010f10 <xPortStartScheduler+0xf0>)
 8010ecc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ed0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ed2:	f000 f8dd 	bl	8011090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ed6:	4b0f      	ldr	r3, [pc, #60]	; (8010f14 <xPortStartScheduler+0xf4>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010edc:	f000 f8fc 	bl	80110d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ee0:	4b0d      	ldr	r3, [pc, #52]	; (8010f18 <xPortStartScheduler+0xf8>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a0c      	ldr	r2, [pc, #48]	; (8010f18 <xPortStartScheduler+0xf8>)
 8010ee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010eea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010eec:	f7ff ff84 	bl	8010df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ef0:	f7ff f842 	bl	800ff78 <vTaskSwitchContext>
	prvTaskExitError();
 8010ef4:	f7ff ff38 	bl	8010d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	e000e400 	.word	0xe000e400
 8010f08:	20001bf0 	.word	0x20001bf0
 8010f0c:	20001bf4 	.word	0x20001bf4
 8010f10:	e000ed20 	.word	0xe000ed20
 8010f14:	20000118 	.word	0x20000118
 8010f18:	e000ef34 	.word	0xe000ef34

08010f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
	__asm volatile
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	b672      	cpsid	i
 8010f28:	f383 8811 	msr	BASEPRI, r3
 8010f2c:	f3bf 8f6f 	isb	sy
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	b662      	cpsie	i
 8010f36:	607b      	str	r3, [r7, #4]
}
 8010f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f3a:	4b10      	ldr	r3, [pc, #64]	; (8010f7c <vPortEnterCritical+0x60>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	4a0e      	ldr	r2, [pc, #56]	; (8010f7c <vPortEnterCritical+0x60>)
 8010f42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f44:	4b0d      	ldr	r3, [pc, #52]	; (8010f7c <vPortEnterCritical+0x60>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d111      	bne.n	8010f70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f4c:	4b0c      	ldr	r3, [pc, #48]	; (8010f80 <vPortEnterCritical+0x64>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00c      	beq.n	8010f70 <vPortEnterCritical+0x54>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5a:	b672      	cpsid	i
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	b662      	cpsie	i
 8010f6a:	603b      	str	r3, [r7, #0]
}
 8010f6c:	bf00      	nop
 8010f6e:	e7fe      	b.n	8010f6e <vPortEnterCritical+0x52>
	}
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	20000118 	.word	0x20000118
 8010f80:	e000ed04 	.word	0xe000ed04

08010f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f8a:	4b13      	ldr	r3, [pc, #76]	; (8010fd8 <vPortExitCritical+0x54>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10c      	bne.n	8010fac <vPortExitCritical+0x28>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f96:	b672      	cpsid	i
 8010f98:	f383 8811 	msr	BASEPRI, r3
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	b662      	cpsie	i
 8010fa6:	607b      	str	r3, [r7, #4]
}
 8010fa8:	bf00      	nop
 8010faa:	e7fe      	b.n	8010faa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010fac:	4b0a      	ldr	r3, [pc, #40]	; (8010fd8 <vPortExitCritical+0x54>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <vPortExitCritical+0x54>)
 8010fb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010fb6:	4b08      	ldr	r3, [pc, #32]	; (8010fd8 <vPortExitCritical+0x54>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d105      	bne.n	8010fca <vPortExitCritical+0x46>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	f383 8811 	msr	BASEPRI, r3
}
 8010fc8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010fca:	bf00      	nop
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20000118 	.word	0x20000118
 8010fdc:	00000000 	.word	0x00000000

08010fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010fe0:	f3ef 8009 	mrs	r0, PSP
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	4b15      	ldr	r3, [pc, #84]	; (8011040 <pxCurrentTCBConst>)
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	f01e 0f10 	tst.w	lr, #16
 8010ff0:	bf08      	it	eq
 8010ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	6010      	str	r0, [r2, #0]
 8010ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011004:	b672      	cpsid	i
 8011006:	f380 8811 	msr	BASEPRI, r0
 801100a:	f3bf 8f4f 	dsb	sy
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	b662      	cpsie	i
 8011014:	f7fe ffb0 	bl	800ff78 <vTaskSwitchContext>
 8011018:	f04f 0000 	mov.w	r0, #0
 801101c:	f380 8811 	msr	BASEPRI, r0
 8011020:	bc09      	pop	{r0, r3}
 8011022:	6819      	ldr	r1, [r3, #0]
 8011024:	6808      	ldr	r0, [r1, #0]
 8011026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102a:	f01e 0f10 	tst.w	lr, #16
 801102e:	bf08      	it	eq
 8011030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011034:	f380 8809 	msr	PSP, r0
 8011038:	f3bf 8f6f 	isb	sy
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop

08011040 <pxCurrentTCBConst>:
 8011040:	200015c4 	.word	0x200015c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop

08011048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011052:	b672      	cpsid	i
 8011054:	f383 8811 	msr	BASEPRI, r3
 8011058:	f3bf 8f6f 	isb	sy
 801105c:	f3bf 8f4f 	dsb	sy
 8011060:	b662      	cpsie	i
 8011062:	607b      	str	r3, [r7, #4]
}
 8011064:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011066:	f7fe fecb 	bl	800fe00 <xTaskIncrementTick>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011070:	4b06      	ldr	r3, [pc, #24]	; (801108c <SysTick_Handler+0x44>)
 8011072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011076:	601a      	str	r2, [r3, #0]
 8011078:	2300      	movs	r3, #0
 801107a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	f383 8811 	msr	BASEPRI, r3
}
 8011082:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011084:	bf00      	nop
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	e000ed04 	.word	0xe000ed04

08011090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011090:	b480      	push	{r7}
 8011092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011094:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <vPortSetupTimerInterrupt+0x34>)
 8011096:	2200      	movs	r2, #0
 8011098:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801109a:	4b0b      	ldr	r3, [pc, #44]	; (80110c8 <vPortSetupTimerInterrupt+0x38>)
 801109c:	2200      	movs	r2, #0
 801109e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110a0:	4b0a      	ldr	r3, [pc, #40]	; (80110cc <vPortSetupTimerInterrupt+0x3c>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a0a      	ldr	r2, [pc, #40]	; (80110d0 <vPortSetupTimerInterrupt+0x40>)
 80110a6:	fba2 2303 	umull	r2, r3, r2, r3
 80110aa:	099b      	lsrs	r3, r3, #6
 80110ac:	4a09      	ldr	r2, [pc, #36]	; (80110d4 <vPortSetupTimerInterrupt+0x44>)
 80110ae:	3b01      	subs	r3, #1
 80110b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110b2:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <vPortSetupTimerInterrupt+0x34>)
 80110b4:	2207      	movs	r2, #7
 80110b6:	601a      	str	r2, [r3, #0]
}
 80110b8:	bf00      	nop
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop
 80110c4:	e000e010 	.word	0xe000e010
 80110c8:	e000e018 	.word	0xe000e018
 80110cc:	20000000 	.word	0x20000000
 80110d0:	10624dd3 	.word	0x10624dd3
 80110d4:	e000e014 	.word	0xe000e014

080110d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80110d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80110e8 <vPortEnableVFP+0x10>
 80110dc:	6801      	ldr	r1, [r0, #0]
 80110de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110e2:	6001      	str	r1, [r0, #0]
 80110e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80110e6:	bf00      	nop
 80110e8:	e000ed88 	.word	0xe000ed88

080110ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80110f2:	f3ef 8305 	mrs	r3, IPSR
 80110f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2b0f      	cmp	r3, #15
 80110fc:	d916      	bls.n	801112c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80110fe:	4a19      	ldr	r2, [pc, #100]	; (8011164 <vPortValidateInterruptPriority+0x78>)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4413      	add	r3, r2
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011108:	4b17      	ldr	r3, [pc, #92]	; (8011168 <vPortValidateInterruptPriority+0x7c>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	7afa      	ldrb	r2, [r7, #11]
 801110e:	429a      	cmp	r2, r3
 8011110:	d20c      	bcs.n	801112c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011116:	b672      	cpsid	i
 8011118:	f383 8811 	msr	BASEPRI, r3
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	b662      	cpsie	i
 8011126:	607b      	str	r3, [r7, #4]
}
 8011128:	bf00      	nop
 801112a:	e7fe      	b.n	801112a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801112c:	4b0f      	ldr	r3, [pc, #60]	; (801116c <vPortValidateInterruptPriority+0x80>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011134:	4b0e      	ldr	r3, [pc, #56]	; (8011170 <vPortValidateInterruptPriority+0x84>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	429a      	cmp	r2, r3
 801113a:	d90c      	bls.n	8011156 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801113c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011140:	b672      	cpsid	i
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	b662      	cpsie	i
 8011150:	603b      	str	r3, [r7, #0]
}
 8011152:	bf00      	nop
 8011154:	e7fe      	b.n	8011154 <vPortValidateInterruptPriority+0x68>
	}
 8011156:	bf00      	nop
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	e000e3f0 	.word	0xe000e3f0
 8011168:	20001bf0 	.word	0x20001bf0
 801116c:	e000ed0c 	.word	0xe000ed0c
 8011170:	20001bf4 	.word	0x20001bf4

08011174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b08a      	sub	sp, #40	; 0x28
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801117c:	2300      	movs	r3, #0
 801117e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011180:	f7fe fd80 	bl	800fc84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011184:	4b5b      	ldr	r3, [pc, #364]	; (80112f4 <pvPortMalloc+0x180>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d101      	bne.n	8011190 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801118c:	f000 f91a 	bl	80113c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011190:	4b59      	ldr	r3, [pc, #356]	; (80112f8 <pvPortMalloc+0x184>)
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4013      	ands	r3, r2
 8011198:	2b00      	cmp	r3, #0
 801119a:	f040 8092 	bne.w	80112c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01f      	beq.n	80111e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80111a4:	2208      	movs	r2, #8
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4413      	add	r3, r2
 80111aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f003 0307 	and.w	r3, r3, #7
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d016      	beq.n	80111e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f023 0307 	bic.w	r3, r3, #7
 80111bc:	3308      	adds	r3, #8
 80111be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f003 0307 	and.w	r3, r3, #7
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00c      	beq.n	80111e4 <pvPortMalloc+0x70>
	__asm volatile
 80111ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ce:	b672      	cpsid	i
 80111d0:	f383 8811 	msr	BASEPRI, r3
 80111d4:	f3bf 8f6f 	isb	sy
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	b662      	cpsie	i
 80111de:	617b      	str	r3, [r7, #20]
}
 80111e0:	bf00      	nop
 80111e2:	e7fe      	b.n	80111e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d06b      	beq.n	80112c2 <pvPortMalloc+0x14e>
 80111ea:	4b44      	ldr	r3, [pc, #272]	; (80112fc <pvPortMalloc+0x188>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d866      	bhi.n	80112c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80111f4:	4b42      	ldr	r3, [pc, #264]	; (8011300 <pvPortMalloc+0x18c>)
 80111f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80111f8:	4b41      	ldr	r3, [pc, #260]	; (8011300 <pvPortMalloc+0x18c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111fe:	e004      	b.n	801120a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	429a      	cmp	r2, r3
 8011212:	d903      	bls.n	801121c <pvPortMalloc+0xa8>
 8011214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1f1      	bne.n	8011200 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801121c:	4b35      	ldr	r3, [pc, #212]	; (80112f4 <pvPortMalloc+0x180>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011222:	429a      	cmp	r2, r3
 8011224:	d04d      	beq.n	80112c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011226:	6a3b      	ldr	r3, [r7, #32]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2208      	movs	r2, #8
 801122c:	4413      	add	r3, r2
 801122e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	685a      	ldr	r2, [r3, #4]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	1ad2      	subs	r2, r2, r3
 8011240:	2308      	movs	r3, #8
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	429a      	cmp	r2, r3
 8011246:	d921      	bls.n	801128c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4413      	add	r3, r2
 801124e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	f003 0307 	and.w	r3, r3, #7
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00c      	beq.n	8011274 <pvPortMalloc+0x100>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125e:	b672      	cpsid	i
 8011260:	f383 8811 	msr	BASEPRI, r3
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	b662      	cpsie	i
 801126e:	613b      	str	r3, [r7, #16]
}
 8011270:	bf00      	nop
 8011272:	e7fe      	b.n	8011272 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011276:	685a      	ldr	r2, [r3, #4]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	1ad2      	subs	r2, r2, r3
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011286:	69b8      	ldr	r0, [r7, #24]
 8011288:	f000 f8fe 	bl	8011488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801128c:	4b1b      	ldr	r3, [pc, #108]	; (80112fc <pvPortMalloc+0x188>)
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	4a19      	ldr	r2, [pc, #100]	; (80112fc <pvPortMalloc+0x188>)
 8011298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801129a:	4b18      	ldr	r3, [pc, #96]	; (80112fc <pvPortMalloc+0x188>)
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	4b19      	ldr	r3, [pc, #100]	; (8011304 <pvPortMalloc+0x190>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d203      	bcs.n	80112ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112a6:	4b15      	ldr	r3, [pc, #84]	; (80112fc <pvPortMalloc+0x188>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a16      	ldr	r2, [pc, #88]	; (8011304 <pvPortMalloc+0x190>)
 80112ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	4b11      	ldr	r3, [pc, #68]	; (80112f8 <pvPortMalloc+0x184>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	431a      	orrs	r2, r3
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	2200      	movs	r2, #0
 80112c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80112c2:	f7fe fced 	bl	800fca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	f003 0307 	and.w	r3, r3, #7
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00c      	beq.n	80112ea <pvPortMalloc+0x176>
	__asm volatile
 80112d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d4:	b672      	cpsid	i
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	b662      	cpsie	i
 80112e4:	60fb      	str	r3, [r7, #12]
}
 80112e6:	bf00      	nop
 80112e8:	e7fe      	b.n	80112e8 <pvPortMalloc+0x174>
	return pvReturn;
 80112ea:	69fb      	ldr	r3, [r7, #28]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3728      	adds	r7, #40	; 0x28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20005800 	.word	0x20005800
 80112f8:	2000580c 	.word	0x2000580c
 80112fc:	20005804 	.word	0x20005804
 8011300:	200057f8 	.word	0x200057f8
 8011304:	20005808 	.word	0x20005808

08011308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d04c      	beq.n	80113b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801131a:	2308      	movs	r3, #8
 801131c:	425b      	negs	r3, r3
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	4413      	add	r3, r2
 8011322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	685a      	ldr	r2, [r3, #4]
 801132c:	4b23      	ldr	r3, [pc, #140]	; (80113bc <vPortFree+0xb4>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4013      	ands	r3, r2
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10c      	bne.n	8011350 <vPortFree+0x48>
	__asm volatile
 8011336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801133a:	b672      	cpsid	i
 801133c:	f383 8811 	msr	BASEPRI, r3
 8011340:	f3bf 8f6f 	isb	sy
 8011344:	f3bf 8f4f 	dsb	sy
 8011348:	b662      	cpsie	i
 801134a:	60fb      	str	r3, [r7, #12]
}
 801134c:	bf00      	nop
 801134e:	e7fe      	b.n	801134e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00c      	beq.n	8011372 <vPortFree+0x6a>
	__asm volatile
 8011358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135c:	b672      	cpsid	i
 801135e:	f383 8811 	msr	BASEPRI, r3
 8011362:	f3bf 8f6f 	isb	sy
 8011366:	f3bf 8f4f 	dsb	sy
 801136a:	b662      	cpsie	i
 801136c:	60bb      	str	r3, [r7, #8]
}
 801136e:	bf00      	nop
 8011370:	e7fe      	b.n	8011370 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	685a      	ldr	r2, [r3, #4]
 8011376:	4b11      	ldr	r3, [pc, #68]	; (80113bc <vPortFree+0xb4>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4013      	ands	r3, r2
 801137c:	2b00      	cmp	r3, #0
 801137e:	d019      	beq.n	80113b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d115      	bne.n	80113b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <vPortFree+0xb4>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	43db      	mvns	r3, r3
 8011392:	401a      	ands	r2, r3
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011398:	f7fe fc74 	bl	800fc84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	685a      	ldr	r2, [r3, #4]
 80113a0:	4b07      	ldr	r3, [pc, #28]	; (80113c0 <vPortFree+0xb8>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4413      	add	r3, r2
 80113a6:	4a06      	ldr	r2, [pc, #24]	; (80113c0 <vPortFree+0xb8>)
 80113a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113aa:	6938      	ldr	r0, [r7, #16]
 80113ac:	f000 f86c 	bl	8011488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80113b0:	f7fe fc76 	bl	800fca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113b4:	bf00      	nop
 80113b6:	3718      	adds	r7, #24
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	2000580c 	.word	0x2000580c
 80113c0:	20005804 	.word	0x20005804

080113c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80113ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80113ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80113d0:	4b27      	ldr	r3, [pc, #156]	; (8011470 <prvHeapInit+0xac>)
 80113d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f003 0307 	and.w	r3, r3, #7
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00c      	beq.n	80113f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	3307      	adds	r3, #7
 80113e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f023 0307 	bic.w	r3, r3, #7
 80113ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	4a1f      	ldr	r2, [pc, #124]	; (8011470 <prvHeapInit+0xac>)
 80113f4:	4413      	add	r3, r2
 80113f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80113fc:	4a1d      	ldr	r2, [pc, #116]	; (8011474 <prvHeapInit+0xb0>)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011402:	4b1c      	ldr	r3, [pc, #112]	; (8011474 <prvHeapInit+0xb0>)
 8011404:	2200      	movs	r2, #0
 8011406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	4413      	add	r3, r2
 801140e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011410:	2208      	movs	r2, #8
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	1a9b      	subs	r3, r3, r2
 8011416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f023 0307 	bic.w	r3, r3, #7
 801141e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4a15      	ldr	r2, [pc, #84]	; (8011478 <prvHeapInit+0xb4>)
 8011424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011426:	4b14      	ldr	r3, [pc, #80]	; (8011478 <prvHeapInit+0xb4>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2200      	movs	r2, #0
 801142c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801142e:	4b12      	ldr	r3, [pc, #72]	; (8011478 <prvHeapInit+0xb4>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011444:	4b0c      	ldr	r3, [pc, #48]	; (8011478 <prvHeapInit+0xb4>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4a0a      	ldr	r2, [pc, #40]	; (801147c <prvHeapInit+0xb8>)
 8011452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4a09      	ldr	r2, [pc, #36]	; (8011480 <prvHeapInit+0xbc>)
 801145a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801145c:	4b09      	ldr	r3, [pc, #36]	; (8011484 <prvHeapInit+0xc0>)
 801145e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011462:	601a      	str	r2, [r3, #0]
}
 8011464:	bf00      	nop
 8011466:	3714      	adds	r7, #20
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	20001bf8 	.word	0x20001bf8
 8011474:	200057f8 	.word	0x200057f8
 8011478:	20005800 	.word	0x20005800
 801147c:	20005808 	.word	0x20005808
 8011480:	20005804 	.word	0x20005804
 8011484:	2000580c 	.word	0x2000580c

08011488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011490:	4b28      	ldr	r3, [pc, #160]	; (8011534 <prvInsertBlockIntoFreeList+0xac>)
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	e002      	b.n	801149c <prvInsertBlockIntoFreeList+0x14>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	60fb      	str	r3, [r7, #12]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d8f7      	bhi.n	8011496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	4413      	add	r3, r2
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d108      	bne.n	80114ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	441a      	add	r2, r3
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	441a      	add	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d118      	bne.n	8011510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	4b15      	ldr	r3, [pc, #84]	; (8011538 <prvInsertBlockIntoFreeList+0xb0>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d00d      	beq.n	8011506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	685a      	ldr	r2, [r3, #4]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	441a      	add	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	e008      	b.n	8011518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011506:	4b0c      	ldr	r3, [pc, #48]	; (8011538 <prvInsertBlockIntoFreeList+0xb0>)
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	e003      	b.n	8011518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011518:	68fa      	ldr	r2, [r7, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	429a      	cmp	r2, r3
 801151e:	d002      	beq.n	8011526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011526:	bf00      	nop
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	200057f8 	.word	0x200057f8
 8011538:	20005800 	.word	0x20005800

0801153c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011540:	2200      	movs	r2, #0
 8011542:	4912      	ldr	r1, [pc, #72]	; (801158c <MX_USB_DEVICE_Init+0x50>)
 8011544:	4812      	ldr	r0, [pc, #72]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 8011546:	f7fb fcab 	bl	800cea0 <USBD_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011550:	f7ef fe4c 	bl	80011ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011554:	490f      	ldr	r1, [pc, #60]	; (8011594 <MX_USB_DEVICE_Init+0x58>)
 8011556:	480e      	ldr	r0, [pc, #56]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 8011558:	f7fb fcd2 	bl	800cf00 <USBD_RegisterClass>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d001      	beq.n	8011566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011562:	f7ef fe43 	bl	80011ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011566:	490c      	ldr	r1, [pc, #48]	; (8011598 <MX_USB_DEVICE_Init+0x5c>)
 8011568:	4809      	ldr	r0, [pc, #36]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 801156a:	f7fb fbc9 	bl	800cd00 <USBD_CDC_RegisterInterface>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011574:	f7ef fe3a 	bl	80011ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011578:	4805      	ldr	r0, [pc, #20]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 801157a:	f7fb fcf7 	bl	800cf6c <USBD_Start>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d001      	beq.n	8011588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011584:	f7ef fe32 	bl	80011ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011588:	bf00      	nop
 801158a:	bd80      	pop	{r7, pc}
 801158c:	20000130 	.word	0x20000130
 8011590:	20005810 	.word	0x20005810
 8011594:	20000098 	.word	0x20000098
 8011598:	2000011c 	.word	0x2000011c

0801159c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80115a0:	2200      	movs	r2, #0
 80115a2:	4905      	ldr	r1, [pc, #20]	; (80115b8 <CDC_Init_FS+0x1c>)
 80115a4:	4805      	ldr	r0, [pc, #20]	; (80115bc <CDC_Init_FS+0x20>)
 80115a6:	f7fb fbc5 	bl	800cd34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80115aa:	4905      	ldr	r1, [pc, #20]	; (80115c0 <CDC_Init_FS+0x24>)
 80115ac:	4803      	ldr	r0, [pc, #12]	; (80115bc <CDC_Init_FS+0x20>)
 80115ae:	f7fb fbe3 	bl	800cd78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80115b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	200062ec 	.word	0x200062ec
 80115bc:	20005810 	.word	0x20005810
 80115c0:	20005aec 	.word	0x20005aec

080115c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80115c4:	b480      	push	{r7}
 80115c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80115c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	71fb      	strb	r3, [r7, #7]
 80115e0:	4613      	mov	r3, r2
 80115e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	2b23      	cmp	r3, #35	; 0x23
 80115e8:	d84a      	bhi.n	8011680 <CDC_Control_FS+0xac>
 80115ea:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <CDC_Control_FS+0x1c>)
 80115ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f0:	08011681 	.word	0x08011681
 80115f4:	08011681 	.word	0x08011681
 80115f8:	08011681 	.word	0x08011681
 80115fc:	08011681 	.word	0x08011681
 8011600:	08011681 	.word	0x08011681
 8011604:	08011681 	.word	0x08011681
 8011608:	08011681 	.word	0x08011681
 801160c:	08011681 	.word	0x08011681
 8011610:	08011681 	.word	0x08011681
 8011614:	08011681 	.word	0x08011681
 8011618:	08011681 	.word	0x08011681
 801161c:	08011681 	.word	0x08011681
 8011620:	08011681 	.word	0x08011681
 8011624:	08011681 	.word	0x08011681
 8011628:	08011681 	.word	0x08011681
 801162c:	08011681 	.word	0x08011681
 8011630:	08011681 	.word	0x08011681
 8011634:	08011681 	.word	0x08011681
 8011638:	08011681 	.word	0x08011681
 801163c:	08011681 	.word	0x08011681
 8011640:	08011681 	.word	0x08011681
 8011644:	08011681 	.word	0x08011681
 8011648:	08011681 	.word	0x08011681
 801164c:	08011681 	.word	0x08011681
 8011650:	08011681 	.word	0x08011681
 8011654:	08011681 	.word	0x08011681
 8011658:	08011681 	.word	0x08011681
 801165c:	08011681 	.word	0x08011681
 8011660:	08011681 	.word	0x08011681
 8011664:	08011681 	.word	0x08011681
 8011668:	08011681 	.word	0x08011681
 801166c:	08011681 	.word	0x08011681
 8011670:	08011681 	.word	0x08011681
 8011674:	08011681 	.word	0x08011681
 8011678:	08011681 	.word	0x08011681
 801167c:	08011681 	.word	0x08011681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011680:	bf00      	nop
  }

  return (USBD_OK);
 8011682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011684:	4618      	mov	r0, r3
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 801169a:	6879      	ldr	r1, [r7, #4]
 801169c:	4813      	ldr	r0, [pc, #76]	; (80116ec <CDC_Receive_FS+0x5c>)
 801169e:	f7fb fb6b 	bl	800cd78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80116a2:	4812      	ldr	r0, [pc, #72]	; (80116ec <CDC_Receive_FS+0x5c>)
 80116a4:	f7fb fbc6 	bl	800ce34 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 80116ae:	4b10      	ldr	r3, [pc, #64]	; (80116f0 <CDC_Receive_FS+0x60>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d015      	beq.n	80116e2 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 80116b6:	f107 0308 	add.w	r3, r7, #8
 80116ba:	2204      	movs	r2, #4
 80116bc:	2100      	movs	r1, #0
 80116be:	4618      	mov	r0, r3
 80116c0:	f000 fd2a 	bl	8012118 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 80116c4:	7bfa      	ldrb	r2, [r7, #15]
 80116c6:	f107 0308 	add.w	r3, r7, #8
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 fd15 	bl	80120fc <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 80116d2:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <CDC_Receive_FS+0x60>)
 80116d4:	6818      	ldr	r0, [r3, #0]
 80116d6:	f107 0108 	add.w	r1, r7, #8
 80116da:	2300      	movs	r3, #0
 80116dc:	2200      	movs	r2, #0
 80116de:	f7fd f8c7 	bl	800e870 <osMessageQueuePut>
  	}

  return (USBD_OK);
 80116e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3710      	adds	r7, #16
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20005810 	.word	0x20005810
 80116f0:	2000070c 	.word	0x2000070c

080116f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	460b      	mov	r3, r1
 80116fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011700:	2300      	movs	r3, #0
 8011702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011704:	4b0d      	ldr	r3, [pc, #52]	; (801173c <CDC_Transmit_FS+0x48>)
 8011706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801170a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011716:	2301      	movs	r3, #1
 8011718:	e00b      	b.n	8011732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801171a:	887b      	ldrh	r3, [r7, #2]
 801171c:	461a      	mov	r2, r3
 801171e:	6879      	ldr	r1, [r7, #4]
 8011720:	4806      	ldr	r0, [pc, #24]	; (801173c <CDC_Transmit_FS+0x48>)
 8011722:	f7fb fb07 	bl	800cd34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011726:	4805      	ldr	r0, [pc, #20]	; (801173c <CDC_Transmit_FS+0x48>)
 8011728:	f7fb fb44 	bl	800cdb4 <USBD_CDC_TransmitPacket>
 801172c:	4603      	mov	r3, r0
 801172e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011730:	7bfb      	ldrb	r3, [r7, #15]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20005810 	.word	0x20005810

08011740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011740:	b480      	push	{r7}
 8011742:	b087      	sub	sp, #28
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4613      	mov	r3, r2
 801174c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011756:	4618      	mov	r0, r3
 8011758:	371c      	adds	r7, #28
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
	...

08011764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	4603      	mov	r3, r0
 801176c:	6039      	str	r1, [r7, #0]
 801176e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	2212      	movs	r2, #18
 8011774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011776:	4b03      	ldr	r3, [pc, #12]	; (8011784 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011778:	4618      	mov	r0, r3
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	20000150 	.word	0x20000150

08011788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	4603      	mov	r3, r0
 8011790:	6039      	str	r1, [r7, #0]
 8011792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2204      	movs	r2, #4
 8011798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801179a:	4b03      	ldr	r3, [pc, #12]	; (80117a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801179c:	4618      	mov	r0, r3
 801179e:	370c      	adds	r7, #12
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr
 80117a8:	20000170 	.word	0x20000170

080117ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	4603      	mov	r3, r0
 80117b4:	6039      	str	r1, [r7, #0]
 80117b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117b8:	79fb      	ldrb	r3, [r7, #7]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d105      	bne.n	80117ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	4907      	ldr	r1, [pc, #28]	; (80117e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80117c2:	4808      	ldr	r0, [pc, #32]	; (80117e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80117c4:	f7fc fda8 	bl	800e318 <USBD_GetString>
 80117c8:	e004      	b.n	80117d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	4904      	ldr	r1, [pc, #16]	; (80117e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80117ce:	4805      	ldr	r0, [pc, #20]	; (80117e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80117d0:	f7fc fda2 	bl	800e318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	20006aec 	.word	0x20006aec
 80117e4:	0801246c 	.word	0x0801246c

080117e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	4603      	mov	r3, r0
 80117f0:	6039      	str	r1, [r7, #0]
 80117f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	4904      	ldr	r1, [pc, #16]	; (8011808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80117f8:	4804      	ldr	r0, [pc, #16]	; (801180c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80117fa:	f7fc fd8d 	bl	800e318 <USBD_GetString>
  return USBD_StrDesc;
 80117fe:	4b02      	ldr	r3, [pc, #8]	; (8011808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011800:	4618      	mov	r0, r3
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	20006aec 	.word	0x20006aec
 801180c:	08012480 	.word	0x08012480

08011810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	4603      	mov	r3, r0
 8011818:	6039      	str	r1, [r7, #0]
 801181a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	221a      	movs	r2, #26
 8011820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011822:	f000 f855 	bl	80118d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011826:	4b02      	ldr	r3, [pc, #8]	; (8011830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011828:	4618      	mov	r0, r3
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	20000174 	.word	0x20000174

08011834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	4603      	mov	r3, r0
 801183c:	6039      	str	r1, [r7, #0]
 801183e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011840:	79fb      	ldrb	r3, [r7, #7]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d105      	bne.n	8011852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011846:	683a      	ldr	r2, [r7, #0]
 8011848:	4907      	ldr	r1, [pc, #28]	; (8011868 <USBD_FS_ConfigStrDescriptor+0x34>)
 801184a:	4808      	ldr	r0, [pc, #32]	; (801186c <USBD_FS_ConfigStrDescriptor+0x38>)
 801184c:	f7fc fd64 	bl	800e318 <USBD_GetString>
 8011850:	e004      	b.n	801185c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	4904      	ldr	r1, [pc, #16]	; (8011868 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011856:	4805      	ldr	r0, [pc, #20]	; (801186c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011858:	f7fc fd5e 	bl	800e318 <USBD_GetString>
  }
  return USBD_StrDesc;
 801185c:	4b02      	ldr	r3, [pc, #8]	; (8011868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801185e:	4618      	mov	r0, r3
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	20006aec 	.word	0x20006aec
 801186c:	08012494 	.word	0x08012494

08011870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	4603      	mov	r3, r0
 8011878:	6039      	str	r1, [r7, #0]
 801187a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801187c:	79fb      	ldrb	r3, [r7, #7]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d105      	bne.n	801188e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011882:	683a      	ldr	r2, [r7, #0]
 8011884:	4907      	ldr	r1, [pc, #28]	; (80118a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011886:	4808      	ldr	r0, [pc, #32]	; (80118a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011888:	f7fc fd46 	bl	800e318 <USBD_GetString>
 801188c:	e004      	b.n	8011898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801188e:	683a      	ldr	r2, [r7, #0]
 8011890:	4904      	ldr	r1, [pc, #16]	; (80118a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011892:	4805      	ldr	r0, [pc, #20]	; (80118a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011894:	f7fc fd40 	bl	800e318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011898:	4b02      	ldr	r3, [pc, #8]	; (80118a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	20006aec 	.word	0x20006aec
 80118a8:	080124a0 	.word	0x080124a0

080118ac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	4603      	mov	r3, r0
 80118b4:	6039      	str	r1, [r7, #0]
 80118b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	220c      	movs	r2, #12
 80118bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80118be:	4b03      	ldr	r3, [pc, #12]	; (80118cc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	20000164 	.word	0x20000164

080118d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80118d6:	4b0f      	ldr	r3, [pc, #60]	; (8011914 <Get_SerialNum+0x44>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80118dc:	4b0e      	ldr	r3, [pc, #56]	; (8011918 <Get_SerialNum+0x48>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80118e2:	4b0e      	ldr	r3, [pc, #56]	; (801191c <Get_SerialNum+0x4c>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80118e8:	68fa      	ldr	r2, [r7, #12]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4413      	add	r3, r2
 80118ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d009      	beq.n	801190a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80118f6:	2208      	movs	r2, #8
 80118f8:	4909      	ldr	r1, [pc, #36]	; (8011920 <Get_SerialNum+0x50>)
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f000 f814 	bl	8011928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011900:	2204      	movs	r2, #4
 8011902:	4908      	ldr	r1, [pc, #32]	; (8011924 <Get_SerialNum+0x54>)
 8011904:	68b8      	ldr	r0, [r7, #8]
 8011906:	f000 f80f 	bl	8011928 <IntToUnicode>
  }
}
 801190a:	bf00      	nop
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	1ff0f420 	.word	0x1ff0f420
 8011918:	1ff0f424 	.word	0x1ff0f424
 801191c:	1ff0f428 	.word	0x1ff0f428
 8011920:	20000176 	.word	0x20000176
 8011924:	20000186 	.word	0x20000186

08011928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011928:	b480      	push	{r7}
 801192a:	b087      	sub	sp, #28
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	4613      	mov	r3, r2
 8011934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801193a:	2300      	movs	r3, #0
 801193c:	75fb      	strb	r3, [r7, #23]
 801193e:	e027      	b.n	8011990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	0f1b      	lsrs	r3, r3, #28
 8011944:	2b09      	cmp	r3, #9
 8011946:	d80b      	bhi.n	8011960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	0f1b      	lsrs	r3, r3, #28
 801194c:	b2da      	uxtb	r2, r3
 801194e:	7dfb      	ldrb	r3, [r7, #23]
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	4619      	mov	r1, r3
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	440b      	add	r3, r1
 8011958:	3230      	adds	r2, #48	; 0x30
 801195a:	b2d2      	uxtb	r2, r2
 801195c:	701a      	strb	r2, [r3, #0]
 801195e:	e00a      	b.n	8011976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	0f1b      	lsrs	r3, r3, #28
 8011964:	b2da      	uxtb	r2, r3
 8011966:	7dfb      	ldrb	r3, [r7, #23]
 8011968:	005b      	lsls	r3, r3, #1
 801196a:	4619      	mov	r1, r3
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	440b      	add	r3, r1
 8011970:	3237      	adds	r2, #55	; 0x37
 8011972:	b2d2      	uxtb	r2, r2
 8011974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801197c:	7dfb      	ldrb	r3, [r7, #23]
 801197e:	005b      	lsls	r3, r3, #1
 8011980:	3301      	adds	r3, #1
 8011982:	68ba      	ldr	r2, [r7, #8]
 8011984:	4413      	add	r3, r2
 8011986:	2200      	movs	r2, #0
 8011988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	3301      	adds	r3, #1
 801198e:	75fb      	strb	r3, [r7, #23]
 8011990:	7dfa      	ldrb	r2, [r7, #23]
 8011992:	79fb      	ldrb	r3, [r7, #7]
 8011994:	429a      	cmp	r2, r3
 8011996:	d3d3      	bcc.n	8011940 <IntToUnicode+0x18>
  }
}
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	371c      	adds	r7, #28
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
	...

080119a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b0ae      	sub	sp, #184	; 0xb8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]
 80119b8:	605a      	str	r2, [r3, #4]
 80119ba:	609a      	str	r2, [r3, #8]
 80119bc:	60da      	str	r2, [r3, #12]
 80119be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80119c0:	f107 0314 	add.w	r3, r7, #20
 80119c4:	2290      	movs	r2, #144	; 0x90
 80119c6:	2100      	movs	r1, #0
 80119c8:	4618      	mov	r0, r3
 80119ca:	f000 fba5 	bl	8012118 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80119d6:	d151      	bne.n	8011a7c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80119d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80119dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80119de:	2300      	movs	r3, #0
 80119e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80119e4:	f107 0314 	add.w	r3, r7, #20
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f5 fb85 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80119f4:	f7ef fbfa 	bl	80011ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119f8:	4b22      	ldr	r3, [pc, #136]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 80119fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119fc:	4a21      	ldr	r2, [pc, #132]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 80119fe:	f043 0301 	orr.w	r3, r3, #1
 8011a02:	6313      	str	r3, [r2, #48]	; 0x30
 8011a04:	4b1f      	ldr	r3, [pc, #124]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	613b      	str	r3, [r7, #16]
 8011a0e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011a10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a18:	2302      	movs	r3, #2
 8011a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a24:	2303      	movs	r3, #3
 8011a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011a2a:	230a      	movs	r3, #10
 8011a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011a34:	4619      	mov	r1, r3
 8011a36:	4814      	ldr	r0, [pc, #80]	; (8011a88 <HAL_PCD_MspInit+0xe0>)
 8011a38:	f7f1 fdba 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011a3c:	4b11      	ldr	r3, [pc, #68]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a40:	4a10      	ldr	r2, [pc, #64]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a46:	6353      	str	r3, [r2, #52]	; 0x34
 8011a48:	4b0e      	ldr	r3, [pc, #56]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a50:	60fb      	str	r3, [r7, #12]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a58:	4a0a      	ldr	r2, [pc, #40]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8011a60:	4b08      	ldr	r3, [pc, #32]	; (8011a84 <HAL_PCD_MspInit+0xdc>)
 8011a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a68:	60bb      	str	r3, [r7, #8]
 8011a6a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	2105      	movs	r1, #5
 8011a70:	2043      	movs	r0, #67	; 0x43
 8011a72:	f7f0 fae1 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011a76:	2043      	movs	r0, #67	; 0x43
 8011a78:	f7f0 fafa 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011a7c:	bf00      	nop
 8011a7e:	37b8      	adds	r7, #184	; 0xb8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	40023800 	.word	0x40023800
 8011a88:	40020000 	.word	0x40020000

08011a8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	f7fb faaf 	bl	800d006 <USBD_LL_SetupStage>
}
 8011aa8:	bf00      	nop
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	460b      	mov	r3, r1
 8011aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011ac2:	78fa      	ldrb	r2, [r7, #3]
 8011ac4:	6879      	ldr	r1, [r7, #4]
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	4413      	add	r3, r2
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	440b      	add	r3, r1
 8011ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	78fb      	ldrb	r3, [r7, #3]
 8011ad8:	4619      	mov	r1, r3
 8011ada:	f7fb fae9 	bl	800d0b0 <USBD_LL_DataOutStage>
}
 8011ade:	bf00      	nop
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b082      	sub	sp, #8
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
 8011aee:	460b      	mov	r3, r1
 8011af0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011af8:	78fa      	ldrb	r2, [r7, #3]
 8011afa:	6879      	ldr	r1, [r7, #4]
 8011afc:	4613      	mov	r3, r2
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	4413      	add	r3, r2
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	440b      	add	r3, r1
 8011b06:	334c      	adds	r3, #76	; 0x4c
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	78fb      	ldrb	r3, [r7, #3]
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	f7fb fb82 	bl	800d216 <USBD_LL_DataInStage>
}
 8011b12:	bf00      	nop
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b082      	sub	sp, #8
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7fb fcb6 	bl	800d49a <USBD_LL_SOF>
}
 8011b2e:	bf00      	nop
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b084      	sub	sp, #16
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b3e:	2301      	movs	r3, #1
 8011b40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d102      	bne.n	8011b50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	73fb      	strb	r3, [r7, #15]
 8011b4e:	e008      	b.n	8011b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	d102      	bne.n	8011b5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	73fb      	strb	r3, [r7, #15]
 8011b5c:	e001      	b.n	8011b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011b5e:	f7ef fb45 	bl	80011ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b68:	7bfa      	ldrb	r2, [r7, #15]
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fb fc56 	bl	800d41e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fb fbfe 	bl	800d37a <USBD_LL_Reset>
}
 8011b7e:	bf00      	nop
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fb fc51 	bl	800d43e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	6812      	ldr	r2, [r2, #0]
 8011baa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011bae:	f043 0301 	orr.w	r3, r3, #1
 8011bb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a1b      	ldr	r3, [r3, #32]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d005      	beq.n	8011bc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bbc:	4b04      	ldr	r3, [pc, #16]	; (8011bd0 <HAL_PCD_SuspendCallback+0x48>)
 8011bbe:	691b      	ldr	r3, [r3, #16]
 8011bc0:	4a03      	ldr	r2, [pc, #12]	; (8011bd0 <HAL_PCD_SuspendCallback+0x48>)
 8011bc2:	f043 0306 	orr.w	r3, r3, #6
 8011bc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	e000ed00 	.word	0xe000ed00

08011bd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fb fc41 	bl	800d46a <USBD_LL_Resume>
}
 8011be8:	bf00      	nop
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c02:	78fa      	ldrb	r2, [r7, #3]
 8011c04:	4611      	mov	r1, r2
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fb fc99 	bl	800d53e <USBD_LL_IsoOUTIncomplete>
}
 8011c0c:	bf00      	nop
 8011c0e:	3708      	adds	r7, #8
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c26:	78fa      	ldrb	r2, [r7, #3]
 8011c28:	4611      	mov	r1, r2
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fb fc55 	bl	800d4da <USBD_LL_IsoINIncomplete>
}
 8011c30:	bf00      	nop
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fb fcab 	bl	800d5a2 <USBD_LL_DevConnected>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fb fca8 	bl	800d5b8 <USBD_LL_DevDisconnected>
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d13c      	bne.n	8011cfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011c80:	4a20      	ldr	r2, [pc, #128]	; (8011d04 <USBD_LL_Init+0x94>)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4a1e      	ldr	r2, [pc, #120]	; (8011d04 <USBD_LL_Init+0x94>)
 8011c8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011c90:	4b1c      	ldr	r3, [pc, #112]	; (8011d04 <USBD_LL_Init+0x94>)
 8011c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011c98:	4b1a      	ldr	r3, [pc, #104]	; (8011d04 <USBD_LL_Init+0x94>)
 8011c9a:	2206      	movs	r2, #6
 8011c9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011c9e:	4b19      	ldr	r3, [pc, #100]	; (8011d04 <USBD_LL_Init+0x94>)
 8011ca0:	2202      	movs	r2, #2
 8011ca2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ca4:	4b17      	ldr	r3, [pc, #92]	; (8011d04 <USBD_LL_Init+0x94>)
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011caa:	4b16      	ldr	r3, [pc, #88]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cac:	2202      	movs	r2, #2
 8011cae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011cb0:	4b14      	ldr	r3, [pc, #80]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011cb6:	4b13      	ldr	r3, [pc, #76]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011cbc:	4b11      	ldr	r3, [pc, #68]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011cc2:	4b10      	ldr	r3, [pc, #64]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011cc8:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011cce:	480d      	ldr	r0, [pc, #52]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cd0:	f7f3 fa03 	bl	80050da <HAL_PCD_Init>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d001      	beq.n	8011cde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011cda:	f7ef fa87 	bl	80011ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011cde:	2180      	movs	r1, #128	; 0x80
 8011ce0:	4808      	ldr	r0, [pc, #32]	; (8011d04 <USBD_LL_Init+0x94>)
 8011ce2:	f7f4 fc7e 	bl	80065e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011ce6:	2240      	movs	r2, #64	; 0x40
 8011ce8:	2100      	movs	r1, #0
 8011cea:	4806      	ldr	r0, [pc, #24]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cec:	f7f4 fc32 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011cf0:	2280      	movs	r2, #128	; 0x80
 8011cf2:	2101      	movs	r1, #1
 8011cf4:	4803      	ldr	r0, [pc, #12]	; (8011d04 <USBD_LL_Init+0x94>)
 8011cf6:	f7f4 fc2d 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	20006cec 	.word	0x20006cec

08011d08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d10:	2300      	movs	r3, #0
 8011d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d14:	2300      	movs	r3, #0
 8011d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f3 faff 	bl	8005322 <HAL_PCD_Start>
 8011d24:	4603      	mov	r3, r0
 8011d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f000 f97e 	bl	801202c <USBD_Get_USB_Status>
 8011d30:	4603      	mov	r3, r0
 8011d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b084      	sub	sp, #16
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	4608      	mov	r0, r1
 8011d48:	4611      	mov	r1, r2
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	70fb      	strb	r3, [r7, #3]
 8011d50:	460b      	mov	r3, r1
 8011d52:	70bb      	strb	r3, [r7, #2]
 8011d54:	4613      	mov	r3, r2
 8011d56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011d66:	78bb      	ldrb	r3, [r7, #2]
 8011d68:	883a      	ldrh	r2, [r7, #0]
 8011d6a:	78f9      	ldrb	r1, [r7, #3]
 8011d6c:	f7f3 ffec 	bl	8005d48 <HAL_PCD_EP_Open>
 8011d70:	4603      	mov	r3, r0
 8011d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d74:	7bfb      	ldrb	r3, [r7, #15]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f000 f958 	bl	801202c <USBD_Get_USB_Status>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3710      	adds	r7, #16
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}

08011d8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d8a:	b580      	push	{r7, lr}
 8011d8c:	b084      	sub	sp, #16
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
 8011d92:	460b      	mov	r3, r1
 8011d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d96:	2300      	movs	r3, #0
 8011d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011da4:	78fa      	ldrb	r2, [r7, #3]
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7f4 f835 	bl	8005e18 <HAL_PCD_EP_Close>
 8011dae:	4603      	mov	r3, r0
 8011db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011db2:	7bfb      	ldrb	r3, [r7, #15]
 8011db4:	4618      	mov	r0, r3
 8011db6:	f000 f939 	bl	801202c <USBD_Get_USB_Status>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011de2:	78fa      	ldrb	r2, [r7, #3]
 8011de4:	4611      	mov	r1, r2
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7f4 f90d 	bl	8006006 <HAL_PCD_EP_SetStall>
 8011dec:	4603      	mov	r3, r0
 8011dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 f91a 	bl	801202c <USBD_Get_USB_Status>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b084      	sub	sp, #16
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	460b      	mov	r3, r1
 8011e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e12:	2300      	movs	r3, #0
 8011e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e20:	78fa      	ldrb	r2, [r7, #3]
 8011e22:	4611      	mov	r1, r2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7f4 f952 	bl	80060ce <HAL_PCD_EP_ClrStall>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e2e:	7bfb      	ldrb	r3, [r7, #15]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f000 f8fb 	bl	801202c <USBD_Get_USB_Status>
 8011e36:	4603      	mov	r3, r0
 8011e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	da0b      	bge.n	8011e78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e60:	78fb      	ldrb	r3, [r7, #3]
 8011e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e66:	68f9      	ldr	r1, [r7, #12]
 8011e68:	4613      	mov	r3, r2
 8011e6a:	00db      	lsls	r3, r3, #3
 8011e6c:	4413      	add	r3, r2
 8011e6e:	009b      	lsls	r3, r3, #2
 8011e70:	440b      	add	r3, r1
 8011e72:	333e      	adds	r3, #62	; 0x3e
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	e00b      	b.n	8011e90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e78:	78fb      	ldrb	r3, [r7, #3]
 8011e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e7e:	68f9      	ldr	r1, [r7, #12]
 8011e80:	4613      	mov	r3, r2
 8011e82:	00db      	lsls	r3, r3, #3
 8011e84:	4413      	add	r3, r2
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	440b      	add	r3, r1
 8011e8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011e8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3714      	adds	r7, #20
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b084      	sub	sp, #16
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011eb6:	78fa      	ldrb	r2, [r7, #3]
 8011eb8:	4611      	mov	r1, r2
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f3 ff1f 	bl	8005cfe <HAL_PCD_SetAddress>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f000 f8b0 	bl	801202c <USBD_Get_USB_Status>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011eda:	b580      	push	{r7, lr}
 8011edc:	b086      	sub	sp, #24
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	60f8      	str	r0, [r7, #12]
 8011ee2:	607a      	str	r2, [r7, #4]
 8011ee4:	603b      	str	r3, [r7, #0]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ef8:	7af9      	ldrb	r1, [r7, #11]
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	f7f4 f838 	bl	8005f72 <HAL_PCD_EP_Transmit>
 8011f02:	4603      	mov	r3, r0
 8011f04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f06:	7dfb      	ldrb	r3, [r7, #23]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f000 f88f 	bl	801202c <USBD_Get_USB_Status>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f12:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3718      	adds	r7, #24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	607a      	str	r2, [r7, #4]
 8011f26:	603b      	str	r3, [r7, #0]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011f3a:	7af9      	ldrb	r1, [r7, #11]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	f7f3 ffb4 	bl	8005eac <HAL_PCD_EP_Receive>
 8011f44:	4603      	mov	r3, r0
 8011f46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f48:	7dfb      	ldrb	r3, [r7, #23]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f000 f86e 	bl	801202c <USBD_Get_USB_Status>
 8011f50:	4603      	mov	r3, r0
 8011f52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f54:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3718      	adds	r7, #24
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b082      	sub	sp, #8
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	460b      	mov	r3, r1
 8011f68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f70:	78fa      	ldrb	r2, [r7, #3]
 8011f72:	4611      	mov	r1, r2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7f3 ffe4 	bl	8005f42 <HAL_PCD_EP_GetRxCount>
 8011f7a:	4603      	mov	r3, r0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d002      	beq.n	8011f9c <HAL_PCDEx_LPM_Callback+0x18>
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d01f      	beq.n	8011fda <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011f9a:	e03b      	b.n	8012014 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6a1b      	ldr	r3, [r3, #32]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d007      	beq.n	8011fb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011fa4:	f000 f83c 	bl	8012020 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011fa8:	4b1c      	ldr	r3, [pc, #112]	; (801201c <HAL_PCDEx_LPM_Callback+0x98>)
 8011faa:	691b      	ldr	r3, [r3, #16]
 8011fac:	4a1b      	ldr	r2, [pc, #108]	; (801201c <HAL_PCDEx_LPM_Callback+0x98>)
 8011fae:	f023 0306 	bic.w	r3, r3, #6
 8011fb2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	6812      	ldr	r2, [r2, #0]
 8011fc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011fc6:	f023 0301 	bic.w	r3, r3, #1
 8011fca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fb fa49 	bl	800d46a <USBD_LL_Resume>
    break;
 8011fd8:	e01c      	b.n	8012014 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	6812      	ldr	r2, [r2, #0]
 8011fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011fec:	f043 0301 	orr.w	r3, r3, #1
 8011ff0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fb fa20 	bl	800d43e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6a1b      	ldr	r3, [r3, #32]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d005      	beq.n	8012012 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012006:	4b05      	ldr	r3, [pc, #20]	; (801201c <HAL_PCDEx_LPM_Callback+0x98>)
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	4a04      	ldr	r2, [pc, #16]	; (801201c <HAL_PCDEx_LPM_Callback+0x98>)
 801200c:	f043 0306 	orr.w	r3, r3, #6
 8012010:	6113      	str	r3, [r2, #16]
    break;
 8012012:	bf00      	nop
}
 8012014:	bf00      	nop
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	e000ed00 	.word	0xe000ed00

08012020 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012024:	f7ee fc48 	bl	80008b8 <SystemClock_Config>
}
 8012028:	bf00      	nop
 801202a:	bd80      	pop	{r7, pc}

0801202c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012036:	2300      	movs	r3, #0
 8012038:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801203a:	79fb      	ldrb	r3, [r7, #7]
 801203c:	2b03      	cmp	r3, #3
 801203e:	d817      	bhi.n	8012070 <USBD_Get_USB_Status+0x44>
 8012040:	a201      	add	r2, pc, #4	; (adr r2, 8012048 <USBD_Get_USB_Status+0x1c>)
 8012042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012046:	bf00      	nop
 8012048:	08012059 	.word	0x08012059
 801204c:	0801205f 	.word	0x0801205f
 8012050:	08012065 	.word	0x08012065
 8012054:	0801206b 	.word	0x0801206b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	73fb      	strb	r3, [r7, #15]
    break;
 801205c:	e00b      	b.n	8012076 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801205e:	2303      	movs	r3, #3
 8012060:	73fb      	strb	r3, [r7, #15]
    break;
 8012062:	e008      	b.n	8012076 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012064:	2301      	movs	r3, #1
 8012066:	73fb      	strb	r3, [r7, #15]
    break;
 8012068:	e005      	b.n	8012076 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801206a:	2303      	movs	r3, #3
 801206c:	73fb      	strb	r3, [r7, #15]
    break;
 801206e:	e002      	b.n	8012076 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012070:	2303      	movs	r3, #3
 8012072:	73fb      	strb	r3, [r7, #15]
    break;
 8012074:	bf00      	nop
  }
  return usb_status;
 8012076:	7bfb      	ldrb	r3, [r7, #15]
}
 8012078:	4618      	mov	r0, r3
 801207a:	3714      	adds	r7, #20
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <__errno>:
 8012084:	4b01      	ldr	r3, [pc, #4]	; (801208c <__errno+0x8>)
 8012086:	6818      	ldr	r0, [r3, #0]
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	20000190 	.word	0x20000190

08012090 <__libc_init_array>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	4d0d      	ldr	r5, [pc, #52]	; (80120c8 <__libc_init_array+0x38>)
 8012094:	4c0d      	ldr	r4, [pc, #52]	; (80120cc <__libc_init_array+0x3c>)
 8012096:	1b64      	subs	r4, r4, r5
 8012098:	10a4      	asrs	r4, r4, #2
 801209a:	2600      	movs	r6, #0
 801209c:	42a6      	cmp	r6, r4
 801209e:	d109      	bne.n	80120b4 <__libc_init_array+0x24>
 80120a0:	4d0b      	ldr	r5, [pc, #44]	; (80120d0 <__libc_init_array+0x40>)
 80120a2:	4c0c      	ldr	r4, [pc, #48]	; (80120d4 <__libc_init_array+0x44>)
 80120a4:	f000 f9a6 	bl	80123f4 <_init>
 80120a8:	1b64      	subs	r4, r4, r5
 80120aa:	10a4      	asrs	r4, r4, #2
 80120ac:	2600      	movs	r6, #0
 80120ae:	42a6      	cmp	r6, r4
 80120b0:	d105      	bne.n	80120be <__libc_init_array+0x2e>
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80120b8:	4798      	blx	r3
 80120ba:	3601      	adds	r6, #1
 80120bc:	e7ee      	b.n	801209c <__libc_init_array+0xc>
 80120be:	f855 3b04 	ldr.w	r3, [r5], #4
 80120c2:	4798      	blx	r3
 80120c4:	3601      	adds	r6, #1
 80120c6:	e7f2      	b.n	80120ae <__libc_init_array+0x1e>
 80120c8:	080125ec 	.word	0x080125ec
 80120cc:	080125ec 	.word	0x080125ec
 80120d0:	080125ec 	.word	0x080125ec
 80120d4:	080125f0 	.word	0x080125f0

080120d8 <__retarget_lock_acquire_recursive>:
 80120d8:	4770      	bx	lr

080120da <__retarget_lock_release_recursive>:
 80120da:	4770      	bx	lr

080120dc <malloc>:
 80120dc:	4b02      	ldr	r3, [pc, #8]	; (80120e8 <malloc+0xc>)
 80120de:	4601      	mov	r1, r0
 80120e0:	6818      	ldr	r0, [r3, #0]
 80120e2:	f000 b88d 	b.w	8012200 <_malloc_r>
 80120e6:	bf00      	nop
 80120e8:	20000190 	.word	0x20000190

080120ec <free>:
 80120ec:	4b02      	ldr	r3, [pc, #8]	; (80120f8 <free+0xc>)
 80120ee:	4601      	mov	r1, r0
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	f000 b819 	b.w	8012128 <_free_r>
 80120f6:	bf00      	nop
 80120f8:	20000190 	.word	0x20000190

080120fc <memcpy>:
 80120fc:	440a      	add	r2, r1
 80120fe:	4291      	cmp	r1, r2
 8012100:	f100 33ff 	add.w	r3, r0, #4294967295
 8012104:	d100      	bne.n	8012108 <memcpy+0xc>
 8012106:	4770      	bx	lr
 8012108:	b510      	push	{r4, lr}
 801210a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801210e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012112:	4291      	cmp	r1, r2
 8012114:	d1f9      	bne.n	801210a <memcpy+0xe>
 8012116:	bd10      	pop	{r4, pc}

08012118 <memset>:
 8012118:	4402      	add	r2, r0
 801211a:	4603      	mov	r3, r0
 801211c:	4293      	cmp	r3, r2
 801211e:	d100      	bne.n	8012122 <memset+0xa>
 8012120:	4770      	bx	lr
 8012122:	f803 1b01 	strb.w	r1, [r3], #1
 8012126:	e7f9      	b.n	801211c <memset+0x4>

08012128 <_free_r>:
 8012128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801212a:	2900      	cmp	r1, #0
 801212c:	d044      	beq.n	80121b8 <_free_r+0x90>
 801212e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012132:	9001      	str	r0, [sp, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f1a1 0404 	sub.w	r4, r1, #4
 801213a:	bfb8      	it	lt
 801213c:	18e4      	addlt	r4, r4, r3
 801213e:	f000 f94d 	bl	80123dc <__malloc_lock>
 8012142:	4a1e      	ldr	r2, [pc, #120]	; (80121bc <_free_r+0x94>)
 8012144:	9801      	ldr	r0, [sp, #4]
 8012146:	6813      	ldr	r3, [r2, #0]
 8012148:	b933      	cbnz	r3, 8012158 <_free_r+0x30>
 801214a:	6063      	str	r3, [r4, #4]
 801214c:	6014      	str	r4, [r2, #0]
 801214e:	b003      	add	sp, #12
 8012150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012154:	f000 b948 	b.w	80123e8 <__malloc_unlock>
 8012158:	42a3      	cmp	r3, r4
 801215a:	d908      	bls.n	801216e <_free_r+0x46>
 801215c:	6825      	ldr	r5, [r4, #0]
 801215e:	1961      	adds	r1, r4, r5
 8012160:	428b      	cmp	r3, r1
 8012162:	bf01      	itttt	eq
 8012164:	6819      	ldreq	r1, [r3, #0]
 8012166:	685b      	ldreq	r3, [r3, #4]
 8012168:	1949      	addeq	r1, r1, r5
 801216a:	6021      	streq	r1, [r4, #0]
 801216c:	e7ed      	b.n	801214a <_free_r+0x22>
 801216e:	461a      	mov	r2, r3
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	b10b      	cbz	r3, 8012178 <_free_r+0x50>
 8012174:	42a3      	cmp	r3, r4
 8012176:	d9fa      	bls.n	801216e <_free_r+0x46>
 8012178:	6811      	ldr	r1, [r2, #0]
 801217a:	1855      	adds	r5, r2, r1
 801217c:	42a5      	cmp	r5, r4
 801217e:	d10b      	bne.n	8012198 <_free_r+0x70>
 8012180:	6824      	ldr	r4, [r4, #0]
 8012182:	4421      	add	r1, r4
 8012184:	1854      	adds	r4, r2, r1
 8012186:	42a3      	cmp	r3, r4
 8012188:	6011      	str	r1, [r2, #0]
 801218a:	d1e0      	bne.n	801214e <_free_r+0x26>
 801218c:	681c      	ldr	r4, [r3, #0]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	6053      	str	r3, [r2, #4]
 8012192:	4421      	add	r1, r4
 8012194:	6011      	str	r1, [r2, #0]
 8012196:	e7da      	b.n	801214e <_free_r+0x26>
 8012198:	d902      	bls.n	80121a0 <_free_r+0x78>
 801219a:	230c      	movs	r3, #12
 801219c:	6003      	str	r3, [r0, #0]
 801219e:	e7d6      	b.n	801214e <_free_r+0x26>
 80121a0:	6825      	ldr	r5, [r4, #0]
 80121a2:	1961      	adds	r1, r4, r5
 80121a4:	428b      	cmp	r3, r1
 80121a6:	bf04      	itt	eq
 80121a8:	6819      	ldreq	r1, [r3, #0]
 80121aa:	685b      	ldreq	r3, [r3, #4]
 80121ac:	6063      	str	r3, [r4, #4]
 80121ae:	bf04      	itt	eq
 80121b0:	1949      	addeq	r1, r1, r5
 80121b2:	6021      	streq	r1, [r4, #0]
 80121b4:	6054      	str	r4, [r2, #4]
 80121b6:	e7ca      	b.n	801214e <_free_r+0x26>
 80121b8:	b003      	add	sp, #12
 80121ba:	bd30      	pop	{r4, r5, pc}
 80121bc:	200071f8 	.word	0x200071f8

080121c0 <sbrk_aligned>:
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	4e0e      	ldr	r6, [pc, #56]	; (80121fc <sbrk_aligned+0x3c>)
 80121c4:	460c      	mov	r4, r1
 80121c6:	6831      	ldr	r1, [r6, #0]
 80121c8:	4605      	mov	r5, r0
 80121ca:	b911      	cbnz	r1, 80121d2 <sbrk_aligned+0x12>
 80121cc:	f000 f8f6 	bl	80123bc <_sbrk_r>
 80121d0:	6030      	str	r0, [r6, #0]
 80121d2:	4621      	mov	r1, r4
 80121d4:	4628      	mov	r0, r5
 80121d6:	f000 f8f1 	bl	80123bc <_sbrk_r>
 80121da:	1c43      	adds	r3, r0, #1
 80121dc:	d00a      	beq.n	80121f4 <sbrk_aligned+0x34>
 80121de:	1cc4      	adds	r4, r0, #3
 80121e0:	f024 0403 	bic.w	r4, r4, #3
 80121e4:	42a0      	cmp	r0, r4
 80121e6:	d007      	beq.n	80121f8 <sbrk_aligned+0x38>
 80121e8:	1a21      	subs	r1, r4, r0
 80121ea:	4628      	mov	r0, r5
 80121ec:	f000 f8e6 	bl	80123bc <_sbrk_r>
 80121f0:	3001      	adds	r0, #1
 80121f2:	d101      	bne.n	80121f8 <sbrk_aligned+0x38>
 80121f4:	f04f 34ff 	mov.w	r4, #4294967295
 80121f8:	4620      	mov	r0, r4
 80121fa:	bd70      	pop	{r4, r5, r6, pc}
 80121fc:	200071fc 	.word	0x200071fc

08012200 <_malloc_r>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	1ccd      	adds	r5, r1, #3
 8012206:	f025 0503 	bic.w	r5, r5, #3
 801220a:	3508      	adds	r5, #8
 801220c:	2d0c      	cmp	r5, #12
 801220e:	bf38      	it	cc
 8012210:	250c      	movcc	r5, #12
 8012212:	2d00      	cmp	r5, #0
 8012214:	4607      	mov	r7, r0
 8012216:	db01      	blt.n	801221c <_malloc_r+0x1c>
 8012218:	42a9      	cmp	r1, r5
 801221a:	d905      	bls.n	8012228 <_malloc_r+0x28>
 801221c:	230c      	movs	r3, #12
 801221e:	603b      	str	r3, [r7, #0]
 8012220:	2600      	movs	r6, #0
 8012222:	4630      	mov	r0, r6
 8012224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012228:	4e2e      	ldr	r6, [pc, #184]	; (80122e4 <_malloc_r+0xe4>)
 801222a:	f000 f8d7 	bl	80123dc <__malloc_lock>
 801222e:	6833      	ldr	r3, [r6, #0]
 8012230:	461c      	mov	r4, r3
 8012232:	bb34      	cbnz	r4, 8012282 <_malloc_r+0x82>
 8012234:	4629      	mov	r1, r5
 8012236:	4638      	mov	r0, r7
 8012238:	f7ff ffc2 	bl	80121c0 <sbrk_aligned>
 801223c:	1c43      	adds	r3, r0, #1
 801223e:	4604      	mov	r4, r0
 8012240:	d14d      	bne.n	80122de <_malloc_r+0xde>
 8012242:	6834      	ldr	r4, [r6, #0]
 8012244:	4626      	mov	r6, r4
 8012246:	2e00      	cmp	r6, #0
 8012248:	d140      	bne.n	80122cc <_malloc_r+0xcc>
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	4631      	mov	r1, r6
 801224e:	4638      	mov	r0, r7
 8012250:	eb04 0803 	add.w	r8, r4, r3
 8012254:	f000 f8b2 	bl	80123bc <_sbrk_r>
 8012258:	4580      	cmp	r8, r0
 801225a:	d13a      	bne.n	80122d2 <_malloc_r+0xd2>
 801225c:	6821      	ldr	r1, [r4, #0]
 801225e:	3503      	adds	r5, #3
 8012260:	1a6d      	subs	r5, r5, r1
 8012262:	f025 0503 	bic.w	r5, r5, #3
 8012266:	3508      	adds	r5, #8
 8012268:	2d0c      	cmp	r5, #12
 801226a:	bf38      	it	cc
 801226c:	250c      	movcc	r5, #12
 801226e:	4629      	mov	r1, r5
 8012270:	4638      	mov	r0, r7
 8012272:	f7ff ffa5 	bl	80121c0 <sbrk_aligned>
 8012276:	3001      	adds	r0, #1
 8012278:	d02b      	beq.n	80122d2 <_malloc_r+0xd2>
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	442b      	add	r3, r5
 801227e:	6023      	str	r3, [r4, #0]
 8012280:	e00e      	b.n	80122a0 <_malloc_r+0xa0>
 8012282:	6822      	ldr	r2, [r4, #0]
 8012284:	1b52      	subs	r2, r2, r5
 8012286:	d41e      	bmi.n	80122c6 <_malloc_r+0xc6>
 8012288:	2a0b      	cmp	r2, #11
 801228a:	d916      	bls.n	80122ba <_malloc_r+0xba>
 801228c:	1961      	adds	r1, r4, r5
 801228e:	42a3      	cmp	r3, r4
 8012290:	6025      	str	r5, [r4, #0]
 8012292:	bf18      	it	ne
 8012294:	6059      	strne	r1, [r3, #4]
 8012296:	6863      	ldr	r3, [r4, #4]
 8012298:	bf08      	it	eq
 801229a:	6031      	streq	r1, [r6, #0]
 801229c:	5162      	str	r2, [r4, r5]
 801229e:	604b      	str	r3, [r1, #4]
 80122a0:	4638      	mov	r0, r7
 80122a2:	f104 060b 	add.w	r6, r4, #11
 80122a6:	f000 f89f 	bl	80123e8 <__malloc_unlock>
 80122aa:	f026 0607 	bic.w	r6, r6, #7
 80122ae:	1d23      	adds	r3, r4, #4
 80122b0:	1af2      	subs	r2, r6, r3
 80122b2:	d0b6      	beq.n	8012222 <_malloc_r+0x22>
 80122b4:	1b9b      	subs	r3, r3, r6
 80122b6:	50a3      	str	r3, [r4, r2]
 80122b8:	e7b3      	b.n	8012222 <_malloc_r+0x22>
 80122ba:	6862      	ldr	r2, [r4, #4]
 80122bc:	42a3      	cmp	r3, r4
 80122be:	bf0c      	ite	eq
 80122c0:	6032      	streq	r2, [r6, #0]
 80122c2:	605a      	strne	r2, [r3, #4]
 80122c4:	e7ec      	b.n	80122a0 <_malloc_r+0xa0>
 80122c6:	4623      	mov	r3, r4
 80122c8:	6864      	ldr	r4, [r4, #4]
 80122ca:	e7b2      	b.n	8012232 <_malloc_r+0x32>
 80122cc:	4634      	mov	r4, r6
 80122ce:	6876      	ldr	r6, [r6, #4]
 80122d0:	e7b9      	b.n	8012246 <_malloc_r+0x46>
 80122d2:	230c      	movs	r3, #12
 80122d4:	603b      	str	r3, [r7, #0]
 80122d6:	4638      	mov	r0, r7
 80122d8:	f000 f886 	bl	80123e8 <__malloc_unlock>
 80122dc:	e7a1      	b.n	8012222 <_malloc_r+0x22>
 80122de:	6025      	str	r5, [r4, #0]
 80122e0:	e7de      	b.n	80122a0 <_malloc_r+0xa0>
 80122e2:	bf00      	nop
 80122e4:	200071f8 	.word	0x200071f8

080122e8 <cleanup_glue>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	460c      	mov	r4, r1
 80122ec:	6809      	ldr	r1, [r1, #0]
 80122ee:	4605      	mov	r5, r0
 80122f0:	b109      	cbz	r1, 80122f6 <cleanup_glue+0xe>
 80122f2:	f7ff fff9 	bl	80122e8 <cleanup_glue>
 80122f6:	4621      	mov	r1, r4
 80122f8:	4628      	mov	r0, r5
 80122fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122fe:	f7ff bf13 	b.w	8012128 <_free_r>
	...

08012304 <_reclaim_reent>:
 8012304:	4b2c      	ldr	r3, [pc, #176]	; (80123b8 <_reclaim_reent+0xb4>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	4283      	cmp	r3, r0
 801230a:	b570      	push	{r4, r5, r6, lr}
 801230c:	4604      	mov	r4, r0
 801230e:	d051      	beq.n	80123b4 <_reclaim_reent+0xb0>
 8012310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012312:	b143      	cbz	r3, 8012326 <_reclaim_reent+0x22>
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d14a      	bne.n	80123b0 <_reclaim_reent+0xac>
 801231a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801231c:	6819      	ldr	r1, [r3, #0]
 801231e:	b111      	cbz	r1, 8012326 <_reclaim_reent+0x22>
 8012320:	4620      	mov	r0, r4
 8012322:	f7ff ff01 	bl	8012128 <_free_r>
 8012326:	6961      	ldr	r1, [r4, #20]
 8012328:	b111      	cbz	r1, 8012330 <_reclaim_reent+0x2c>
 801232a:	4620      	mov	r0, r4
 801232c:	f7ff fefc 	bl	8012128 <_free_r>
 8012330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012332:	b111      	cbz	r1, 801233a <_reclaim_reent+0x36>
 8012334:	4620      	mov	r0, r4
 8012336:	f7ff fef7 	bl	8012128 <_free_r>
 801233a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801233c:	b111      	cbz	r1, 8012344 <_reclaim_reent+0x40>
 801233e:	4620      	mov	r0, r4
 8012340:	f7ff fef2 	bl	8012128 <_free_r>
 8012344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012346:	b111      	cbz	r1, 801234e <_reclaim_reent+0x4a>
 8012348:	4620      	mov	r0, r4
 801234a:	f7ff feed 	bl	8012128 <_free_r>
 801234e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012350:	b111      	cbz	r1, 8012358 <_reclaim_reent+0x54>
 8012352:	4620      	mov	r0, r4
 8012354:	f7ff fee8 	bl	8012128 <_free_r>
 8012358:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801235a:	b111      	cbz	r1, 8012362 <_reclaim_reent+0x5e>
 801235c:	4620      	mov	r0, r4
 801235e:	f7ff fee3 	bl	8012128 <_free_r>
 8012362:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012364:	b111      	cbz	r1, 801236c <_reclaim_reent+0x68>
 8012366:	4620      	mov	r0, r4
 8012368:	f7ff fede 	bl	8012128 <_free_r>
 801236c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801236e:	b111      	cbz	r1, 8012376 <_reclaim_reent+0x72>
 8012370:	4620      	mov	r0, r4
 8012372:	f7ff fed9 	bl	8012128 <_free_r>
 8012376:	69a3      	ldr	r3, [r4, #24]
 8012378:	b1e3      	cbz	r3, 80123b4 <_reclaim_reent+0xb0>
 801237a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801237c:	4620      	mov	r0, r4
 801237e:	4798      	blx	r3
 8012380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012382:	b1b9      	cbz	r1, 80123b4 <_reclaim_reent+0xb0>
 8012384:	4620      	mov	r0, r4
 8012386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801238a:	f7ff bfad 	b.w	80122e8 <cleanup_glue>
 801238e:	5949      	ldr	r1, [r1, r5]
 8012390:	b941      	cbnz	r1, 80123a4 <_reclaim_reent+0xa0>
 8012392:	3504      	adds	r5, #4
 8012394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012396:	2d80      	cmp	r5, #128	; 0x80
 8012398:	68d9      	ldr	r1, [r3, #12]
 801239a:	d1f8      	bne.n	801238e <_reclaim_reent+0x8a>
 801239c:	4620      	mov	r0, r4
 801239e:	f7ff fec3 	bl	8012128 <_free_r>
 80123a2:	e7ba      	b.n	801231a <_reclaim_reent+0x16>
 80123a4:	680e      	ldr	r6, [r1, #0]
 80123a6:	4620      	mov	r0, r4
 80123a8:	f7ff febe 	bl	8012128 <_free_r>
 80123ac:	4631      	mov	r1, r6
 80123ae:	e7ef      	b.n	8012390 <_reclaim_reent+0x8c>
 80123b0:	2500      	movs	r5, #0
 80123b2:	e7ef      	b.n	8012394 <_reclaim_reent+0x90>
 80123b4:	bd70      	pop	{r4, r5, r6, pc}
 80123b6:	bf00      	nop
 80123b8:	20000190 	.word	0x20000190

080123bc <_sbrk_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	4d06      	ldr	r5, [pc, #24]	; (80123d8 <_sbrk_r+0x1c>)
 80123c0:	2300      	movs	r3, #0
 80123c2:	4604      	mov	r4, r0
 80123c4:	4608      	mov	r0, r1
 80123c6:	602b      	str	r3, [r5, #0]
 80123c8:	f7ef fbb6 	bl	8001b38 <_sbrk>
 80123cc:	1c43      	adds	r3, r0, #1
 80123ce:	d102      	bne.n	80123d6 <_sbrk_r+0x1a>
 80123d0:	682b      	ldr	r3, [r5, #0]
 80123d2:	b103      	cbz	r3, 80123d6 <_sbrk_r+0x1a>
 80123d4:	6023      	str	r3, [r4, #0]
 80123d6:	bd38      	pop	{r3, r4, r5, pc}
 80123d8:	20007200 	.word	0x20007200

080123dc <__malloc_lock>:
 80123dc:	4801      	ldr	r0, [pc, #4]	; (80123e4 <__malloc_lock+0x8>)
 80123de:	f7ff be7b 	b.w	80120d8 <__retarget_lock_acquire_recursive>
 80123e2:	bf00      	nop
 80123e4:	200071f4 	.word	0x200071f4

080123e8 <__malloc_unlock>:
 80123e8:	4801      	ldr	r0, [pc, #4]	; (80123f0 <__malloc_unlock+0x8>)
 80123ea:	f7ff be76 	b.w	80120da <__retarget_lock_release_recursive>
 80123ee:	bf00      	nop
 80123f0:	200071f4 	.word	0x200071f4

080123f4 <_init>:
 80123f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f6:	bf00      	nop
 80123f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123fa:	bc08      	pop	{r3}
 80123fc:	469e      	mov	lr, r3
 80123fe:	4770      	bx	lr

08012400 <_fini>:
 8012400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012402:	bf00      	nop
 8012404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012406:	bc08      	pop	{r3}
 8012408:	469e      	mov	lr, r3
 801240a:	4770      	bx	lr

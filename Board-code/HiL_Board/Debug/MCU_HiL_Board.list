
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b018  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b318  0800b318  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800b318  0800b318  0001b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b320  0800b320  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800b328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ab4  20000174  0800b49c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c28  0800b49c  00026c28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d8a  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fa  00000000  00000000  00041f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00046928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  000482a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006af4  00000000  00000000  00049a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0f8  00000000  00000000  00050504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104af7  00000000  00000000  0006f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001740f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d34  00000000  00000000  00174144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000174 	.word	0x20000174
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b200 	.word	0x0800b200

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000178 	.word	0x20000178
 800023c:	0800b200 	.word	0x0800b200

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa3e 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f816 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f884 	bl	8000738 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f007 f896 	bl	8007760 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Rx */
  Task_RxHandle = osThreadNew(StartTask_Rx, NULL, &Task_Rx_attributes);
 8000634:	4a05      	ldr	r2, [pc, #20]	; (800064c <main+0x34>)
 8000636:	2100      	movs	r1, #0
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <main+0x38>)
 800063a:	f007 f8fb 	bl	8007834 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <main+0x3c>)
 8000642:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000644:	f007 f8c0 	bl	80077c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x30>
 800064a:	bf00      	nop
 800064c:	0800b27c 	.word	0x0800b27c
 8000650:	080007cd 	.word	0x080007cd
 8000654:	20000190 	.word	0x20000190

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00a fc5c 	bl	800af24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <SystemClock_Config+0xd8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <SystemClock_Config+0xd8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <SystemClock_Config+0xd8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <SystemClock_Config+0xdc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <SystemClock_Config+0xdc>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xdc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f805 	bl	80026ec <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f898 	bl	800081c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ec:	f001 ffae 	bl	800264c <HAL_PWREx_EnableOverDrive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006f6:	f000 f891 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2103      	movs	r1, #3
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fa96 	bl	8002c48 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000722:	f000 f87b 	bl	800081c <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <MX_GPIO_Init+0x8c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x8c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0x90>)
 800079c:	f000 fc6a 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x90>)
 80007b8:	f000 fab0 	bl	8000d1c <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <StartTask_Rx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_Rx */
void StartTask_Rx(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007d4:	f009 fdba 	bl	800a34c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  CDC_Transmit_FS((uint8_t *) buffer, sizeof(buffer));		//Transmit what's been recieved in our own buffer
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <StartTask_Rx+0x28>)
 80007dc:	f009 fe90 	bl	800a500 <CDC_Transmit_FS>
	  memset(buffer, 0, sizeof(buffer));						// Set rx memory to 0 to stop repetitive sending.
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	2100      	movs	r1, #0
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <StartTask_Rx+0x28>)
 80007e6:	f00a fb9d 	bl	800af24 <memset>
	  osDelay(500);
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f007 f8c7 	bl	8007980 <osDelay>
	  CDC_Transmit_FS((uint8_t *) buffer, sizeof(buffer));		//Transmit what's been recieved in our own buffer
 80007f2:	e7f1      	b.n	80007d8 <StartTask_Rx+0xc>
 80007f4:	20000194 	.word	0x20000194

080007f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d101      	bne.n	800080e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080a:	f000 f961 	bl	8000ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40001000 	.word	0x40001000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 fa2f 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_InitTick+0xe0>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_InitTick+0xe0>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_InitTick+0xe0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fbde 	bl	800306c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ba:	f002 fbc3 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80008be:	6378      	str	r0, [r7, #52]	; 0x34
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c2:	f002 fbbf 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80008c6:	4603      	mov	r3, r0
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xe4>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xe8>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xec>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xe8>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xe8>)
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xe8>)
 8000902:	f003 f80d 	bl	8003920 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xe8>)
 8000916:	f003 f865 	bl	80039e4 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000928:	2036      	movs	r0, #54	; 0x36
 800092a:	f000 f9e9 	bl	8000d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 f9c5 	bl	8000cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xf0>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000950:	4618      	mov	r0, r3
 8000952:	3738      	adds	r7, #56	; 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	200001d4 	.word	0x200001d4
 8000964:	40001000 	.word	0x40001000
 8000968:	20000004 	.word	0x20000004

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f003 f899 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001d4 	.word	0x200001d4

080009ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <OTG_FS_IRQHandler+0x10>)
 80009b2:	f000 fcd8 	bl	8001366 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20006710 	.word	0x20006710

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f00a fa4e 	bl	800ae90 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20080000 	.word	0x20080000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000220 	.word	0x20000220
 8000a28:	20006c28 	.word	0x20006c28

08000a2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	; (8000a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f00a fa0d 	bl	800ae9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fdc9 	bl	8000618 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000a94:	0800b328 	.word	0x0800b328
  ldr r2, =_sbss
 8000a98:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000a9c:	20006c28 	.word	0x20006c28

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x28>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x28>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f8fc 	bl	8000cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f7ff fedc 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff feb2 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000224 	.word	0x20000224

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000224 	.word	0x20000224

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	05fa0000 	.word	0x05fa0000

08000ba0 <__NVIC_GetPriorityGrouping>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff4c 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff61 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ffb1 	bl	8000c4c <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff80 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff54 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e175      	b.n	8001028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8164 	bne.w	8001022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d005      	beq.n	8000d72 <HAL_GPIO_Init+0x56>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80be 	beq.w	8001022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b66      	ldr	r3, [pc, #408]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a65      	ldr	r2, [pc, #404]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b63      	ldr	r3, [pc, #396]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ebe:	4a61      	ldr	r2, [pc, #388]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a58      	ldr	r2, [pc, #352]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d037      	beq.n	8000f5a <HAL_GPIO_Init+0x23e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a57      	ldr	r2, [pc, #348]	; (800104c <HAL_GPIO_Init+0x330>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d031      	beq.n	8000f56 <HAL_GPIO_Init+0x23a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a56      	ldr	r2, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x236>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a55      	ldr	r2, [pc, #340]	; (8001054 <HAL_GPIO_Init+0x338>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x232>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_GPIO_Init+0x33c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x22e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a53      	ldr	r2, [pc, #332]	; (800105c <HAL_GPIO_Init+0x340>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x22a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_GPIO_Init+0x344>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_GPIO_Init+0x348>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a50      	ldr	r2, [pc, #320]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_GPIO_Init+0x350>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f32:	2309      	movs	r3, #9
 8000f34:	e012      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f36:	230a      	movs	r3, #10
 8000f38:	e010      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00e      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9e:	4a34      	ldr	r2, [pc, #208]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_GPIO_Init+0x354>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_GPIO_Init+0x354>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae86 	bls.w	8000d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40021400 	.word	0x40021400
 8001060:	40021800 	.word	0x40021800
 8001064:	40021c00 	.word	0x40021c00
 8001068:	40022000 	.word	0x40022000
 800106c:	40022400 	.word	0x40022400
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	400b      	ands	r3, r1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010dc:	b08f      	sub	sp, #60	; 0x3c
 80010de:	af0a      	add	r7, sp, #40	; 0x28
 80010e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e116      	b.n	800131a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f009 fb54 	bl	800a7b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f002 ffe3 	bl	80040f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	687e      	ldr	r6, [r7, #4]
 8001138:	466d      	mov	r5, sp
 800113a:	f106 0410 	add.w	r4, r6, #16
 800113e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800114a:	e885 0003 	stmia.w	r5, {r0, r1}
 800114e:	1d33      	adds	r3, r6, #4
 8001150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001152:	6838      	ldr	r0, [r7, #0]
 8001154:	f002 fec4 	bl	8003ee0 <USB_CoreInit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0d7      	b.n	800131a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f002 ffd1 	bl	8004118 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e04a      	b.n	8001212 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	333d      	adds	r3, #61	; 0x3d
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	333c      	adds	r3, #60	; 0x3c
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b298      	uxth	r0, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3344      	adds	r3, #68	; 0x44
 80011b8:	4602      	mov	r2, r0
 80011ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3340      	adds	r3, #64	; 0x40
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3348      	adds	r3, #72	; 0x48
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	334c      	adds	r3, #76	; 0x4c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	3354      	adds	r3, #84	; 0x54
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3af      	bcc.n	800117c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e044      	b.n	80012ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d3b5      	bcc.n	8001222 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	687e      	ldr	r6, [r7, #4]
 80012be:	466d      	mov	r5, sp
 80012c0:	f106 0410 	add.w	r4, r6, #16
 80012c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80012d4:	1d33      	adds	r3, r6, #4
 80012d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f002 ff69 	bl	80041b0 <USB_DevInit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2202      	movs	r2, #2
 80012e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e014      	b.n	800131a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2b01      	cmp	r3, #1
 8001306:	d102      	bne.n	800130e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f001 f97b 	bl	8002604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8b7 	bl	8005486 <USB_DevDisconnect>

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001322 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_PCD_Start+0x16>
 8001334:	2302      	movs	r3, #2
 8001336:	e012      	b.n	800135e <HAL_PCD_Start+0x3c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fec5 	bl	80040d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f004 f878 	bl	8005444 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001366:	b590      	push	{r4, r7, lr}
 8001368:	b08d      	sub	sp, #52	; 0x34
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f004 f936 	bl	80055ee <USB_GetMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 84b7 	bne.w	8001cf8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f89a 	bl	80054c8 <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 84ad 	beq.w	8001cf6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f887 	bl	80054c8 <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d107      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f002 0202 	and.w	r2, r2, #2
 80013d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 f875 	bl	80054c8 <USB_ReadInterrupts>
 80013de:	4603      	mov	r3, r0
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b10      	cmp	r3, #16
 80013e6:	d161      	bne.n	80014ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0210 	bic.w	r2, r2, #16
 80013f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f003 020f 	and.w	r2, r3, #15
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	0c5b      	lsrs	r3, r3, #17
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	2b02      	cmp	r3, #2
 8001422:	d124      	bne.n	800146e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d035      	beq.n	800149c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	6a38      	ldr	r0, [r7, #32]
 8001444:	f003 feac 	bl	80051a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001454:	441a      	add	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	441a      	add	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	621a      	str	r2, [r3, #32]
 800146c:	e016      	b.n	800149c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	0c5b      	lsrs	r3, r3, #17
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	2b06      	cmp	r3, #6
 8001478:	d110      	bne.n	800149c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001480:	2208      	movs	r2, #8
 8001482:	4619      	mov	r1, r3
 8001484:	6a38      	ldr	r0, [r7, #32]
 8001486:	f003 fe8b 	bl	80051a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001496:	441a      	add	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0210 	orr.w	r2, r2, #16
 80014aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 f809 	bl	80054c8 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014c0:	f040 80a7 	bne.w	8001612 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 f80e 	bl	80054ee <USB_ReadDevAllOutEpInterrupt>
 80014d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014d4:	e099      	b.n	800160a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808e 	beq.w	80015fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 f832 	bl	8005556 <USB_ReadDevOutEPInterrupt>
 80014f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fef0 	bl	80022f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	2308      	movs	r3, #8
 8001532:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 ffc6 	bl	80024c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001552:	461a      	mov	r2, r3
 8001554:	2310      	movs	r3, #16
 8001556:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	2b80      	cmp	r3, #128	; 0x80
 800156c:	d109      	bne.n	8001582 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800157c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001580:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	3304      	adds	r3, #4
 8001596:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f009 fa25 	bl	800a9fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015be:	461a      	mov	r2, r3
 80015c0:	2302      	movs	r3, #2
 80015c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015da:	461a      	mov	r2, r3
 80015dc:	2320      	movs	r3, #32
 80015de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f6:	461a      	mov	r2, r3
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	3301      	adds	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f af62 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 ff56 	bl	80054c8 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001626:	f040 80db 	bne.w	80017e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 ff77 	bl	8005522 <USB_ReadDevAllInEpInterrupt>
 8001634:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800163a:	e0cd      	b.n	80017d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80c2 	beq.w	80017cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f003 ff9d 	bl	8005592 <USB_ReadDevInEPInterrupt>
 8001658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d057      	beq.n	8001714 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	69f9      	ldr	r1, [r7, #28]
 8001680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001684:	4013      	ands	r3, r2
 8001686:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	461a      	mov	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d132      	bne.n	8001708 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	334c      	adds	r3, #76	; 0x4c
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4403      	add	r3, r0
 80016c2:	3348      	adds	r3, #72	; 0x48
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4419      	add	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	334c      	adds	r3, #76	; 0x4c
 80016d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d113      	bne.n	8001708 <HAL_PCD_IRQHandler+0x3a2>
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3354      	adds	r3, #84	; 0x54
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	f003 ffa6 	bl	8005654 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f009 f8ef 	bl	800a8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172a:	461a      	mov	r2, r3
 800172c:	2308      	movs	r3, #8
 800172e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	461a      	mov	r2, r3
 8001748:	2310      	movs	r3, #16
 800174a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	461a      	mov	r2, r3
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001774:	6a38      	ldr	r0, [r7, #32]
 8001776:	f002 fe79 	bl	800446c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3338      	adds	r3, #56	; 0x38
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2200      	movs	r2, #0
 800179a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f009 f93c 	bl	800aa20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b4:	461a      	mov	r2, r3
 80017b6:	2302      	movs	r3, #2
 80017b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fd08 	bl	80021dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3301      	adds	r3, #1
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f af2e 	bne.w	800163c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fe6f 	bl	80054c8 <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f4:	d122      	bne.n	800183c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f009 fab6 	bl	800ad90 <HAL_PCDEx_LPM_Callback>
 8001824:	e002      	b.n	800182c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f009 f8da 	bl	800a9e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800183a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fe41 	bl	80054c8 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001850:	d112      	bne.n	8001878 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f009 f896 	bl	800a994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001876:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fe23 	bl	80054c8 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800188c:	d121      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800189c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	f003 020f 	and.w	r2, r3, #15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018c2:	2101      	movs	r1, #1
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f009 fa63 	bl	800ad90 <HAL_PCDEx_LPM_Callback>
 80018ca:	e002      	b.n	80018d2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f009 f861 	bl	800a994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fdf6 	bl	80054c8 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e6:	f040 80b7 	bne.w	8001a58 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2110      	movs	r1, #16
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fdb1 	bl	800446c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800190e:	e046      	b.n	800199e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001922:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001934:	0151      	lsls	r1, r2, #5
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	440a      	add	r2, r1
 800193a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800193e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001950:	461a      	mov	r2, r3
 8001952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001956:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001968:	0151      	lsls	r1, r2, #5
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	440a      	add	r2, r1
 800196e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001988:	0151      	lsls	r1, r2, #5
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	440a      	add	r2, r1
 800198e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001996:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	3301      	adds	r3, #1
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3b3      	bcc.n	8001910 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d016      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d4:	f043 030b 	orr.w	r3, r3, #11
 80019d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ea:	f043 030b 	orr.w	r3, r3, #11
 80019ee:	6453      	str	r3, [r2, #68]	; 0x44
 80019f0:	e015      	b.n	8001a1e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	4619      	mov	r1, r3
 8001a02:	f242 032b 	movw	r3, #8235	; 0x202b
 8001a06:	4313      	orrs	r3, r2
 8001a08:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a18:	f043 030b 	orr.w	r3, r3, #11
 8001a1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a42:	461a      	mov	r2, r3
 8001a44:	f003 fe06 	bl	8005654 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fd33 	bl	80054c8 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6c:	d124      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fdca 	bl	800560c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fd72 	bl	8004566 <USB_GetDevSpeed>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	f001 facd 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8001a92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f002 fa77 	bl	8003f90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f008 ff4d 	bl	800a942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fd03 	bl	80054c8 <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d10a      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f008 ff2a 	bl	800a926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f002 0208 	and.w	r2, r2, #8
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fcee 	bl	80054c8 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b80      	cmp	r3, #128	; 0x80
 8001af4:	d122      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b02:	2301      	movs	r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	e014      	b.n	8001b32 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fb27 	bl	800217a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3301      	adds	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3e5      	bcc.n	8001b08 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fcc1 	bl	80054c8 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b50:	d13b      	bne.n	8001bca <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e02b      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3340      	adds	r3, #64	; 0x40
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d115      	bne.n	8001baa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da12      	bge.n	8001baa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	333f      	adds	r3, #63	; 0x3f
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fae8 	bl	800217a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	3301      	adds	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3ce      	bcc.n	8001b58 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fc7a 	bl	80054c8 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bde:	d155      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e045      	b.n	8001c72 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d12e      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da2b      	bge.n	8001c6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d121      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c68:	6053      	str	r3, [r2, #4]
            break;
 8001c6a:	e007      	b.n	8001c7c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3301      	adds	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3b4      	bcc.n	8001be6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fc19 	bl	80054c8 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f008 fece 	bl	800aa44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fc03 	bl	80054c8 <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d115      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f008 febe 	bl	800aa60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	e000      	b.n	8001cf8 <HAL_PCD_IRQHandler+0x992>
      return;
 8001cf6:	bf00      	nop
    }
  }
}
 8001cf8:	3734      	adds	r7, #52	; 0x34
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}

08001cfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_PCD_SetAddress+0x1a>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e013      	b.n	8001d40 <HAL_PCD_SetAddress+0x42>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fb61 	bl	80053f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	70fb      	strb	r3, [r7, #3]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	803b      	strh	r3, [r7, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da0f      	bge.n	8001d8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	3338      	adds	r3, #56	; 0x38
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
 8001d8c:	e00f      	b.n	8001dae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dba:	883a      	ldrh	r2, [r7, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	78ba      	ldrb	r2, [r7, #2]
 8001dc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dd8:	78bb      	ldrb	r3, [r7, #2]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_PCD_EP_Open+0xaa>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e00e      	b.n	8001e10 <HAL_PCD_EP_Open+0xc8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fbd5 	bl	80045b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da0f      	bge.n	8001e4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
 8001e4a:	e00f      	b.n	8001e6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_EP_Close+0x6e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e00e      	b.n	8001ea4 <HAL_PCD_EP_Close+0x8c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fc13 	bl	80046c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	f002 fefa 	bl	8004d18 <USB_EP0StartXfer>
 8001f24:	e008      	b.n	8001f38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	f002 fca0 	bl	8004878 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f64:	681b      	ldr	r3, [r3, #0]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	3338      	adds	r3, #56	; 0x38
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	f002 fe98 	bl	8004d18 <USB_EP0StartXfer>
 8001fe8:	e008      	b.n	8001ffc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	f002 fc3e 	bl	8004878 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e050      	b.n	80020c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0f      	bge.n	800204c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3338      	adds	r3, #56	; 0x38
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	705a      	strb	r2, [r3, #1]
 800204a:	e00d      	b.n	8002068 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_SetStall+0x82>
 8002084:	2302      	movs	r3, #2
 8002086:	e01e      	b.n	80020c6 <HAL_PCD_EP_SetStall+0xc0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 f8da 	bl	8005250 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	b2d9      	uxtb	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020b6:	461a      	mov	r2, r3
 80020b8:	f003 facc 	bl	8005654 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d901      	bls.n	80020ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e042      	b.n	8002172 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0f      	bge.n	8002114 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 020f 	and.w	r2, r3, #15
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	3338      	adds	r3, #56	; 0x38
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	3304      	adds	r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	705a      	strb	r2, [r3, #1]
 8002112:	e00f      	b.n	8002134 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_EP_ClrStall+0x86>
 8002150:	2302      	movs	r3, #2
 8002152:	e00e      	b.n	8002172 <HAL_PCD_EP_ClrStall+0xa4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 f8e2 	bl	800532c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da0c      	bge.n	80021a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e00c      	b.n	80021c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 020f 	and.w	r2, r3, #15
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 ff01 	bl	8004fd0 <USB_EPStopXfer>
 80021ce:	4603      	mov	r3, r0
 80021d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021d2:	7afb      	ldrb	r3, [r7, #11]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	3338      	adds	r3, #56	; 0x38
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	429a      	cmp	r2, r3
 800220e:	d901      	bls.n	8002214 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e06c      	b.n	80022ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	429a      	cmp	r2, r3
 8002228:	d902      	bls.n	8002230 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	3303      	adds	r3, #3
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002238:	e02b      	b.n	8002292 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d902      	bls.n	8002256 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3303      	adds	r3, #3
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226e:	b2db      	uxtb	r3, r3
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4603      	mov	r3, r0
 8002274:	6978      	ldr	r0, [r7, #20]
 8002276:	f002 ff55 	bl	8005124 <USB_WritePacket>

    ep->xfer_buff  += len;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	441a      	add	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	441a      	add	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d809      	bhi.n	80022bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d203      	bcs.n	80022bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1be      	bne.n	800223a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d811      	bhi.n	80022ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	2201      	movs	r2, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	6939      	ldr	r1, [r7, #16]
 80022e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e8:	4013      	ands	r3, r2
 80022ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d17b      	bne.n	8002426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f240 80b9 	bls.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80b3 	beq.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235a:	461a      	mov	r2, r3
 800235c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002360:	6093      	str	r3, [r2, #8]
 8002362:	e0a7      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	2320      	movs	r3, #32
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	e098      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8093 	bne.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d90f      	bls.n	80023b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	6093      	str	r3, [r2, #8]
 80023b4:	e07e      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	0159      	lsls	r1, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d114      	bne.n	8002418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f003 f926 	bl	8005654 <USB_EP0_OutStart>
 8002408:	e006      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f008 fa4c 	bl	800a8bc <HAL_PCD_DataOutStageCallback>
 8002424:	e046      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d124      	bne.n	8002478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	e032      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2320      	movs	r3, #32
 8002468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f008 fa23 	bl	800a8bc <HAL_PCD_DataOutStageCallback>
 8002476:	e01d      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a0:	461a      	mov	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f003 f8d6 	bl	8005654 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f008 fa04 	bl	800a8bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	4f54300a 	.word	0x4f54300a
 80024c4:	4f54310a 	.word	0x4f54310a

080024c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	333c      	adds	r3, #60	; 0x3c
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <PCD_EP_OutSetupPacket_int+0x88>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d90e      	bls.n	800251c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f008 f9bb 	bl	800a898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <PCD_EP_OutSetupPacket_int+0x88>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d90c      	bls.n	8002544 <PCD_EP_OutSetupPacket_int+0x7c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800253c:	461a      	mov	r2, r3
 800253e:	2101      	movs	r1, #1
 8002540:	f003 f888 	bl	8005654 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	4f54300a 	.word	0x4f54300a

08002554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	4613      	mov	r3, r2
 8002562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002572:	883b      	ldrh	r3, [r7, #0]
 8002574:	0419      	lsls	r1, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	430a      	orrs	r2, r1
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
 8002580:	e028      	b.n	80025d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e00d      	b.n	80025b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3340      	adds	r3, #64	; 0x40
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4413      	add	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3ec      	bcc.n	8002596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	0418      	lsls	r0, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	4302      	orrs	r2, r0
 80025cc:	3340      	adds	r3, #64	; 0x40
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_PCDEx_ActivateLPM+0x44>)
 8002634:	4313      	orrs	r3, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	10000003 	.word	0x10000003

0800264c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267a:	f7fe fa3d 	bl	8000af8 <HAL_GetTick>
 800267e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002680:	e009      	b.n	8002696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002682:	f7fe fa39 	bl	8000af8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002690:	d901      	bls.n	8002696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e022      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d1ee      	bne.n	8002682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b0:	f7fe fa22 	bl	8000af8 <HAL_GetTick>
 80026b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b6:	e009      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b8:	f7fe fa1e 	bl	8000af8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c6:	d901      	bls.n	80026cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e007      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d8:	d1ee      	bne.n	80026b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000

080026ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e29b      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002710:	4b96      	ldr	r3, [pc, #600]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b04      	cmp	r3, #4
 800271a:	d00c      	beq.n	8002736 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271c:	4b93      	ldr	r3, [pc, #588]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d112      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
 8002728:	4b90      	ldr	r3, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002734:	d10b      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002736:	4b8d      	ldr	r3, [pc, #564]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06c      	beq.n	800281c <HAL_RCC_OscConfig+0x130>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d168      	bne.n	800281c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e275      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x7a>
 8002758:	4b84      	ldr	r3, [pc, #528]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a83      	ldr	r2, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e02e      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x9c>
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0xc0>
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe f994 	bl	8000af8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe f990 	bl	8000af8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e229      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe f980 	bl	8000af8 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe f97c 	bl	8000af8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e215      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x110>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d069      	beq.n	80028fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1e9      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	493d      	ldr	r1, [pc, #244]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e040      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe f932 	bl	8000af8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe f92e 	bl	8000af8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1c7      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4929      	ldr	r1, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a26      	ldr	r2, [pc, #152]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe f90e 	bl	8000af8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe f90a 	bl	8000af8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1a3      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d038      	beq.n	800297c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe f8eb 	bl	8000af8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe f8e7 	bl	8000af8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e180      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x23a>
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe f8d1 	bl	8000af8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe f8cd 	bl	8000af8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d903      	bls.n	8002970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e166      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
 800296c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a4 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b8c      	ldr	r3, [pc, #560]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a88      	ldr	r2, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029be:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7f      	ldr	r2, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe f895 	bl	8000af8 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe f891 	bl	8000af8 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e12a      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x31a>
 80029f8:	4b70      	ldr	r3, [pc, #448]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a6f      	ldr	r2, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
 8002a04:	e02d      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x33c>
 8002a0e:	4b6b      	ldr	r3, [pc, #428]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	e01c      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x35e>
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	e00b      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d015      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f845 	bl	8000af8 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe f841 	bl	8000af8 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0d8      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ee      	beq.n	8002a72 <HAL_RCC_OscConfig+0x386>
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe f82f 	bl	8000af8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f82b 	bl	8000af8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0c2      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80ae 	beq.w	8002c38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d06d      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d14b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fd fffc 	bl	8000af8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fd fff8 	bl	8000af8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e091      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fd ffca 	bl	8000af8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fd ffc6 	bl	8000af8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e05f      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x47c>
 8002b86:	e057      	b.n	8002c38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fd ffb0 	bl	8000af8 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fd ffac 	bl	8000af8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e045      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4b0>
 8002bba:	e03d      	b.n	8002c38 <HAL_RCC_OscConfig+0x54c>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_OscConfig+0x558>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d129      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d119      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d0      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4965      	ldr	r1, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e073      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06b      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4936      	ldr	r1, [pc, #216]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fd fedc 	bl	8000af8 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fd fed8 	bl	8000af8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e053      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d210      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 020f 	bic.w	r2, r3, #15
 8002d82:	4922      	ldr	r1, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fd3c 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0800b2a0 	.word	0x0800b2a0
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b094      	sub	sp, #80	; 0x50
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e30:	2300      	movs	r3, #0
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80e1 	bhi.w	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e0db      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e58:	e0db      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e5e:	e0d8      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4621      	mov	r1, r4
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	6139      	str	r1, [r7, #16]
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ece:	4651      	mov	r1, sl
 8002ed0:	018a      	lsls	r2, r1, #6
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed8:	4659      	mov	r1, fp
 8002eda:	eb63 0901 	sbc.w	r9, r3, r1
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef2:	4690      	mov	r8, r2
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	eb18 0303 	adds.w	r3, r8, r3
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	462b      	mov	r3, r5
 8002f00:	eb49 0303 	adc.w	r3, r9, r3
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f12:	4629      	mov	r1, r5
 8002f14:	024b      	lsls	r3, r1, #9
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	024a      	lsls	r2, r1, #9
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	2200      	movs	r2, #0
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f30:	f7fd f986 	bl	8000240 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	0159      	lsls	r1, r3, #5
 8002f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6a:	0150      	lsls	r0, r2, #5
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4641      	mov	r1, r8
 8002f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f90:	ebb2 040a 	subs.w	r4, r2, sl
 8002f94:	eb63 050b 	sbc.w	r5, r3, fp
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	eb45 0303 	adc.w	r3, r5, r3
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	028b      	lsls	r3, r1, #10
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	61fa      	str	r2, [r7, #28]
 8002fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe4:	f7fd f92c 	bl	8000240 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003014:	4618      	mov	r0, r3
 8003016:	3750      	adds	r7, #80	; 0x50
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0800b2b0 	.word	0x0800b2b0

0800306c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	220f      	movs	r2, #15
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_RCC_GetClockConfig+0x60>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40023c00 	.word	0x40023c00

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030f8:	4b69      	ldr	r3, [pc, #420]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003102:	6093      	str	r3, [r2, #8]
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	4964      	ldr	r1, [pc, #400]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d017      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	4959      	ldr	r1, [pc, #356]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d017      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003166:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	494a      	ldr	r1, [pc, #296]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003184:	d101      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 808b 	beq.w	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	4a39      	ldr	r2, [pc, #228]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	6413      	str	r3, [r2, #64]	; 0x40
 80031c0:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fd fc8e 	bl	8000af8 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e0:	f7fd fc8a 	bl	8000af8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e38f      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031f2:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d035      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d02e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800323e:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d114      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fd fc52 	bl	8000af8 <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fd fc4e 	bl	8000af8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e351      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ee      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003286:	d111      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003296:	400b      	ands	r3, r1
 8003298:	4901      	ldr	r1, [pc, #4]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
 800329e:	e00b      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40007000 	.word	0x40007000
 80032a8:	0ffffcff 	.word	0x0ffffcff
 80032ac:	4bac      	ldr	r3, [pc, #688]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4aab      	ldr	r2, [pc, #684]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032b6:	6093      	str	r3, [r2, #8]
 80032b8:	4ba9      	ldr	r3, [pc, #676]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c4:	49a6      	ldr	r1, [pc, #664]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d010      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032d6:	4ba2      	ldr	r3, [pc, #648]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	4aa0      	ldr	r2, [pc, #640]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032e6:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	499b      	ldr	r1, [pc, #620]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003304:	4b96      	ldr	r3, [pc, #600]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003312:	4993      	ldr	r1, [pc, #588]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003326:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003334:	498a      	ldr	r1, [pc, #552]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003348:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003356:	4982      	ldr	r1, [pc, #520]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800336a:	4b7d      	ldr	r3, [pc, #500]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4979      	ldr	r1, [pc, #484]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338c:	4b74      	ldr	r3, [pc, #464]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4971      	ldr	r1, [pc, #452]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ae:	4b6c      	ldr	r3, [pc, #432]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f023 020c 	bic.w	r2, r3, #12
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	4968      	ldr	r1, [pc, #416]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d0:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	4960      	ldr	r1, [pc, #384]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	4957      	ldr	r1, [pc, #348]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003414:	4b52      	ldr	r3, [pc, #328]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	494f      	ldr	r1, [pc, #316]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	4946      	ldr	r1, [pc, #280]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	493e      	ldr	r1, [pc, #248]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800349c:	4b30      	ldr	r3, [pc, #192]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034aa:	492d      	ldr	r1, [pc, #180]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034cc:	4924      	ldr	r1, [pc, #144]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034dc:	d101      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	4914      	ldr	r1, [pc, #80]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003530:	490b      	ldr	r1, [pc, #44]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003554:	4902      	ldr	r1, [pc, #8]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003570:	4b8a      	ldr	r3, [pc, #552]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	4986      	ldr	r1, [pc, #536]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	497d      	ldr	r1, [pc, #500]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d006      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80d6 	beq.w	800376c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fd fa94 	bl	8000af8 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035d4:	f7fd fa90 	bl	8000af8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e195      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361a:	0e1b      	lsrs	r3, r3, #24
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	019a      	lsls	r2, r3, #6
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	4958      	ldr	r1, [pc, #352]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366c:	d129      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003682:	0f1b      	lsrs	r3, r3, #28
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	019a      	lsls	r2, r3, #6
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	493e      	ldr	r1, [pc, #248]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036aa:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	f023 021f 	bic.w	r2, r3, #31
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	3b01      	subs	r3, #1
 80036ba:	4938      	ldr	r1, [pc, #224]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01d      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036dc:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e2:	0f1b      	lsrs	r3, r3, #28
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	4926      	ldr	r1, [pc, #152]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d011      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	019a      	lsls	r2, r3, #6
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	491a      	ldr	r1, [pc, #104]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fd f9d7 	bl	8000af8 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800374e:	f7fd f9d3 	bl	8000af8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	; 0x64
 800375a:	d901      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0d8      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b01      	cmp	r3, #1
 8003770:	f040 80ce 	bne.w	8003910 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fd f9ba 	bl	8000af8 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003786:	e00b      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003788:	f7fd f9b6 	bl	8000af8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d904      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0bb      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ac:	d0ec      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d02e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d12a      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037d6:	4b51      	ldr	r3, [pc, #324]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037e4:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	0f1b      	lsrs	r3, r3, #28
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	019a      	lsls	r2, r3, #6
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	061b      	lsls	r3, r3, #24
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	071b      	lsls	r3, r3, #28
 800380a:	4944      	ldr	r1, [pc, #272]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003812:	4b42      	ldr	r3, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	493d      	ldr	r1, [pc, #244]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d11d      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	0e1b      	lsrs	r3, r3, #24
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003856:	0f1b      	lsrs	r3, r3, #28
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	019a      	lsls	r2, r3, #6
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	061b      	lsls	r3, r3, #24
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	4929      	ldr	r1, [pc, #164]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d028      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	0e1b      	lsrs	r3, r3, #24
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	019a      	lsls	r2, r3, #6
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	071b      	lsls	r3, r3, #28
 80038be:	4917      	ldr	r1, [pc, #92]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4911      	ldr	r1, [pc, #68]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e8:	f7fd f906 	bl	8000af8 <HAL_GetTick>
 80038ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038f0:	f7fd f902 	bl	8000af8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e007      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390e:	d1ef      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e049      	b.n	80039c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f841 	bl	80039ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f000 fa00 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e054      	b.n	8003aa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d01d      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	; (8003abc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_TIM_Base_Start_IT+0xe8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d115      	bne.n	8003a90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xec>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d015      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d011      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	e008      	b.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40001800 	.word	0x40001800
 8003ad0:	00010007 	.word	0x00010007

08003ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0202 	mvn.w	r2, #2
 8003b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f905 	bl	8003d26 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8f7 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f908 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0204 	mvn.w	r2, #4
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8db 	bl	8003d26 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8cd 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f8de 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0208 	mvn.w	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8b1 	bl	8003d26 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8a3 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f8b4 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2208      	movs	r2, #8
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f887 	bl	8003d26 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f879 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f88a 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fc fdd0 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f91a 	bl	8003eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	d10e      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f90d 	bl	8003ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d10e      	bne.n	8003cde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d107      	bne.n	8003cde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f838 	bl	8003d4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d10e      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d107      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0220 	mvn.w	r2, #32
 8003d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8cd 	bl	8003ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <TIM_Base_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d00f      	beq.n	8003da4 <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	; (8003e7c <TIM_Base_SetConfig+0x118>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3c      	ldr	r2, [pc, #240]	; (8003e80 <TIM_Base_SetConfig+0x11c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3b      	ldr	r2, [pc, #236]	; (8003e84 <TIM_Base_SetConfig+0x120>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <TIM_Base_SetConfig+0x124>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d108      	bne.n	8003db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2f      	ldr	r2, [pc, #188]	; (8003e78 <TIM_Base_SetConfig+0x114>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02b      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d027      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <TIM_Base_SetConfig+0x118>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d023      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <TIM_Base_SetConfig+0x11c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01f      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <TIM_Base_SetConfig+0x120>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01b      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <TIM_Base_SetConfig+0x124>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d017      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a28      	ldr	r2, [pc, #160]	; (8003e8c <TIM_Base_SetConfig+0x128>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <TIM_Base_SetConfig+0x12c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00f      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <TIM_Base_SetConfig+0x130>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <TIM_Base_SetConfig+0x134>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <TIM_Base_SetConfig+0x138>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <TIM_Base_SetConfig+0x13c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d108      	bne.n	8003e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <TIM_Base_SetConfig+0x114>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0xf8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <TIM_Base_SetConfig+0x124>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d103      	bne.n	8003e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	615a      	str	r2, [r3, #20]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800
 8003e98:	40001800 	.word	0x40001800
 8003e9c:	40001c00 	.word	0x40001c00
 8003ea0:	40002000 	.word	0x40002000

08003ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	f107 001c 	add.w	r0, r7, #28
 8003eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d120      	bne.n	8003f3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <USB_CoreInit+0xac>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f001 fbee 	bl	8005710 <USB_CoreReset>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e010      	b.n	8003f5c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 fbe2 	bl	8005710 <USB_CoreReset>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10b      	bne.n	8003f7a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f043 0206 	orr.w	r2, r3, #6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f86:	b004      	add	sp, #16
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	ffbdffbf 	.word	0xffbdffbf

08003f90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d165      	bne.n	8004070 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a41      	ldr	r2, [pc, #260]	; (80040ac <USB_SetTurnaroundTime+0x11c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d906      	bls.n	8003fba <USB_SetTurnaroundTime+0x2a>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <USB_SetTurnaroundTime+0x120>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d202      	bcs.n	8003fba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e062      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <USB_SetTurnaroundTime+0x120>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d306      	bcc.n	8003fd0 <USB_SetTurnaroundTime+0x40>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <USB_SetTurnaroundTime+0x124>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d202      	bcs.n	8003fd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fca:	230e      	movs	r3, #14
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e057      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <USB_SetTurnaroundTime+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d306      	bcc.n	8003fe6 <USB_SetTurnaroundTime+0x56>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a37      	ldr	r2, [pc, #220]	; (80040b8 <USB_SetTurnaroundTime+0x128>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d202      	bcs.n	8003fe6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fe0:	230d      	movs	r3, #13
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e04c      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a33      	ldr	r2, [pc, #204]	; (80040b8 <USB_SetTurnaroundTime+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d306      	bcc.n	8003ffc <USB_SetTurnaroundTime+0x6c>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a32      	ldr	r2, [pc, #200]	; (80040bc <USB_SetTurnaroundTime+0x12c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d802      	bhi.n	8003ffc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ff6:	230c      	movs	r3, #12
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e041      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <USB_SetTurnaroundTime+0x12c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d906      	bls.n	8004012 <USB_SetTurnaroundTime+0x82>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <USB_SetTurnaroundTime+0x130>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d802      	bhi.n	8004012 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800400c:	230b      	movs	r3, #11
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e036      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <USB_SetTurnaroundTime+0x130>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d906      	bls.n	8004028 <USB_SetTurnaroundTime+0x98>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <USB_SetTurnaroundTime+0x134>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d802      	bhi.n	8004028 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004022:	230a      	movs	r3, #10
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e02b      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <USB_SetTurnaroundTime+0x134>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d906      	bls.n	800403e <USB_SetTurnaroundTime+0xae>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <USB_SetTurnaroundTime+0x138>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d202      	bcs.n	800403e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004038:	2309      	movs	r3, #9
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e020      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <USB_SetTurnaroundTime+0x138>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d306      	bcc.n	8004054 <USB_SetTurnaroundTime+0xc4>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4a20      	ldr	r2, [pc, #128]	; (80040cc <USB_SetTurnaroundTime+0x13c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d802      	bhi.n	8004054 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800404e:	2308      	movs	r3, #8
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e015      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <USB_SetTurnaroundTime+0x13c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d906      	bls.n	800406a <USB_SetTurnaroundTime+0xda>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <USB_SetTurnaroundTime+0x140>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d202      	bcs.n	800406a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004064:	2307      	movs	r3, #7
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e00a      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800406a:	2306      	movs	r3, #6
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e007      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004076:	2309      	movs	r3, #9
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e001      	b.n	8004080 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800407c:	2309      	movs	r3, #9
 800407e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	00d8acbf 	.word	0x00d8acbf
 80040b0:	00e4e1c0 	.word	0x00e4e1c0
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	01067380 	.word	0x01067380
 80040bc:	011a499f 	.word	0x011a499f
 80040c0:	01312cff 	.word	0x01312cff
 80040c4:	014ca43f 	.word	0x014ca43f
 80040c8:	016e3600 	.word	0x016e3600
 80040cc:	01a6ab1f 	.word	0x01a6ab1f
 80040d0:	01e84800 	.word	0x01e84800

080040d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f043 0201 	orr.w	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d115      	bne.n	8004166 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004146:	2001      	movs	r0, #1
 8004148:	f7fc fce2 	bl	8000b10 <HAL_Delay>
      ms++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 fa4b 	bl	80055ee <USB_GetMode>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d01e      	beq.n	800419c <USB_SetCurrentMode+0x84>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b31      	cmp	r3, #49	; 0x31
 8004162:	d9f0      	bls.n	8004146 <USB_SetCurrentMode+0x2e>
 8004164:	e01a      	b.n	800419c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004178:	2001      	movs	r0, #1
 800417a:	f7fc fcc9 	bl	8000b10 <HAL_Delay>
      ms++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f001 fa32 	bl	80055ee <USB_GetMode>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <USB_SetCurrentMode+0x84>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b31      	cmp	r3, #49	; 0x31
 8004194:	d9f0      	bls.n	8004178 <USB_SetCurrentMode+0x60>
 8004196:	e001      	b.n	800419c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e005      	b.n	80041a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b32      	cmp	r3, #50	; 0x32
 80041a0:	d101      	bne.n	80041a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b0:	b084      	sub	sp, #16
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e009      	b.n	80041e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3340      	adds	r3, #64	; 0x40
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3301      	adds	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b0e      	cmp	r3, #14
 80041e8:	d9f2      	bls.n	80041d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11c      	bne.n	800422a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e005      	b.n	8004236 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	4619      	mov	r1, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	461a      	mov	r2, r3
 8004252:	680b      	ldr	r3, [r1, #0]
 8004254:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10c      	bne.n	8004276 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004262:	2100      	movs	r1, #0
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f965 	bl	8004534 <USB_SetDevSpeed>
 800426a:	e008      	b.n	800427e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800426c:	2101      	movs	r1, #1
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f960 	bl	8004534 <USB_SetDevSpeed>
 8004274:	e003      	b.n	800427e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004276:	2103      	movs	r1, #3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f95b 	bl	8004534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800427e:	2110      	movs	r1, #16
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8f3 	bl	800446c <USB_FlushTxFifo>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f91f 	bl	80044d4 <USB_FlushRxFifo>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	461a      	mov	r2, r3
 80042b4:	2300      	movs	r3, #0
 80042b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e043      	b.n	8004352 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e0:	d118      	bne.n	8004314 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e013      	b.n	8004326 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e008      	b.n	8004326 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800434a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	3301      	adds	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	429a      	cmp	r2, r3
 8004358:	d3b7      	bcc.n	80042ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e043      	b.n	80043e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004376:	d118      	bne.n	80043aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e013      	b.n	80043bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e008      	b.n	80043bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	461a      	mov	r2, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3b7      	bcc.n	8004360 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004402:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004410:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f043 0210 	orr.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <USB_DevInit+0x2b4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <USB_DevInit+0x2b8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004454:	7dfb      	ldrb	r3, [r7, #23]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004460:	b004      	add	sp, #16
 8004462:	4770      	bx	lr
 8004464:	803c3800 	.word	0x803c3800
 8004468:	40000004 	.word	0x40000004

0800446c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <USB_FlushTxFifo+0x64>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e01b      	b.n	80044c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	daf2      	bge.n	800447a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	019b      	lsls	r3, r3, #6
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <USB_FlushTxFifo+0x64>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e006      	b.n	80044c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d0f0      	beq.n	80044a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	00030d40 	.word	0x00030d40

080044d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a11      	ldr	r2, [pc, #68]	; (8004530 <USB_FlushRxFifo+0x5c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e018      	b.n	8004524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	daf2      	bge.n	80044e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2210      	movs	r2, #16
 8004502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <USB_FlushRxFifo+0x5c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d0f0      	beq.n	8004504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	00030d40 	.word	0x00030d40

08004534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
 800458a:	e00a      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d002      	beq.n	8004598 <USB_GetDevSpeed+0x32>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d102      	bne.n	800459e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004598:	2302      	movs	r3, #2
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	e001      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800459e:	230f      	movs	r3, #15
 80045a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d139      	bne.n	8004640 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d153      	bne.n	80046ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004620:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	059b      	lsls	r3, r3, #22
 8004626:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	431a      	orrs	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	0159      	lsls	r1, r3, #5
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	440b      	add	r3, r1
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	4619      	mov	r1, r3
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <USB_ActivateEndpoint+0x10c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e035      	b.n	80046ac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465e:	4313      	orrs	r3, r2
 8004660:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	791b      	ldrb	r3, [r3, #4]
 8004692:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004694:	430b      	orrs	r3, r1
 8004696:	431a      	orrs	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	0159      	lsls	r1, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	440b      	add	r3, r1
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	4619      	mov	r1, r3
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <USB_ActivateEndpoint+0x10c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	10008000 	.word	0x10008000

080046c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d161      	bne.n	80047a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d11f      	bne.n	8004734 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004712:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4013      	ands	r3, r2
 8004756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004778:	4013      	ands	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	440b      	add	r3, r1
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	4619      	mov	r1, r3
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <USB_DeactivateEndpoint+0x1b0>)
 800479a:	4013      	ands	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
 800479e:	e060      	b.n	8004862 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	d11f      	bne.n	80047f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	43db      	mvns	r3, r3
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4013      	ands	r3, r2
 800481a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	43db      	mvns	r3, r3
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	440b      	add	r3, r1
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	4619      	mov	r1, r3
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <USB_DeactivateEndpoint+0x1b4>)
 800485e:	4013      	ands	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	ec337800 	.word	0xec337800
 8004874:	eff37800 	.word	0xeff37800

08004878 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 8163 	bne.w	8004b60 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d132      	bne.n	8004908 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	0159      	lsls	r1, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	4619      	mov	r1, r3
 80048be:	4ba5      	ldr	r3, [pc, #660]	; (8004b54 <USB_EPStartXfer+0x2dc>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	4619      	mov	r1, r3
 8004900:	4b95      	ldr	r3, [pc, #596]	; (8004b58 <USB_EPStartXfer+0x2e0>)
 8004902:	4013      	ands	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
 8004906:	e074      	b.n	80049f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	440b      	add	r3, r1
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	4619      	mov	r1, r3
 8004924:	4b8c      	ldr	r3, [pc, #560]	; (8004b58 <USB_EPStartXfer+0x2e0>)
 8004926:	4013      	ands	r3, r2
 8004928:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	440b      	add	r3, r1
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	4619      	mov	r1, r3
 8004946:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <USB_EPStartXfer+0x2dc>)
 8004948:	4013      	ands	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	440b      	add	r3, r1
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	fbb1 f3f3 	udiv	r3, r1, r3
 800496e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004970:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <USB_EPStartXfer+0x2e4>)
 8004972:	400b      	ands	r3, r1
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	0148      	lsls	r0, r1, #5
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	4401      	add	r1, r0
 800497c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004980:	4313      	orrs	r3, r2
 8004982:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	0148      	lsls	r0, r1, #5
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	4401      	add	r1, r0
 80049a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a6:	4313      	orrs	r3, r2
 80049a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11f      	bne.n	80049f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d14b      	bne.n	8004a90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d128      	bne.n	8004a6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e00f      	b.n	8004a6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e137      	b.n	8004d00 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d015      	beq.n	8004ae4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 811f 	beq.w	8004d00 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae2:	e10d      	b.n	8004d00 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d110      	bne.n	8004b16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e00f      	b.n	8004b36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6919      	ldr	r1, [r3, #16]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	b298      	uxth	r0, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 faea 	bl	8005124 <USB_WritePacket>
 8004b50:	e0d6      	b.n	8004d00 <USB_EPStartXfer+0x488>
 8004b52:	bf00      	nop
 8004b54:	e007ffff 	.word	0xe007ffff
 8004b58:	fff80000 	.word	0xfff80000
 8004b5c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	440b      	add	r3, r1
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <USB_EPStartXfer+0x494>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	0159      	lsls	r1, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	440b      	add	r3, r1
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4b5c      	ldr	r3, [pc, #368]	; (8004d10 <USB_EPStartXfer+0x498>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d123      	bne.n	8004bf4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc2:	69b9      	ldr	r1, [r7, #24]
 8004bc4:	0148      	lsls	r0, r1, #5
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	4401      	add	r1, r0
 8004bca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf0:	6113      	str	r3, [r2, #16]
 8004bf2:	e037      	b.n	8004c64 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	1e5a      	subs	r2, r3, #1
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	8afa      	ldrh	r2, [r7, #22]
 8004c10:	fb03 f202 	mul.w	r2, r3, r2
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	8afb      	ldrh	r3, [r7, #22]
 8004c28:	04d9      	lsls	r1, r3, #19
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <USB_EPStartXfer+0x49c>)
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	69b9      	ldr	r1, [r7, #24]
 8004c30:	0148      	lsls	r0, r1, #5
 8004c32:	69f9      	ldr	r1, [r7, #28]
 8004c34:	4401      	add	r1, r0
 8004c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	0148      	lsls	r0, r1, #5
 8004c58:	69f9      	ldr	r1, [r7, #28]
 8004c5a:	4401      	add	r1, r0
 8004c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	460a      	mov	r2, r1
 8004c84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	791b      	ldrb	r3, [r3, #4]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d128      	bne.n	8004ce0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00f      	b.n	8004ce0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	fff80000 	.word	0xfff80000
 8004d10:	e007ffff 	.word	0xe007ffff
 8004d14:	1ff80000 	.word	0x1ff80000

08004d18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 80ce 	bne.w	8004ed6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d132      	bne.n	8004da8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	0159      	lsls	r1, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	440b      	add	r3, r1
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4b9a      	ldr	r3, [pc, #616]	; (8004fc8 <USB_EP0StartXfer+0x2b0>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	0159      	lsls	r1, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <USB_EP0StartXfer+0x2b4>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]
 8004da6:	e04e      	b.n	8004e46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	0159      	lsls	r1, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <USB_EP0StartXfer+0x2b4>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	440b      	add	r3, r1
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	4619      	mov	r1, r3
 8004de6:	4b78      	ldr	r3, [pc, #480]	; (8004fc8 <USB_EP0StartXfer+0x2b0>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d903      	bls.n	8004e00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	6939      	ldr	r1, [r7, #16]
 8004e38:	0148      	lsls	r0, r1, #5
 8004e3a:	6979      	ldr	r1, [r7, #20]
 8004e3c:	4401      	add	r1, r0
 8004e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e42:	4313      	orrs	r3, r2
 8004e44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d11e      	bne.n	8004e8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e097      	b.n	8004fba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8083 	beq.w	8004fba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ed4:	e071      	b.n	8004fba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	0159      	lsls	r1, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <USB_EP0StartXfer+0x2b4>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	4619      	mov	r1, r3
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <USB_EP0StartXfer+0x2b0>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f68:	6939      	ldr	r1, [r7, #16]
 8004f6a:	0148      	lsls	r0, r1, #5
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	4401      	add	r1, r0
 8004f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f74:	4313      	orrs	r3, r2
 8004f76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10d      	bne.n	8004f9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6919      	ldr	r1, [r3, #16]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	460a      	mov	r2, r1
 8004f98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e007ffff 	.word	0xe007ffff
 8004fcc:	fff80000 	.word	0xfff80000

08004fd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d14a      	bne.n	8005084 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005006:	f040 8086 	bne.w	8005116 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800502c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3301      	adds	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f242 7210 	movw	r2, #10000	; 0x2710
 800505e:	4293      	cmp	r3, r2
 8005060:	d902      	bls.n	8005068 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
          break;
 8005066:	e056      	b.n	8005116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005080:	d0e7      	beq.n	8005052 <USB_EPStopXfer+0x82>
 8005082:	e048      	b.n	8005116 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509c:	d13b      	bne.n	8005116 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d902      	bls.n	80050fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
          break;
 80050fa:	e00c      	b.n	8005116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005114:	d0e7      	beq.n	80050e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	460b      	mov	r3, r1
 8005134:	71fb      	strb	r3, [r7, #7]
 8005136:	4613      	mov	r3, r2
 8005138:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d123      	bne.n	8005192 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800514a:	88bb      	ldrh	r3, [r7, #4]
 800514c:	3303      	adds	r3, #3
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e018      	b.n	800518a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	031a      	lsls	r2, r3, #12
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	461a      	mov	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	3301      	adds	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	d3e2      	bcc.n	8005158 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3724      	adds	r7, #36	; 0x24
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b08b      	sub	sp, #44	; 0x2c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	e014      	b.n	80051f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	3301      	adds	r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	3301      	adds	r3, #1
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3e6      	bcc.n	80051cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051fe:	8bfb      	ldrh	r3, [r7, #30]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01e      	beq.n	8005242 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520e:	461a      	mov	r2, r3
 8005210:	f107 0310 	add.w	r3, r7, #16
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	b2da      	uxtb	r2, r3
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	701a      	strb	r2, [r3, #0]
      i++;
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	3301      	adds	r3, #1
 800522e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	3301      	adds	r3, #1
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005236:	8bfb      	ldrh	r3, [r7, #30]
 8005238:	3b01      	subs	r3, #1
 800523a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800523c:	8bfb      	ldrh	r3, [r7, #30]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1ea      	bne.n	8005218 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005244:	4618      	mov	r0, r3
 8005246:	372c      	adds	r7, #44	; 0x2c
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d12c      	bne.n	80052c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	db12      	blt.n	80052a4 <USB_EPSetStall+0x54>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	e02b      	b.n	800531e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db12      	blt.n	80052fe <USB_EPSetStall+0xae>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800531c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d128      	bne.n	800539a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005366:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	791b      	ldrb	r3, [r3, #4]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d003      	beq.n	8005378 <USB_EPClearStall+0x4c>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d138      	bne.n	80053ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e027      	b.n	80053ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	791b      	ldrb	r3, [r3, #4]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d003      	beq.n	80053ca <USB_EPClearStall+0x9e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	791b      	ldrb	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d10f      	bne.n	80053ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005416:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800541a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005472:	f023 0302 	bic.w	r3, r3, #2
 8005476:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054a0:	f023 0303 	bic.w	r3, r3, #3
 80054a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0c1b      	lsrs	r3, r3, #16
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	b29b      	uxth	r3, r3
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4013      	ands	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005584:	68bb      	ldr	r3, [r7, #8]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005592:	b480      	push	{r7}
 8005594:	b087      	sub	sp, #28
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4013      	ands	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055e0:	68bb      	ldr	r3, [r7, #8]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0301 	and.w	r3, r3, #1
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	4619      	mov	r1, r3
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <USB_ActivateSetup+0x44>)
 800562a:	4013      	ands	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	fffff800 	.word	0xfffff800

08005654 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	460b      	mov	r3, r1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	333c      	adds	r3, #60	; 0x3c
 800566a:	3304      	adds	r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4a26      	ldr	r2, [pc, #152]	; (800570c <USB_EP0_OutStart+0xb8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d90a      	bls.n	800568e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005688:	d101      	bne.n	800568e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e037      	b.n	80056fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f043 0318 	orr.w	r3, r3, #24
 80056c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056d6:	7afb      	ldrb	r3, [r7, #11]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10f      	bne.n	80056fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	4f54300a 	.word	0x4f54300a

08005710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <USB_CoreReset+0x64>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e01b      	b.n	8005766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	daf2      	bge.n	800571c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f043 0201 	orr.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <USB_CoreReset+0x64>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e006      	b.n	8005766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d0f0      	beq.n	8005746 <USB_CoreReset+0x36>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	00030d40 	.word	0x00030d40

08005778 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005784:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005788:	f005 fbae 	bl	800aee8 <malloc>
 800578c:	4603      	mov	r3, r0
 800578e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	2100      	movs	r1, #0
 80057a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0d4      	b.n	8005954 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057aa:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057ae:	2100      	movs	r1, #0
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f005 fbb7 	bl	800af24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	32b0      	adds	r2, #176	; 0xb0
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32b0      	adds	r2, #176	; 0xb0
 80057d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7c1b      	ldrb	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d138      	bne.n	8005854 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057e2:	4b5e      	ldr	r3, [pc, #376]	; (800595c <USBD_CDC_Init+0x1e4>)
 80057e4:	7819      	ldrb	r1, [r3, #0]
 80057e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ea:	2202      	movs	r2, #2
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f005 f9ac 	bl	800ab4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057f2:	4b5a      	ldr	r3, [pc, #360]	; (800595c <USBD_CDC_Init+0x1e4>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	f003 020f 	and.w	r2, r3, #15
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	2201      	movs	r2, #1
 800580a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800580c:	4b54      	ldr	r3, [pc, #336]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800580e:	7819      	ldrb	r1, [r3, #0]
 8005810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005814:	2202      	movs	r2, #2
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f005 f997 	bl	800ab4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800581c:	4b50      	ldr	r3, [pc, #320]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 020f 	and.w	r2, r3, #15
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005834:	2201      	movs	r2, #1
 8005836:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005838:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <USBD_CDC_Init+0x1ec>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	3326      	adds	r3, #38	; 0x26
 800584e:	2210      	movs	r2, #16
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e035      	b.n	80058c0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <USBD_CDC_Init+0x1e4>)
 8005856:	7819      	ldrb	r1, [r3, #0]
 8005858:	2340      	movs	r3, #64	; 0x40
 800585a:	2202      	movs	r2, #2
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f005 f974 	bl	800ab4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005862:	4b3e      	ldr	r3, [pc, #248]	; (800595c <USBD_CDC_Init+0x1e4>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	2201      	movs	r2, #1
 800587a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800587c:	4b38      	ldr	r3, [pc, #224]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800587e:	7819      	ldrb	r1, [r3, #0]
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	2202      	movs	r2, #2
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f005 f960 	bl	800ab4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800588a:	4b35      	ldr	r3, [pc, #212]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058a2:	2201      	movs	r2, #1
 80058a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058a6:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f003 020f 	and.w	r2, r3, #15
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	3326      	adds	r3, #38	; 0x26
 80058bc:	2210      	movs	r2, #16
 80058be:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058c2:	7819      	ldrb	r1, [r3, #0]
 80058c4:	2308      	movs	r3, #8
 80058c6:	2203      	movs	r2, #3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f005 f93e 	bl	800ab4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	2201      	movs	r2, #1
 80058e6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	33b0      	adds	r3, #176	; 0xb0
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800591e:	2302      	movs	r3, #2
 8005920:	e018      	b.n	8005954 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7c1b      	ldrb	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800592a:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800592c:	7819      	ldrb	r1, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f005 f9f5 	bl	800ad28 <USBD_LL_PrepareReceive>
 800593e:	e008      	b.n	8005952 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <USBD_CDC_Init+0x1e8>)
 8005942:	7819      	ldrb	r1, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f005 f9eb 	bl	800ad28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000093 	.word	0x20000093
 8005960:	20000094 	.word	0x20000094
 8005964:	20000095 	.word	0x20000095

08005968 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <USBD_CDC_DeInit+0xf8>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f005 f90b 	bl	800ab96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005980:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <USBD_CDC_DeInit+0xf8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	2200      	movs	r2, #0
 8005998:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <USBD_CDC_DeInit+0xfc>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f005 f8f8 	bl	800ab96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <USBD_CDC_DeInit+0xfc>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059be:	2200      	movs	r2, #0
 80059c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059c2:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f005 f8e4 	bl	800ab96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	2200      	movs	r2, #0
 80059e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3326      	adds	r3, #38	; 0x26
 80059fe:	2200      	movs	r2, #0
 8005a00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	32b0      	adds	r2, #176	; 0xb0
 8005a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01f      	beq.n	8005a54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	33b0      	adds	r3, #176	; 0xb0
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	32b0      	adds	r2, #176	; 0xb0
 8005a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f005 fa5e 	bl	800aef8 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	32b0      	adds	r2, #176	; 0xb0
 8005a46:	2100      	movs	r1, #0
 8005a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000093 	.word	0x20000093
 8005a64:	20000094 	.word	0x20000094
 8005a68:	20000095 	.word	0x20000095

08005a6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	32b0      	adds	r2, #176	; 0xb0
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0bf      	b.n	8005c1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d050      	beq.n	8005b4a <USBD_CDC_Setup+0xde>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	f040 80af 	bne.w	8005c0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	88db      	ldrh	r3, [r3, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03a      	beq.n	8005b2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da1b      	bge.n	8005af8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	33b0      	adds	r3, #176	; 0xb0
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ad6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	88d2      	ldrh	r2, [r2, #6]
 8005adc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	88db      	ldrh	r3, [r3, #6]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	bf28      	it	cs
 8005ae6:	2307      	movcs	r3, #7
 8005ae8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	89fa      	ldrh	r2, [r7, #14]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 fdad 	bl	8007650 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005af6:	e090      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	785a      	ldrb	r2, [r3, #1]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	2b3f      	cmp	r3, #63	; 0x3f
 8005b08:	d803      	bhi.n	8005b12 <USBD_CDC_Setup+0xa6>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	88db      	ldrh	r3, [r3, #6]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	e000      	b.n	8005b14 <USBD_CDC_Setup+0xa8>
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b22:	461a      	mov	r2, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fdbf 	bl	80076a8 <USBD_CtlPrepareRx>
      break;
 8005b2a:	e076      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	33b0      	adds	r3, #176	; 0xb0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	7850      	ldrb	r0, [r2, #1]
 8005b42:	2200      	movs	r2, #0
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	4798      	blx	r3
      break;
 8005b48:	e067      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b0b      	cmp	r3, #11
 8005b50:	d851      	bhi.n	8005bf6 <USBD_CDC_Setup+0x18a>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <USBD_CDC_Setup+0xec>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005c05 	.word	0x08005c05
 8005b60:	08005bf7 	.word	0x08005bf7
 8005b64:	08005bf7 	.word	0x08005bf7
 8005b68:	08005bf7 	.word	0x08005bf7
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005bf7 	.word	0x08005bf7
 8005b74:	08005bf7 	.word	0x08005bf7
 8005b78:	08005bf7 	.word	0x08005bf7
 8005b7c:	08005bf7 	.word	0x08005bf7
 8005b80:	08005bb3 	.word	0x08005bb3
 8005b84:	08005bdd 	.word	0x08005bdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d107      	bne.n	8005ba4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b94:	f107 030a 	add.w	r3, r7, #10
 8005b98:	2202      	movs	r2, #2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fd57 	bl	8007650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ba2:	e032      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fce1 	bl	800756e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	75fb      	strb	r3, [r7, #23]
          break;
 8005bb0:	e02b      	b.n	8005c0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d107      	bne.n	8005bce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bbe:	f107 030d 	add.w	r3, r7, #13
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fd42 	bl	8007650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bcc:	e01d      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 fccc 	bl	800756e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bda:	e016      	b.n	8005c0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d00f      	beq.n	8005c08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fcbf 	bl	800756e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bf4:	e008      	b.n	8005c08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fcb8 	bl	800756e <USBD_CtlError>
          ret = USBD_FAIL;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	75fb      	strb	r3, [r7, #23]
          break;
 8005c02:	e002      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
          break;
 8005c04:	bf00      	nop
 8005c06:	e008      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
          break;
 8005c08:	bf00      	nop
      }
      break;
 8005c0a:	e006      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fcad 	bl	800756e <USBD_CtlError>
      ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32b0      	adds	r2, #176	; 0xb0
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e065      	b.n	8005d1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	32b0      	adds	r2, #176	; 0xb0
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3318      	adds	r3, #24
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02f      	beq.n	8005cd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 010f 	and.w	r1, r3, #15
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	460b      	mov	r3, r1
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	440b      	add	r3, r1
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4403      	add	r3, r0
 8005ca0:	3348      	adds	r3, #72	; 0x48
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cca:	78f9      	ldrb	r1, [r7, #3]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f005 f808 	bl	800ace6 <USBD_LL_Transmit>
 8005cd6:	e01f      	b.n	8005d18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	33b0      	adds	r3, #176	; 0xb0
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d010      	beq.n	8005d18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	33b0      	adds	r3, #176	; 0xb0
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	32b0      	adds	r2, #176	; 0xb0
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	32b0      	adds	r2, #176	; 0xb0
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e01a      	b.n	8005d8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f005 f806 	bl	800ad6a <USBD_LL_GetRxDataSize>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	33b0      	adds	r3, #176	; 0xb0
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d84:	4611      	mov	r1, r2
 8005d86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	32b0      	adds	r2, #176	; 0xb0
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e025      	b.n	8005e00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	33b0      	adds	r3, #176	; 0xb0
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01a      	beq.n	8005dfe <USBD_CDC_EP0_RxReady+0x6c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d015      	beq.n	8005dfe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	33b0      	adds	r3, #176	; 0xb0
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005dea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005df2:	b292      	uxth	r2, r2
 8005df4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e10:	2182      	movs	r1, #130	; 0x82
 8005e12:	4818      	ldr	r0, [pc, #96]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e14:	f000 fd49 	bl	80068aa <USBD_GetEpDesc>
 8005e18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4815      	ldr	r0, [pc, #84]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e1e:	f000 fd44 	bl	80068aa <USBD_GetEpDesc>
 8005e22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e24:	2181      	movs	r1, #129	; 0x81
 8005e26:	4813      	ldr	r0, [pc, #76]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e28:	f000 fd3f 	bl	80068aa <USBD_GetEpDesc>
 8005e2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2210      	movs	r2, #16
 8005e38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e48:	711a      	strb	r2, [r3, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5c:	711a      	strb	r2, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2243      	movs	r2, #67	; 0x43
 8005e66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000050 	.word	0x20000050

08005e78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e80:	2182      	movs	r1, #130	; 0x82
 8005e82:	4818      	ldr	r0, [pc, #96]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e84:	f000 fd11 	bl	80068aa <USBD_GetEpDesc>
 8005e88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4815      	ldr	r0, [pc, #84]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e8e:	f000 fd0c 	bl	80068aa <USBD_GetEpDesc>
 8005e92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e94:	2181      	movs	r1, #129	; 0x81
 8005e96:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e98:	f000 fd07 	bl	80068aa <USBD_GetEpDesc>
 8005e9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	711a      	strb	r2, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f042 0202 	orr.w	r2, r2, #2
 8005ebc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	711a      	strb	r2, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f042 0202 	orr.w	r2, r2, #2
 8005ed0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2243      	movs	r2, #67	; 0x43
 8005ed6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000050 	.word	0x20000050

08005ee8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ef0:	2182      	movs	r1, #130	; 0x82
 8005ef2:	4818      	ldr	r0, [pc, #96]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ef4:	f000 fcd9 	bl	80068aa <USBD_GetEpDesc>
 8005ef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005efa:	2101      	movs	r1, #1
 8005efc:	4815      	ldr	r0, [pc, #84]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005efe:	f000 fcd4 	bl	80068aa <USBD_GetEpDesc>
 8005f02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f04:	2181      	movs	r1, #129	; 0x81
 8005f06:	4813      	ldr	r0, [pc, #76]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f08:	f000 fccf 	bl	80068aa <USBD_GetEpDesc>
 8005f0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2210      	movs	r2, #16
 8005f18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f28:	711a      	strb	r2, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3c:	711a      	strb	r2, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2243      	movs	r2, #67	; 0x43
 8005f46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000050 	.word	0x20000050

08005f58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	220a      	movs	r2, #10
 8005f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	2000000c 	.word	0x2000000c

08005f78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e009      	b.n	8005fa0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	33b0      	adds	r3, #176	; 0xb0
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	32b0      	adds	r2, #176	; 0xb0
 8005fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e008      	b.n	8005fe4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	; 0xb0
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e004      	b.n	800601e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32b0      	adds	r2, #176	; 0xb0
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800604e:	2303      	movs	r3, #3
 8006050:	e025      	b.n	800609e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006058:	2b00      	cmp	r3, #0
 800605a:	d11f      	bne.n	800609c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2201      	movs	r2, #1
 8006060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <USBD_CDC_TransmitPacket+0x7c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4403      	add	r3, r0
 800607e:	3318      	adds	r3, #24
 8006080:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <USBD_CDC_TransmitPacket+0x7c>)
 8006084:	7819      	ldrb	r1, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f004 fe27 	bl	800ace6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000093 	.word	0x20000093

080060ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32b0      	adds	r2, #176	; 0xb0
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	32b0      	adds	r2, #176	; 0xb0
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e018      	b.n	800610c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7c1b      	ldrb	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <USBD_CDC_ReceivePacket+0x68>)
 80060e4:	7819      	ldrb	r1, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f004 fe19 	bl	800ad28 <USBD_LL_PrepareReceive>
 80060f6:	e008      	b.n	800610a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <USBD_CDC_ReceivePacket+0x68>)
 80060fa:	7819      	ldrb	r1, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f004 fe0f 	bl	800ad28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000094 	.word	0x20000094

08006118 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800612c:	2303      	movs	r3, #3
 800612e:	e01f      	b.n	8006170 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	79fa      	ldrb	r2, [r7, #7]
 8006162:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f004 fc89 	bl	800aa7c <USBD_LL_Init>
 800616a:	4603      	mov	r3, r0
 800616c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800616e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800618c:	2303      	movs	r3, #3
 800618e:	e025      	b.n	80061dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32ae      	adds	r2, #174	; 0xae
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32ae      	adds	r2, #174	; 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	f107 020e 	add.w	r2, r7, #14
 80061c0:	4610      	mov	r0, r2
 80061c2:	4798      	blx	r3
 80061c4:	4602      	mov	r2, r0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f004 fc91 	bl	800ab14 <USBD_LL_Start>
 80061f2:	4603      	mov	r3, r0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006204:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4611      	mov	r1, r2
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	78fa      	ldrb	r2, [r7, #3]
 8006264:	4611      	mov	r1, r2
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f001 f932 	bl	80074fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d01a      	beq.n	80062f0 <USBD_LL_SetupStage+0x72>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d822      	bhi.n	8006304 <USBD_LL_SetupStage+0x86>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <USBD_LL_SetupStage+0x4a>
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d00a      	beq.n	80062dc <USBD_LL_SetupStage+0x5e>
 80062c6:	e01d      	b.n	8006304 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb5f 	bl	8006994 <USBD_StdDevReq>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
      break;
 80062da:	e020      	b.n	800631e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fbc7 	bl	8006a78 <USBD_StdItfReq>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
      break;
 80062ee:	e016      	b.n	800631e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc29 	bl	8006b50 <USBD_StdEPReq>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
      break;
 8006302:	e00c      	b.n	800631e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800630a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800630e:	b2db      	uxtb	r3, r3
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f004 fc5e 	bl	800abd4 <USBD_LL_StallEP>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	bf00      	nop
  }

  return ret;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	460b      	mov	r3, r1
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d16e      	bne.n	800641e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006346:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800634e:	2b03      	cmp	r3, #3
 8006350:	f040 8098 	bne.w	8006484 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	429a      	cmp	r2, r3
 800635e:	d913      	bls.n	8006388 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4293      	cmp	r3, r2
 8006378:	bf28      	it	cs
 800637a:	4613      	movcs	r3, r2
 800637c:	461a      	mov	r2, r3
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 f9ae 	bl	80076e2 <USBD_CtlContinueRx>
 8006386:	e07d      	b.n	8006484 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2b02      	cmp	r3, #2
 8006394:	d014      	beq.n	80063c0 <USBD_LL_DataOutStage+0x98>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d81d      	bhi.n	80063d6 <USBD_LL_DataOutStage+0xae>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <USBD_LL_DataOutStage+0x7c>
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d003      	beq.n	80063aa <USBD_LL_DataOutStage+0x82>
 80063a2:	e018      	b.n	80063d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	75bb      	strb	r3, [r7, #22]
            break;
 80063a8:	e018      	b.n	80063dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa5e 	bl	8006876 <USBD_CoreFindIF>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75bb      	strb	r3, [r7, #22]
            break;
 80063be:	e00d      	b.n	80063dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	4619      	mov	r1, r3
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fa60 	bl	8006890 <USBD_CoreFindEP>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75bb      	strb	r3, [r7, #22]
            break;
 80063d4:	e002      	b.n	80063dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75bb      	strb	r3, [r7, #22]
            break;
 80063da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80063dc:	7dbb      	ldrb	r3, [r7, #22]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d119      	bne.n	8006416 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d113      	bne.n	8006416 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80063ee:	7dba      	ldrb	r2, [r7, #22]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	32ae      	adds	r2, #174	; 0xae
 80063f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80063fe:	7dba      	ldrb	r2, [r7, #22]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006406:	7dba      	ldrb	r2, [r7, #22]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	32ae      	adds	r2, #174	; 0xae
 800640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 f974 	bl	8007704 <USBD_CtlSendStatus>
 800641c:	e032      	b.n	8006484 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fa31 	bl	8006890 <USBD_CoreFindEP>
 800642e:	4603      	mov	r3, r0
 8006430:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006432:	7dbb      	ldrb	r3, [r7, #22]
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d025      	beq.n	8006484 <USBD_LL_DataOutStage+0x15c>
 8006438:	7dbb      	ldrb	r3, [r7, #22]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d122      	bne.n	8006484 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d117      	bne.n	800647a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800645a:	7dba      	ldrb	r2, [r7, #22]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006462:	7dba      	ldrb	r2, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	32ae      	adds	r2, #174	; 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	7afa      	ldrb	r2, [r7, #11]
 8006470:	4611      	mov	r1, r2
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	e000      	b.n	8006486 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	460b      	mov	r3, r1
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800649c:	7afb      	ldrb	r3, [r7, #11]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d16f      	bne.n	8006582 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3314      	adds	r3, #20
 80064a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d15a      	bne.n	8006568 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d914      	bls.n	80064e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	461a      	mov	r2, r3
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 f8d6 	bl	8007686 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064da:	2300      	movs	r3, #0
 80064dc:	2200      	movs	r2, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f004 fc21 	bl	800ad28 <USBD_LL_PrepareReceive>
 80064e6:	e03f      	b.n	8006568 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d11c      	bne.n	800652e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d316      	bcc.n	800652e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800650a:	429a      	cmp	r2, r3
 800650c:	d20f      	bcs.n	800652e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800650e:	2200      	movs	r2, #0
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f001 f8b7 	bl	8007686 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006520:	2300      	movs	r3, #0
 8006522:	2200      	movs	r2, #0
 8006524:	2100      	movs	r1, #0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f004 fbfe 	bl	800ad28 <USBD_LL_PrepareReceive>
 800652c:	e01c      	b.n	8006568 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d10f      	bne.n	800655a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f004 fb39 	bl	800abd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f001 f8e1 	bl	800772a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03a      	beq.n	80065e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7ff fe42 	bl	80061fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006580:	e032      	b.n	80065e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f97f 	bl	8006890 <USBD_CoreFindEP>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2bff      	cmp	r3, #255	; 0xff
 800659a:	d025      	beq.n	80065e8 <USBD_LL_DataInStage+0x15a>
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d122      	bne.n	80065e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d11c      	bne.n	80065e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065ae:	7dfa      	ldrb	r2, [r7, #23]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	32ae      	adds	r2, #174	; 0xae
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d014      	beq.n	80065e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80065be:	7dfa      	ldrb	r2, [r7, #23]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065c6:	7dfa      	ldrb	r2, [r7, #23]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	32ae      	adds	r2, #174	; 0xae
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	7afa      	ldrb	r2, [r7, #11]
 80065d4:	4611      	mov	r1, r2
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	4798      	blx	r3
 80065da:	4603      	mov	r3, r0
 80065dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80065de:	7dbb      	ldrb	r3, [r7, #22]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80065e4:	7dbb      	ldrb	r3, [r7, #22]
 80065e6:	e000      	b.n	80065ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d014      	beq.n	8006658 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6852      	ldr	r2, [r2, #4]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	4611      	mov	r1, r2
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f004 fa73 	bl	800ab4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	2200      	movs	r2, #0
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f004 fa65 	bl	800ab4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	621a      	str	r2, [r3, #32]

  return ret;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d106      	bne.n	8006704 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d110      	bne.n	8006748 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32ae      	adds	r2, #174	; 0xae
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e01c      	b.n	80067ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d115      	bne.n	80067ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32ae      	adds	r2, #174	; 0xae
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	32ae      	adds	r2, #174	; 0xae
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	4611      	mov	r1, r2
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32ae      	adds	r2, #174	; 0xae
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01c      	b.n	8006812 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d115      	bne.n	8006810 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32ae      	adds	r2, #174	; 0xae
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32ae      	adds	r2, #174	; 0xae
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	4611      	mov	r1, r2
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00e      	beq.n	800686c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6852      	ldr	r2, [r2, #4]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	4611      	mov	r1, r2
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006882:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800689c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b086      	sub	sp, #24
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	885b      	ldrh	r3, [r3, #2]
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d920      	bls.n	8006914 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80068da:	e013      	b.n	8006904 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80068dc:	f107 030a 	add.w	r3, r7, #10
 80068e0:	4619      	mov	r1, r3
 80068e2:	6978      	ldr	r0, [r7, #20]
 80068e4:	f000 f81b 	bl	800691e <USBD_GetNextDesc>
 80068e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d108      	bne.n	8006904 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	789b      	ldrb	r3, [r3, #2]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d008      	beq.n	8006912 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	885b      	ldrh	r3, [r3, #2]
 8006908:	b29a      	uxth	r2, r3
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	429a      	cmp	r2, r3
 800690e:	d8e5      	bhi.n	80068dc <USBD_GetEpDesc+0x32>
 8006910:	e000      	b.n	8006914 <USBD_GetEpDesc+0x6a>
          break;
 8006912:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006914:	693b      	ldr	r3, [r7, #16]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	4413      	add	r3, r2
 8006938:	b29a      	uxth	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800694a:	68fb      	ldr	r3, [r7, #12]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006976:	8a3b      	ldrh	r3, [r7, #16]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	b21a      	sxth	r2, r3
 800697c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006980:	4313      	orrs	r3, r2
 8006982:	b21b      	sxth	r3, r3
 8006984:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006986:	89fb      	ldrh	r3, [r7, #14]
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d005      	beq.n	80069ba <USBD_StdDevReq+0x26>
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d857      	bhi.n	8006a62 <USBD_StdDevReq+0xce>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00f      	beq.n	80069d6 <USBD_StdDevReq+0x42>
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d153      	bne.n	8006a62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32ae      	adds	r2, #174	; 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
      break;
 80069d4:	e04a      	b.n	8006a6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d83b      	bhi.n	8006a56 <USBD_StdDevReq+0xc2>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBD_StdDevReq+0x50>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006a57 	.word	0x08006a57
 80069f0:	08006a43 	.word	0x08006a43
 80069f4:	08006a57 	.word	0x08006a57
 80069f8:	08006a17 	.word	0x08006a17
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a57 	.word	0x08006a57
 8006a04:	08006a2f 	.word	0x08006a2f
 8006a08:	08006a21 	.word	0x08006a21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa3c 	bl	8006e8c <USBD_GetDescriptor>
          break;
 8006a14:	e024      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fbcb 	bl	80071b4 <USBD_SetAddress>
          break;
 8006a1e:	e01f      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fc0a 	bl	800723c <USBD_SetConfig>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a2c:	e018      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fcad 	bl	8007390 <USBD_GetConfig>
          break;
 8006a36:	e013      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fcde 	bl	80073fc <USBD_GetStatus>
          break;
 8006a40:	e00e      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fd0d 	bl	8007464 <USBD_SetFeature>
          break;
 8006a4a:	e009      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fd31 	bl	80074b6 <USBD_ClrFeature>
          break;
 8006a54:	e004      	b.n	8006a60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fd88 	bl	800756e <USBD_CtlError>
          break;
 8006a5e:	bf00      	nop
      }
      break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fd82 	bl	800756e <USBD_CtlError>
      break;
 8006a6a:	bf00      	nop
  }

  return ret;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop

08006a78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d005      	beq.n	8006a9e <USBD_StdItfReq+0x26>
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d852      	bhi.n	8006b3c <USBD_StdItfReq+0xc4>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <USBD_StdItfReq+0x26>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d14e      	bne.n	8006b3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d840      	bhi.n	8006b2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	889b      	ldrh	r3, [r3, #4]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d836      	bhi.n	8006b24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	889b      	ldrh	r3, [r3, #4]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fed9 	bl	8006876 <USBD_CoreFindIF>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2bff      	cmp	r3, #255	; 0xff
 8006acc:	d01d      	beq.n	8006b0a <USBD_StdItfReq+0x92>
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11a      	bne.n	8006b0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ad4:	7bba      	ldrb	r2, [r7, #14]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	32ae      	adds	r2, #174	; 0xae
 8006ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ae4:	7bba      	ldrb	r2, [r7, #14]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006aec:	7bba      	ldrb	r2, [r7, #14]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	32ae      	adds	r2, #174	; 0xae
 8006af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b02:	e004      	b.n	8006b0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b08:	e001      	b.n	8006b0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d110      	bne.n	8006b38 <USBD_StdItfReq+0xc0>
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10d      	bne.n	8006b38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fdf1 	bl	8007704 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b22:	e009      	b.n	8006b38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fd21 	bl	800756e <USBD_CtlError>
          break;
 8006b2c:	e004      	b.n	8006b38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fd1c 	bl	800756e <USBD_CtlError>
          break;
 8006b36:	e000      	b.n	8006b3a <USBD_StdItfReq+0xc2>
          break;
 8006b38:	bf00      	nop
      }
      break;
 8006b3a:	e004      	b.n	8006b46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fd15 	bl	800756e <USBD_CtlError>
      break;
 8006b44:	bf00      	nop
  }

  return ret;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	889b      	ldrh	r3, [r3, #4]
 8006b62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d007      	beq.n	8006b80 <USBD_StdEPReq+0x30>
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	f200 817f 	bhi.w	8006e74 <USBD_StdEPReq+0x324>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02a      	beq.n	8006bd0 <USBD_StdEPReq+0x80>
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	f040 817a 	bne.w	8006e74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe83 	bl	8006890 <USBD_CoreFindEP>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b8e:	7b7b      	ldrb	r3, [r7, #13]
 8006b90:	2bff      	cmp	r3, #255	; 0xff
 8006b92:	f000 8174 	beq.w	8006e7e <USBD_StdEPReq+0x32e>
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8170 	bne.w	8006e7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b9e:	7b7a      	ldrb	r2, [r7, #13]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ba6:	7b7a      	ldrb	r2, [r7, #13]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32ae      	adds	r2, #174	; 0xae
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 8163 	beq.w	8006e7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006bb8:	7b7a      	ldrb	r2, [r7, #13]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32ae      	adds	r2, #174	; 0xae
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bce:	e156      	b.n	8006e7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d008      	beq.n	8006bea <USBD_StdEPReq+0x9a>
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	f300 8145 	bgt.w	8006e68 <USBD_StdEPReq+0x318>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 809b 	beq.w	8006d1a <USBD_StdEPReq+0x1ca>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d03c      	beq.n	8006c62 <USBD_StdEPReq+0x112>
 8006be8:	e13e      	b.n	8006e68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d002      	beq.n	8006bfc <USBD_StdEPReq+0xac>
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d016      	beq.n	8006c28 <USBD_StdEPReq+0xd8>
 8006bfa:	e02c      	b.n	8006c56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <USBD_StdEPReq+0xce>
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b80      	cmp	r3, #128	; 0x80
 8006c06:	d00a      	beq.n	8006c1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f003 ffe1 	bl	800abd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f003 ffdd 	bl	800abd4 <USBD_LL_StallEP>
 8006c1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c1c:	e020      	b.n	8006c60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fca4 	bl	800756e <USBD_CtlError>
              break;
 8006c26:	e01b      	b.n	8006c60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10e      	bne.n	8006c4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <USBD_StdEPReq+0xfe>
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	2b80      	cmp	r3, #128	; 0x80
 8006c3a:	d008      	beq.n	8006c4e <USBD_StdEPReq+0xfe>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	88db      	ldrh	r3, [r3, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f003 ffc3 	bl	800abd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fd58 	bl	8007704 <USBD_CtlSendStatus>

              break;
 8006c54:	e004      	b.n	8006c60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fc88 	bl	800756e <USBD_CtlError>
              break;
 8006c5e:	bf00      	nop
          }
          break;
 8006c60:	e107      	b.n	8006e72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d002      	beq.n	8006c74 <USBD_StdEPReq+0x124>
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d016      	beq.n	8006ca0 <USBD_StdEPReq+0x150>
 8006c72:	e04b      	b.n	8006d0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <USBD_StdEPReq+0x146>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d00a      	beq.n	8006c96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f003 ffa5 	bl	800abd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f003 ffa1 	bl	800abd4 <USBD_LL_StallEP>
 8006c92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c94:	e040      	b.n	8006d18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fc68 	bl	800756e <USBD_CtlError>
              break;
 8006c9e:	e03b      	b.n	8006d18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d136      	bne.n	8006d16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 ffab 	bl	800ac12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fd21 	bl	8007704 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fde2 	bl	8006890 <USBD_CoreFindEP>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd0:	7b7b      	ldrb	r3, [r7, #13]
 8006cd2:	2bff      	cmp	r3, #255	; 0xff
 8006cd4:	d01f      	beq.n	8006d16 <USBD_StdEPReq+0x1c6>
 8006cd6:	7b7b      	ldrb	r3, [r7, #13]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11c      	bne.n	8006d16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006cdc:	7b7a      	ldrb	r2, [r7, #13]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ce4:	7b7a      	ldrb	r2, [r7, #13]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	; 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32ae      	adds	r2, #174	; 0xae
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d0a:	e004      	b.n	8006d16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fc2d 	bl	800756e <USBD_CtlError>
              break;
 8006d14:	e000      	b.n	8006d18 <USBD_StdEPReq+0x1c8>
              break;
 8006d16:	bf00      	nop
          }
          break;
 8006d18:	e0ab      	b.n	8006e72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d002      	beq.n	8006d2c <USBD_StdEPReq+0x1dc>
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d032      	beq.n	8006d90 <USBD_StdEPReq+0x240>
 8006d2a:	e097      	b.n	8006e5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <USBD_StdEPReq+0x1f2>
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d004      	beq.n	8006d42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc17 	bl	800756e <USBD_CtlError>
                break;
 8006d40:	e091      	b.n	8006e66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da0b      	bge.n	8006d62 <USBD_StdEPReq+0x212>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3310      	adds	r3, #16
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	e00b      	b.n	8006d7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	3304      	adds	r3, #4
 8006d7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2202      	movs	r2, #2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fc61 	bl	8007650 <USBD_CtlSendData>
              break;
 8006d8e:	e06a      	b.n	8006e66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da11      	bge.n	8006dbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	f003 020f 	and.w	r2, r3, #15
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d117      	bne.n	8006de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fbda 	bl	800756e <USBD_CtlError>
                  break;
 8006dba:	e054      	b.n	8006e66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fbc7 	bl	800756e <USBD_CtlError>
                  break;
 8006de0:	e041      	b.n	8006e66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da0b      	bge.n	8006e02 <USBD_StdEPReq+0x2b2>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	3310      	adds	r3, #16
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3304      	adds	r3, #4
 8006e00:	e00b      	b.n	8006e1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	3304      	adds	r3, #4
 8006e1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <USBD_StdEPReq+0x2d8>
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b80      	cmp	r3, #128	; 0x80
 8006e26:	d103      	bne.n	8006e30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e00e      	b.n	8006e4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f003 ff0b 	bl	800ac50 <USBD_LL_IsStallEP>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2201      	movs	r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2202      	movs	r2, #2
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fbfb 	bl	8007650 <USBD_CtlSendData>
              break;
 8006e5a:	e004      	b.n	8006e66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fb85 	bl	800756e <USBD_CtlError>
              break;
 8006e64:	bf00      	nop
          }
          break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb7f 	bl	800756e <USBD_CtlError>
          break;
 8006e70:	bf00      	nop
      }
      break;
 8006e72:	e005      	b.n	8006e80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb79 	bl	800756e <USBD_CtlError>
      break;
 8006e7c:	e000      	b.n	8006e80 <USBD_StdEPReq+0x330>
      break;
 8006e7e:	bf00      	nop
  }

  return ret;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	2b0e      	cmp	r3, #14
 8006eae:	f200 8152 	bhi.w	8007156 <USBD_GetDescriptor+0x2ca>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <USBD_GetDescriptor+0x2c>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006f29 	.word	0x08006f29
 8006ebc:	08006f41 	.word	0x08006f41
 8006ec0:	08006f81 	.word	0x08006f81
 8006ec4:	08007157 	.word	0x08007157
 8006ec8:	08007157 	.word	0x08007157
 8006ecc:	080070f7 	.word	0x080070f7
 8006ed0:	08007123 	.word	0x08007123
 8006ed4:	08007157 	.word	0x08007157
 8006ed8:	08007157 	.word	0x08007157
 8006edc:	08007157 	.word	0x08007157
 8006ee0:	08007157 	.word	0x08007157
 8006ee4:	08007157 	.word	0x08007157
 8006ee8:	08007157 	.word	0x08007157
 8006eec:	08007157 	.word	0x08007157
 8006ef0:	08006ef5 	.word	0x08006ef5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7c12      	ldrb	r2, [r2, #16]
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f16:	e126      	b.n	8007166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb27 	bl	800756e <USBD_CtlError>
        err++;
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	3301      	adds	r3, #1
 8006f24:	72fb      	strb	r3, [r7, #11]
      break;
 8006f26:	e11e      	b.n	8007166 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
      break;
 8006f3e:	e112      	b.n	8007166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f107 0208 	add.w	r2, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	2202      	movs	r2, #2
 8006f60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f62:	e100      	b.n	8007166 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	f107 0208 	add.w	r2, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e0f2      	b.n	8007166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	f200 80ac 	bhi.w	80070e4 <USBD_GetDescriptor+0x258>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_GetDescriptor+0x108>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006fe1 	.word	0x08006fe1
 8006f9c:	08007015 	.word	0x08007015
 8006fa0:	08007049 	.word	0x08007049
 8006fa4:	0800707d 	.word	0x0800707d
 8006fa8:	080070b1 	.word	0x080070b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fce:	e091      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 facb 	bl	800756e <USBD_CtlError>
            err++;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fde:	e089      	b.n	80070f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7c12      	ldrb	r2, [r2, #16]
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007002:	e077      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fab1 	bl	800756e <USBD_CtlError>
            err++;
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	3301      	adds	r3, #1
 8007010:	72fb      	strb	r3, [r7, #11]
          break;
 8007012:	e06f      	b.n	80070f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7c12      	ldrb	r2, [r2, #16]
 800702c:	f107 0108 	add.w	r1, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007036:	e05d      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa97 	bl	800756e <USBD_CtlError>
            err++;
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	3301      	adds	r3, #1
 8007044:	72fb      	strb	r3, [r7, #11]
          break;
 8007046:	e055      	b.n	80070f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7c12      	ldrb	r2, [r2, #16]
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706a:	e043      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa7d 	bl	800756e <USBD_CtlError>
            err++;
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	3301      	adds	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
          break;
 800707a:	e03b      	b.n	80070f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709e:	e029      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa63 	bl	800756e <USBD_CtlError>
            err++;
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	3301      	adds	r3, #1
 80070ac:	72fb      	strb	r3, [r7, #11]
          break;
 80070ae:	e021      	b.n	80070f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7c12      	ldrb	r2, [r2, #16]
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d2:	e00f      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa49 	bl	800756e <USBD_CtlError>
            err++;
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	3301      	adds	r3, #1
 80070e0:	72fb      	strb	r3, [r7, #11]
          break;
 80070e2:	e007      	b.n	80070f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa41 	bl	800756e <USBD_CtlError>
          err++;
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	3301      	adds	r3, #1
 80070f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070f2:	bf00      	nop
      }
      break;
 80070f4:	e037      	b.n	8007166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7c1b      	ldrb	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	f107 0208 	add.w	r2, r7, #8
 800710a:	4610      	mov	r0, r2
 800710c:	4798      	blx	r3
 800710e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007110:	e029      	b.n	8007166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa2a 	bl	800756e <USBD_CtlError>
        err++;
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	3301      	adds	r3, #1
 800711e:	72fb      	strb	r3, [r7, #11]
      break;
 8007120:	e021      	b.n	8007166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7c1b      	ldrb	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	f107 0208 	add.w	r2, r7, #8
 8007136:	4610      	mov	r0, r2
 8007138:	4798      	blx	r3
 800713a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	2207      	movs	r2, #7
 8007142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007144:	e00f      	b.n	8007166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa10 	bl	800756e <USBD_CtlError>
        err++;
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	3301      	adds	r3, #1
 8007152:	72fb      	strb	r3, [r7, #11]
      break;
 8007154:	e007      	b.n	8007166 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa08 	bl	800756e <USBD_CtlError>
      err++;
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	3301      	adds	r3, #1
 8007162:	72fb      	strb	r3, [r7, #11]
      break;
 8007164:	bf00      	nop
  }

  if (err != 0U)
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11e      	bne.n	80071aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	88db      	ldrh	r3, [r3, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d016      	beq.n	80071a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007174:	893b      	ldrh	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88da      	ldrh	r2, [r3, #6]
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	4293      	cmp	r3, r2
 8007182:	bf28      	it	cs
 8007184:	4613      	movcs	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800718a:	893b      	ldrh	r3, [r7, #8]
 800718c:	461a      	mov	r2, r3
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa5d 	bl	8007650 <USBD_CtlSendData>
 8007196:	e009      	b.n	80071ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9e7 	bl	800756e <USBD_CtlError>
 80071a0:	e004      	b.n	80071ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 faae 	bl	8007704 <USBD_CtlSendStatus>
 80071a8:	e000      	b.n	80071ac <USBD_GetDescriptor+0x320>
    return;
 80071aa:	bf00      	nop
  }
}
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	889b      	ldrh	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d131      	bne.n	800722a <USBD_SetAddress+0x76>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	88db      	ldrh	r3, [r3, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d12d      	bne.n	800722a <USBD_SetAddress+0x76>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	885b      	ldrh	r3, [r3, #2]
 80071d2:	2b7f      	cmp	r3, #127	; 0x7f
 80071d4:	d829      	bhi.n	800722a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d104      	bne.n	80071f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f9bc 	bl	800756e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f6:	e01d      	b.n	8007234 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7bfa      	ldrb	r2, [r7, #15]
 80071fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f003 fd4f 	bl	800aca8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa7a 	bl	8007704 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721e:	e009      	b.n	8007234 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007228:	e004      	b.n	8007234 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f99e 	bl	800756e <USBD_CtlError>
  }
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	4b4e      	ldr	r3, [pc, #312]	; (800738c <USBD_SetConfig+0x150>)
 8007252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007254:	4b4d      	ldr	r3, [pc, #308]	; (800738c <USBD_SetConfig+0x150>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d905      	bls.n	8007268 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f985 	bl	800756e <USBD_CtlError>
    return USBD_FAIL;
 8007264:	2303      	movs	r3, #3
 8007266:	e08c      	b.n	8007382 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d002      	beq.n	800727a <USBD_SetConfig+0x3e>
 8007274:	2b03      	cmp	r3, #3
 8007276:	d029      	beq.n	80072cc <USBD_SetConfig+0x90>
 8007278:	e075      	b.n	8007366 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800727a:	4b44      	ldr	r3, [pc, #272]	; (800738c <USBD_SetConfig+0x150>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d020      	beq.n	80072c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007282:	4b42      	ldr	r3, [pc, #264]	; (800738c <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800728c:	4b3f      	ldr	r3, [pc, #252]	; (800738c <USBD_SetConfig+0x150>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fe ffbd 	bl	8006212 <USBD_SetClassConfig>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f962 	bl	800756e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072b2:	e065      	b.n	8007380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa25 	bl	8007704 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2203      	movs	r2, #3
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072c2:	e05d      	b.n	8007380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa1d 	bl	8007704 <USBD_CtlSendStatus>
      break;
 80072ca:	e059      	b.n	8007380 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072cc:	4b2f      	ldr	r3, [pc, #188]	; (800738c <USBD_SetConfig+0x150>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d112      	bne.n	80072fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072dc:	4b2b      	ldr	r3, [pc, #172]	; (800738c <USBD_SetConfig+0x150>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072e6:	4b29      	ldr	r3, [pc, #164]	; (800738c <USBD_SetConfig+0x150>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7fe ffac 	bl	800624a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa06 	bl	8007704 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072f8:	e042      	b.n	8007380 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072fa:	4b24      	ldr	r3, [pc, #144]	; (800738c <USBD_SetConfig+0x150>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d02a      	beq.n	800735e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fe ff9a 	bl	800624a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <USBD_SetConfig+0x150>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007320:	4b1a      	ldr	r3, [pc, #104]	; (800738c <USBD_SetConfig+0x150>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe ff73 	bl	8006212 <USBD_SetClassConfig>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00f      	beq.n	8007356 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f918 	bl	800756e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fe ff7f 	bl	800624a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007354:	e014      	b.n	8007380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f9d4 	bl	8007704 <USBD_CtlSendStatus>
      break;
 800735c:	e010      	b.n	8007380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9d0 	bl	8007704 <USBD_CtlSendStatus>
      break;
 8007364:	e00c      	b.n	8007380 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f900 	bl	800756e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <USBD_SetConfig+0x150>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fe ff68 	bl	800624a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	73fb      	strb	r3, [r7, #15]
      break;
 800737e:	bf00      	nop
  }

  return ret;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000228 	.word	0x20000228

08007390 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	88db      	ldrh	r3, [r3, #6]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d004      	beq.n	80073ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8e2 	bl	800756e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073aa:	e023      	b.n	80073f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	dc02      	bgt.n	80073be <USBD_GetConfig+0x2e>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dc03      	bgt.n	80073c4 <USBD_GetConfig+0x34>
 80073bc:	e015      	b.n	80073ea <USBD_GetConfig+0x5a>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d00b      	beq.n	80073da <USBD_GetConfig+0x4a>
 80073c2:	e012      	b.n	80073ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3308      	adds	r3, #8
 80073ce:	2201      	movs	r2, #1
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f93c 	bl	8007650 <USBD_CtlSendData>
        break;
 80073d8:	e00c      	b.n	80073f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	2201      	movs	r2, #1
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f934 	bl	8007650 <USBD_CtlSendData>
        break;
 80073e8:	e004      	b.n	80073f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f8be 	bl	800756e <USBD_CtlError>
        break;
 80073f2:	bf00      	nop
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	2b02      	cmp	r3, #2
 8007412:	d81e      	bhi.n	8007452 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	88db      	ldrh	r3, [r3, #6]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d004      	beq.n	8007426 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8a5 	bl	800756e <USBD_CtlError>
        break;
 8007424:	e01a      	b.n	800745c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	330c      	adds	r3, #12
 8007446:	2202      	movs	r2, #2
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f900 	bl	8007650 <USBD_CtlSendData>
      break;
 8007450:	e004      	b.n	800745c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f88a 	bl	800756e <USBD_CtlError>
      break;
 800745a:	bf00      	nop
  }
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d107      	bne.n	8007486 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f940 	bl	8007704 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007484:	e013      	b.n	80074ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d10b      	bne.n	80074a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	889b      	ldrh	r3, [r3, #4]
 8007492:	0a1b      	lsrs	r3, r3, #8
 8007494:	b29b      	uxth	r3, r3
 8007496:	b2da      	uxtb	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f930 	bl	8007704 <USBD_CtlSendStatus>
}
 80074a4:	e003      	b.n	80074ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f860 	bl	800756e <USBD_CtlError>
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d80b      	bhi.n	80074e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d10c      	bne.n	80074f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f910 	bl	8007704 <USBD_CtlSendStatus>
      }
      break;
 80074e4:	e004      	b.n	80074f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f840 	bl	800756e <USBD_CtlError>
      break;
 80074ee:	e000      	b.n	80074f2 <USBD_ClrFeature+0x3c>
      break;
 80074f0:	bf00      	nop
  }
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fa17 	bl	8006958 <SWAPBYTE>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff fa0a 	bl	8006958 <SWAPBYTE>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff f9fd 	bl	8006958 <SWAPBYTE>
 800755e:	4603      	mov	r3, r0
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	80da      	strh	r2, [r3, #6]
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f003 fb2a 	bl	800abd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007580:	2100      	movs	r1, #0
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f003 fb26 	bl	800abd4 <USBD_LL_StallEP>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d036      	beq.n	8007614 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075aa:	6938      	ldr	r0, [r7, #16]
 80075ac:	f000 f836 	bl	800761c <USBD_GetLen>
 80075b0:	4603      	mov	r3, r0
 80075b2:	3301      	adds	r3, #1
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4413      	add	r3, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7812      	ldrb	r2, [r2, #0]
 80075c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	3301      	adds	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	2203      	movs	r2, #3
 80075d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	3301      	adds	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075e0:	e013      	b.n	800760a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	4413      	add	r3, r2
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
    idx++;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	3301      	adds	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	4413      	add	r3, r2
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
    idx++;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	3301      	adds	r3, #1
 8007608:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e7      	bne.n	80075e2 <USBD_GetString+0x52>
 8007612:	e000      	b.n	8007616 <USBD_GetString+0x86>
    return;
 8007614:	bf00      	nop
  }
}
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800762c:	e005      	b.n	800763a <USBD_GetLen+0x1e>
  {
    len++;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	3301      	adds	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	3301      	adds	r3, #1
 8007638:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f5      	bne.n	800762e <USBD_GetLen+0x12>
  }

  return len;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2202      	movs	r2, #2
 8007660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	2100      	movs	r1, #0
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f003 fb35 	bl	800ace6 <USBD_LL_Transmit>

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	2100      	movs	r1, #0
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f003 fb24 	bl	800ace6 <USBD_LL_Transmit>

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	2100      	movs	r1, #0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f003 fb28 	bl	800ad28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	2100      	movs	r1, #0
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f003 fb17 	bl	800ad28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2204      	movs	r2, #4
 8007710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f003 fae3 	bl	800ace6 <USBD_LL_Transmit>

  return USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2205      	movs	r2, #5
 8007736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800773a:	2300      	movs	r3, #0
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f003 faf1 	bl	800ad28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007766:	f3ef 8305 	mrs	r3, IPSR
 800776a:	60bb      	str	r3, [r7, #8]
  return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10f      	bne.n	8007792 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007772:	f3ef 8310 	mrs	r3, PRIMASK
 8007776:	607b      	str	r3, [r7, #4]
  return(result);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800777e:	f3ef 8311 	mrs	r3, BASEPRI
 8007782:	603b      	str	r3, [r7, #0]
  return(result);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <osKernelInitialize+0x3a>
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <osKernelInitialize+0x64>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d103      	bne.n	800779a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007792:	f06f 0305 	mvn.w	r3, #5
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e00c      	b.n	80077b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <osKernelInitialize+0x64>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <osKernelInitialize+0x64>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e002      	b.n	80077b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80077ae:	f04f 33ff 	mov.w	r3, #4294967295
 80077b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077b4:	68fb      	ldr	r3, [r7, #12]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	2000022c 	.word	0x2000022c

080077c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077da:	f3ef 8310 	mrs	r3, PRIMASK
 80077de:	607b      	str	r3, [r7, #4]
  return(result);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077e6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ea:	603b      	str	r3, [r7, #0]
  return(result);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <osKernelStart+0x3a>
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <osKernelStart+0x68>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d103      	bne.n	8007802 <osKernelStart+0x3a>
    stat = osErrorISR;
 80077fa:	f06f 0305 	mvn.w	r3, #5
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e010      	b.n	8007824 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <osKernelStart+0x68>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d109      	bne.n	800781e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800780a:	f7ff ffa1 	bl	8007750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <osKernelStart+0x68>)
 8007810:	2202      	movs	r2, #2
 8007812:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007814:	f001 f8ca 	bl	80089ac <vTaskStartScheduler>
      stat = osOK;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e002      	b.n	8007824 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800781e:	f04f 33ff 	mov.w	r3, #4294967295
 8007822:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	2000022c 	.word	0x2000022c

08007834 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b090      	sub	sp, #64	; 0x40
 8007838:	af04      	add	r7, sp, #16
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007844:	f3ef 8305 	mrs	r3, IPSR
 8007848:	61fb      	str	r3, [r7, #28]
  return(result);
 800784a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8090 	bne.w	8007972 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007852:	f3ef 8310 	mrs	r3, PRIMASK
 8007856:	61bb      	str	r3, [r7, #24]
  return(result);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800785e:	f3ef 8311 	mrs	r3, BASEPRI
 8007862:	617b      	str	r3, [r7, #20]
  return(result);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <osThreadNew+0x3e>
 800786a:	4b44      	ldr	r3, [pc, #272]	; (800797c <osThreadNew+0x148>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d07f      	beq.n	8007972 <osThreadNew+0x13e>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d07c      	beq.n	8007972 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8007878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800787e:	2318      	movs	r3, #24
 8007880:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007886:	f04f 33ff 	mov.w	r3, #4294967295
 800788a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d045      	beq.n	800791e <osThreadNew+0xea>
      if (attr->name != NULL) {
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <osThreadNew+0x6c>
        name = attr->name;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <osThreadNew+0x92>
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	2b38      	cmp	r3, #56	; 0x38
 80078b8:	d805      	bhi.n	80078c6 <osThreadNew+0x92>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <osThreadNew+0x96>
        return (NULL);
 80078c6:	2300      	movs	r3, #0
 80078c8:	e054      	b.n	8007974 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	089b      	lsrs	r3, r3, #2
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00e      	beq.n	8007900 <osThreadNew+0xcc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2bbb      	cmp	r3, #187	; 0xbb
 80078e8:	d90a      	bls.n	8007900 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <osThreadNew+0xcc>
        mem = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	623b      	str	r3, [r7, #32]
 80078fe:	e010      	b.n	8007922 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10c      	bne.n	8007922 <osThreadNew+0xee>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d108      	bne.n	8007922 <osThreadNew+0xee>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <osThreadNew+0xee>
          mem = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	623b      	str	r3, [r7, #32]
 800791c:	e001      	b.n	8007922 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d110      	bne.n	800794a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007930:	9202      	str	r2, [sp, #8]
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fe3e 	bl	80085c0 <xTaskCreateStatic>
 8007944:	4603      	mov	r3, r0
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	e013      	b.n	8007972 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d110      	bne.n	8007972 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	b29a      	uxth	r2, r3
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fe8f 	bl	8008686 <xTaskCreate>
 8007968:	4603      	mov	r3, r0
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <osThreadNew+0x13e>
          hTask = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007972:	693b      	ldr	r3, [r7, #16]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3730      	adds	r7, #48	; 0x30
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	2000022c 	.word	0x2000022c

08007980 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007988:	f3ef 8305 	mrs	r3, IPSR
 800798c:	613b      	str	r3, [r7, #16]
  return(result);
 800798e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10f      	bne.n	80079b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007994:	f3ef 8310 	mrs	r3, PRIMASK
 8007998:	60fb      	str	r3, [r7, #12]
  return(result);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079a0:	f3ef 8311 	mrs	r3, BASEPRI
 80079a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <osDelay+0x3c>
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <osDelay+0x58>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d103      	bne.n	80079bc <osDelay+0x3c>
    stat = osErrorISR;
 80079b4:	f06f 0305 	mvn.w	r3, #5
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e007      	b.n	80079cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 ffba 	bl	8008940 <vTaskDelay>
    }
  }

  return (stat);
 80079cc:	697b      	ldr	r3, [r7, #20]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000022c 	.word	0x2000022c

080079dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a07      	ldr	r2, [pc, #28]	; (8007a08 <vApplicationGetIdleTaskMemory+0x2c>)
 80079ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4a06      	ldr	r2, [pc, #24]	; (8007a0c <vApplicationGetIdleTaskMemory+0x30>)
 80079f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079fa:	601a      	str	r2, [r3, #0]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	20000230 	.word	0x20000230
 8007a0c:	200002ec 	.word	0x200002ec

08007a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a07      	ldr	r2, [pc, #28]	; (8007a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4a06      	ldr	r2, [pc, #24]	; (8007a40 <vApplicationGetTimerTaskMemory+0x30>)
 8007a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	200006ec 	.word	0x200006ec
 8007a40:	200007a8 	.word	0x200007a8

08007a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f103 0208 	add.w	r2, r3, #8
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f103 0208 	add.w	r2, r3, #8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0208 	add.w	r2, r3, #8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d103      	bne.n	8007b06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e00c      	b.n	8007b20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3308      	adds	r3, #8
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e002      	b.n	8007b14 <vListInsert+0x2e>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d2f6      	bcs.n	8007b0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6892      	ldr	r2, [r2, #8]
 8007b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6852      	ldr	r2, [r2, #4]
 8007b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d103      	bne.n	8007b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	1e5a      	subs	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10c      	bne.n	8007bda <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007bda:	f002 f8a7 	bl	8009d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	441a      	add	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	68f9      	ldr	r1, [r7, #12]
 8007c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	22ff      	movs	r2, #255	; 0xff
 8007c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d114      	bne.n	8007c5a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01a      	beq.n	8007c6e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 f95d 	bl	8008efc <xTaskRemoveFromEventList>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <xQueueGenericReset+0xd0>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	e009      	b.n	8007c6e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fef0 	bl	8007a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3324      	adds	r3, #36	; 0x24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff feeb 	bl	8007a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c6e:	f002 f891 	bl	8009d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c72:	2301      	movs	r3, #1
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	; 0x38
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10c      	bne.n	8007cae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	b672      	cpsid	i
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	b662      	cpsie	i
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10c      	bne.n	8007cce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <xQueueGenericCreateStatic+0x5a>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <xQueueGenericCreateStatic+0x5e>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <xQueueGenericCreateStatic+0x60>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10c      	bne.n	8007cfe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	623b      	str	r3, [r7, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <xQueueGenericCreateStatic+0x8a>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <xQueueGenericCreateStatic+0x8e>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <xQueueGenericCreateStatic+0x90>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10c      	bne.n	8007d2e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	b672      	cpsid	i
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	b662      	cpsie	i
 8007d28:	61fb      	str	r3, [r7, #28]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d2e:	2350      	movs	r3, #80	; 0x50
 8007d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b50      	cmp	r3, #80	; 0x50
 8007d36:	d00c      	beq.n	8007d52 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	61bb      	str	r3, [r7, #24]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f805 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3730      	adds	r7, #48	; 0x30
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007db2:	2101      	movs	r1, #1
 8007db4:	69b8      	ldr	r0, [r7, #24]
 8007db6:	f7ff fef9 	bl	8007bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08e      	sub	sp, #56	; 0x38
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <xQueueGenericSend+0x36>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <xQueueGenericSend+0x44>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueGenericSend+0x48>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueGenericSend+0x4a>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10c      	bne.n	8007e34 <xQueueGenericSend+0x68>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d103      	bne.n	8007e42 <xQueueGenericSend+0x76>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <xQueueGenericSend+0x7a>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueGenericSend+0x7c>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10c      	bne.n	8007e66 <xQueueGenericSend+0x9a>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	b672      	cpsid	i
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	b662      	cpsie	i
 8007e60:	623b      	str	r3, [r7, #32]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e66:	f001 fa13 	bl	8009290 <xTaskGetSchedulerState>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <xQueueGenericSend+0xaa>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <xQueueGenericSend+0xae>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueGenericSend+0xb0>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10c      	bne.n	8007e9a <xQueueGenericSend+0xce>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	61fb      	str	r3, [r7, #28]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e9a:	f001 ff47 	bl	8009d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d302      	bcc.n	8007eb0 <xQueueGenericSend+0xe4>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d129      	bne.n	8007f04 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb6:	f000 fa15 	bl	80082e4 <prvCopyDataToQueue>
 8007eba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d010      	beq.n	8007ee6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 f817 	bl	8008efc <xTaskRemoveFromEventList>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ed4:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <xQueueGenericSend+0x208>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	e00a      	b.n	8007efc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eec:	4b39      	ldr	r3, [pc, #228]	; (8007fd4 <xQueueGenericSend+0x208>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007efc:	f001 ff4a 	bl	8009d94 <vPortExitCritical>
				return pdPASS;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e063      	b.n	8007fcc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f0a:	f001 ff43 	bl	8009d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e05c      	b.n	8007fcc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f853 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f26:	f001 ff35 	bl	8009d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f2a:	f000 fdb3 	bl	8008a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f2e:	f001 fefd 	bl	8009d2c <vPortEnterCritical>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d103      	bne.n	8007f48 <xQueueGenericSend+0x17c>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d103      	bne.n	8007f5e <xQueueGenericSend+0x192>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f5e:	f001 ff19 	bl	8009d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f62:	1d3a      	adds	r2, r7, #4
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 f842 	bl	8008ff4 <xTaskCheckForTimeOut>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d124      	bne.n	8007fc0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f78:	f000 faac 	bl	80084d4 <prvIsQueueFull>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d018      	beq.n	8007fb4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	3310      	adds	r3, #16
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 ff62 	bl	8008e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 fa37 	bl	8008404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f96:	f000 fd8b 	bl	8008ab0 <xTaskResumeAll>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f af7c 	bne.w	8007e9a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <xQueueGenericSend+0x208>)
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	e772      	b.n	8007e9a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fb6:	f000 fa25 	bl	8008404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fba:	f000 fd79 	bl	8008ab0 <xTaskResumeAll>
 8007fbe:	e76c      	b.n	8007e9a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fc2:	f000 fa1f 	bl	8008404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fc6:	f000 fd73 	bl	8008ab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3738      	adds	r7, #56	; 0x38
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	; 0x38
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	b672      	cpsid	i
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	b662      	cpsie	i
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <xQueueGenericSendFromISR+0x40>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <xQueueGenericSendFromISR+0x44>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <xQueueGenericSendFromISR+0x46>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10c      	bne.n	800803c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	623b      	str	r3, [r7, #32]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d103      	bne.n	800804a <xQueueGenericSendFromISR+0x72>
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <xQueueGenericSendFromISR+0x76>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <xQueueGenericSendFromISR+0x78>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10c      	bne.n	800806e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	b672      	cpsid	i
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	b662      	cpsie	i
 8008068:	61fb      	str	r3, [r7, #28]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800806e:	f001 ff45 	bl	8009efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008072:	f3ef 8211 	mrs	r2, BASEPRI
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	b672      	cpsid	i
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	b662      	cpsie	i
 800808a:	61ba      	str	r2, [r7, #24]
 800808c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800808e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <xQueueGenericSendFromISR+0xcc>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d12c      	bne.n	80080fe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b4:	f000 f916 	bl	80082e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d112      	bne.n	80080e8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d016      	beq.n	80080f8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	3324      	adds	r3, #36	; 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff14 	bl	8008efc <xTaskRemoveFromEventList>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e007      	b.n	80080f8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ec:	3301      	adds	r3, #1
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	b25a      	sxtb	r2, r3
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80080fc:	e001      	b.n	8008102 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800810c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008110:	4618      	mov	r0, r3
 8008112:	3738      	adds	r7, #56	; 0x38
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08c      	sub	sp, #48	; 0x30
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <xQueueReceive+0x34>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	623b      	str	r3, [r7, #32]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <xQueueReceive+0x42>
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <xQueueReceive+0x46>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueReceive+0x48>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10c      	bne.n	800817e <xQueueReceive+0x66>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	b672      	cpsid	i
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	b662      	cpsie	i
 8008178:	61fb      	str	r3, [r7, #28]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800817e:	f001 f887 	bl	8009290 <xTaskGetSchedulerState>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <xQueueReceive+0x76>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <xQueueReceive+0x7a>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <xQueueReceive+0x7c>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10c      	bne.n	80081b2 <xQueueReceive+0x9a>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	61bb      	str	r3, [r7, #24]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081b2:	f001 fdbb 	bl	8009d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01f      	beq.n	8008202 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c6:	f000 f8f7 	bl	80083b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00f      	beq.n	80081fa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	3310      	adds	r3, #16
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fe8c 	bl	8008efc <xTaskRemoveFromEventList>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081ea:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <xQueueReceive+0x1c8>)
 80081ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081fa:	f001 fdcb 	bl	8009d94 <vPortExitCritical>
				return pdPASS;
 80081fe:	2301      	movs	r3, #1
 8008200:	e069      	b.n	80082d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008208:	f001 fdc4 	bl	8009d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800820c:	2300      	movs	r3, #0
 800820e:	e062      	b.n	80082d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008216:	f107 0310 	add.w	r3, r7, #16
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fed4 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008224:	f001 fdb6 	bl	8009d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008228:	f000 fc34 	bl	8008a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800822c:	f001 fd7e 	bl	8009d2c <vPortEnterCritical>
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008236:	b25b      	sxtb	r3, r3
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823c:	d103      	bne.n	8008246 <xQueueReceive+0x12e>
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800824c:	b25b      	sxtb	r3, r3
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d103      	bne.n	800825c <xQueueReceive+0x144>
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800825c:	f001 fd9a 	bl	8009d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008260:	1d3a      	adds	r2, r7, #4
 8008262:	f107 0310 	add.w	r3, r7, #16
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fec3 	bl	8008ff4 <xTaskCheckForTimeOut>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d123      	bne.n	80082bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008276:	f000 f917 	bl	80084a8 <prvIsQueueEmpty>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d017      	beq.n	80082b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	3324      	adds	r3, #36	; 0x24
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fde3 	bl	8008e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800828e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008290:	f000 f8b8 	bl	8008404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008294:	f000 fc0c 	bl	8008ab0 <xTaskResumeAll>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d189      	bne.n	80081b2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <xQueueReceive+0x1c8>)
 80082a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	e780      	b.n	80081b2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b2:	f000 f8a7 	bl	8008404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082b6:	f000 fbfb 	bl	8008ab0 <xTaskResumeAll>
 80082ba:	e77a      	b.n	80081b2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082be:	f000 f8a1 	bl	8008404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082c2:	f000 fbf5 	bl	8008ab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c8:	f000 f8ee 	bl	80084a8 <prvIsQueueEmpty>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f af6f 	beq.w	80081b2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3730      	adds	r7, #48	; 0x30
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10d      	bne.n	800831e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d14d      	bne.n	80083a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 ffdc 	bl	80092cc <xTaskPriorityDisinherit>
 8008314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	609a      	str	r2, [r3, #8]
 800831c:	e043      	b.n	80083a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d119      	bne.n	8008358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6858      	ldr	r0, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	461a      	mov	r2, r3
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	f002 fdea 	bl	800af08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	441a      	add	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	429a      	cmp	r2, r3
 800834c:	d32b      	bcc.n	80083a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	e026      	b.n	80083a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	68d8      	ldr	r0, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	461a      	mov	r2, r3
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	f002 fdd0 	bl	800af08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	425b      	negs	r3, r3
 8008372:	441a      	add	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d207      	bcs.n	8008394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	425b      	negs	r3, r3
 800838e:	441a      	add	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d105      	bne.n	80083a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083ae:	697b      	ldr	r3, [r7, #20]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d018      	beq.n	80083fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	441a      	add	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d303      	bcc.n	80083ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68d9      	ldr	r1, [r3, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	461a      	mov	r2, r3
 80083f6:	6838      	ldr	r0, [r7, #0]
 80083f8:	f002 fd86 	bl	800af08 <memcpy>
	}
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800840c:	f001 fc8e 	bl	8009d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008418:	e011      	b.n	800843e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	d012      	beq.n	8008448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3324      	adds	r3, #36	; 0x24
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fd68 	bl	8008efc <xTaskRemoveFromEventList>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008432:	f000 fe45 	bl	80090c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	3b01      	subs	r3, #1
 800843a:	b2db      	uxtb	r3, r3
 800843c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800843e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	dce9      	bgt.n	800841a <prvUnlockQueue+0x16>
 8008446:	e000      	b.n	800844a <prvUnlockQueue+0x46>
					break;
 8008448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	22ff      	movs	r2, #255	; 0xff
 800844e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008452:	f001 fc9f 	bl	8009d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008456:	f001 fc69 	bl	8009d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008462:	e011      	b.n	8008488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d012      	beq.n	8008492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3310      	adds	r3, #16
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fd43 	bl	8008efc <xTaskRemoveFromEventList>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800847c:	f000 fe20 	bl	80090c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	3b01      	subs	r3, #1
 8008484:	b2db      	uxtb	r3, r3
 8008486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800848c:	2b00      	cmp	r3, #0
 800848e:	dce9      	bgt.n	8008464 <prvUnlockQueue+0x60>
 8008490:	e000      	b.n	8008494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	22ff      	movs	r2, #255	; 0xff
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800849c:	f001 fc7a 	bl	8009d94 <vPortExitCritical>
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084b0:	f001 fc3c 	bl	8009d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d102      	bne.n	80084c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e001      	b.n	80084c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084c6:	f001 fc65 	bl	8009d94 <vPortExitCritical>

	return xReturn;
 80084ca:	68fb      	ldr	r3, [r7, #12]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084dc:	f001 fc26 	bl	8009d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d102      	bne.n	80084f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e001      	b.n	80084f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084f6:	f001 fc4d 	bl	8009d94 <vPortExitCritical>

	return xReturn;
 80084fa:	68fb      	ldr	r3, [r7, #12]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e014      	b.n	800853e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008514:	4a0f      	ldr	r2, [pc, #60]	; (8008554 <vQueueAddToRegistry+0x50>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10b      	bne.n	8008538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008520:	490c      	ldr	r1, [pc, #48]	; (8008554 <vQueueAddToRegistry+0x50>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800852a:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <vQueueAddToRegistry+0x50>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4413      	add	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008536:	e006      	b.n	8008546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b07      	cmp	r3, #7
 8008542:	d9e7      	bls.n	8008514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000fa8 	.word	0x20000fa8

08008558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008568:	f001 fbe0 	bl	8009d2c <vPortEnterCritical>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008572:	b25b      	sxtb	r3, r3
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d103      	bne.n	8008582 <vQueueWaitForMessageRestricted+0x2a>
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008588:	b25b      	sxtb	r3, r3
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d103      	bne.n	8008598 <vQueueWaitForMessageRestricted+0x40>
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008598:	f001 fbfc 	bl	8009d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3324      	adds	r3, #36	; 0x24
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fc77 	bl	8008ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085b2:	6978      	ldr	r0, [r7, #20]
 80085b4:	f7ff ff26 	bl	8008404 <prvUnlockQueue>
	}
 80085b8:	bf00      	nop
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08e      	sub	sp, #56	; 0x38
 80085c4:	af04      	add	r7, sp, #16
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10c      	bne.n	80085ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	623b      	str	r3, [r7, #32]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10c      	bne.n	800860e <xTaskCreateStatic+0x4e>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	b672      	cpsid	i
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	b662      	cpsie	i
 8008608:	61fb      	str	r3, [r7, #28]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800860e:	23bc      	movs	r3, #188	; 0xbc
 8008610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2bbc      	cmp	r3, #188	; 0xbc
 8008616:	d00c      	beq.n	8008632 <xTaskCreateStatic+0x72>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	b672      	cpsid	i
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	b662      	cpsie	i
 800862c:	61bb      	str	r3, [r7, #24]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01e      	beq.n	8008678 <xTaskCreateStatic+0xb8>
 800863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01b      	beq.n	8008678 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	2202      	movs	r2, #2
 800864e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008652:	2300      	movs	r3, #0
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	9302      	str	r3, [sp, #8]
 800865a:	f107 0314 	add.w	r3, r7, #20
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f850 	bl	8008710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008672:	f000 f8f5 	bl	8008860 <prvAddNewTaskToReadyList>
 8008676:	e001      	b.n	800867c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800867c:	697b      	ldr	r3, [r7, #20]
	}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	; 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008686:	b580      	push	{r7, lr}
 8008688:	b08c      	sub	sp, #48	; 0x30
 800868a:	af04      	add	r7, sp, #16
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fc72 	bl	8009f84 <pvPortMalloc>
 80086a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086a8:	20bc      	movs	r0, #188	; 0xbc
 80086aa:	f001 fc6b 	bl	8009f84 <pvPortMalloc>
 80086ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
 80086bc:	e005      	b.n	80086ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086be:	6978      	ldr	r0, [r7, #20]
 80086c0:	f001 fd2a 	bl	800a118 <vPortFree>
 80086c4:	e001      	b.n	80086ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d017      	beq.n	8008700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	2300      	movs	r3, #0
 80086dc:	9303      	str	r3, [sp, #12]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f80e 	bl	8008710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f4:	69f8      	ldr	r0, [r7, #28]
 80086f6:	f000 f8b3 	bl	8008860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086fa:	2301      	movs	r3, #1
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	e002      	b.n	8008706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295
 8008704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008706:	69bb      	ldr	r3, [r7, #24]
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	461a      	mov	r2, r3
 8008728:	21a5      	movs	r1, #165	; 0xa5
 800872a:	f002 fbfb 	bl	800af24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008738:	440b      	add	r3, r1
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00c      	beq.n	800876c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	b672      	cpsid	i
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	b662      	cpsie	i
 8008766:	617b      	str	r3, [r7, #20]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01f      	beq.n	80087b2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	e012      	b.n	800879e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	7819      	ldrb	r1, [r3, #0]
 8008780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	3334      	adds	r3, #52	; 0x34
 8008788:	460a      	mov	r2, r1
 800878a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	3301      	adds	r3, #1
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	2b0f      	cmp	r3, #15
 80087a2:	d9e9      	bls.n	8008778 <prvInitialiseNewTask+0x68>
 80087a4:	e000      	b.n	80087a8 <prvInitialiseNewTask+0x98>
			{
				break;
 80087a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087b0:	e003      	b.n	80087ba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	2b37      	cmp	r3, #55	; 0x37
 80087be:	d901      	bls.n	80087c4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087c0:	2337      	movs	r3, #55	; 0x37
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	2200      	movs	r2, #0
 80087d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	3304      	adds	r3, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff f952 	bl	8007a84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	3318      	adds	r3, #24
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff f94d 	bl	8007a84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	2200      	movs	r2, #0
 800880c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	3354      	adds	r3, #84	; 0x54
 8008814:	2260      	movs	r2, #96	; 0x60
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f002 fb83 	bl	800af24 <memset>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <prvInitialiseNewTask+0x144>)
 8008822:	659a      	str	r2, [r3, #88]	; 0x58
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	4a0c      	ldr	r2, [pc, #48]	; (8008858 <prvInitialiseNewTask+0x148>)
 8008828:	65da      	str	r2, [r3, #92]	; 0x5c
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	4a0b      	ldr	r2, [pc, #44]	; (800885c <prvInitialiseNewTask+0x14c>)
 800882e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	69b8      	ldr	r0, [r7, #24]
 8008836:	f001 f96b 	bl	8009b10 <pxPortInitialiseStack>
 800883a:	4602      	mov	r2, r0
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884c:	bf00      	nop
 800884e:	3720      	adds	r7, #32
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	0800b2d8 	.word	0x0800b2d8
 8008858:	0800b2f8 	.word	0x0800b2f8
 800885c:	0800b2b8 	.word	0x0800b2b8

08008860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008868:	f001 fa60 	bl	8009d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800886c:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <prvAddNewTaskToReadyList+0xc4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3301      	adds	r3, #1
 8008872:	4a2c      	ldr	r2, [pc, #176]	; (8008924 <prvAddNewTaskToReadyList+0xc4>)
 8008874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008876:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <prvAddNewTaskToReadyList+0xc8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d109      	bne.n	8008892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800887e:	4a2a      	ldr	r2, [pc, #168]	; (8008928 <prvAddNewTaskToReadyList+0xc8>)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <prvAddNewTaskToReadyList+0xc4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d110      	bne.n	80088ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800888c:	f000 fc3c 	bl	8009108 <prvInitialiseTaskLists>
 8008890:	e00d      	b.n	80088ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008892:	4b26      	ldr	r3, [pc, #152]	; (800892c <prvAddNewTaskToReadyList+0xcc>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d109      	bne.n	80088ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800889a:	4b23      	ldr	r3, [pc, #140]	; (8008928 <prvAddNewTaskToReadyList+0xc8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d802      	bhi.n	80088ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088a8:	4a1f      	ldr	r2, [pc, #124]	; (8008928 <prvAddNewTaskToReadyList+0xc8>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088ae:	4b20      	ldr	r3, [pc, #128]	; (8008930 <prvAddNewTaskToReadyList+0xd0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3301      	adds	r3, #1
 80088b4:	4a1e      	ldr	r2, [pc, #120]	; (8008930 <prvAddNewTaskToReadyList+0xd0>)
 80088b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088b8:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <prvAddNewTaskToReadyList+0xd0>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <prvAddNewTaskToReadyList+0xd4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d903      	bls.n	80088d4 <prvAddNewTaskToReadyList+0x74>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	4a18      	ldr	r2, [pc, #96]	; (8008934 <prvAddNewTaskToReadyList+0xd4>)
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4a15      	ldr	r2, [pc, #84]	; (8008938 <prvAddNewTaskToReadyList+0xd8>)
 80088e2:	441a      	add	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f7ff f8d7 	bl	8007a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088f0:	f001 fa50 	bl	8009d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088f4:	4b0d      	ldr	r3, [pc, #52]	; (800892c <prvAddNewTaskToReadyList+0xcc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00e      	beq.n	800891a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <prvAddNewTaskToReadyList+0xc8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	429a      	cmp	r2, r3
 8008908:	d207      	bcs.n	800891a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <prvAddNewTaskToReadyList+0xdc>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200014bc 	.word	0x200014bc
 8008928:	20000fe8 	.word	0x20000fe8
 800892c:	200014c8 	.word	0x200014c8
 8008930:	200014d8 	.word	0x200014d8
 8008934:	200014c4 	.word	0x200014c4
 8008938:	20000fec 	.word	0x20000fec
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d019      	beq.n	8008986 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008952:	4b14      	ldr	r3, [pc, #80]	; (80089a4 <vTaskDelay+0x64>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00c      	beq.n	8008974 <vTaskDelay+0x34>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	60bb      	str	r3, [r7, #8]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008974:	f000 f88e 	bl	8008a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fd18 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008980:	f000 f896 	bl	8008ab0 <xTaskResumeAll>
 8008984:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800898c:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <vTaskDelay+0x68>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	200014e4 	.word	0x200014e4
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08a      	sub	sp, #40	; 0x28
 80089b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089ba:	463a      	mov	r2, r7
 80089bc:	1d39      	adds	r1, r7, #4
 80089be:	f107 0308 	add.w	r3, r7, #8
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff f80a 	bl	80079dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	9202      	str	r2, [sp, #8]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	460a      	mov	r2, r1
 80089da:	4926      	ldr	r1, [pc, #152]	; (8008a74 <vTaskStartScheduler+0xc8>)
 80089dc:	4826      	ldr	r0, [pc, #152]	; (8008a78 <vTaskStartScheduler+0xcc>)
 80089de:	f7ff fdef 	bl	80085c0 <xTaskCreateStatic>
 80089e2:	4603      	mov	r3, r0
 80089e4:	4a25      	ldr	r2, [pc, #148]	; (8008a7c <vTaskStartScheduler+0xd0>)
 80089e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089e8:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <vTaskStartScheduler+0xd0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
 80089f4:	e001      	b.n	80089fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d102      	bne.n	8008a06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a00:	f000 fd2a 	bl	8009458 <xTimerCreateTimerTask>
 8008a04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d11d      	bne.n	8008a48 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	b672      	cpsid	i
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	b662      	cpsie	i
 8008a20:	613b      	str	r3, [r7, #16]
}
 8008a22:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <vTaskStartScheduler+0xd4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3354      	adds	r3, #84	; 0x54
 8008a2a:	4a16      	ldr	r2, [pc, #88]	; (8008a84 <vTaskStartScheduler+0xd8>)
 8008a2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <vTaskStartScheduler+0xdc>)
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <vTaskStartScheduler+0xe0>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <vTaskStartScheduler+0xe4>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a42:	f001 f8f5 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a46:	e010      	b.n	8008a6a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d10c      	bne.n	8008a6a <vTaskStartScheduler+0xbe>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	b672      	cpsid	i
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	b662      	cpsie	i
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <vTaskStartScheduler+0xbc>
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	0800b220 	.word	0x0800b220
 8008a78:	080090d9 	.word	0x080090d9
 8008a7c:	200014e0 	.word	0x200014e0
 8008a80:	20000fe8 	.word	0x20000fe8
 8008a84:	20000110 	.word	0x20000110
 8008a88:	200014dc 	.word	0x200014dc
 8008a8c:	200014c8 	.word	0x200014c8
 8008a90:	200014c0 	.word	0x200014c0

08008a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <vTaskSuspendAll+0x18>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	4a03      	ldr	r2, [pc, #12]	; (8008aac <vTaskSuspendAll+0x18>)
 8008aa0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008aa2:	bf00      	nop
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	200014e4 	.word	0x200014e4

08008ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008abe:	4b43      	ldr	r3, [pc, #268]	; (8008bcc <xTaskResumeAll+0x11c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <xTaskResumeAll+0x30>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ae0:	f001 f924 	bl	8009d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ae4:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xTaskResumeAll+0x11c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	4a38      	ldr	r2, [pc, #224]	; (8008bcc <xTaskResumeAll+0x11c>)
 8008aec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aee:	4b37      	ldr	r3, [pc, #220]	; (8008bcc <xTaskResumeAll+0x11c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d162      	bne.n	8008bbc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008af6:	4b36      	ldr	r3, [pc, #216]	; (8008bd0 <xTaskResumeAll+0x120>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d05e      	beq.n	8008bbc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008afe:	e02f      	b.n	8008b60 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b00:	4b34      	ldr	r3, [pc, #208]	; (8008bd4 <xTaskResumeAll+0x124>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3318      	adds	r3, #24
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff f823 	bl	8007b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3304      	adds	r3, #4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff f81e 	bl	8007b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	4b2d      	ldr	r3, [pc, #180]	; (8008bd8 <xTaskResumeAll+0x128>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d903      	bls.n	8008b30 <xTaskResumeAll+0x80>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4a2a      	ldr	r2, [pc, #168]	; (8008bd8 <xTaskResumeAll+0x128>)
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4a27      	ldr	r2, [pc, #156]	; (8008bdc <xTaskResumeAll+0x12c>)
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f7fe ffa9 	bl	8007a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <xTaskResumeAll+0x130>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d302      	bcc.n	8008b60 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008b5a:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <xTaskResumeAll+0x134>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b60:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xTaskResumeAll+0x124>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1cb      	bne.n	8008b00 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b6e:	f000 fb6f 	bl	8009250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b72:	4b1d      	ldr	r3, [pc, #116]	; (8008be8 <xTaskResumeAll+0x138>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d010      	beq.n	8008ba0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b7e:	f000 f847 	bl	8008c10 <xTaskIncrementTick>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008b88:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <xTaskResumeAll+0x134>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1f1      	bne.n	8008b7e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008b9a:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <xTaskResumeAll+0x138>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <xTaskResumeAll+0x134>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <xTaskResumeAll+0x13c>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bbc:	f001 f8ea 	bl	8009d94 <vPortExitCritical>

	return xAlreadyYielded;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200014e4 	.word	0x200014e4
 8008bd0:	200014bc 	.word	0x200014bc
 8008bd4:	2000147c 	.word	0x2000147c
 8008bd8:	200014c4 	.word	0x200014c4
 8008bdc:	20000fec 	.word	0x20000fec
 8008be0:	20000fe8 	.word	0x20000fe8
 8008be4:	200014d0 	.word	0x200014d0
 8008be8:	200014cc 	.word	0x200014cc
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bf6:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <xTaskGetTickCount+0x1c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008bfc:	687b      	ldr	r3, [r7, #4]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	200014c0 	.word	0x200014c0

08008c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c1a:	4b50      	ldr	r3, [pc, #320]	; (8008d5c <xTaskIncrementTick+0x14c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 808b 	bne.w	8008d3a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c24:	4b4e      	ldr	r3, [pc, #312]	; (8008d60 <xTaskIncrementTick+0x150>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c2c:	4a4c      	ldr	r2, [pc, #304]	; (8008d60 <xTaskIncrementTick+0x150>)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d122      	bne.n	8008c7e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c38:	4b4a      	ldr	r3, [pc, #296]	; (8008d64 <xTaskIncrementTick+0x154>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00c      	beq.n	8008c5c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	b672      	cpsid	i
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	b662      	cpsie	i
 8008c56:	603b      	str	r3, [r7, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <xTaskIncrementTick+0x4a>
 8008c5c:	4b41      	ldr	r3, [pc, #260]	; (8008d64 <xTaskIncrementTick+0x154>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <xTaskIncrementTick+0x158>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a3f      	ldr	r2, [pc, #252]	; (8008d64 <xTaskIncrementTick+0x154>)
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	4a3f      	ldr	r2, [pc, #252]	; (8008d68 <xTaskIncrementTick+0x158>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	4b3e      	ldr	r3, [pc, #248]	; (8008d6c <xTaskIncrementTick+0x15c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <xTaskIncrementTick+0x15c>)
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	f000 fae9 	bl	8009250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c7e:	4b3c      	ldr	r3, [pc, #240]	; (8008d70 <xTaskIncrementTick+0x160>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d349      	bcc.n	8008d1c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c88:	4b36      	ldr	r3, [pc, #216]	; (8008d64 <xTaskIncrementTick+0x154>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c92:	4b37      	ldr	r3, [pc, #220]	; (8008d70 <xTaskIncrementTick+0x160>)
 8008c94:	f04f 32ff 	mov.w	r2, #4294967295
 8008c98:	601a      	str	r2, [r3, #0]
					break;
 8008c9a:	e03f      	b.n	8008d1c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9c:	4b31      	ldr	r3, [pc, #196]	; (8008d64 <xTaskIncrementTick+0x154>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d203      	bcs.n	8008cbc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cb4:	4a2e      	ldr	r2, [pc, #184]	; (8008d70 <xTaskIncrementTick+0x160>)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cba:	e02f      	b.n	8008d1c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ff49 	bl	8007b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3318      	adds	r3, #24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe ff40 	bl	8007b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <xTaskIncrementTick+0x164>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <xTaskIncrementTick+0xdc>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a22      	ldr	r2, [pc, #136]	; (8008d74 <xTaskIncrementTick+0x164>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a1f      	ldr	r2, [pc, #124]	; (8008d78 <xTaskIncrementTick+0x168>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fecb 	bl	8007a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <xTaskIncrementTick+0x16c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d3b8      	bcc.n	8008c88 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008d16:	2301      	movs	r3, #1
 8008d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1a:	e7b5      	b.n	8008c88 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d1c:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <xTaskIncrementTick+0x16c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d22:	4915      	ldr	r1, [pc, #84]	; (8008d78 <xTaskIncrementTick+0x168>)
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d907      	bls.n	8008d44 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	e004      	b.n	8008d44 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d3a:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <xTaskIncrementTick+0x170>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4a0f      	ldr	r2, [pc, #60]	; (8008d80 <xTaskIncrementTick+0x170>)
 8008d42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d44:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <xTaskIncrementTick+0x174>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d50:	697b      	ldr	r3, [r7, #20]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200014e4 	.word	0x200014e4
 8008d60:	200014c0 	.word	0x200014c0
 8008d64:	20001474 	.word	0x20001474
 8008d68:	20001478 	.word	0x20001478
 8008d6c:	200014d4 	.word	0x200014d4
 8008d70:	200014dc 	.word	0x200014dc
 8008d74:	200014c4 	.word	0x200014c4
 8008d78:	20000fec 	.word	0x20000fec
 8008d7c:	20000fe8 	.word	0x20000fe8
 8008d80:	200014cc 	.word	0x200014cc
 8008d84:	200014d0 	.word	0x200014d0

08008d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <vTaskSwitchContext+0xb4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d96:	4b2a      	ldr	r3, [pc, #168]	; (8008e40 <vTaskSwitchContext+0xb8>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d9c:	e048      	b.n	8008e30 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008d9e:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <vTaskSwitchContext+0xb8>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <vTaskSwitchContext+0xbc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e012      	b.n	8008dd2 <vTaskSwitchContext+0x4a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10c      	bne.n	8008dcc <vTaskSwitchContext+0x44>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	b672      	cpsid	i
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	b662      	cpsie	i
 8008dc6:	607b      	str	r3, [r7, #4]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <vTaskSwitchContext+0x42>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	491d      	ldr	r1, [pc, #116]	; (8008e48 <vTaskSwitchContext+0xc0>)
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0e2      	beq.n	8008dac <vTaskSwitchContext+0x24>
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a15      	ldr	r2, [pc, #84]	; (8008e48 <vTaskSwitchContext+0xc0>)
 8008df2:	4413      	add	r3, r2
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	605a      	str	r2, [r3, #4]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3308      	adds	r3, #8
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d104      	bne.n	8008e16 <vTaskSwitchContext+0x8e>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4a0b      	ldr	r2, [pc, #44]	; (8008e4c <vTaskSwitchContext+0xc4>)
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <vTaskSwitchContext+0xbc>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e26:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <vTaskSwitchContext+0xc4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3354      	adds	r3, #84	; 0x54
 8008e2c:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <vTaskSwitchContext+0xc8>)
 8008e2e:	6013      	str	r3, [r2, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	200014e4 	.word	0x200014e4
 8008e40:	200014d0 	.word	0x200014d0
 8008e44:	200014c4 	.word	0x200014c4
 8008e48:	20000fec 	.word	0x20000fec
 8008e4c:	20000fe8 	.word	0x20000fe8
 8008e50:	20000110 	.word	0x20000110

08008e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	b672      	cpsid	i
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	b662      	cpsie	i
 8008e78:	60fb      	str	r3, [r7, #12]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <vTaskPlaceOnEventList+0x48>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3318      	adds	r3, #24
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe fe2d 	bl	8007ae6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	6838      	ldr	r0, [r7, #0]
 8008e90:	f000 fa8e 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20000fe8 	.word	0x20000fe8

08008ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10c      	bne.n	8008ecc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	617b      	str	r3, [r7, #20]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <vTaskPlaceOnEventListRestricted+0x58>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3318      	adds	r3, #24
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7fe fde2 	bl	8007a9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	68b8      	ldr	r0, [r7, #8]
 8008eea:	f000 fa61 	bl	80093b0 <prvAddCurrentTaskToDelayedList>
	}
 8008eee:	bf00      	nop
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000fe8 	.word	0x20000fe8

08008efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	b672      	cpsid	i
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	b662      	cpsie	i
 8008f26:	60fb      	str	r3, [r7, #12]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3318      	adds	r3, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fe11 	bl	8007b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <xTaskRemoveFromEventList+0xb4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d11d      	bne.n	8008f7a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fe08 	bl	8007b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4c:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <xTaskRemoveFromEventList+0xb8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <xTaskRemoveFromEventList+0x60>
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <xTaskRemoveFromEventList+0xb8>)
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <xTaskRemoveFromEventList+0xbc>)
 8008f6a:	441a      	add	r2, r3
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fe fd93 	bl	8007a9e <vListInsertEnd>
 8008f78:	e005      	b.n	8008f86 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3318      	adds	r3, #24
 8008f7e:	4619      	mov	r1, r3
 8008f80:	480e      	ldr	r0, [pc, #56]	; (8008fbc <xTaskRemoveFromEventList+0xc0>)
 8008f82:	f7fe fd8c 	bl	8007a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <xTaskRemoveFromEventList+0xc4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d905      	bls.n	8008fa0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <xTaskRemoveFromEventList+0xc8>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e001      	b.n	8008fa4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fa4:	697b      	ldr	r3, [r7, #20]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	200014e4 	.word	0x200014e4
 8008fb4:	200014c4 	.word	0x200014c4
 8008fb8:	20000fec 	.word	0x20000fec
 8008fbc:	2000147c 	.word	0x2000147c
 8008fc0:	20000fe8 	.word	0x20000fe8
 8008fc4:	200014d0 	.word	0x200014d0

08008fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <vTaskInternalSetTimeOutState+0x24>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <vTaskInternalSetTimeOutState+0x28>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	200014d4 	.word	0x200014d4
 8008ff0:	200014c0 	.word	0x200014c0

08008ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10c      	bne.n	800901e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	b672      	cpsid	i
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	b662      	cpsie	i
 8009018:	613b      	str	r3, [r7, #16]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10c      	bne.n	800903e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	b672      	cpsid	i
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	b662      	cpsie	i
 8009038:	60fb      	str	r3, [r7, #12]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800903e:	f000 fe75 	bl	8009d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009042:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <xTaskCheckForTimeOut+0xc4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905a:	d102      	bne.n	8009062 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	e023      	b.n	80090aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <xTaskCheckForTimeOut+0xc8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d007      	beq.n	800907e <xTaskCheckForTimeOut+0x8a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	429a      	cmp	r2, r3
 8009076:	d302      	bcc.n	800907e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	e015      	b.n	80090aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	429a      	cmp	r2, r3
 8009086:	d20b      	bcs.n	80090a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ff97 	bl	8008fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	e004      	b.n	80090aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090aa:	f000 fe73 	bl	8009d94 <vPortExitCritical>

	return xReturn;
 80090ae:	69fb      	ldr	r3, [r7, #28]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3720      	adds	r7, #32
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	200014c0 	.word	0x200014c0
 80090bc:	200014d4 	.word	0x200014d4

080090c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <vTaskMissedYield+0x14>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	200014d0 	.word	0x200014d0

080090d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090e0:	f000 f852 	bl	8009188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <prvIdleTask+0x28>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d9f9      	bls.n	80090e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <prvIdleTask+0x2c>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090fc:	e7f0      	b.n	80090e0 <prvIdleTask+0x8>
 80090fe:	bf00      	nop
 8009100:	20000fec 	.word	0x20000fec
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	e00c      	b.n	800912e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a12      	ldr	r2, [pc, #72]	; (8009168 <prvInitialiseTaskLists+0x60>)
 8009120:	4413      	add	r3, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fc8e 	bl	8007a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3301      	adds	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b37      	cmp	r3, #55	; 0x37
 8009132:	d9ef      	bls.n	8009114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009134:	480d      	ldr	r0, [pc, #52]	; (800916c <prvInitialiseTaskLists+0x64>)
 8009136:	f7fe fc85 	bl	8007a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800913a:	480d      	ldr	r0, [pc, #52]	; (8009170 <prvInitialiseTaskLists+0x68>)
 800913c:	f7fe fc82 	bl	8007a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009140:	480c      	ldr	r0, [pc, #48]	; (8009174 <prvInitialiseTaskLists+0x6c>)
 8009142:	f7fe fc7f 	bl	8007a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009146:	480c      	ldr	r0, [pc, #48]	; (8009178 <prvInitialiseTaskLists+0x70>)
 8009148:	f7fe fc7c 	bl	8007a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800914c:	480b      	ldr	r0, [pc, #44]	; (800917c <prvInitialiseTaskLists+0x74>)
 800914e:	f7fe fc79 	bl	8007a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <prvInitialiseTaskLists+0x78>)
 8009154:	4a05      	ldr	r2, [pc, #20]	; (800916c <prvInitialiseTaskLists+0x64>)
 8009156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvInitialiseTaskLists+0x7c>)
 800915a:	4a05      	ldr	r2, [pc, #20]	; (8009170 <prvInitialiseTaskLists+0x68>)
 800915c:	601a      	str	r2, [r3, #0]
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000fec 	.word	0x20000fec
 800916c:	2000144c 	.word	0x2000144c
 8009170:	20001460 	.word	0x20001460
 8009174:	2000147c 	.word	0x2000147c
 8009178:	20001490 	.word	0x20001490
 800917c:	200014a8 	.word	0x200014a8
 8009180:	20001474 	.word	0x20001474
 8009184:	20001478 	.word	0x20001478

08009188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800918e:	e019      	b.n	80091c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009190:	f000 fdcc 	bl	8009d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009194:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <prvCheckTasksWaitingTermination+0x50>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3304      	adds	r3, #4
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fcd9 	bl	8007b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091a6:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <prvCheckTasksWaitingTermination+0x54>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	4a0b      	ldr	r2, [pc, #44]	; (80091dc <prvCheckTasksWaitingTermination+0x54>)
 80091ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <prvCheckTasksWaitingTermination+0x58>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <prvCheckTasksWaitingTermination+0x58>)
 80091b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ba:	f000 fdeb 	bl	8009d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f810 	bl	80091e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091c4:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <prvCheckTasksWaitingTermination+0x58>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e1      	bne.n	8009190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20001490 	.word	0x20001490
 80091dc:	200014bc 	.word	0x200014bc
 80091e0:	200014a4 	.word	0x200014a4

080091e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3354      	adds	r3, #84	; 0x54
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 ff8d 	bl	800b110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d108      	bne.n	8009212 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	4618      	mov	r0, r3
 8009206:	f000 ff87 	bl	800a118 <vPortFree>
				vPortFree( pxTCB );
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 ff84 	bl	800a118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009210:	e01a      	b.n	8009248 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009218:	2b01      	cmp	r3, #1
 800921a:	d103      	bne.n	8009224 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 ff7b 	bl	800a118 <vPortFree>
	}
 8009222:	e011      	b.n	8009248 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800922a:	2b02      	cmp	r3, #2
 800922c:	d00c      	beq.n	8009248 <prvDeleteTCB+0x64>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	60fb      	str	r3, [r7, #12]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <prvDeleteTCB+0x62>
	}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvResetNextTaskUnblockTime+0x38>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d104      	bne.n	800926a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <prvResetNextTaskUnblockTime+0x3c>)
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009268:	e008      	b.n	800927c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <prvResetNextTaskUnblockTime+0x38>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4a04      	ldr	r2, [pc, #16]	; (800928c <prvResetNextTaskUnblockTime+0x3c>)
 800927a:	6013      	str	r3, [r2, #0]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20001474 	.word	0x20001474
 800928c:	200014dc 	.word	0x200014dc

08009290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009296:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <xTaskGetSchedulerState+0x34>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800929e:	2301      	movs	r3, #1
 80092a0:	607b      	str	r3, [r7, #4]
 80092a2:	e008      	b.n	80092b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <xTaskGetSchedulerState+0x38>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092ac:	2302      	movs	r3, #2
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	e001      	b.n	80092b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092b2:	2300      	movs	r3, #0
 80092b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092b6:	687b      	ldr	r3, [r7, #4]
	}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	200014c8 	.word	0x200014c8
 80092c8:	200014e4 	.word	0x200014e4

080092cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d05a      	beq.n	8009398 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092e2:	4b30      	ldr	r3, [pc, #192]	; (80093a4 <xTaskPriorityDisinherit+0xd8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d00c      	beq.n	8009306 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	b672      	cpsid	i
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	b662      	cpsie	i
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10c      	bne.n	8009328 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	b672      	cpsid	i
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	b662      	cpsie	i
 8009322:	60bb      	str	r3, [r7, #8]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932c:	1e5a      	subs	r2, r3, #1
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	429a      	cmp	r2, r3
 800933c:	d02c      	beq.n	8009398 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009342:	2b00      	cmp	r3, #0
 8009344:	d128      	bne.n	8009398 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3304      	adds	r3, #4
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fc04 	bl	8007b58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <xTaskPriorityDisinherit+0xdc>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d903      	bls.n	8009378 <xTaskPriorityDisinherit+0xac>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4a0c      	ldr	r2, [pc, #48]	; (80093a8 <xTaskPriorityDisinherit+0xdc>)
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	4613      	mov	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4a09      	ldr	r2, [pc, #36]	; (80093ac <xTaskPriorityDisinherit+0xe0>)
 8009386:	441a      	add	r2, r3
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fe fb85 	bl	8007a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009398:	697b      	ldr	r3, [r7, #20]
	}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000fe8 	.word	0x20000fe8
 80093a8:	200014c4 	.word	0x200014c4
 80093ac:	20000fec 	.word	0x20000fec

080093b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ba:	4b21      	ldr	r3, [pc, #132]	; (8009440 <prvAddCurrentTaskToDelayedList+0x90>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c0:	4b20      	ldr	r3, [pc, #128]	; (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fbc6 	bl	8007b58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d2:	d10a      	bne.n	80093ea <prvAddCurrentTaskToDelayedList+0x3a>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093da:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4819      	ldr	r0, [pc, #100]	; (8009448 <prvAddCurrentTaskToDelayedList+0x98>)
 80093e4:	f7fe fb5b 	bl	8007a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093e8:	e026      	b.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4413      	add	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093f2:	4b14      	ldr	r3, [pc, #80]	; (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d209      	bcs.n	8009416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009402:	4b12      	ldr	r3, [pc, #72]	; (800944c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7fe fb69 	bl	8007ae6 <vListInsert>
}
 8009414:	e010      	b.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009416:	4b0e      	ldr	r3, [pc, #56]	; (8009450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <prvAddCurrentTaskToDelayedList+0x94>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe fb5f 	bl	8007ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	d202      	bcs.n	8009438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009432:	4a08      	ldr	r2, [pc, #32]	; (8009454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6013      	str	r3, [r2, #0]
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	200014c0 	.word	0x200014c0
 8009444:	20000fe8 	.word	0x20000fe8
 8009448:	200014a8 	.word	0x200014a8
 800944c:	20001478 	.word	0x20001478
 8009450:	20001474 	.word	0x20001474
 8009454:	200014dc 	.word	0x200014dc

08009458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	; 0x28
 800945c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009462:	f000 fb15 	bl	8009a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009466:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <xTimerCreateTimerTask+0x84>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d021      	beq.n	80094b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009476:	1d3a      	adds	r2, r7, #4
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fac5 	bl	8007a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	9202      	str	r2, [sp, #8]
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	2302      	movs	r3, #2
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	460a      	mov	r2, r1
 8009498:	4911      	ldr	r1, [pc, #68]	; (80094e0 <xTimerCreateTimerTask+0x88>)
 800949a:	4812      	ldr	r0, [pc, #72]	; (80094e4 <xTimerCreateTimerTask+0x8c>)
 800949c:	f7ff f890 	bl	80085c0 <xTaskCreateStatic>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4a11      	ldr	r2, [pc, #68]	; (80094e8 <xTimerCreateTimerTask+0x90>)
 80094a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <xTimerCreateTimerTask+0x90>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094ae:	2301      	movs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10c      	bne.n	80094d2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	b672      	cpsid	i
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	b662      	cpsie	i
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80094d2:	697b      	ldr	r3, [r7, #20]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20001518 	.word	0x20001518
 80094e0:	0800b228 	.word	0x0800b228
 80094e4:	08009629 	.word	0x08009629
 80094e8:	2000151c 	.word	0x2000151c

080094ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10c      	bne.n	800951e <xTimerGenericCommand+0x32>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	b672      	cpsid	i
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	b662      	cpsie	i
 8009518:	623b      	str	r3, [r7, #32]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800951e:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <xTimerGenericCommand+0x9c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d02a      	beq.n	800957c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b05      	cmp	r3, #5
 8009536:	dc18      	bgt.n	800956a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009538:	f7ff feaa 	bl	8009290 <xTaskGetSchedulerState>
 800953c:	4603      	mov	r3, r0
 800953e:	2b02      	cmp	r3, #2
 8009540:	d109      	bne.n	8009556 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <xTimerGenericCommand+0x9c>)
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	f107 0110 	add.w	r1, r7, #16
 800954a:	2300      	movs	r3, #0
 800954c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800954e:	f7fe fc3d 	bl	8007dcc <xQueueGenericSend>
 8009552:	6278      	str	r0, [r7, #36]	; 0x24
 8009554:	e012      	b.n	800957c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <xTimerGenericCommand+0x9c>)
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f107 0110 	add.w	r1, r7, #16
 800955e:	2300      	movs	r3, #0
 8009560:	2200      	movs	r2, #0
 8009562:	f7fe fc33 	bl	8007dcc <xQueueGenericSend>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
 8009568:	e008      	b.n	800957c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <xTimerGenericCommand+0x9c>)
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f107 0110 	add.w	r1, r7, #16
 8009572:	2300      	movs	r3, #0
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	f7fe fd2f 	bl	8007fd8 <xQueueGenericSendFromISR>
 800957a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800957e:	4618      	mov	r0, r3
 8009580:	3728      	adds	r7, #40	; 0x28
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20001518 	.word	0x20001518

0800958c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009596:	4b23      	ldr	r3, [pc, #140]	; (8009624 <prvProcessExpiredTimer+0x98>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fad7 	bl	8007b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d024      	beq.n	8009602 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	18d1      	adds	r1, r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f000 f8d3 	bl	8009770 <prvInsertTimerInActiveList>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d021      	beq.n	8009614 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	2100      	movs	r1, #0
 80095da:	6978      	ldr	r0, [r7, #20]
 80095dc:	f7ff ff86 	bl	80094ec <xTimerGenericCommand>
 80095e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d115      	bne.n	8009614 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	b672      	cpsid	i
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	b662      	cpsie	i
 80095fc:	60fb      	str	r3, [r7, #12]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009608:	f023 0301 	bic.w	r3, r3, #1
 800960c:	b2da      	uxtb	r2, r3
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	6978      	ldr	r0, [r7, #20]
 800961a:	4798      	blx	r3
}
 800961c:	bf00      	nop
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20001510 	.word	0x20001510

08009628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009630:	f107 0308 	add.w	r3, r7, #8
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f857 	bl	80096e8 <prvGetNextExpireTime>
 800963a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4619      	mov	r1, r3
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f803 	bl	800964c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009646:	f000 f8d5 	bl	80097f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800964a:	e7f1      	b.n	8009630 <prvTimerTask+0x8>

0800964c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009656:	f7ff fa1d 	bl	8008a94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800965a:	f107 0308 	add.w	r3, r7, #8
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f866 	bl	8009730 <prvSampleTimeNow>
 8009664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d130      	bne.n	80096ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <prvProcessTimerOrBlockTask+0x3c>
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	429a      	cmp	r2, r3
 8009678:	d806      	bhi.n	8009688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800967a:	f7ff fa19 	bl	8008ab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ff83 	bl	800958c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009686:	e024      	b.n	80096d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d008      	beq.n	80096a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <prvProcessTimerOrBlockTask+0x90>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <prvProcessTimerOrBlockTask+0x50>
 8009698:	2301      	movs	r3, #1
 800969a:	e000      	b.n	800969e <prvProcessTimerOrBlockTask+0x52>
 800969c:	2300      	movs	r3, #0
 800969e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <prvProcessTimerOrBlockTask+0x94>)
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	f7fe ff53 	bl	8008558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096b2:	f7ff f9fd 	bl	8008ab0 <xTaskResumeAll>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <prvProcessTimerOrBlockTask+0x98>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
}
 80096cc:	e001      	b.n	80096d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096ce:	f7ff f9ef 	bl	8008ab0 <xTaskResumeAll>
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001514 	.word	0x20001514
 80096e0:	20001518 	.word	0x20001518
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <prvGetNextExpireTime+0x44>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <prvGetNextExpireTime+0x16>
 80096fa:	2201      	movs	r2, #1
 80096fc:	e000      	b.n	8009700 <prvGetNextExpireTime+0x18>
 80096fe:	2200      	movs	r2, #0
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <prvGetNextExpireTime+0x44>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e001      	b.n	800971c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800971c:	68fb      	ldr	r3, [r7, #12]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001510 	.word	0x20001510

08009730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009738:	f7ff fa5a 	bl	8008bf0 <xTaskGetTickCount>
 800973c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <prvSampleTimeNow+0x3c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	429a      	cmp	r2, r3
 8009746:	d205      	bcs.n	8009754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009748:	f000 f93c 	bl	80099c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	e002      	b.n	800975a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800975a:	4a04      	ldr	r2, [pc, #16]	; (800976c <prvSampleTimeNow+0x3c>)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009760:	68fb      	ldr	r3, [r7, #12]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001520 	.word	0x20001520

08009770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d812      	bhi.n	80097bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	1ad2      	subs	r2, r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d302      	bcc.n	80097aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e01b      	b.n	80097e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097aa:	4b10      	ldr	r3, [pc, #64]	; (80097ec <prvInsertTimerInActiveList+0x7c>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fe f996 	bl	8007ae6 <vListInsert>
 80097ba:	e012      	b.n	80097e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d206      	bcs.n	80097d2 <prvInsertTimerInActiveList+0x62>
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d302      	bcc.n	80097d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e007      	b.n	80097e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097d2:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <prvInsertTimerInActiveList+0x80>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3304      	adds	r3, #4
 80097da:	4619      	mov	r1, r3
 80097dc:	4610      	mov	r0, r2
 80097de:	f7fe f982 	bl	8007ae6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097e2:	697b      	ldr	r3, [r7, #20]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20001514 	.word	0x20001514
 80097f0:	20001510 	.word	0x20001510

080097f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08e      	sub	sp, #56	; 0x38
 80097f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097fa:	e0d0      	b.n	800999e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da1a      	bge.n	8009838 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009802:	1d3b      	adds	r3, r7, #4
 8009804:	3304      	adds	r3, #4
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10c      	bne.n	8009828 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	b672      	cpsid	i
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	b662      	cpsie	i
 8009822:	61fb      	str	r3, [r7, #28]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800982e:	6850      	ldr	r0, [r2, #4]
 8009830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009832:	6892      	ldr	r2, [r2, #8]
 8009834:	4611      	mov	r1, r2
 8009836:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f2c0 80ae 	blt.w	800999c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	3304      	adds	r3, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe f981 	bl	8007b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009856:	463b      	mov	r3, r7
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff ff69 	bl	8009730 <prvSampleTimeNow>
 800985e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b09      	cmp	r3, #9
 8009864:	f200 809b 	bhi.w	800999e <prvProcessReceivedCommands+0x1aa>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <prvProcessReceivedCommands+0x7c>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009899 	.word	0x08009899
 8009874:	08009899 	.word	0x08009899
 8009878:	08009899 	.word	0x08009899
 800987c:	08009911 	.word	0x08009911
 8009880:	08009925 	.word	0x08009925
 8009884:	08009973 	.word	0x08009973
 8009888:	08009899 	.word	0x08009899
 800988c:	08009899 	.word	0x08009899
 8009890:	08009911 	.word	0x08009911
 8009894:	08009925 	.word	0x08009925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098b8:	f7ff ff5a 	bl	8009770 <prvInsertTimerInActiveList>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d06d      	beq.n	800999e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d062      	beq.n	800999e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	441a      	add	r2, r3
 80098e0:	2300      	movs	r3, #0
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ea:	f7ff fdff 	bl	80094ec <xTimerGenericCommand>
 80098ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d153      	bne.n	800999e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	b672      	cpsid	i
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	b662      	cpsie	i
 800990a:	61bb      	str	r3, [r7, #24]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009922:	e03c      	b.n	800999e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10c      	bne.n	800995e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	b672      	cpsid	i
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	b662      	cpsie	i
 8009958:	617b      	str	r3, [r7, #20]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	699a      	ldr	r2, [r3, #24]
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	18d1      	adds	r1, r2, r3
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996c:	f7ff ff00 	bl	8009770 <prvInsertTimerInActiveList>
					break;
 8009970:	e015      	b.n	800999e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009978:	f003 0302 	and.w	r3, r3, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f000 fbc9 	bl	800a118 <vPortFree>
 8009986:	e00a      	b.n	800999e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998e:	f023 0301 	bic.w	r3, r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800999a:	e000      	b.n	800999e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800999c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <prvProcessReceivedCommands+0x1cc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	1d39      	adds	r1, r7, #4
 80099a4:	2200      	movs	r2, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fbb6 	bl	8008118 <xQueueReceive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f47f af24 	bne.w	80097fc <prvProcessReceivedCommands+0x8>
	}
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3730      	adds	r7, #48	; 0x30
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20001518 	.word	0x20001518

080099c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ca:	e04a      	b.n	8009a62 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099cc:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d6:	4b2c      	ldr	r3, [pc, #176]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe f8b7 	bl	8007b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d030      	beq.n	8009a62 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d90e      	bls.n	8009a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7fe f85c 	bl	8007ae6 <vListInsert>
 8009a2e:	e018      	b.n	8009a62 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a30:	2300      	movs	r3, #0
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fd56 	bl	80094ec <xTimerGenericCommand>
 8009a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10c      	bne.n	8009a62 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	b672      	cpsid	i
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	b662      	cpsie	i
 8009a5c:	603b      	str	r3, [r7, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1af      	bne.n	80099cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <prvSwitchTimerLists+0xc8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a04      	ldr	r2, [pc, #16]	; (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <prvSwitchTimerLists+0xc8>)
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20001510 	.word	0x20001510
 8009a8c:	20001514 	.word	0x20001514

08009a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a96:	f000 f949 	bl	8009d2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d120      	bne.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aa2:	4814      	ldr	r0, [pc, #80]	; (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009aa4:	f7fd ffce 	bl	8007a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009aa8:	4813      	ldr	r0, [pc, #76]	; (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009aaa:	f7fd ffcb 	bl	8007a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <prvCheckForValidListAndQueue+0x6c>)
 8009ab0:	4a10      	ldr	r2, [pc, #64]	; (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ab4:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <prvCheckForValidListAndQueue+0x70>)
 8009ab6:	4a10      	ldr	r2, [pc, #64]	; (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <prvCheckForValidListAndQueue+0x74>)
 8009ac0:	4a11      	ldr	r2, [pc, #68]	; (8009b08 <prvCheckForValidListAndQueue+0x78>)
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f7fe f8db 	bl	8007c80 <xQueueGenericCreateStatic>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4a08      	ldr	r2, [pc, #32]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	490b      	ldr	r1, [pc, #44]	; (8009b0c <prvCheckForValidListAndQueue+0x7c>)
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fd10 	bl	8008504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae4:	f000 f956 	bl	8009d94 <vPortExitCritical>
}
 8009ae8:	bf00      	nop
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001518 	.word	0x20001518
 8009af4:	200014e8 	.word	0x200014e8
 8009af8:	200014fc 	.word	0x200014fc
 8009afc:	20001510 	.word	0x20001510
 8009b00:	20001514 	.word	0x20001514
 8009b04:	200015c4 	.word	0x200015c4
 8009b08:	20001524 	.word	0x20001524
 8009b0c:	0800b230 	.word	0x0800b230

08009b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3b04      	subs	r3, #4
 8009b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3b04      	subs	r3, #4
 8009b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f023 0201 	bic.w	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b40:	4a0c      	ldr	r2, [pc, #48]	; (8009b74 <pxPortInitialiseStack+0x64>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b14      	subs	r3, #20
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b04      	subs	r3, #4
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f06f 0202 	mvn.w	r2, #2
 8009b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3b20      	subs	r3, #32
 8009b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	08009b79 	.word	0x08009b79

08009b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b82:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <prvTaskExitError+0x5c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d00c      	beq.n	8009ba6 <prvTaskExitError+0x2e>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	b672      	cpsid	i
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	b662      	cpsie	i
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <prvTaskExitError+0x2c>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	b672      	cpsid	i
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	b662      	cpsie	i
 8009bba:	60bb      	str	r3, [r7, #8]
}
 8009bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bbe:	bf00      	nop
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0fc      	beq.n	8009bc0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	20000098 	.word	0x20000098
	...

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	20000fe8 	.word	0x20000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	; (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c36:	4b37      	ldr	r3, [pc, #220]	; (8009d14 <xPortStartScheduler+0xe4>)
 8009c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	22ff      	movs	r2, #255	; 0xff
 8009c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	4b2f      	ldr	r3, [pc, #188]	; (8009d18 <xPortStartScheduler+0xe8>)
 8009c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c5e:	4b2f      	ldr	r3, [pc, #188]	; (8009d1c <xPortStartScheduler+0xec>)
 8009c60:	2207      	movs	r2, #7
 8009c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c64:	e009      	b.n	8009c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c66:	4b2d      	ldr	r3, [pc, #180]	; (8009d1c <xPortStartScheduler+0xec>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4a2b      	ldr	r2, [pc, #172]	; (8009d1c <xPortStartScheduler+0xec>)
 8009c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d0ef      	beq.n	8009c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c86:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <xPortStartScheduler+0xec>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f1c3 0307 	rsb	r3, r3, #7
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d00c      	beq.n	8009cac <xPortStartScheduler+0x7c>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	60bb      	str	r3, [r7, #8]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <xPortStartScheduler+0xec>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	4a1a      	ldr	r2, [pc, #104]	; (8009d1c <xPortStartScheduler+0xec>)
 8009cb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cb6:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <xPortStartScheduler+0xec>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cbe:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <xPortStartScheduler+0xec>)
 8009cc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <xPortStartScheduler+0xf0>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a14      	ldr	r2, [pc, #80]	; (8009d20 <xPortStartScheduler+0xf0>)
 8009cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <xPortStartScheduler+0xf0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <xPortStartScheduler+0xf0>)
 8009cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ce0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ce2:	f000 f8dd 	bl	8009ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <xPortStartScheduler+0xf4>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cec:	f000 f8fc 	bl	8009ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <xPortStartScheduler+0xf8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <xPortStartScheduler+0xf8>)
 8009cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cfc:	f7ff ff84 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d00:	f7ff f842 	bl	8008d88 <vTaskSwitchContext>
	prvTaskExitError();
 8009d04:	f7ff ff38 	bl	8009b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	e000e400 	.word	0xe000e400
 8009d18:	20001614 	.word	0x20001614
 8009d1c:	20001618 	.word	0x20001618
 8009d20:	e000ed20 	.word	0xe000ed20
 8009d24:	20000098 	.word	0x20000098
 8009d28:	e000ef34 	.word	0xe000ef34

08009d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	b672      	cpsid	i
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	b662      	cpsie	i
 8009d46:	607b      	str	r3, [r7, #4]
}
 8009d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d4a:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <vPortEnterCritical+0x60>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <vPortEnterCritical+0x60>)
 8009d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <vPortEnterCritical+0x60>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d111      	bne.n	8009d80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <vPortEnterCritical+0x64>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <vPortEnterCritical+0x54>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	b672      	cpsid	i
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	b662      	cpsie	i
 8009d7a:	603b      	str	r3, [r7, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <vPortEnterCritical+0x52>
	}
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000098 	.word	0x20000098
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <vPortExitCritical+0x54>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10c      	bne.n	8009dbc <vPortExitCritical+0x28>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	b672      	cpsid	i
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	b662      	cpsie	i
 8009db6:	607b      	str	r3, [r7, #4]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <vPortExitCritical+0x54>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	4a09      	ldr	r2, [pc, #36]	; (8009de8 <vPortExitCritical+0x54>)
 8009dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dc6:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <vPortExitCritical+0x54>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <vPortExitCritical+0x46>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	f383 8811 	msr	BASEPRI, r3
}
 8009dd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000098 	.word	0x20000098
 8009dec:	00000000 	.word	0x00000000

08009df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009df0:	f3ef 8009 	mrs	r0, PSP
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <pxCurrentTCBConst>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	f01e 0f10 	tst.w	lr, #16
 8009e00:	bf08      	it	eq
 8009e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e14:	b672      	cpsid	i
 8009e16:	f380 8811 	msr	BASEPRI, r0
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	b662      	cpsie	i
 8009e24:	f7fe ffb0 	bl	8008d88 <vTaskSwitchContext>
 8009e28:	f04f 0000 	mov.w	r0, #0
 8009e2c:	f380 8811 	msr	BASEPRI, r0
 8009e30:	bc09      	pop	{r0, r3}
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	f01e 0f10 	tst.w	lr, #16
 8009e3e:	bf08      	it	eq
 8009e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e44:	f380 8809 	msr	PSP, r0
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop

08009e50 <pxCurrentTCBConst>:
 8009e50:	20000fe8 	.word	0x20000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	b672      	cpsid	i
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	b662      	cpsie	i
 8009e72:	607b      	str	r3, [r7, #4]
}
 8009e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e76:	f7fe fecb 	bl	8008c10 <xTaskIncrementTick>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e80:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <SysTick_Handler+0x44>)
 8009e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	f383 8811 	msr	BASEPRI, r3
}
 8009e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	e000ed04 	.word	0xe000ed04

08009ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <vPortSetupTimerInterrupt+0x34>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009eaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ed8 <vPortSetupTimerInterrupt+0x38>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eb0:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <vPortSetupTimerInterrupt+0x3c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <vPortSetupTimerInterrupt+0x40>)
 8009eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eba:	099b      	lsrs	r3, r3, #6
 8009ebc:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <vPortSetupTimerInterrupt+0x44>)
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ec2:	4b04      	ldr	r3, [pc, #16]	; (8009ed4 <vPortSetupTimerInterrupt+0x34>)
 8009ec4:	2207      	movs	r2, #7
 8009ec6:	601a      	str	r2, [r3, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	e000e010 	.word	0xe000e010
 8009ed8:	e000e018 	.word	0xe000e018
 8009edc:	20000000 	.word	0x20000000
 8009ee0:	10624dd3 	.word	0x10624dd3
 8009ee4:	e000e014 	.word	0xe000e014

08009ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ef8 <vPortEnableVFP+0x10>
 8009eec:	6801      	ldr	r1, [r0, #0]
 8009eee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ef2:	6001      	str	r1, [r0, #0]
 8009ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ef6:	bf00      	nop
 8009ef8:	e000ed88 	.word	0xe000ed88

08009efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f02:	f3ef 8305 	mrs	r3, IPSR
 8009f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b0f      	cmp	r3, #15
 8009f0c:	d916      	bls.n	8009f3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f0e:	4a19      	ldr	r2, [pc, #100]	; (8009f74 <vPortValidateInterruptPriority+0x78>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f18:	4b17      	ldr	r3, [pc, #92]	; (8009f78 <vPortValidateInterruptPriority+0x7c>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	7afa      	ldrb	r2, [r7, #11]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d20c      	bcs.n	8009f3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	b672      	cpsid	i
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	b662      	cpsie	i
 8009f36:	607b      	str	r3, [r7, #4]
}
 8009f38:	bf00      	nop
 8009f3a:	e7fe      	b.n	8009f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f3c:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <vPortValidateInterruptPriority+0x80>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f44:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <vPortValidateInterruptPriority+0x84>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d90c      	bls.n	8009f66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	b672      	cpsid	i
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	b662      	cpsie	i
 8009f60:	603b      	str	r3, [r7, #0]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <vPortValidateInterruptPriority+0x68>
	}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	e000e3f0 	.word	0xe000e3f0
 8009f78:	20001614 	.word	0x20001614
 8009f7c:	e000ed0c 	.word	0xe000ed0c
 8009f80:	20001618 	.word	0x20001618

08009f84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f90:	f7fe fd80 	bl	8008a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f94:	4b5b      	ldr	r3, [pc, #364]	; (800a104 <pvPortMalloc+0x180>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f9c:	f000 f91a 	bl	800a1d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fa0:	4b59      	ldr	r3, [pc, #356]	; (800a108 <pvPortMalloc+0x184>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f040 8092 	bne.w	800a0d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01f      	beq.n	8009ff4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4413      	add	r3, r2
 8009fba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d016      	beq.n	8009ff4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	3308      	adds	r3, #8
 8009fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00c      	beq.n	8009ff4 <pvPortMalloc+0x70>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	b672      	cpsid	i
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	b662      	cpsie	i
 8009fee:	617b      	str	r3, [r7, #20]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d06b      	beq.n	800a0d2 <pvPortMalloc+0x14e>
 8009ffa:	4b44      	ldr	r3, [pc, #272]	; (800a10c <pvPortMalloc+0x188>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	429a      	cmp	r2, r3
 800a002:	d866      	bhi.n	800a0d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a004:	4b42      	ldr	r3, [pc, #264]	; (800a110 <pvPortMalloc+0x18c>)
 800a006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a008:	4b41      	ldr	r3, [pc, #260]	; (800a110 <pvPortMalloc+0x18c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a00e:	e004      	b.n	800a01a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d903      	bls.n	800a02c <pvPortMalloc+0xa8>
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f1      	bne.n	800a010 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a02c:	4b35      	ldr	r3, [pc, #212]	; (800a104 <pvPortMalloc+0x180>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a032:	429a      	cmp	r2, r3
 800a034:	d04d      	beq.n	800a0d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2208      	movs	r2, #8
 800a03c:	4413      	add	r3, r2
 800a03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	2308      	movs	r3, #8
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	429a      	cmp	r2, r3
 800a056:	d921      	bls.n	800a09c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4413      	add	r3, r2
 800a05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00c      	beq.n	800a084 <pvPortMalloc+0x100>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	b672      	cpsid	i
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	b662      	cpsie	i
 800a07e:	613b      	str	r3, [r7, #16]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a096:	69b8      	ldr	r0, [r7, #24]
 800a098:	f000 f8fe 	bl	800a298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a09c:	4b1b      	ldr	r3, [pc, #108]	; (800a10c <pvPortMalloc+0x188>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	4a19      	ldr	r2, [pc, #100]	; (800a10c <pvPortMalloc+0x188>)
 800a0a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0aa:	4b18      	ldr	r3, [pc, #96]	; (800a10c <pvPortMalloc+0x188>)
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	4b19      	ldr	r3, [pc, #100]	; (800a114 <pvPortMalloc+0x190>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d203      	bcs.n	800a0be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0b6:	4b15      	ldr	r3, [pc, #84]	; (800a10c <pvPortMalloc+0x188>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a16      	ldr	r2, [pc, #88]	; (800a114 <pvPortMalloc+0x190>)
 800a0bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	4b11      	ldr	r3, [pc, #68]	; (800a108 <pvPortMalloc+0x184>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0d2:	f7fe fced 	bl	8008ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00c      	beq.n	800a0fa <pvPortMalloc+0x176>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	b672      	cpsid	i
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	b662      	cpsie	i
 800a0f4:	60fb      	str	r3, [r7, #12]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <pvPortMalloc+0x174>
	return pvReturn;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3728      	adds	r7, #40	; 0x28
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20005224 	.word	0x20005224
 800a108:	20005230 	.word	0x20005230
 800a10c:	20005228 	.word	0x20005228
 800a110:	2000521c 	.word	0x2000521c
 800a114:	2000522c 	.word	0x2000522c

0800a118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d04c      	beq.n	800a1c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a12a:	2308      	movs	r3, #8
 800a12c:	425b      	negs	r3, r3
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <vPortFree+0xb4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10c      	bne.n	800a160 <vPortFree+0x48>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	b672      	cpsid	i
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	b662      	cpsie	i
 800a15a:	60fb      	str	r3, [r7, #12]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00c      	beq.n	800a182 <vPortFree+0x6a>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	b672      	cpsid	i
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	b662      	cpsie	i
 800a17c:	60bb      	str	r3, [r7, #8]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <vPortFree+0xb4>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4013      	ands	r3, r2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d019      	beq.n	800a1c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d115      	bne.n	800a1c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <vPortFree+0xb4>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	43db      	mvns	r3, r3
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1a8:	f7fe fc74 	bl	8008a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <vPortFree+0xb8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4a06      	ldr	r2, [pc, #24]	; (800a1d0 <vPortFree+0xb8>)
 800a1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1ba:	6938      	ldr	r0, [r7, #16]
 800a1bc:	f000 f86c 	bl	800a298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1c0:	f7fe fc76 	bl	8008ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20005230 	.word	0x20005230
 800a1d0:	20005228 	.word	0x20005228

0800a1d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a1de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1e0:	4b27      	ldr	r3, [pc, #156]	; (800a280 <prvHeapInit+0xac>)
 800a1e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00c      	beq.n	800a208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0307 	bic.w	r3, r3, #7
 800a1fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	4a1f      	ldr	r2, [pc, #124]	; (800a280 <prvHeapInit+0xac>)
 800a204:	4413      	add	r3, r2
 800a206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a20c:	4a1d      	ldr	r2, [pc, #116]	; (800a284 <prvHeapInit+0xb0>)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <prvHeapInit+0xb0>)
 800a214:	2200      	movs	r2, #0
 800a216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	4413      	add	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a220:	2208      	movs	r2, #8
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1a9b      	subs	r3, r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0307 	bic.w	r3, r3, #7
 800a22e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a15      	ldr	r2, [pc, #84]	; (800a288 <prvHeapInit+0xb4>)
 800a234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a236:	4b14      	ldr	r3, [pc, #80]	; (800a288 <prvHeapInit+0xb4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2200      	movs	r2, #0
 800a23c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a23e:	4b12      	ldr	r3, [pc, #72]	; (800a288 <prvHeapInit+0xb4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a254:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <prvHeapInit+0xb4>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4a0a      	ldr	r2, [pc, #40]	; (800a28c <prvHeapInit+0xb8>)
 800a262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	4a09      	ldr	r2, [pc, #36]	; (800a290 <prvHeapInit+0xbc>)
 800a26a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <prvHeapInit+0xc0>)
 800a26e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a272:	601a      	str	r2, [r3, #0]
}
 800a274:	bf00      	nop
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	2000161c 	.word	0x2000161c
 800a284:	2000521c 	.word	0x2000521c
 800a288:	20005224 	.word	0x20005224
 800a28c:	2000522c 	.word	0x2000522c
 800a290:	20005228 	.word	0x20005228
 800a294:	20005230 	.word	0x20005230

0800a298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2a0:	4b28      	ldr	r3, [pc, #160]	; (800a344 <prvInsertBlockIntoFreeList+0xac>)
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e002      	b.n	800a2ac <prvInsertBlockIntoFreeList+0x14>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d8f7      	bhi.n	800a2a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d108      	bne.n	800a2da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	441a      	add	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	441a      	add	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d118      	bne.n	800a320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b15      	ldr	r3, [pc, #84]	; (800a348 <prvInsertBlockIntoFreeList+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d00d      	beq.n	800a316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	441a      	add	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	e008      	b.n	800a328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a316:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <prvInsertBlockIntoFreeList+0xb0>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e003      	b.n	800a328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d002      	beq.n	800a336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	2000521c 	.word	0x2000521c
 800a348:	20005224 	.word	0x20005224

0800a34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a350:	2200      	movs	r2, #0
 800a352:	4912      	ldr	r1, [pc, #72]	; (800a39c <MX_USB_DEVICE_Init+0x50>)
 800a354:	4812      	ldr	r0, [pc, #72]	; (800a3a0 <MX_USB_DEVICE_Init+0x54>)
 800a356:	f7fb fedf 	bl	8006118 <USBD_Init>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a360:	f7f6 fa5c 	bl	800081c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a364:	490f      	ldr	r1, [pc, #60]	; (800a3a4 <MX_USB_DEVICE_Init+0x58>)
 800a366:	480e      	ldr	r0, [pc, #56]	; (800a3a0 <MX_USB_DEVICE_Init+0x54>)
 800a368:	f7fb ff06 	bl	8006178 <USBD_RegisterClass>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a372:	f7f6 fa53 	bl	800081c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a376:	490c      	ldr	r1, [pc, #48]	; (800a3a8 <MX_USB_DEVICE_Init+0x5c>)
 800a378:	4809      	ldr	r0, [pc, #36]	; (800a3a0 <MX_USB_DEVICE_Init+0x54>)
 800a37a:	f7fb fdfd 	bl	8005f78 <USBD_CDC_RegisterInterface>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a384:	f7f6 fa4a 	bl	800081c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a388:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <MX_USB_DEVICE_Init+0x54>)
 800a38a:	f7fb ff2b 	bl	80061e4 <USBD_Start>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a394:	f7f6 fa42 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a398:	bf00      	nop
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	200000b0 	.word	0x200000b0
 800a3a0:	20005234 	.word	0x20005234
 800a3a4:	20000018 	.word	0x20000018
 800a3a8:	2000009c 	.word	0x2000009c

0800a3ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4905      	ldr	r1, [pc, #20]	; (800a3c8 <CDC_Init_FS+0x1c>)
 800a3b4:	4805      	ldr	r0, [pc, #20]	; (800a3cc <CDC_Init_FS+0x20>)
 800a3b6:	f7fb fdf9 	bl	8005fac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3ba:	4905      	ldr	r1, [pc, #20]	; (800a3d0 <CDC_Init_FS+0x24>)
 800a3bc:	4803      	ldr	r0, [pc, #12]	; (800a3cc <CDC_Init_FS+0x20>)
 800a3be:	f7fb fe17 	bl	8005ff0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20005d10 	.word	0x20005d10
 800a3cc:	20005234 	.word	0x20005234
 800a3d0:	20005510 	.word	0x20005510

0800a3d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	2b23      	cmp	r3, #35	; 0x23
 800a3f8:	d84a      	bhi.n	800a490 <CDC_Control_FS+0xac>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <CDC_Control_FS+0x1c>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a491 	.word	0x0800a491
 800a404:	0800a491 	.word	0x0800a491
 800a408:	0800a491 	.word	0x0800a491
 800a40c:	0800a491 	.word	0x0800a491
 800a410:	0800a491 	.word	0x0800a491
 800a414:	0800a491 	.word	0x0800a491
 800a418:	0800a491 	.word	0x0800a491
 800a41c:	0800a491 	.word	0x0800a491
 800a420:	0800a491 	.word	0x0800a491
 800a424:	0800a491 	.word	0x0800a491
 800a428:	0800a491 	.word	0x0800a491
 800a42c:	0800a491 	.word	0x0800a491
 800a430:	0800a491 	.word	0x0800a491
 800a434:	0800a491 	.word	0x0800a491
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a491 	.word	0x0800a491
 800a440:	0800a491 	.word	0x0800a491
 800a444:	0800a491 	.word	0x0800a491
 800a448:	0800a491 	.word	0x0800a491
 800a44c:	0800a491 	.word	0x0800a491
 800a450:	0800a491 	.word	0x0800a491
 800a454:	0800a491 	.word	0x0800a491
 800a458:	0800a491 	.word	0x0800a491
 800a45c:	0800a491 	.word	0x0800a491
 800a460:	0800a491 	.word	0x0800a491
 800a464:	0800a491 	.word	0x0800a491
 800a468:	0800a491 	.word	0x0800a491
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a491 	.word	0x0800a491
 800a474:	0800a491 	.word	0x0800a491
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a491 	.word	0x0800a491
 800a480:	0800a491 	.word	0x0800a491
 800a484:	0800a491 	.word	0x0800a491
 800a488:	0800a491 	.word	0x0800a491
 800a48c:	0800a491 	.word	0x0800a491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a490:	bf00      	nop
  }

  return (USBD_OK);
 800a492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4811      	ldr	r0, [pc, #68]	; (800a4f4 <CDC_Receive_FS+0x54>)
 800a4ae:	f7fb fd9f 	bl	8005ff0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4b2:	4810      	ldr	r0, [pc, #64]	; (800a4f4 <CDC_Receive_FS+0x54>)
 800a4b4:	f7fb fdfa 	bl	80060ac <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);			//These 3 lines clear our own rx buffer, copies USB buffer to our own rx buffer
 800a4be:	2240      	movs	r2, #64	; 0x40
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	480d      	ldr	r0, [pc, #52]	; (800a4f8 <CDC_Receive_FS+0x58>)
 800a4c4:	f000 fd2e 	bl	800af24 <memset>
  memcpy (buffer, Buf, len);			// and then clears the USB buffer.
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	480a      	ldr	r0, [pc, #40]	; (800a4f8 <CDC_Receive_FS+0x58>)
 800a4d0:	f000 fd1a 	bl	800af08 <memcpy>
  memset (Buf, '\0', len);
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	2100      	movs	r1, #0
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fd22 	bl	800af24 <memset>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	//Toggle indicator LED, to show RTOS communication / interrupt possibilities.
 800a4e0:	2180      	movs	r1, #128	; 0x80
 800a4e2:	4806      	ldr	r0, [pc, #24]	; (800a4fc <CDC_Receive_FS+0x5c>)
 800a4e4:	f7f6 fddf 	bl	80010a6 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 800a4e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20005234 	.word	0x20005234
 800a4f8:	20000194 	.word	0x20000194
 800a4fc:	40020400 	.word	0x40020400

0800a500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a510:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <CDC_Transmit_FS+0x48>)
 800a512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a522:	2301      	movs	r3, #1
 800a524:	e00b      	b.n	800a53e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a526:	887b      	ldrh	r3, [r7, #2]
 800a528:	461a      	mov	r2, r3
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4806      	ldr	r0, [pc, #24]	; (800a548 <CDC_Transmit_FS+0x48>)
 800a52e:	f7fb fd3d 	bl	8005fac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a532:	4805      	ldr	r0, [pc, #20]	; (800a548 <CDC_Transmit_FS+0x48>)
 800a534:	f7fb fd7a 	bl	800602c <USBD_CDC_TransmitPacket>
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20005234 	.word	0x20005234

0800a54c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4613      	mov	r3, r2
 800a558:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a562:	4618      	mov	r0, r3
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
	...

0800a570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2212      	movs	r2, #18
 800a580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a582:	4b03      	ldr	r3, [pc, #12]	; (800a590 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	200000d0 	.word	0x200000d0

0800a594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5a6:	4b03      	ldr	r3, [pc, #12]	; (800a5b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	200000f0 	.word	0x200000f0

0800a5b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	6039      	str	r1, [r7, #0]
 800a5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4907      	ldr	r1, [pc, #28]	; (800a5ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ce:	4808      	ldr	r0, [pc, #32]	; (800a5f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5d0:	f7fc ffde 	bl	8007590 <USBD_GetString>
 800a5d4:	e004      	b.n	800a5e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4904      	ldr	r1, [pc, #16]	; (800a5ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a5da:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5dc:	f7fc ffd8 	bl	8007590 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5e0:	4b02      	ldr	r3, [pc, #8]	; (800a5ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20006510 	.word	0x20006510
 800a5f0:	0800b238 	.word	0x0800b238

0800a5f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	4904      	ldr	r1, [pc, #16]	; (800a614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a604:	4804      	ldr	r0, [pc, #16]	; (800a618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a606:	f7fc ffc3 	bl	8007590 <USBD_GetString>
  return USBD_StrDesc;
 800a60a:	4b02      	ldr	r3, [pc, #8]	; (800a614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20006510 	.word	0x20006510
 800a618:	0800b24c 	.word	0x0800b24c

0800a61c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	221a      	movs	r2, #26
 800a62c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a62e:	f000 f855 	bl	800a6dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a632:	4b02      	ldr	r3, [pc, #8]	; (800a63c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	200000f4 	.word	0x200000f4

0800a640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d105      	bne.n	800a65e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4907      	ldr	r1, [pc, #28]	; (800a674 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a656:	4808      	ldr	r0, [pc, #32]	; (800a678 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a658:	f7fc ff9a 	bl	8007590 <USBD_GetString>
 800a65c:	e004      	b.n	800a668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	4904      	ldr	r1, [pc, #16]	; (800a674 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a662:	4805      	ldr	r0, [pc, #20]	; (800a678 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a664:	f7fc ff94 	bl	8007590 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a668:	4b02      	ldr	r3, [pc, #8]	; (800a674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20006510 	.word	0x20006510
 800a678:	0800b260 	.word	0x0800b260

0800a67c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d105      	bne.n	800a69a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4907      	ldr	r1, [pc, #28]	; (800a6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a692:	4808      	ldr	r0, [pc, #32]	; (800a6b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a694:	f7fc ff7c 	bl	8007590 <USBD_GetString>
 800a698:	e004      	b.n	800a6a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4904      	ldr	r1, [pc, #16]	; (800a6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6a0:	f7fc ff76 	bl	8007590 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20006510 	.word	0x20006510
 800a6b4:	0800b26c 	.word	0x0800b26c

0800a6b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	220c      	movs	r2, #12
 800a6c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a6ca:	4b03      	ldr	r3, [pc, #12]	; (800a6d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	200000e4 	.word	0x200000e4

0800a6dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <Get_SerialNum+0x44>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <Get_SerialNum+0x48>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <Get_SerialNum+0x4c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a702:	2208      	movs	r2, #8
 800a704:	4909      	ldr	r1, [pc, #36]	; (800a72c <Get_SerialNum+0x50>)
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 f814 	bl	800a734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a70c:	2204      	movs	r2, #4
 800a70e:	4908      	ldr	r1, [pc, #32]	; (800a730 <Get_SerialNum+0x54>)
 800a710:	68b8      	ldr	r0, [r7, #8]
 800a712:	f000 f80f 	bl	800a734 <IntToUnicode>
  }
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	1ff0f420 	.word	0x1ff0f420
 800a724:	1ff0f424 	.word	0x1ff0f424
 800a728:	1ff0f428 	.word	0x1ff0f428
 800a72c:	200000f6 	.word	0x200000f6
 800a730:	20000106 	.word	0x20000106

0800a734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]
 800a74a:	e027      	b.n	800a79c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	0f1b      	lsrs	r3, r3, #28
 800a750:	2b09      	cmp	r3, #9
 800a752:	d80b      	bhi.n	800a76c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	0f1b      	lsrs	r3, r3, #28
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	440b      	add	r3, r1
 800a764:	3230      	adds	r2, #48	; 0x30
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	e00a      	b.n	800a782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	0f1b      	lsrs	r3, r3, #28
 800a770:	b2da      	uxtb	r2, r3
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4619      	mov	r1, r3
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	440b      	add	r3, r1
 800a77c:	3237      	adds	r2, #55	; 0x37
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	3301      	adds	r3, #1
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	4413      	add	r3, r2
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	3301      	adds	r3, #1
 800a79a:	75fb      	strb	r3, [r7, #23]
 800a79c:	7dfa      	ldrb	r2, [r7, #23]
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d3d3      	bcc.n	800a74c <IntToUnicode+0x18>
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b0ae      	sub	sp, #184	; 0xb8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	609a      	str	r2, [r3, #8]
 800a7c8:	60da      	str	r2, [r3, #12]
 800a7ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7cc:	f107 0314 	add.w	r3, r7, #20
 800a7d0:	2290      	movs	r2, #144	; 0x90
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fba5 	bl	800af24 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7e2:	d151      	bne.n	800a888 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a7e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a7f0:	f107 0314 	add.w	r3, r7, #20
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7f8 fc6b 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a800:	f7f6 f80c 	bl	800081c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a804:	4b22      	ldr	r3, [pc, #136]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a808:	4a21      	ldr	r2, [pc, #132]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	6313      	str	r3, [r2, #48]	; 0x30
 800a810:	4b1f      	ldr	r3, [pc, #124]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a81c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a824:	2302      	movs	r3, #2
 800a826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a830:	2303      	movs	r3, #3
 800a832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a836:	230a      	movs	r3, #10
 800a838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a83c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a840:	4619      	mov	r1, r3
 800a842:	4814      	ldr	r0, [pc, #80]	; (800a894 <HAL_PCD_MspInit+0xe0>)
 800a844:	f7f6 fa6a 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a848:	4b11      	ldr	r3, [pc, #68]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84c:	4a10      	ldr	r2, [pc, #64]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a852:	6353      	str	r3, [r2, #52]	; 0x34
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a864:	4a0a      	ldr	r2, [pc, #40]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a86a:	6453      	str	r3, [r2, #68]	; 0x44
 800a86c:	4b08      	ldr	r3, [pc, #32]	; (800a890 <HAL_PCD_MspInit+0xdc>)
 800a86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a874:	60bb      	str	r3, [r7, #8]
 800a876:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a878:	2200      	movs	r2, #0
 800a87a:	2105      	movs	r1, #5
 800a87c:	2043      	movs	r0, #67	; 0x43
 800a87e:	f7f6 fa23 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a882:	2043      	movs	r0, #67	; 0x43
 800a884:	f7f6 fa3c 	bl	8000d00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a888:	bf00      	nop
 800a88a:	37b8      	adds	r7, #184	; 0xb8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40023800 	.word	0x40023800
 800a894:	40020000 	.word	0x40020000

0800a898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7fb fce5 	bl	800627e <USBD_LL_SetupStage>
}
 800a8b4:	bf00      	nop
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a8ce:	78fa      	ldrb	r2, [r7, #3]
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7fb fd1f 	bl	8006328 <USBD_LL_DataOutStage>
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a904:	78fa      	ldrb	r2, [r7, #3]
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4613      	mov	r3, r2
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	334c      	adds	r3, #76	; 0x4c
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	4619      	mov	r1, r3
 800a91a:	f7fb fdb8 	bl	800648e <USBD_LL_DataInStage>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a934:	4618      	mov	r0, r3
 800a936:	f7fb feec 	bl	8006712 <USBD_LL_SOF>
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a94a:	2301      	movs	r3, #1
 800a94c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a956:	2300      	movs	r3, #0
 800a958:	73fb      	strb	r3, [r7, #15]
 800a95a:	e008      	b.n	800a96e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d102      	bne.n	800a96a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a964:	2301      	movs	r3, #1
 800a966:	73fb      	strb	r3, [r7, #15]
 800a968:	e001      	b.n	800a96e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a96a:	f7f5 ff57 	bl	800081c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a974:	7bfa      	ldrb	r2, [r7, #15]
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fb fe8c 	bl	8006696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a984:	4618      	mov	r0, r3
 800a986:	f7fb fe34 	bl	80065f2 <USBD_LL_Reset>
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fb fe87 	bl	80066b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9c8:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <HAL_PCD_SuspendCallback+0x48>)
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	4a03      	ldr	r2, [pc, #12]	; (800a9dc <HAL_PCD_SuspendCallback+0x48>)
 800a9ce:	f043 0306 	orr.w	r3, r3, #6
 800a9d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9d4:	bf00      	nop
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	e000ed00 	.word	0xe000ed00

0800a9e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fb fe77 	bl	80066e2 <USBD_LL_Resume>
}
 800a9f4:	bf00      	nop
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa0e:	78fa      	ldrb	r2, [r7, #3]
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fb fecf 	bl	80067b6 <USBD_LL_IsoOUTIncomplete>
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa32:	78fa      	ldrb	r2, [r7, #3]
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fb fe8b 	bl	8006752 <USBD_LL_IsoINIncomplete>
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fb fee1 	bl	800681a <USBD_LL_DevConnected>
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fb fede 	bl	8006830 <USBD_LL_DevDisconnected>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d13c      	bne.n	800ab06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa8c:	4a20      	ldr	r2, [pc, #128]	; (800ab10 <USBD_LL_Init+0x94>)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a1e      	ldr	r2, [pc, #120]	; (800ab10 <USBD_LL_Init+0x94>)
 800aa98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa9c:	4b1c      	ldr	r3, [pc, #112]	; (800ab10 <USBD_LL_Init+0x94>)
 800aa9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aaa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aaa4:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <USBD_LL_Init+0x94>)
 800aaa6:	2206      	movs	r2, #6
 800aaa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aaaa:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <USBD_LL_Init+0x94>)
 800aaac:	2202      	movs	r2, #2
 800aaae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aab0:	4b17      	ldr	r3, [pc, #92]	; (800ab10 <USBD_LL_Init+0x94>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aab6:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <USBD_LL_Init+0x94>)
 800aab8:	2202      	movs	r2, #2
 800aaba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aabc:	4b14      	ldr	r3, [pc, #80]	; (800ab10 <USBD_LL_Init+0x94>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aac2:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <USBD_LL_Init+0x94>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aac8:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <USBD_LL_Init+0x94>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <USBD_LL_Init+0x94>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <USBD_LL_Init+0x94>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aada:	480d      	ldr	r0, [pc, #52]	; (800ab10 <USBD_LL_Init+0x94>)
 800aadc:	f7f6 fafd 	bl	80010da <HAL_PCD_Init>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aae6:	f7f5 fe99 	bl	800081c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aaea:	2180      	movs	r1, #128	; 0x80
 800aaec:	4808      	ldr	r0, [pc, #32]	; (800ab10 <USBD_LL_Init+0x94>)
 800aaee:	f7f7 fd78 	bl	80025e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aaf2:	2240      	movs	r2, #64	; 0x40
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4806      	ldr	r0, [pc, #24]	; (800ab10 <USBD_LL_Init+0x94>)
 800aaf8:	f7f7 fd2c 	bl	8002554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aafc:	2280      	movs	r2, #128	; 0x80
 800aafe:	2101      	movs	r1, #1
 800ab00:	4803      	ldr	r0, [pc, #12]	; (800ab10 <USBD_LL_Init+0x94>)
 800ab02:	f7f7 fd27 	bl	8002554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20006710 	.word	0x20006710

0800ab14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f6 fbf9 	bl	8001322 <HAL_PCD_Start>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f97e 	bl	800ae38 <USBD_Get_USB_Status>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	4608      	mov	r0, r1
 800ab54:	4611      	mov	r1, r2
 800ab56:	461a      	mov	r2, r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	70fb      	strb	r3, [r7, #3]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70bb      	strb	r3, [r7, #2]
 800ab60:	4613      	mov	r3, r2
 800ab62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab72:	78bb      	ldrb	r3, [r7, #2]
 800ab74:	883a      	ldrh	r2, [r7, #0]
 800ab76:	78f9      	ldrb	r1, [r7, #3]
 800ab78:	f7f7 f8e6 	bl	8001d48 <HAL_PCD_EP_Open>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f958 	bl	800ae38 <USBD_Get_USB_Status>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	4611      	mov	r1, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f7 f92f 	bl	8001e18 <HAL_PCD_EP_Close>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 f939 	bl	800ae38 <USBD_Get_USB_Status>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abca:	7bbb      	ldrb	r3, [r7, #14]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f7 fa07 	bl	8002006 <HAL_PCD_EP_SetStall>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f91a 	bl	800ae38 <USBD_Get_USB_Status>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac2c:	78fa      	ldrb	r2, [r7, #3]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7f7 fa4c 	bl	80020ce <HAL_PCD_EP_ClrStall>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f8fb 	bl	800ae38 <USBD_Get_USB_Status>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da0b      	bge.n	800ac84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac72:	68f9      	ldr	r1, [r7, #12]
 800ac74:	4613      	mov	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	333e      	adds	r3, #62	; 0x3e
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	e00b      	b.n	800ac9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	4413      	add	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	440b      	add	r3, r1
 800ac96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ac9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f7 f819 	bl	8001cfe <HAL_PCD_SetAddress>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 f8b0 	bl	800ae38 <USBD_Get_USB_Status>
 800acd8:	4603      	mov	r3, r0
 800acda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b086      	sub	sp, #24
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	460b      	mov	r3, r1
 800acf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad04:	7af9      	ldrb	r1, [r7, #11]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	f7f7 f932 	bl	8001f72 <HAL_PCD_EP_Transmit>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f88f 	bl	800ae38 <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	460b      	mov	r3, r1
 800ad36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad46:	7af9      	ldrb	r1, [r7, #11]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	f7f7 f8ae 	bl	8001eac <HAL_PCD_EP_Receive>
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 f86e 	bl	800ae38 <USBD_Get_USB_Status>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad60:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad7c:	78fa      	ldrb	r2, [r7, #3]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7f7 f8de 	bl	8001f42 <HAL_PCD_EP_GetRxCount>
 800ad86:	4603      	mov	r3, r0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <HAL_PCDEx_LPM_Callback+0x18>
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d01f      	beq.n	800ade6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ada6:	e03b      	b.n	800ae20 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d007      	beq.n	800adc0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800adb0:	f000 f83c 	bl	800ae2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adb4:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <HAL_PCDEx_LPM_Callback+0x98>)
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4a1b      	ldr	r2, [pc, #108]	; (800ae28 <HAL_PCDEx_LPM_Callback+0x98>)
 800adba:	f023 0306 	bic.w	r3, r3, #6
 800adbe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6812      	ldr	r2, [r2, #0]
 800adce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800add2:	f023 0301 	bic.w	r3, r3, #1
 800add6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fb fc7f 	bl	80066e2 <USBD_LL_Resume>
    break;
 800ade4:	e01c      	b.n	800ae20 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adf8:	f043 0301 	orr.w	r3, r3, #1
 800adfc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fb fc56 	bl	80066b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d005      	beq.n	800ae1e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	4a04      	ldr	r2, [pc, #16]	; (800ae28 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae18:	f043 0306 	orr.w	r3, r3, #6
 800ae1c:	6113      	str	r3, [r2, #16]
    break;
 800ae1e:	bf00      	nop
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	e000ed00 	.word	0xe000ed00

0800ae2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae30:	f7f5 fc12 	bl	8000658 <SystemClock_Config>
}
 800ae34:	bf00      	nop
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d817      	bhi.n	800ae7c <USBD_Get_USB_Status+0x44>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <USBD_Get_USB_Status+0x1c>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae6b 	.word	0x0800ae6b
 800ae5c:	0800ae71 	.word	0x0800ae71
 800ae60:	0800ae77 	.word	0x0800ae77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
    break;
 800ae68:	e00b      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6e:	e008      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae70:	2301      	movs	r3, #1
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	e005      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae76:	2303      	movs	r3, #3
 800ae78:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7a:	e002      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae80:	bf00      	nop
  }
  return usb_status;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <__errno>:
 800ae90:	4b01      	ldr	r3, [pc, #4]	; (800ae98 <__errno+0x8>)
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	20000110 	.word	0x20000110

0800ae9c <__libc_init_array>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	4d0d      	ldr	r5, [pc, #52]	; (800aed4 <__libc_init_array+0x38>)
 800aea0:	4c0d      	ldr	r4, [pc, #52]	; (800aed8 <__libc_init_array+0x3c>)
 800aea2:	1b64      	subs	r4, r4, r5
 800aea4:	10a4      	asrs	r4, r4, #2
 800aea6:	2600      	movs	r6, #0
 800aea8:	42a6      	cmp	r6, r4
 800aeaa:	d109      	bne.n	800aec0 <__libc_init_array+0x24>
 800aeac:	4d0b      	ldr	r5, [pc, #44]	; (800aedc <__libc_init_array+0x40>)
 800aeae:	4c0c      	ldr	r4, [pc, #48]	; (800aee0 <__libc_init_array+0x44>)
 800aeb0:	f000 f9a6 	bl	800b200 <_init>
 800aeb4:	1b64      	subs	r4, r4, r5
 800aeb6:	10a4      	asrs	r4, r4, #2
 800aeb8:	2600      	movs	r6, #0
 800aeba:	42a6      	cmp	r6, r4
 800aebc:	d105      	bne.n	800aeca <__libc_init_array+0x2e>
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec4:	4798      	blx	r3
 800aec6:	3601      	adds	r6, #1
 800aec8:	e7ee      	b.n	800aea8 <__libc_init_array+0xc>
 800aeca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aece:	4798      	blx	r3
 800aed0:	3601      	adds	r6, #1
 800aed2:	e7f2      	b.n	800aeba <__libc_init_array+0x1e>
 800aed4:	0800b320 	.word	0x0800b320
 800aed8:	0800b320 	.word	0x0800b320
 800aedc:	0800b320 	.word	0x0800b320
 800aee0:	0800b324 	.word	0x0800b324

0800aee4 <__retarget_lock_acquire_recursive>:
 800aee4:	4770      	bx	lr

0800aee6 <__retarget_lock_release_recursive>:
 800aee6:	4770      	bx	lr

0800aee8 <malloc>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <malloc+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 b88d 	b.w	800b00c <_malloc_r>
 800aef2:	bf00      	nop
 800aef4:	20000110 	.word	0x20000110

0800aef8 <free>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <free+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b819 	b.w	800af34 <_free_r>
 800af02:	bf00      	nop
 800af04:	20000110 	.word	0x20000110

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <memset>:
 800af24:	4402      	add	r2, r0
 800af26:	4603      	mov	r3, r0
 800af28:	4293      	cmp	r3, r2
 800af2a:	d100      	bne.n	800af2e <memset+0xa>
 800af2c:	4770      	bx	lr
 800af2e:	f803 1b01 	strb.w	r1, [r3], #1
 800af32:	e7f9      	b.n	800af28 <memset+0x4>

0800af34 <_free_r>:
 800af34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af36:	2900      	cmp	r1, #0
 800af38:	d044      	beq.n	800afc4 <_free_r+0x90>
 800af3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3e:	9001      	str	r0, [sp, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	f1a1 0404 	sub.w	r4, r1, #4
 800af46:	bfb8      	it	lt
 800af48:	18e4      	addlt	r4, r4, r3
 800af4a:	f000 f94d 	bl	800b1e8 <__malloc_lock>
 800af4e:	4a1e      	ldr	r2, [pc, #120]	; (800afc8 <_free_r+0x94>)
 800af50:	9801      	ldr	r0, [sp, #4]
 800af52:	6813      	ldr	r3, [r2, #0]
 800af54:	b933      	cbnz	r3, 800af64 <_free_r+0x30>
 800af56:	6063      	str	r3, [r4, #4]
 800af58:	6014      	str	r4, [r2, #0]
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af60:	f000 b948 	b.w	800b1f4 <__malloc_unlock>
 800af64:	42a3      	cmp	r3, r4
 800af66:	d908      	bls.n	800af7a <_free_r+0x46>
 800af68:	6825      	ldr	r5, [r4, #0]
 800af6a:	1961      	adds	r1, r4, r5
 800af6c:	428b      	cmp	r3, r1
 800af6e:	bf01      	itttt	eq
 800af70:	6819      	ldreq	r1, [r3, #0]
 800af72:	685b      	ldreq	r3, [r3, #4]
 800af74:	1949      	addeq	r1, r1, r5
 800af76:	6021      	streq	r1, [r4, #0]
 800af78:	e7ed      	b.n	800af56 <_free_r+0x22>
 800af7a:	461a      	mov	r2, r3
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	b10b      	cbz	r3, 800af84 <_free_r+0x50>
 800af80:	42a3      	cmp	r3, r4
 800af82:	d9fa      	bls.n	800af7a <_free_r+0x46>
 800af84:	6811      	ldr	r1, [r2, #0]
 800af86:	1855      	adds	r5, r2, r1
 800af88:	42a5      	cmp	r5, r4
 800af8a:	d10b      	bne.n	800afa4 <_free_r+0x70>
 800af8c:	6824      	ldr	r4, [r4, #0]
 800af8e:	4421      	add	r1, r4
 800af90:	1854      	adds	r4, r2, r1
 800af92:	42a3      	cmp	r3, r4
 800af94:	6011      	str	r1, [r2, #0]
 800af96:	d1e0      	bne.n	800af5a <_free_r+0x26>
 800af98:	681c      	ldr	r4, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	6053      	str	r3, [r2, #4]
 800af9e:	4421      	add	r1, r4
 800afa0:	6011      	str	r1, [r2, #0]
 800afa2:	e7da      	b.n	800af5a <_free_r+0x26>
 800afa4:	d902      	bls.n	800afac <_free_r+0x78>
 800afa6:	230c      	movs	r3, #12
 800afa8:	6003      	str	r3, [r0, #0]
 800afaa:	e7d6      	b.n	800af5a <_free_r+0x26>
 800afac:	6825      	ldr	r5, [r4, #0]
 800afae:	1961      	adds	r1, r4, r5
 800afb0:	428b      	cmp	r3, r1
 800afb2:	bf04      	itt	eq
 800afb4:	6819      	ldreq	r1, [r3, #0]
 800afb6:	685b      	ldreq	r3, [r3, #4]
 800afb8:	6063      	str	r3, [r4, #4]
 800afba:	bf04      	itt	eq
 800afbc:	1949      	addeq	r1, r1, r5
 800afbe:	6021      	streq	r1, [r4, #0]
 800afc0:	6054      	str	r4, [r2, #4]
 800afc2:	e7ca      	b.n	800af5a <_free_r+0x26>
 800afc4:	b003      	add	sp, #12
 800afc6:	bd30      	pop	{r4, r5, pc}
 800afc8:	20006c1c 	.word	0x20006c1c

0800afcc <sbrk_aligned>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	4e0e      	ldr	r6, [pc, #56]	; (800b008 <sbrk_aligned+0x3c>)
 800afd0:	460c      	mov	r4, r1
 800afd2:	6831      	ldr	r1, [r6, #0]
 800afd4:	4605      	mov	r5, r0
 800afd6:	b911      	cbnz	r1, 800afde <sbrk_aligned+0x12>
 800afd8:	f000 f8f6 	bl	800b1c8 <_sbrk_r>
 800afdc:	6030      	str	r0, [r6, #0]
 800afde:	4621      	mov	r1, r4
 800afe0:	4628      	mov	r0, r5
 800afe2:	f000 f8f1 	bl	800b1c8 <_sbrk_r>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d00a      	beq.n	800b000 <sbrk_aligned+0x34>
 800afea:	1cc4      	adds	r4, r0, #3
 800afec:	f024 0403 	bic.w	r4, r4, #3
 800aff0:	42a0      	cmp	r0, r4
 800aff2:	d007      	beq.n	800b004 <sbrk_aligned+0x38>
 800aff4:	1a21      	subs	r1, r4, r0
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f8e6 	bl	800b1c8 <_sbrk_r>
 800affc:	3001      	adds	r0, #1
 800affe:	d101      	bne.n	800b004 <sbrk_aligned+0x38>
 800b000:	f04f 34ff 	mov.w	r4, #4294967295
 800b004:	4620      	mov	r0, r4
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	20006c20 	.word	0x20006c20

0800b00c <_malloc_r>:
 800b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b010:	1ccd      	adds	r5, r1, #3
 800b012:	f025 0503 	bic.w	r5, r5, #3
 800b016:	3508      	adds	r5, #8
 800b018:	2d0c      	cmp	r5, #12
 800b01a:	bf38      	it	cc
 800b01c:	250c      	movcc	r5, #12
 800b01e:	2d00      	cmp	r5, #0
 800b020:	4607      	mov	r7, r0
 800b022:	db01      	blt.n	800b028 <_malloc_r+0x1c>
 800b024:	42a9      	cmp	r1, r5
 800b026:	d905      	bls.n	800b034 <_malloc_r+0x28>
 800b028:	230c      	movs	r3, #12
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	2600      	movs	r6, #0
 800b02e:	4630      	mov	r0, r6
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	4e2e      	ldr	r6, [pc, #184]	; (800b0f0 <_malloc_r+0xe4>)
 800b036:	f000 f8d7 	bl	800b1e8 <__malloc_lock>
 800b03a:	6833      	ldr	r3, [r6, #0]
 800b03c:	461c      	mov	r4, r3
 800b03e:	bb34      	cbnz	r4, 800b08e <_malloc_r+0x82>
 800b040:	4629      	mov	r1, r5
 800b042:	4638      	mov	r0, r7
 800b044:	f7ff ffc2 	bl	800afcc <sbrk_aligned>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	4604      	mov	r4, r0
 800b04c:	d14d      	bne.n	800b0ea <_malloc_r+0xde>
 800b04e:	6834      	ldr	r4, [r6, #0]
 800b050:	4626      	mov	r6, r4
 800b052:	2e00      	cmp	r6, #0
 800b054:	d140      	bne.n	800b0d8 <_malloc_r+0xcc>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	4631      	mov	r1, r6
 800b05a:	4638      	mov	r0, r7
 800b05c:	eb04 0803 	add.w	r8, r4, r3
 800b060:	f000 f8b2 	bl	800b1c8 <_sbrk_r>
 800b064:	4580      	cmp	r8, r0
 800b066:	d13a      	bne.n	800b0de <_malloc_r+0xd2>
 800b068:	6821      	ldr	r1, [r4, #0]
 800b06a:	3503      	adds	r5, #3
 800b06c:	1a6d      	subs	r5, r5, r1
 800b06e:	f025 0503 	bic.w	r5, r5, #3
 800b072:	3508      	adds	r5, #8
 800b074:	2d0c      	cmp	r5, #12
 800b076:	bf38      	it	cc
 800b078:	250c      	movcc	r5, #12
 800b07a:	4629      	mov	r1, r5
 800b07c:	4638      	mov	r0, r7
 800b07e:	f7ff ffa5 	bl	800afcc <sbrk_aligned>
 800b082:	3001      	adds	r0, #1
 800b084:	d02b      	beq.n	800b0de <_malloc_r+0xd2>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	442b      	add	r3, r5
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	e00e      	b.n	800b0ac <_malloc_r+0xa0>
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	1b52      	subs	r2, r2, r5
 800b092:	d41e      	bmi.n	800b0d2 <_malloc_r+0xc6>
 800b094:	2a0b      	cmp	r2, #11
 800b096:	d916      	bls.n	800b0c6 <_malloc_r+0xba>
 800b098:	1961      	adds	r1, r4, r5
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	6025      	str	r5, [r4, #0]
 800b09e:	bf18      	it	ne
 800b0a0:	6059      	strne	r1, [r3, #4]
 800b0a2:	6863      	ldr	r3, [r4, #4]
 800b0a4:	bf08      	it	eq
 800b0a6:	6031      	streq	r1, [r6, #0]
 800b0a8:	5162      	str	r2, [r4, r5]
 800b0aa:	604b      	str	r3, [r1, #4]
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f104 060b 	add.w	r6, r4, #11
 800b0b2:	f000 f89f 	bl	800b1f4 <__malloc_unlock>
 800b0b6:	f026 0607 	bic.w	r6, r6, #7
 800b0ba:	1d23      	adds	r3, r4, #4
 800b0bc:	1af2      	subs	r2, r6, r3
 800b0be:	d0b6      	beq.n	800b02e <_malloc_r+0x22>
 800b0c0:	1b9b      	subs	r3, r3, r6
 800b0c2:	50a3      	str	r3, [r4, r2]
 800b0c4:	e7b3      	b.n	800b02e <_malloc_r+0x22>
 800b0c6:	6862      	ldr	r2, [r4, #4]
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	bf0c      	ite	eq
 800b0cc:	6032      	streq	r2, [r6, #0]
 800b0ce:	605a      	strne	r2, [r3, #4]
 800b0d0:	e7ec      	b.n	800b0ac <_malloc_r+0xa0>
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	6864      	ldr	r4, [r4, #4]
 800b0d6:	e7b2      	b.n	800b03e <_malloc_r+0x32>
 800b0d8:	4634      	mov	r4, r6
 800b0da:	6876      	ldr	r6, [r6, #4]
 800b0dc:	e7b9      	b.n	800b052 <_malloc_r+0x46>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f000 f886 	bl	800b1f4 <__malloc_unlock>
 800b0e8:	e7a1      	b.n	800b02e <_malloc_r+0x22>
 800b0ea:	6025      	str	r5, [r4, #0]
 800b0ec:	e7de      	b.n	800b0ac <_malloc_r+0xa0>
 800b0ee:	bf00      	nop
 800b0f0:	20006c1c 	.word	0x20006c1c

0800b0f4 <cleanup_glue>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	6809      	ldr	r1, [r1, #0]
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	b109      	cbz	r1, 800b102 <cleanup_glue+0xe>
 800b0fe:	f7ff fff9 	bl	800b0f4 <cleanup_glue>
 800b102:	4621      	mov	r1, r4
 800b104:	4628      	mov	r0, r5
 800b106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10a:	f7ff bf13 	b.w	800af34 <_free_r>
	...

0800b110 <_reclaim_reent>:
 800b110:	4b2c      	ldr	r3, [pc, #176]	; (800b1c4 <_reclaim_reent+0xb4>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4283      	cmp	r3, r0
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	4604      	mov	r4, r0
 800b11a:	d051      	beq.n	800b1c0 <_reclaim_reent+0xb0>
 800b11c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b11e:	b143      	cbz	r3, 800b132 <_reclaim_reent+0x22>
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d14a      	bne.n	800b1bc <_reclaim_reent+0xac>
 800b126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b128:	6819      	ldr	r1, [r3, #0]
 800b12a:	b111      	cbz	r1, 800b132 <_reclaim_reent+0x22>
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7ff ff01 	bl	800af34 <_free_r>
 800b132:	6961      	ldr	r1, [r4, #20]
 800b134:	b111      	cbz	r1, 800b13c <_reclaim_reent+0x2c>
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff fefc 	bl	800af34 <_free_r>
 800b13c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b13e:	b111      	cbz	r1, 800b146 <_reclaim_reent+0x36>
 800b140:	4620      	mov	r0, r4
 800b142:	f7ff fef7 	bl	800af34 <_free_r>
 800b146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b148:	b111      	cbz	r1, 800b150 <_reclaim_reent+0x40>
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff fef2 	bl	800af34 <_free_r>
 800b150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b152:	b111      	cbz	r1, 800b15a <_reclaim_reent+0x4a>
 800b154:	4620      	mov	r0, r4
 800b156:	f7ff feed 	bl	800af34 <_free_r>
 800b15a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b15c:	b111      	cbz	r1, 800b164 <_reclaim_reent+0x54>
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff fee8 	bl	800af34 <_free_r>
 800b164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b166:	b111      	cbz	r1, 800b16e <_reclaim_reent+0x5e>
 800b168:	4620      	mov	r0, r4
 800b16a:	f7ff fee3 	bl	800af34 <_free_r>
 800b16e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b170:	b111      	cbz	r1, 800b178 <_reclaim_reent+0x68>
 800b172:	4620      	mov	r0, r4
 800b174:	f7ff fede 	bl	800af34 <_free_r>
 800b178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b17a:	b111      	cbz	r1, 800b182 <_reclaim_reent+0x72>
 800b17c:	4620      	mov	r0, r4
 800b17e:	f7ff fed9 	bl	800af34 <_free_r>
 800b182:	69a3      	ldr	r3, [r4, #24]
 800b184:	b1e3      	cbz	r3, 800b1c0 <_reclaim_reent+0xb0>
 800b186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b188:	4620      	mov	r0, r4
 800b18a:	4798      	blx	r3
 800b18c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b18e:	b1b9      	cbz	r1, 800b1c0 <_reclaim_reent+0xb0>
 800b190:	4620      	mov	r0, r4
 800b192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b196:	f7ff bfad 	b.w	800b0f4 <cleanup_glue>
 800b19a:	5949      	ldr	r1, [r1, r5]
 800b19c:	b941      	cbnz	r1, 800b1b0 <_reclaim_reent+0xa0>
 800b19e:	3504      	adds	r5, #4
 800b1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a2:	2d80      	cmp	r5, #128	; 0x80
 800b1a4:	68d9      	ldr	r1, [r3, #12]
 800b1a6:	d1f8      	bne.n	800b19a <_reclaim_reent+0x8a>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7ff fec3 	bl	800af34 <_free_r>
 800b1ae:	e7ba      	b.n	800b126 <_reclaim_reent+0x16>
 800b1b0:	680e      	ldr	r6, [r1, #0]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7ff febe 	bl	800af34 <_free_r>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	e7ef      	b.n	800b19c <_reclaim_reent+0x8c>
 800b1bc:	2500      	movs	r5, #0
 800b1be:	e7ef      	b.n	800b1a0 <_reclaim_reent+0x90>
 800b1c0:	bd70      	pop	{r4, r5, r6, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000110 	.word	0x20000110

0800b1c8 <_sbrk_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d06      	ldr	r5, [pc, #24]	; (800b1e4 <_sbrk_r+0x1c>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f5 fbf4 	bl	80009c0 <_sbrk>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_sbrk_r+0x1a>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_sbrk_r+0x1a>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20006c24 	.word	0x20006c24

0800b1e8 <__malloc_lock>:
 800b1e8:	4801      	ldr	r0, [pc, #4]	; (800b1f0 <__malloc_lock+0x8>)
 800b1ea:	f7ff be7b 	b.w	800aee4 <__retarget_lock_acquire_recursive>
 800b1ee:	bf00      	nop
 800b1f0:	20006c18 	.word	0x20006c18

0800b1f4 <__malloc_unlock>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	; (800b1fc <__malloc_unlock+0x8>)
 800b1f6:	f7ff be76 	b.w	800aee6 <__retarget_lock_release_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	20006c18 	.word	0x20006c18

0800b200 <_init>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	bf00      	nop
 800b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b206:	bc08      	pop	{r3}
 800b208:	469e      	mov	lr, r3
 800b20a:	4770      	bx	lr

0800b20c <_fini>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	bf00      	nop
 800b210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b212:	bc08      	pop	{r3}
 800b214:	469e      	mov	lr, r3
 800b216:	4770      	bx	lr

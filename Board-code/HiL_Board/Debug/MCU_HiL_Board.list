
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b0  080098b0  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b8  080098b8  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080098c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009934  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  080099d4  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004dac  200001b4  08009a74  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004f60  08009a74  00024f60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002819d  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004534  00000000  00000000  0004837f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e90  00000000  00000000  0004c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ce8  00000000  00000000  0004e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004b95  00000000  00000000  00050430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000237af  00000000  00000000  00054fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001132f0  00000000  00000000  00078774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018ba64  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008670  00000000  00000000  0018bab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	080097d8 	.word	0x080097d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	080097d8 	.word	0x080097d8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f001 f8eb 	bl	8001722 <HAL_Init>

  /* USER CODE BEGIN Init */
  aRxBuffer[0]=0x00;
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <main+0xb0>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <main+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <main+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <main+0xb0>)
 8000560:	2200      	movs	r2, #0
 8000562:	70da      	strb	r2, [r3, #3]
  aTxBuffer[0]=0x00;
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <main+0xb4>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]=0x00;
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <main+0xb4>)
 800056c:	2200      	movs	r2, #0
 800056e:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]=0x00;
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0xb4>)
 8000572:	2200      	movs	r2, #0
 8000574:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]=0x00;
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <main+0xb4>)
 8000578:	2200      	movs	r2, #0
 800057a:	70da      	strb	r2, [r3, #3]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f848 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fabc 	bl	8000afc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000584:	f000 f8b4 	bl	80006f0 <MX_CAN1_Init>
  MX_DAC_Init();
 8000588:	f000 f8e6 	bl	8000758 <MX_DAC_Init>
  MX_ETH_Init();
 800058c:	f000 f90e 	bl	80007ac <MX_ETH_Init>
  MX_I2C1_Init();
 8000590:	f000 f95a 	bl	8000848 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000594:	f000 f998 	bl	80008c8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000598:	f000 f9d0 	bl	800093c <MX_SPI3_Init>
  MX_TIM1_Init();
 800059c:	f000 fa08 	bl	80009b0 <MX_TIM1_Init>
  MX_UART7_Init();
 80005a0:	f000 fa7c 	bl	8000a9c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <main+0xb8>)
 80005a6:	f002 fadb 	bl	8002b60 <HAL_I2C_EnableListen_IT>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x70>
    {
      /* Transfer error in reception process */
      Error_Handler();
 80005b0:	f000 fc8e 	bl	8000ed0 <Error_Handler>
    }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f006 fa1c 	bl	80069f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0xbc>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4811      	ldr	r0, [pc, #68]	; (8000604 <main+0xc0>)
 80005be:	f006 fa81 	bl	8006ac4 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <main+0xc4>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c8:	f006 fa46 	bl	8006a58 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {

            if (Xfer_Complete ==1)
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0xc8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d1fb      	bne.n	80005cc <main+0x88>
            {
             HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f001 f8d1 	bl	800177c <HAL_Delay>
              /*##- Put I2C peripheral in listen mode process ###########################*/
          if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <main+0xb8>)
 80005dc:	f002 fac0 	bl	8002b60 <HAL_I2C_EnableListen_IT>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0xa6>
          {
            /* Transfer error in reception process */
            Error_Handler();
 80005e6:	f000 fc73 	bl	8000ed0 <Error_Handler>
          }
            Xfer_Complete =0;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <main+0xc8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
            if (Xfer_Complete ==1)
 80005f0:	e7ec      	b.n	80005cc <main+0x88>
 80005f2:	bf00      	nop
 80005f4:	200001dc 	.word	0x200001dc
 80005f8:	200001d8 	.word	0x200001d8
 80005fc:	20000304 	.word	0x20000304
 8000600:	08009814 	.word	0x08009814
 8000604:	08000e9d 	.word	0x08000e9d
 8000608:	200004f4 	.word	0x200004f4
 800060c:	200001d4 	.word	0x200001d4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f009 f810 	bl	8009644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <SystemClock_Config+0xd8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <SystemClock_Config+0xd8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xdc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <SystemClock_Config+0xdc>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xdc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000680:	2360      	movs	r3, #96	; 0x60
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fc77 	bl	8003f88 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 fc16 	bl	8000ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a4:	f003 fc20 	bl	8003ee8 <HAL_PWREx_EnableOverDrive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ae:	f000 fc0f 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2103      	movs	r1, #3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 ff08 	bl	80044e4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006da:	f000 fbf9 	bl	8000ed0 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_CAN1_Init+0x60>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_CAN1_Init+0x64>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_CAN1_Init+0x60>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_CAN1_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_CAN1_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_CAN1_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_CAN1_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_CAN1_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_CAN1_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_CAN1_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_CAN1_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_CAN1_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_CAN1_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_CAN1_Init+0x60>)
 800073e:	f001 f841 	bl	80017c4 <HAL_CAN_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 fbc2 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000218 	.word	0x20000218
 8000754:	40006400 	.word	0x40006400

08000758 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_DAC_Init+0x4c>)
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DAC_Init+0x50>)
 800076a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_DAC_Init+0x4c>)
 800076e:	f001 fa07 	bl	8001b80 <HAL_DAC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000778:	f000 fbaa 	bl	8000ed0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_DAC_Init+0x4c>)
 800078c:	f001 fa7e 	bl	8001c8c <HAL_DAC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000796:	f000 fb9b 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000240 	.word	0x20000240
 80007a8:	40007400 	.word	0x40007400

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ETH_Init+0x84>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <MX_ETH_Init+0x88>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_ETH_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_ETH_Init+0x8c>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_ETH_Init+0x8c>)
 80007c4:	22e1      	movs	r2, #225	; 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ETH_Init+0x84>)
 80007dc:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_ETH_Init+0x8c>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ETH_Init+0x84>)
 80007e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ETH_Init+0x84>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <MX_ETH_Init+0x90>)
 80007ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_ETH_Init+0x84>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_ETH_Init+0x94>)
 80007f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_ETH_Init+0x84>)
 80007f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ETH_Init+0x84>)
 80007fe:	f001 facf 	bl	8001da0 <HAL_ETH_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 fb62 	bl	8000ed0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080c:	2238      	movs	r2, #56	; 0x38
 800080e:	2100      	movs	r1, #0
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_ETH_Init+0x98>)
 8000812:	f008 ff17 	bl	8009644 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_ETH_Init+0x98>)
 8000818:	2221      	movs	r2, #33	; 0x21
 800081a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_ETH_Init+0x98>)
 800081e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000822:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_ETH_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000254 	.word	0x20000254
 8000834:	40028000 	.word	0x40028000
 8000838:	200004f8 	.word	0x200004f8
 800083c:	20000114 	.word	0x20000114
 8000840:	20000074 	.word	0x20000074
 8000844:	200001e0 	.word	0x200001e0

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 ff78 	bl	8002778 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fb1f 	bl	8000ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f003 fa8f 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 fb16 	bl	8000ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f003 fad1 	bl	8003e4e <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fb0d 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000304 	.word	0x20000304
 80008c0:	40005400 	.word	0x40005400
 80008c4:	20303e5d 	.word	0x20303e5d

080008c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <MX_SPI1_Init+0x70>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_SPI1_Init+0x6c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI1_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI1_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI1_Init+0x6c>)
 8000910:	2207      	movs	r2, #7
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI1_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI1_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI1_Init+0x6c>)
 8000922:	f004 fc5f 	bl	80051e4 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 800092c:	f000 fad0 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000358 	.word	0x20000358
 8000938:	40013000 	.word	0x40013000

0800093c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <MX_SPI3_Init+0x70>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI3_Init+0x6c>)
 800094e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000952:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000956:	f44f 7240 	mov.w	r2, #768	; 0x300
 800095a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_SPI3_Init+0x6c>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI3_Init+0x6c>)
 800096a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_SPI3_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000984:	2207      	movs	r2, #7
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_SPI3_Init+0x6c>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_SPI3_Init+0x6c>)
 8000996:	f004 fc25 	bl	80051e4 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 80009a0:	f000 fa96 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200003bc 	.word	0x200003bc
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <MX_TIM1_Init+0xe8>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_TIM1_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a0a:	f004 fc96 	bl	800533a <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a14:	f000 fa5c 	bl	8000ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	4619      	mov	r1, r3
 8000a24:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a26:	f004 ff73 	bl	8005910 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a30:	f000 fa4e 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a36:	f004 fd4f 	bl	80054d8 <HAL_TIM_IC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a40:	f000 fa46 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a58:	f005 fab0 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a62:	f000 fa35 	bl	8000ed0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_TIM1_Init+0xe4>)
 8000a7e:	f004 feab 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a88:	f000 fa22 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000420 	.word	0x20000420
 8000a98:	40010000 	.word	0x40010000

08000a9c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_UART7_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_UART7_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_UART7_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_UART7_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_UART7_Init+0x58>)
 8000ae0:	f005 fb18 	bl	8006114 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f9f1 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000046c 	.word	0x2000046c
 8000af8:	40007800 	.word	0x40007800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b12:	4b8f      	ldr	r3, [pc, #572]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a8e      	ldr	r2, [pc, #568]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b89      	ldr	r3, [pc, #548]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a88      	ldr	r2, [pc, #544]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b86      	ldr	r3, [pc, #536]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b42:	4b83      	ldr	r3, [pc, #524]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a82      	ldr	r2, [pc, #520]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b7d      	ldr	r3, [pc, #500]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a7c      	ldr	r2, [pc, #496]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b77      	ldr	r3, [pc, #476]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a76      	ldr	r2, [pc, #472]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b74      	ldr	r3, [pc, #464]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a70      	ldr	r2, [pc, #448]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b6e      	ldr	r3, [pc, #440]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a6a      	ldr	r2, [pc, #424]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	4865      	ldr	r0, [pc, #404]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000bc0:	f001 fdc0 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000bca:	4863      	ldr	r0, [pc, #396]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000bcc:	f001 fdba 	bl	8002744 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	210c      	movs	r1, #12
 8000bd4:	4861      	ldr	r0, [pc, #388]	; (8000d5c <MX_GPIO_Init+0x260>)
 8000bd6:	f001 fdb5 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000be0:	485f      	ldr	r0, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000be2:	f001 fdaf 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	485d      	ldr	r0, [pc, #372]	; (8000d64 <MX_GPIO_Init+0x268>)
 8000bee:	f001 fda9 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2174      	movs	r1, #116	; 0x74
 8000bf6:	485c      	ldr	r0, [pc, #368]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bf8:	f001 fda4 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000bfc:	f241 0308 	movw	r3, #4104	; 0x1008
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4856      	ldr	r0, [pc, #344]	; (8000d6c <MX_GPIO_Init+0x270>)
 8000c12:	f001 fbeb 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000c16:	f248 0305 	movw	r3, #32773	; 0x8005
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484e      	ldr	r0, [pc, #312]	; (8000d64 <MX_GPIO_Init+0x268>)
 8000c2c:	f001 fbde 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4843      	ldr	r0, [pc, #268]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000c48:	f001 fbd0 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4840      	ldr	r0, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000c60:	f001 fbc4 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4838      	ldr	r0, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000c78:	f001 fbb8 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000c7c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c82:	2311      	movs	r3, #17
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4830      	ldr	r0, [pc, #192]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000c96:	f001 fba9 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c9e:	2311      	movs	r3, #17
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482a      	ldr	r0, [pc, #168]	; (8000d5c <MX_GPIO_Init+0x260>)
 8000cb2:	f001 fb9b 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000cb6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000cd0:	f001 fb8c 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	481d      	ldr	r0, [pc, #116]	; (8000d64 <MX_GPIO_Init+0x268>)
 8000cee:	f001 fb7d 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4817      	ldr	r0, [pc, #92]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000d0a:	f001 fb6f 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000d0e:	2370      	movs	r3, #112	; 0x70
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d12:	2311      	movs	r3, #17
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000d26:	f001 fb61 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000d42:	f001 fb53 	bl	80023ec <HAL_GPIO_Init>

}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	; 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021400 	.word	0x40021400
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020c00 	.word	0x40020c00
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
  aTxBuffer[0]++;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000d88:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]++;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000d94:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]++;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000d98:	789b      	ldrb	r3, [r3, #2]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000da0:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]++;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000dac:	70da      	strb	r2, [r3, #3]

}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200001d4 	.word	0x200001d4
 8000dc0:	200001d8 	.word	0x200001d8

08000dc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;/*
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

  }
  else if (aRxBuffer[1] == send_hum_h || aRxBuffer[1] == send_hum_nh){

  }*/
  aRxBuffer[0]=0x00;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	70da      	strb	r2, [r3, #3]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200001d4 	.word	0x200001d4
 8000dfc:	200001dc 	.word	0x200001dc

08000e00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_I2C_AddrCallback+0x58>)
 8000e14:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_I2C_AddrCallback+0x58>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00c      	beq.n	8000e38 <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e22:	2204      	movs	r2, #4
 8000e24:	490d      	ldr	r1, [pc, #52]	; (8000e5c <HAL_I2C_AddrCallback+0x5c>)
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <HAL_I2C_AddrCallback+0x60>)
 8000e28:	f001 fd36 	bl	8002898 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00e      	beq.n	8000e50 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 8000e32:	f000 f84d 	bl	8000ed0 <Error_Handler>
    Error_Handler();
  }

  }

}
 8000e36:	e00b      	b.n	8000e50 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4909      	ldr	r1, [pc, #36]	; (8000e64 <HAL_I2C_AddrCallback+0x64>)
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <HAL_I2C_AddrCallback+0x60>)
 8000e42:	f001 fddb 	bl	80029fc <HAL_I2C_Slave_Seq_Receive_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 8000e4c:	f000 f840 	bl	8000ed0 <Error_Handler>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001d0 	.word	0x200001d0
 8000e5c:	200001d8 	.word	0x200001d8
 8000e60:	20000304 	.word	0x20000304
 8000e64:	200001dc 	.word	0x200001dc

08000e68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f001 ff38 	bl	8002cfa <HAL_I2C_GetError>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d001      	beq.n	8000e94 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8000e90:	f000 f81e 	bl	8000ed0 <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f005 feb3 	bl	8006c10 <osDelay>
 8000eaa:	e7fb      	b.n	8000ea4 <StartDefaultTask+0x8>

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 fc3d 	bl	800173c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40001000 	.word	0x40001000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210f      	movs	r1, #15
 8000f16:	f06f 0001 	mvn.w	r0, #1
 8000f1a:	f000 fe07 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <HAL_CAN_MspInit+0x7c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d127      	bne.n	8000f9e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_CAN_MspInit+0x80>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8e:	2309      	movs	r3, #9
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_CAN_MspInit+0x84>)
 8000f9a:	f001 fa27 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40006400 	.word	0x40006400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_DAC_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_DAC_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8001006:	2310      	movs	r3, #16
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_DAC_MspInit+0x8c>)
 800101a:	f001 f9e7 	bl	80023ec <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	210f      	movs	r1, #15
 8001022:	2036      	movs	r0, #54	; 0x36
 8001024:	f000 fd82 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001028:	2036      	movs	r0, #54	; 0x36
 800102a:	f000 fd9b 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40007400 	.word	0x40007400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a4e      	ldr	r2, [pc, #312]	; (800119c <HAL_ETH_MspInit+0x158>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 8096 	bne.w	8001194 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800109e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a2e      	ldr	r2, [pc, #184]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001110:	2332      	movs	r3, #50	; 0x32
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001120:	230b      	movs	r3, #11
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_ETH_MspInit+0x160>)
 800112c:	f001 f95e 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001130:	2386      	movs	r3, #134	; 0x86
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_ETH_MspInit+0x164>)
 800114c:	f001 f94e 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <HAL_ETH_MspInit+0x168>)
 800116e:	f001 f93d 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001184:	230b      	movs	r3, #11
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <HAL_ETH_MspInit+0x16c>)
 8001190:	f001 f92c 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40028000 	.word	0x40028000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40021800 	.word	0x40021800

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	; 0xb8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2290      	movs	r2, #144	; 0x90
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f008 fa35 	bl	8009644 <memset>
  if(hi2c->Instance==I2C1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <HAL_I2C_MspInit+0xd4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d14c      	bne.n	800127e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fbce 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fe67 	bl	8000ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_I2C_MspInit+0xd8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_I2C_MspInit+0xd8>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_I2C_MspInit+0xd8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 800121a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	2312      	movs	r3, #18
 8001224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001234:	2304      	movs	r3, #4
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800123e:	4619      	mov	r1, r3
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <HAL_I2C_MspInit+0xdc>)
 8001242:	f001 f8d3 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_I2C_MspInit+0xd8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_I2C_MspInit+0xd8>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_I2C_MspInit+0xd8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2105      	movs	r1, #5
 8001262:	201f      	movs	r0, #31
 8001264:	f000 fc62 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001268:	201f      	movs	r0, #31
 800126a:	f000 fc7b 	bl	8001b64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2105      	movs	r1, #5
 8001272:	2020      	movs	r0, #32
 8001274:	f000 fc5a 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001278:	2020      	movs	r0, #32
 800127a:	f000 fc73 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	37b8      	adds	r7, #184	; 0xb8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40005400 	.word	0x40005400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400

08001294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a4a      	ldr	r2, [pc, #296]	; (80013dc <HAL_SPI_MspInit+0x148>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d144      	bne.n	8001340 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a43      	ldr	r2, [pc, #268]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130e:	2305      	movs	r3, #5
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4832      	ldr	r0, [pc, #200]	; (80013e4 <HAL_SPI_MspInit+0x150>)
 800131a:	f001 f867 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800131e:	2308      	movs	r3, #8
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132e:	2305      	movs	r3, #5
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <HAL_SPI_MspInit+0x154>)
 800133a:	f001 f857 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800133e:	e049      	b.n	80013d4 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a29      	ldr	r2, [pc, #164]	; (80013ec <HAL_SPI_MspInit+0x158>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d144      	bne.n	80013d4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_SPI_MspInit+0x14c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001392:	2304      	movs	r3, #4
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013a2:	2307      	movs	r3, #7
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	; (80013e8 <HAL_SPI_MspInit+0x154>)
 80013ae:	f001 f81d 	bl	80023ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c4:	2306      	movs	r3, #6
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <HAL_SPI_MspInit+0x15c>)
 80013d0:	f001 f80c 	bl	80023ec <HAL_GPIO_Init>
}
 80013d4:	bf00      	nop
 80013d6:	3738      	adds	r7, #56	; 0x38
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40003c00 	.word	0x40003c00
 80013f0:	40020800 	.word	0x40020800

080013f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_TIM_Base_MspInit+0x7c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d128      	bne.n	8001468 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_TIM_Base_MspInit+0x80>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001458:	2301      	movs	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_TIM_Base_MspInit+0x84>)
 8001464:	f000 ffc2 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40010000 	.word	0x40010000
 8001474:	40023800 	.word	0x40023800
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ae      	sub	sp, #184	; 0xb8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2290      	movs	r2, #144	; 0x90
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f008 f8d1 	bl	8009644 <memset>
  if(huart->Instance==UART7)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d13c      	bne.n	8001526 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fa6a 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014c6:	f7ff fd03 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80014fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001514:	2308      	movs	r3, #8
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_UART_MspInit+0xbc>)
 8001522:	f000 ff63 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	37b8      	adds	r7, #184	; 0xb8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40007800 	.word	0x40007800
 8001534:	40023800 	.word	0x40023800
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_InitTick+0xe0>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_InitTick+0xe0>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_InitTick+0xe0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001564:	f107 0210 	add.w	r2, r7, #16
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f003 f9de 	bl	8004930 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157e:	f003 f9af 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8001582:	6378      	str	r0, [r7, #52]	; 0x34
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001586:	f003 f9ab 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 800158a:	4603      	mov	r3, r0
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_InitTick+0xe4>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3b01      	subs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_InitTick+0xe8>)
 80015a0:	4a21      	ldr	r2, [pc, #132]	; (8001628 <HAL_InitTick+0xec>)
 80015a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_InitTick+0xe8>)
 80015a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_InitTick+0xe8>)
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_InitTick+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_InitTick+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_InitTick+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015c4:	4817      	ldr	r0, [pc, #92]	; (8001624 <HAL_InitTick+0xe8>)
 80015c6:	f003 feb8 	bl	800533a <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11b      	bne.n	8001610 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <HAL_InitTick+0xe8>)
 80015da:	f003 ff05 	bl	80053e8 <HAL_TIM_Base_Start_IT>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ec:	2036      	movs	r0, #54	; 0x36
 80015ee:	f000 fab9 	bl	8001b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d808      	bhi.n	800160a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2036      	movs	r0, #54	; 0x36
 80015fe:	f000 fa95 	bl	8001b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_InitTick+0xf0>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e002      	b.n	8001610 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001610:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001614:	4618      	mov	r0, r3
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	431bde83 	.word	0x431bde83
 8001624:	20000500 	.word	0x20000500
 8001628:	40001000 	.word	0x40001000
 800162c:	20000004 	.word	0x20000004

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <I2C1_EV_IRQHandler+0x10>)
 8001662:	f001 fa9d 	bl	8002ba0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000304 	.word	0x20000304

08001670 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <I2C1_ER_IRQHandler+0x10>)
 8001676:	f001 faad 	bl	8002bd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000304 	.word	0x20000304

08001684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <TIM6_DAC_IRQHandler+0x20>)
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <TIM6_DAC_IRQHandler+0x20>)
 8001694:	f000 fa96 	bl	8001bc4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <TIM6_DAC_IRQHandler+0x24>)
 800169a:	f003 ff7e 	bl	800559a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000240 	.word	0x20000240
 80016a8:	20000500 	.word	0x20000500

080016ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ec:	4c0b      	ldr	r4, [pc, #44]	; (800171c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd7 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f007 ff6d 	bl	80095dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7fe ff1f 	bl	8000544 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001714:	080098c0 	.word	0x080098c0
  ldr r2, =_sbss
 8001718:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 800171c:	20004f60 	.word	0x20004f60

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>

08001722 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f9f5 	bl	8001b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172c:	200f      	movs	r0, #15
 800172e:	f7ff ff05 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001732:	f7ff fbd3 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	2000054c 	.word	0x2000054c

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000054c 	.word	0x2000054c

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008

080017c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0ed      	b.n	80019b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fba2 	bl	8000f2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f8:	f7ff ffb4 	bl	8001764 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017fe:	e012      	b.n	8001826 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001800:	f7ff ffb0 	bl	8001764 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b0a      	cmp	r3, #10
 800180c:	d90b      	bls.n	8001826 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2205      	movs	r2, #5
 800181e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0c5      	b.n	80019b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0e5      	beq.n	8001800 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0202 	bic.w	r2, r2, #2
 8001842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001844:	f7ff ff8e 	bl	8001764 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800184a:	e012      	b.n	8001872 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184c:	f7ff ff8a 	bl	8001764 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d90b      	bls.n	8001872 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2205      	movs	r2, #5
 800186a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e09f      	b.n	80019b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e5      	bne.n	800184c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e1b      	ldrb	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e007      	b.n	80018aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7e5b      	ldrb	r3, [r3, #25]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e007      	b.n	80018d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7e9b      	ldrb	r3, [r3, #26]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0220 	bic.w	r2, r2, #32
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7edb      	ldrb	r3, [r3, #27]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0210 	bic.w	r2, r2, #16
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e007      	b.n	8001928 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0210 	orr.w	r2, r2, #16
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7f1b      	ldrb	r3, [r3, #28]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d108      	bne.n	8001942 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0208 	orr.w	r2, r2, #8
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e007      	b.n	8001952 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0208 	bic.w	r2, r2, #8
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f5b      	ldrb	r3, [r3, #29]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d108      	bne.n	800196c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0204 	orr.w	r2, r2, #4
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e007      	b.n	800197c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0204 	bic.w	r2, r2, #4
 800197a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	ea42 0103 	orr.w	r1, r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	05fa0000 	.word	0x05fa0000

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff4c 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3e:	f7ff ff61 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f7ff ffb1 	bl	8001ab0 <NVIC_EncodePriority>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff80 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff54 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e014      	b.n	8001bbc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	791b      	ldrb	r3, [r3, #4]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa06 	bl	8000fb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bda:	d120      	bne.n	8001c1e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bea:	d118      	bne.n	8001c1e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c16:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f82d 	bl	8001c78 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c2c:	d120      	bne.n	8001c70 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c3c:	d118      	bne.n	8001c70 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f043 0202 	orr.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001c68:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f85d 	bl	8001d2a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	795b      	ldrb	r3, [r3, #5]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DAC_ConfigChannel+0x18>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e03c      	b.n	8001d1e <HAL_DAC_ConfigChannel+0x92>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2202      	movs	r2, #2
 8001cae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	22c0      	movs	r2, #192	; 0xc0
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00c      	b.n	8001d76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e06a      	b.n	8001e88 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2223      	movs	r2, #35	; 0x23
 8001dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff f93d 	bl	8001044 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_ETH_Init+0xf0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_ETH_Init+0xf0>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_ETH_Init+0xf0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_ETH_Init+0xf4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_ETH_Init+0xf4>)
 8001de8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_ETH_Init+0xf4>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_ETH_Init+0xf4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_ETH_Init+0xf4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e18:	f7ff fca4 	bl	8001764 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e1e:	e011      	b.n	8001e44 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e20:	f7ff fca0 	bl	8001764 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e2e:	d909      	bls.n	8001e44 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2204      	movs	r2, #4
 8001e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	22e0      	movs	r2, #224	; 0xe0
 8001e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e021      	b.n	8001e88 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e4      	bne.n	8001e20 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f958 	bl	800210c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f9ff 	bl	8002260 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa55 	bl	8002312 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f9bd 	bl	80021f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2210      	movs	r2, #16
 8001e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40013800 	.word	0x40013800

08001e98 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <ETH_SetMACConfig+0x15c>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7c1b      	ldrb	r3, [r3, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <ETH_SetMACConfig+0x28>
 8001eba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ebe:	e000      	b.n	8001ec2 <ETH_SetMACConfig+0x2a>
 8001ec0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7c5b      	ldrb	r3, [r3, #17]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <ETH_SetMACConfig+0x38>
 8001eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ece:	e000      	b.n	8001ed2 <ETH_SetMACConfig+0x3a>
 8001ed0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ed2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ed8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7fdb      	ldrb	r3, [r3, #31]
 8001ede:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	7f92      	ldrb	r2, [r2, #30]
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	d102      	bne.n	8001ef6 <ETH_SetMACConfig+0x5e>
 8001ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef4:	e000      	b.n	8001ef8 <ETH_SetMACConfig+0x60>
 8001ef6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ef8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7f1b      	ldrb	r3, [r3, #28]
 8001efe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f00:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	791b      	ldrb	r3, [r3, #4]
 8001f0c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d102      	bne.n	8001f20 <ETH_SetMACConfig+0x88>
 8001f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1e:	e000      	b.n	8001f22 <ETH_SetMACConfig+0x8a>
 8001f20:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	7bdb      	ldrb	r3, [r3, #15]
 8001f28:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f2a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f38:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff fc12 	bl	800177c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f76:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d101      	bne.n	8001f86 <ETH_SetMACConfig+0xee>
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	e000      	b.n	8001f88 <ETH_SetMACConfig+0xf0>
 8001f86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f88:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d101      	bne.n	8001f9e <ETH_SetMACConfig+0x106>
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	e000      	b.n	8001fa0 <ETH_SetMACConfig+0x108>
 8001f9e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fa0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fa8:	2a01      	cmp	r2, #1
 8001faa:	d101      	bne.n	8001fb0 <ETH_SetMACConfig+0x118>
 8001fac:	2204      	movs	r2, #4
 8001fae:	e000      	b.n	8001fb2 <ETH_SetMACConfig+0x11a>
 8001fb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fba:	2a01      	cmp	r2, #1
 8001fbc:	d101      	bne.n	8001fc2 <ETH_SetMACConfig+0x12a>
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	e000      	b.n	8001fc4 <ETH_SetMACConfig+0x12c>
 8001fc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff fbcd 	bl	800177c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	ff20810f 	.word	0xff20810f

08001ff8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <ETH_SetDMAConfig+0x110>)
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7b1b      	ldrb	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <ETH_SetDMAConfig+0x2c>
 800201e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002022:	e000      	b.n	8002026 <ETH_SetDMAConfig+0x2e>
 8002024:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7b5b      	ldrb	r3, [r3, #13]
 800202a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800202c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	7f52      	ldrb	r2, [r2, #29]
 8002032:	2a00      	cmp	r2, #0
 8002034:	d102      	bne.n	800203c <ETH_SetDMAConfig+0x44>
 8002036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800203a:	e000      	b.n	800203e <ETH_SetDMAConfig+0x46>
 800203c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800203e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	7b9b      	ldrb	r3, [r3, #14]
 8002044:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002046:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800204c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7f1b      	ldrb	r3, [r3, #28]
 8002052:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	7f9b      	ldrb	r3, [r3, #30]
 800205a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800205c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002062:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800206c:	4313      	orrs	r3, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff fb74 	bl	800177c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	461a      	mov	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	791b      	ldrb	r3, [r3, #4]
 80020a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fb45 	bl	800177c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	f8de3f23 	.word	0xf8de3f23

0800210c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a6      	sub	sp, #152	; 0x98
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002120:	2300      	movs	r3, #0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002148:	2300      	movs	r3, #0
 800214a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002152:	2300      	movs	r3, #0
 8002154:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800216e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fe86 	bl	8001e98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800218c:	2301      	movs	r3, #1
 800218e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002190:	2301      	movs	r3, #1
 8002192:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021b8:	2301      	movs	r3, #1
 80021ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ff08 	bl	8001ff8 <ETH_SetDMAConfig>
}
 80021e8:	bf00      	nop
 80021ea:	3798      	adds	r7, #152	; 0x98
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3305      	adds	r3, #5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	3204      	adds	r2, #4
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <ETH_MACAddressConfig+0x68>)
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3303      	adds	r3, #3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	061a      	lsls	r2, r3, #24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3302      	adds	r3, #2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3301      	adds	r3, #1
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	4313      	orrs	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <ETH_MACAddressConfig+0x6c>)
 8002242:	4413      	add	r3, r2
 8002244:	461a      	mov	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40028040 	.word	0x40028040
 800225c:	40028044 	.word	0x40028044

08002260 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e03e      	b.n	80022ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	3206      	adds	r2, #6
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d80c      	bhi.n	80022d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	e004      	b.n	80022da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9bd      	bls.n	800226e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e046      	b.n	80023ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800235c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002364:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	3212      	adds	r2, #18
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d80c      	bhi.n	800239e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e004      	b.n	80023a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d9b5      	bls.n	8002320 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e175      	b.n	80026f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 8164 	bne.w	80026f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_GPIO_Init+0x56>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80be 	beq.w	80026f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a65      	ldr	r2, [pc, #404]	; (8002710 <HAL_GPIO_Init+0x324>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800258e:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_GPIO_Init+0x328>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_GPIO_Init+0x32c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d037      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a57      	ldr	r2, [pc, #348]	; (800271c <HAL_GPIO_Init+0x330>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d031      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a56      	ldr	r2, [pc, #344]	; (8002720 <HAL_GPIO_Init+0x334>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_GPIO_Init+0x338>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x33c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a53      	ldr	r2, [pc, #332]	; (800272c <HAL_GPIO_Init+0x340>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_GPIO_Init+0x344>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_GPIO_Init+0x348>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_GPIO_Init+0x34c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	; (800273c <HAL_GPIO_Init+0x350>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x21a>
 8002602:	2309      	movs	r3, #9
 8002604:	e012      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002606:	230a      	movs	r3, #10
 8002608:	e010      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260a:	2308      	movs	r3, #8
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260e:	2307      	movs	r3, #7
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x240>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	; (8002714 <HAL_GPIO_Init+0x328>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_GPIO_Init+0x354>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_GPIO_Init+0x354>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae86 	bls.w	800240c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fd08 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e006      	b.n	8002800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d104      	bne.n	8002812 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_I2C_Init+0x11c>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69d9      	ldr	r1, [r3, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	02008000 	.word	0x02008000

08002898 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028b4:	2b28      	cmp	r3, #40	; 0x28
 80028b6:	f040 8098 	bne.w	80029ea <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08c      	b.n	80029ec <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80028d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f001 fa10 	bl	8003cfc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e080      	b.n	80029ec <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b2a      	cmp	r3, #42	; 0x2a
 80028fc:	d12a      	bne.n	8002954 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028fe:	2102      	movs	r1, #2
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 f9fb 	bl	8003cfc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d11e      	bne.n	8002954 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002924:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002934:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f9ff 	bl	8001d3e <HAL_DMA_Abort_IT>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002950:	4610      	mov	r0, r2
 8002952:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2229      	movs	r2, #41	; 0x29
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002978:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800299a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d106      	bne.n	80029d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2208      	movs	r2, #8
 80029d2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80029dc:	f248 0101 	movw	r1, #32769	; 0x8001
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f001 f921 	bl	8003c28 <I2C_Enable_IRQ>

    return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	08003b87 	.word	0x08003b87
 80029f8:	08002d13 	.word	0x08002d13

080029fc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a18:	2b28      	cmp	r3, #40	; 0x28
 8002a1a:	f040 8098 	bne.w	8002b4e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e08c      	b.n	8002b50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a36:	f248 0102 	movw	r1, #32770	; 0x8002
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f001 f95e 	bl	8003cfc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e080      	b.n	8002b50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b29      	cmp	r3, #41	; 0x29
 8002a60:	d12a      	bne.n	8002ab8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a62:	2101      	movs	r1, #1
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f001 f949 	bl	8003cfc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a78:	d11e      	bne.n	8002ab8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a88:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002a98:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f94d 	bl	8001d3e <HAL_DMA_Abort_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	222a      	movs	r2, #42	; 0x2a
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002adc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8002afe:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002b40:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f001 f86f 	bl	8003c28 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	08003b87 	.word	0x08003b87
 8002b5c:	08002d13 	.word	0x08002d13

08002b60 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d10d      	bne.n	8002b90 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2228      	movs	r2, #40	; 0x28
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_I2C_EnableListen_IT+0x3c>)
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f001 f84e 	bl	8003c28 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	08002d13 	.word	0x08002d13

08002ba0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	09db      	lsrs	r3, r3, #7
 8002bfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	0a9b      	lsrs	r3, r3, #10
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d010      	beq.n	8002c48 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	09db      	lsrs	r3, r3, #7
 8002c2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	0a5b      	lsrs	r3, r3, #9
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d010      	beq.n	8002c76 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f043 0202 	orr.w	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 030b 	and.w	r3, r3, #11
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fe61 	bl	8003950 <I2C_ITError>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <I2C_Slave_ISR_IT+0x24>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e0ec      	b.n	8002f10 <I2C_Slave_ISR_IT+0x1fe>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d56:	6939      	ldr	r1, [r7, #16]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fc99 	bl	8003690 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04d      	beq.n	8002e06 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d047      	beq.n	8002e06 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d128      	bne.n	8002dd2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b28      	cmp	r3, #40	; 0x28
 8002d8a:	d108      	bne.n	8002d9e <I2C_Slave_ISR_IT+0x8c>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d92:	d104      	bne.n	8002d9e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fd84 	bl	80038a4 <I2C_ITListenCplt>
 8002d9c:	e032      	b.n	8002e04 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b29      	cmp	r3, #41	; 0x29
 8002da8:	d10e      	bne.n	8002dc8 <I2C_Slave_ISR_IT+0xb6>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002db0:	d00a      	beq.n	8002dc8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2210      	movs	r2, #16
 8002db8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 febf 	bl	8003b3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fb3d 	bl	8003440 <I2C_ITSlaveSeqCplt>
 8002dc6:	e01d      	b.n	8002e04 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002dd0:	e096      	b.n	8002f00 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f043 0204 	orr.w	r2, r3, #4
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <I2C_Slave_ISR_IT+0xe4>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df2:	f040 8085 	bne.w	8002f00 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fda7 	bl	8003950 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e02:	e07d      	b.n	8002f00 <I2C_Slave_ISR_IT+0x1ee>
 8002e04:	e07c      	b.n	8002f00 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d030      	beq.n	8002e74 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02a      	beq.n	8002e74 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d018      	beq.n	8002e5a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d14f      	bne.n	8002f04 <I2C_Slave_ISR_IT+0x1f2>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e6a:	d04b      	beq.n	8002f04 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fae7 	bl	8003440 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002e72:	e047      	b.n	8002f04 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	08db      	lsrs	r3, r3, #3
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	08db      	lsrs	r3, r3, #3
 8002e84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e8c:	6939      	ldr	r1, [r7, #16]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa15 	bl	80032be <I2C_ITAddrCplt>
 8002e94:	e037      	b.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d031      	beq.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02b      	beq.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ee8:	e00d      	b.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d002      	beq.n	8002ef8 <I2C_Slave_ISR_IT+0x1e6>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 faa1 	bl	8003440 <I2C_ITSlaveSeqCplt>
 8002efe:	e002      	b.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002f04:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <I2C_Master_ISR_DMA+0x1a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0e1      	b.n	80030f6 <I2C_Master_ISR_DMA+0x1de>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d017      	beq.n	8002f76 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d011      	beq.n	8002f76 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2210      	movs	r2, #16
 8002f58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f66:	2120      	movs	r1, #32
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fe5d 	bl	8003c28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fde5 	bl	8003b3e <I2C_Flush_TXDR>
 8002f74:	e0ba      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	09db      	lsrs	r3, r3, #7
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d072      	beq.n	8003068 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d06c      	beq.n	8003068 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d04e      	beq.n	8003046 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2bff      	cmp	r3, #255	; 0xff
 8002fbe:	d906      	bls.n	8002fce <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e010      	b.n	8002ff0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe0:	d003      	beq.n	8002fea <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e002      	b.n	8002ff0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8a79      	ldrh	r1, [r7, #18]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fde0 	bl	8003bc4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b22      	cmp	r3, #34	; 0x22
 8003020:	d108      	bne.n	8003034 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003030:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003032:	e05b      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003042:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003044:	e052      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003054:	d003      	beq.n	800305e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f9b5 	bl	80033c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800305c:	e046      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800305e:	2140      	movs	r1, #64	; 0x40
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc75 	bl	8003950 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003066:	e041      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d029      	beq.n	80030c8 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d119      	bne.n	80030be <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003098:	d027      	beq.n	80030ea <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a2:	d108      	bne.n	80030b6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80030b4:	e019      	b.n	80030ea <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f985 	bl	80033c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80030bc:	e015      	b.n	80030ea <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030be:	2140      	movs	r1, #64	; 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fc45 	bl	8003950 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030c6:	e010      	b.n	80030ea <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa0a 	bl	80034fc <I2C_ITMasterCplt>
 80030e8:	e000      	b.n	80030ec <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80030ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <I2C_Slave_ISR_DMA+0x24>
 800311e:	2302      	movs	r3, #2
 8003120:	e0c9      	b.n	80032b6 <I2C_Slave_ISR_DMA+0x1b8>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 faa3 	bl	8003690 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 809a 	beq.w	800328c <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8093 	beq.w	800328c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0b9b      	lsrs	r3, r3, #14
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0bdb      	lsrs	r3, r3, #15
 8003176:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800317a:	2b00      	cmp	r3, #0
 800317c:	d07f      	beq.n	800327e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0bdb      	lsrs	r3, r3, #15
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800319e:	2301      	movs	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0b9b      	lsrs	r3, r3, #14
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d128      	bne.n	800321e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b28      	cmp	r3, #40	; 0x28
 80031d6:	d108      	bne.n	80031ea <I2C_Slave_ISR_DMA+0xec>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031de:	d104      	bne.n	80031ea <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fb5e 	bl	80038a4 <I2C_ITListenCplt>
 80031e8:	e048      	b.n	800327c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b29      	cmp	r3, #41	; 0x29
 80031f4:	d10e      	bne.n	8003214 <I2C_Slave_ISR_DMA+0x116>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fc:	d00a      	beq.n	8003214 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fc99 	bl	8003b3e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f917 	bl	8003440 <I2C_ITSlaveSeqCplt>
 8003212:	e033      	b.n	800327c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800321c:	e034      	b.n	8003288 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0204 	orr.w	r2, r3, #4
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <I2C_Slave_ISR_DMA+0x14a>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003246:	d11f      	bne.n	8003288 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b21      	cmp	r3, #33	; 0x21
 800324c:	d002      	beq.n	8003254 <I2C_Slave_ISR_DMA+0x156>
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b29      	cmp	r3, #41	; 0x29
 8003252:	d103      	bne.n	800325c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
 800325a:	e008      	b.n	800326e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b22      	cmp	r3, #34	; 0x22
 8003260:	d002      	beq.n	8003268 <I2C_Slave_ISR_DMA+0x16a>
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b2a      	cmp	r3, #42	; 0x2a
 8003266:	d102      	bne.n	800326e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2222      	movs	r2, #34	; 0x22
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4619      	mov	r1, r3
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fb6b 	bl	8003950 <I2C_ITError>
      if (treatdmanack == 1U)
 800327a:	e005      	b.n	8003288 <I2C_Slave_ISR_DMA+0x18a>
 800327c:	e004      	b.n	8003288 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2210      	movs	r2, #16
 8003284:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003286:	e011      	b.n	80032ac <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003288:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800328a:	e00f      	b.n	80032ac <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	08db      	lsrs	r3, r3, #3
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	08db      	lsrs	r3, r3, #3
 800329c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f809 	bl	80032be <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032d4:	2b28      	cmp	r3, #40	; 0x28
 80032d6:	d16a      	bne.n	80033ae <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032f6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003304:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003312:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d138      	bne.n	800338e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800331c:	897b      	ldrh	r3, [r7, #10]
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	b29a      	uxth	r2, r3
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	4053      	eors	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	f003 0306 	and.w	r3, r3, #6
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11c      	bne.n	800336a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003342:	2b02      	cmp	r3, #2
 8003344:	d13b      	bne.n	80033be <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2208      	movs	r2, #8
 8003352:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800335c:	89ba      	ldrh	r2, [r7, #12]
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fd4c 	bl	8000e00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003368:	e029      	b.n	80033be <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800336e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fcc2 	bl	8003cfc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003380:	89ba      	ldrh	r2, [r7, #12]
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fd3a 	bl	8000e00 <HAL_I2C_AddrCallback>
}
 800338c:	e017      	b.n	80033be <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800338e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fcb2 	bl	8003cfc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033a0:	89ba      	ldrh	r2, [r7, #12]
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fd2a 	bl	8000e00 <HAL_I2C_AddrCallback>
}
 80033ac:	e007      	b.n	80033be <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2208      	movs	r2, #8
 80033b4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b21      	cmp	r3, #33	; 0x21
 80033e0:	d115      	bne.n	800340e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2211      	movs	r2, #17
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033f6:	2101      	movs	r1, #1
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fc7f 	bl	8003cfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fc45 	bl	8002c96 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340c:	e014      	b.n	8003438 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2212      	movs	r2, #18
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003422:	2102      	movs	r1, #2
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fc69 	bl	8003cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fc39 	bl	8002caa <HAL_I2C_MasterRxCpltCallback>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0b9b      	lsrs	r3, r3, #14
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e00d      	b.n	8003492 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0bdb      	lsrs	r3, r3, #15
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003490:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b29      	cmp	r3, #41	; 0x29
 800349c:	d112      	bne.n	80034c4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2228      	movs	r2, #40	; 0x28
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034ac:	2101      	movs	r1, #1
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fc24 	bl	8003cfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd fc57 	bl	8000d70 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034c2:	e017      	b.n	80034f4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b2a      	cmp	r3, #42	; 0x2a
 80034ce:	d111      	bne.n	80034f4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2228      	movs	r2, #40	; 0x28
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2222      	movs	r2, #34	; 0x22
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034de:	2102      	movs	r1, #2
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fc0b 	bl	8003cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fc68 	bl	8000dc4 <HAL_I2C_SlaveRxCpltCallback>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2220      	movs	r2, #32
 8003510:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b21      	cmp	r3, #33	; 0x21
 800351c:	d107      	bne.n	800352e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800351e:	2101      	movs	r1, #1
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fbeb 	bl	8003cfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2211      	movs	r2, #17
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
 800352c:	e00c      	b.n	8003548 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b22      	cmp	r3, #34	; 0x22
 8003538:	d106      	bne.n	8003548 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800353a:	2102      	movs	r1, #2
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fbdd 	bl	8003cfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2212      	movs	r2, #18
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b4d      	ldr	r3, [pc, #308]	; (8003688 <I2C_ITMasterCplt+0x18c>)
 8003554:	400b      	ands	r3, r1
 8003556:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <I2C_ITMasterCplt+0x190>)
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d10b      	bne.n	80035a8 <I2C_ITMasterCplt+0xac>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80035a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fac8 	bl	8003b3e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d002      	beq.n	80035c6 <I2C_ITMasterCplt+0xca>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9bf 	bl	8003950 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80035d2:	e054      	b.n	800367e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b21      	cmp	r3, #33	; 0x21
 80035de:	d124      	bne.n	800362a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d10b      	bne.n	8003612 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fb57 	bl	8002cbe <HAL_I2C_MemTxCpltCallback>
}
 8003610:	e035      	b.n	800367e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fb37 	bl	8002c96 <HAL_I2C_MasterTxCpltCallback>
}
 8003628:	e029      	b.n	800367e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b22      	cmp	r3, #34	; 0x22
 8003634:	d123      	bne.n	800367e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d10b      	bne.n	8003668 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fb36 	bl	8002cd2 <HAL_I2C_MemRxCpltCallback>
}
 8003666:	e00a      	b.n	800367e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fb16 	bl	8002caa <HAL_I2C_MasterRxCpltCallback>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	fe00e800 	.word	0xfe00e800
 800368c:	ffff0000 	.word	0xffff0000

08003690 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d002      	beq.n	80036c2 <I2C_ITSlaveCplt+0x32>
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b29      	cmp	r3, #41	; 0x29
 80036c0:	d108      	bne.n	80036d4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80036c2:	f248 0101 	movw	r1, #32769	; 0x8001
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fb18 	bl	8003cfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2221      	movs	r2, #33	; 0x21
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
 80036d2:	e00d      	b.n	80036f0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b22      	cmp	r3, #34	; 0x22
 80036d8:	d002      	beq.n	80036e0 <I2C_ITSlaveCplt+0x50>
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b2a      	cmp	r3, #42	; 0x2a
 80036de:	d107      	bne.n	80036f0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80036e0:	f248 0102 	movw	r1, #32770	; 0x8002
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb09 	bl	8003cfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2222      	movs	r2, #34	; 0x22
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b64      	ldr	r3, [pc, #400]	; (800389c <I2C_ITSlaveCplt+0x20c>)
 800370c:	400b      	ands	r3, r1
 800370e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa14 	bl	8003b3e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	0b9b      	lsrs	r3, r3, #14
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003730:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d020      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003748:	e018      	b.n	800377c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	0bdb      	lsrs	r3, r3, #15
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003764:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8a7 	bl	8003950 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b28      	cmp	r3, #40	; 0x28
 800380c:	d141      	bne.n	8003892 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f847 	bl	80038a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003816:	e03c      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003820:	d014      	beq.n	800384c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fe0c 	bl	8003440 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <I2C_ITSlaveCplt+0x210>)
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fb0f 	bl	8000e68 <HAL_I2C_ListenCpltCallback>
}
 800384a:	e022      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b22      	cmp	r3, #34	; 0x22
 8003856:	d10e      	bne.n	8003876 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd faa8 	bl	8000dc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003874:	e00d      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fd fa6f 	bl	8000d70 <HAL_I2C_SlaveTxCpltCallback>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	fe00e800 	.word	0xfe00e800
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <I2C_ITListenCplt+0xa8>)
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003922:	f248 0103 	movw	r1, #32771	; 0x8003
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9e8 	bl	8003cfc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd fa93 	bl	8000e68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ffff0000 	.word	0xffff0000

08003950 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <I2C_ITError+0x194>)
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b28      	cmp	r3, #40	; 0x28
 8003986:	d005      	beq.n	8003994 <I2C_ITError+0x44>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b29      	cmp	r3, #41	; 0x29
 800398c:	d002      	beq.n	8003994 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b2a      	cmp	r3, #42	; 0x2a
 8003992:	d10b      	bne.n	80039ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003994:	2103      	movs	r1, #3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9b0 	bl	8003cfc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2228      	movs	r2, #40	; 0x28
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <I2C_ITError+0x198>)
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
 80039aa:	e011      	b.n	80039d0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039ac:	f248 0103 	movw	r1, #32771	; 0x8003
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f9a3 	bl	8003cfc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b60      	cmp	r3, #96	; 0x60
 80039c0:	d003      	beq.n	80039ca <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d039      	beq.n	8003a52 <I2C_ITError+0x102>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b11      	cmp	r3, #17
 80039e2:	d002      	beq.n	80039ea <I2C_ITError+0x9a>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d133      	bne.n	8003a52 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f8:	d107      	bne.n	8003a0a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a08:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f9b7 	bl	8001d82 <HAL_DMA_GetState>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d017      	beq.n	8003a4a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	4a33      	ldr	r2, [pc, #204]	; (8003aec <I2C_ITError+0x19c>)
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe f985 	bl	8001d3e <HAL_DMA_Abort_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04d      	beq.n	8003ad6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a44:	4610      	mov	r0, r2
 8003a46:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a48:	e045      	b.n	8003ad6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f850 	bl	8003af0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a50:	e041      	b.n	8003ad6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d039      	beq.n	8003ace <I2C_ITError+0x17e>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d002      	beq.n	8003a66 <I2C_ITError+0x116>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b22      	cmp	r3, #34	; 0x22
 8003a64:	d133      	bne.n	8003ace <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	d107      	bne.n	8003a86 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f979 	bl	8001d82 <HAL_DMA_GetState>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d017      	beq.n	8003ac6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <I2C_ITError+0x19c>)
 8003a9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe f947 	bl	8001d3e <HAL_DMA_Abort_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac4:	e009      	b.n	8003ada <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f812 	bl	8003af0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003acc:	e005      	b.n	8003ada <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f80e 	bl	8003af0 <I2C_TreatErrorCallback>
  }
}
 8003ad4:	e002      	b.n	8003adc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ada:	bf00      	nop
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	ffff0000 	.word	0xffff0000
 8003ae8:	08002d13 	.word	0x08002d13
 8003aec:	08003b87 	.word	0x08003b87

08003af0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d10e      	bne.n	8003b22 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff f8e3 	bl	8002ce6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b20:	e009      	b.n	8003b36 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7fd f9a3 	bl	8000e7c <HAL_I2C_ErrorCallback>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d103      	bne.n	8003b5c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d007      	beq.n	8003b7a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	619a      	str	r2, [r3, #24]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff9b 	bl	8003af0 <I2C_TreatErrorCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bdc:	7a7b      	ldrb	r3, [r7, #9]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003be4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	0d5b      	lsrs	r3, r3, #21
 8003bfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <I2C_TransferConfig+0x60>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	43db      	mvns	r3, r3
 8003c08:	ea02 0103 	and.w	r1, r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	03ff63ff 	.word	0x03ff63ff

08003c28 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <I2C_Enable_IRQ+0xcc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <I2C_Enable_IRQ+0xd0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d11d      	bne.n	8003c88 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da03      	bge.n	8003c5c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d103      	bne.n	8003c6a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d103      	bne.n	8003c78 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d12c      	bne.n	8003cd8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c86:	e027      	b.n	8003cd8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da03      	bge.n	8003c98 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003ca8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003cba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d103      	bne.n	8003cca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d103      	bne.n	8003cd8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 0320 	orr.w	r3, r3, #32
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	08002f19 	.word	0x08002f19
 8003cf8:	080030ff 	.word	0x080030ff

08003cfc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00f      	beq.n	8003d36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d2a:	2b28      	cmp	r3, #40	; 0x28
 8003d2c:	d003      	beq.n	8003d36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00f      	beq.n	8003d60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d54:	2b28      	cmp	r3, #40	; 0x28
 8003d56:	d003      	beq.n	8003d60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da03      	bge.n	8003d70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d103      	bne.n	8003d7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d103      	bne.n	8003d8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f043 0320 	orr.w	r3, r3, #32
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d103      	bne.n	8003d9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	400a      	ands	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d138      	bne.n	8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e032      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d139      	bne.n	8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e033      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f16:	f7fd fc25 	bl	8001764 <HAL_GetTick>
 8003f1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1c:	e009      	b.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1e:	f7fd fc21 	bl	8001764 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2c:	d901      	bls.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e022      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7fd fc0a 	bl	8001764 <HAL_GetTick>
 8003f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f52:	e009      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f54:	f7fd fc06 	bl	8001764 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f62:	d901      	bls.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e007      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f74:	d1ee      	bne.n	8003f54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e29b      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8087 	beq.w	80040ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
 8003fc4:	4b90      	ldr	r3, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x130>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d168      	bne.n	80040b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e275      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x7a>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x9c>
 800400a:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7e      	ldr	r2, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800401c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xc0>
 800402e:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd fb7c 	bl	8001764 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fb78 	bl	8001764 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e229      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xe8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fb68 	bl	8001764 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fb64 	bl	8001764 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e215      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x110>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d069      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1e9      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	493d      	ldr	r1, [pc, #244]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e040      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fb1a 	bl	8001764 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fd fb16 	bl	8001764 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1c7      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
 8004166:	e018      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd faf6 	bl	8001764 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fd faf2 	bl	8001764 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1a3      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d038      	beq.n	8004218 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fad3 	bl	8001764 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fd facf 	bl	8001764 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e180      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x23a>
 80041e0:	e01a      	b.n	8004218 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fab9 	bl	8001764 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fd fab5 	bl	8001764 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d903      	bls.n	800420c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e166      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
 8004208:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a4 	beq.w	800436e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b8c      	ldr	r3, [pc, #560]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a88      	ldr	r2, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b86      	ldr	r3, [pc, #536]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b83      	ldr	r3, [pc, #524]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7f      	ldr	r2, [pc, #508]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fd fa7d 	bl	8001764 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fd fa79 	bl	8001764 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e12a      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x31a>
 8004294:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x33c>
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a67      	ldr	r2, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x35e>
 80042cc:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a5b      	ldr	r2, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a58      	ldr	r2, [pc, #352]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fa2d 	bl	8001764 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fa29 	bl	8001764 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x386>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd fa17 	bl	8001764 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd fa13 	bl	8001764 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0c2      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80ae 	beq.w	80044d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d06d      	beq.n	8004460 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d14b      	bne.n	8004424 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd f9e4 	bl	8001764 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd f9e0 	bl	8001764 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e091      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	491b      	ldr	r1, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd f9b2 	bl	8001764 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd f9ae 	bl	8001764 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e05f      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x47c>
 8004422:	e057      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd f998 	bl	8001764 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd f994 	bl	8001764 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e045      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x4b0>
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <HAL_RCC_OscConfig+0x558>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d030      	beq.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d129      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d122      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d119      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0d0      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d910      	bls.n	800452c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b67      	ldr	r3, [pc, #412]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	4965      	ldr	r1, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d040      	beq.n	8004608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e073      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06b      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4936      	ldr	r1, [pc, #216]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fd f8c4 	bl	8001764 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd f8c0 	bl	8001764 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e053      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d210      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020f 	bic.w	r2, r3, #15
 800461e:	4922      	ldr	r1, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc ff50 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	08009838 	.word	0x08009838
 80046b4:	20000000 	.word	0x20000000
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b094      	sub	sp, #80	; 0x50
 80046c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
 80046c8:	2300      	movs	r3, #0
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046cc:	2300      	movs	r3, #0
 80046ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d4:	4b79      	ldr	r3, [pc, #484]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d00d      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x40>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	f200 80e1 	bhi.w	80048a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ee:	e0db      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f0:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f4:	e0db      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f6:	4b73      	ldr	r3, [pc, #460]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80046f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046fa:	e0d8      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fc:	4b6f      	ldr	r3, [pc, #444]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004706:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d063      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004712:	4b6a      	ldr	r3, [pc, #424]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	2200      	movs	r2, #0
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
 800471c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
 8004726:	2300      	movs	r3, #0
 8004728:	637b      	str	r3, [r7, #52]	; 0x34
 800472a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800472e:	4622      	mov	r2, r4
 8004730:	462b      	mov	r3, r5
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004740:	0150      	lsls	r0, r2, #5
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4621      	mov	r1, r4
 8004748:	1a51      	subs	r1, r2, r1
 800474a:	6139      	str	r1, [r7, #16]
 800474c:	4629      	mov	r1, r5
 800474e:	eb63 0301 	sbc.w	r3, r3, r1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004760:	4659      	mov	r1, fp
 8004762:	018b      	lsls	r3, r1, #6
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800476a:	4651      	mov	r1, sl
 800476c:	018a      	lsls	r2, r1, #6
 800476e:	4651      	mov	r1, sl
 8004770:	ebb2 0801 	subs.w	r8, r2, r1
 8004774:	4659      	mov	r1, fp
 8004776:	eb63 0901 	sbc.w	r9, r3, r1
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800478a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478e:	4690      	mov	r8, r2
 8004790:	4699      	mov	r9, r3
 8004792:	4623      	mov	r3, r4
 8004794:	eb18 0303 	adds.w	r3, r8, r3
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	462b      	mov	r3, r5
 800479c:	eb49 0303 	adc.w	r3, r9, r3
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047ae:	4629      	mov	r1, r5
 80047b0:	024b      	lsls	r3, r1, #9
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047b8:	4621      	mov	r1, r4
 80047ba:	024a      	lsls	r2, r1, #9
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047cc:	f7fb fd38 	bl	8000240 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d8:	e058      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047da:	4b38      	ldr	r3, [pc, #224]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	2200      	movs	r2, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	4611      	mov	r1, r2
 80047e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ea:	623b      	str	r3, [r7, #32]
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	0159      	lsls	r1, r3, #5
 8004802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004806:	0150      	lsls	r0, r2, #5
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4641      	mov	r1, r8
 800480e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb63 0b01 	sbc.w	fp, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800482c:	ebb2 040a 	subs.w	r4, r2, sl
 8004830:	eb63 050b 	sbc.w	r5, r3, fp
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	00eb      	lsls	r3, r5, #3
 800483e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	4643      	mov	r3, r8
 800484a:	18e3      	adds	r3, r4, r3
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	464b      	mov	r3, r9
 8004850:	eb45 0303 	adc.w	r3, r5, r3
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004862:	4629      	mov	r1, r5
 8004864:	028b      	lsls	r3, r1, #10
 8004866:	4621      	mov	r1, r4
 8004868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800486c:	4621      	mov	r1, r4
 800486e:	028a      	lsls	r2, r1, #10
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004876:	2200      	movs	r2, #0
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	61fa      	str	r2, [r7, #28]
 800487c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004880:	f7fb fcde 	bl	8000240 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4613      	mov	r3, r2
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_GetSysClockFreq+0x200>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800489c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800489e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a6:	e002      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3750      	adds	r7, #80	; 0x50
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	007a1200 	.word	0x007a1200

080048c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e4:	f7ff fff0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0a9b      	lsrs	r3, r3, #10
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	08009848 	.word	0x08009848

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800490c:	f7ff ffdc 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0b5b      	lsrs	r3, r3, #13
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	08009848 	.word	0x08009848

08004930 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	220f      	movs	r2, #15
 800493e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_RCC_GetClockConfig+0x60>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	40023c00 	.word	0x40023c00

08004994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049bc:	4b69      	ldr	r3, [pc, #420]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a68      	ldr	r2, [pc, #416]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049c6:	6093      	str	r3, [r2, #8]
 80049c8:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	4964      	ldr	r1, [pc, #400]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d017      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	4959      	ldr	r1, [pc, #356]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d017      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a2a:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	494a      	ldr	r1, [pc, #296]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a48:	d101      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 808b 	beq.w	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a78:	4b3a      	ldr	r3, [pc, #232]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	4a39      	ldr	r2, [pc, #228]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6413      	str	r3, [r2, #64]	; 0x40
 8004a84:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a34      	ldr	r2, [pc, #208]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fc fe62 	bl	8001764 <HAL_GetTick>
 8004aa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa4:	f7fc fe5e 	bl	8001764 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e38f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ab6:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac2:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d035      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d02e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af6:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b02:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d114      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fc fe26 	bl	8001764 <HAL_GetTick>
 8004b18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fc fe22 	bl	8001764 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e351      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ee      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b5a:	400b      	ands	r3, r1
 8004b5c:	4901      	ldr	r1, [pc, #4]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	0ffffcff 	.word	0x0ffffcff
 8004b70:	4bac      	ldr	r3, [pc, #688]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4aab      	ldr	r2, [pc, #684]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b7a:	6093      	str	r3, [r2, #8]
 8004b7c:	4ba9      	ldr	r3, [pc, #676]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	49a6      	ldr	r1, [pc, #664]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b9a:	4ba2      	ldr	r3, [pc, #648]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	4aa0      	ldr	r2, [pc, #640]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	499b      	ldr	r1, [pc, #620]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc8:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd6:	4993      	ldr	r1, [pc, #588]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bea:	4b8e      	ldr	r3, [pc, #568]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf8:	498a      	ldr	r1, [pc, #552]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c0c:	4b85      	ldr	r3, [pc, #532]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c1a:	4982      	ldr	r1, [pc, #520]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c2e:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4979      	ldr	r1, [pc, #484]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c50:	4b74      	ldr	r3, [pc, #464]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	4971      	ldr	r1, [pc, #452]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c72:	4b6c      	ldr	r3, [pc, #432]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f023 020c 	bic.w	r2, r3, #12
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	4968      	ldr	r1, [pc, #416]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c94:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	4960      	ldr	r1, [pc, #384]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	4957      	ldr	r1, [pc, #348]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd8:	4b52      	ldr	r3, [pc, #328]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	494f      	ldr	r1, [pc, #316]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cfa:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	4946      	ldr	r1, [pc, #280]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d1c:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	493e      	ldr	r1, [pc, #248]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4c:	4935      	ldr	r1, [pc, #212]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d60:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6e:	492d      	ldr	r1, [pc, #180]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d90:	4924      	ldr	r1, [pc, #144]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da0:	d101      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	4914      	ldr	r1, [pc, #80]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df4:	490b      	ldr	r1, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	4902      	ldr	r1, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e34:	4b8a      	ldr	r3, [pc, #552]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	4986      	ldr	r1, [pc, #536]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e58:	4b81      	ldr	r3, [pc, #516]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e68:	497d      	ldr	r1, [pc, #500]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d006      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80d6 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e84:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fc fc68 	bl	8001764 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e98:	f7fc fc64 	bl	8001764 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e195      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d021      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d11d      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eca:	4b65      	ldr	r3, [pc, #404]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ede:	0e1b      	lsrs	r3, r3, #24
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	019a      	lsls	r2, r3, #6
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	4958      	ldr	r1, [pc, #352]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02e      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f30:	d129      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f32:	4b4b      	ldr	r3, [pc, #300]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f40:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f46:	0f1b      	lsrs	r3, r3, #28
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	019a      	lsls	r2, r3, #6
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	071b      	lsls	r3, r3, #28
 8004f66:	493e      	ldr	r1, [pc, #248]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f6e:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f74:	f023 021f 	bic.w	r2, r3, #31
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	4938      	ldr	r1, [pc, #224]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01d      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f98:	0e1b      	lsrs	r3, r3, #24
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fa0:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa6:	0f1b      	lsrs	r3, r3, #28
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	019a      	lsls	r2, r3, #6
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	071b      	lsls	r3, r3, #28
 8004fc6:	4926      	ldr	r1, [pc, #152]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d011      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	019a      	lsls	r2, r3, #6
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	491a      	ldr	r1, [pc, #104]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ffe:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fc fbab 	bl	8001764 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005012:	f7fc fba7 	bl	8001764 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e0d8      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	f040 80ce 	bne.w	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fc fb8e 	bl	8001764 <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800504a:	e00b      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800504c:	f7fc fb8a 	bl	8001764 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d904      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0bb      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005064:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800506c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005070:	d0ec      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800508e:	2b00      	cmp	r3, #0
 8005090:	d02e      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d12a      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a8:	4b4d      	ldr	r3, [pc, #308]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	0f1b      	lsrs	r3, r3, #28
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	019a      	lsls	r2, r3, #6
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	071b      	lsls	r3, r3, #28
 80050ce:	4944      	ldr	r1, [pc, #272]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	493d      	ldr	r1, [pc, #244]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d022      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005104:	d11d      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	0e1b      	lsrs	r3, r3, #24
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005114:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	0f1b      	lsrs	r3, r3, #28
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	019a      	lsls	r2, r3, #6
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	431a      	orrs	r2, r3
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	431a      	orrs	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	4929      	ldr	r1, [pc, #164]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d028      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	0e1b      	lsrs	r3, r3, #24
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800515c:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	019a      	lsls	r2, r3, #6
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	431a      	orrs	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	071b      	lsls	r3, r3, #28
 8005182:	4917      	ldr	r1, [pc, #92]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4911      	ldr	r1, [pc, #68]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc fada 	bl	8001764 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051b4:	f7fc fad6 	bl	8001764 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e007      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d2:	d1ef      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800

080051e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e09d      	b.n	8005332 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005206:	d009      	beq.n	800521c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
 800520e:	e005      	b.n	800521c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc f82c 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005252:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800525c:	d902      	bls.n	8005264 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e002      	b.n	800526a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005268:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005272:	d007      	beq.n	8005284 <HAL_SPI_Init+0xa0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800527c:	d002      	beq.n	8005284 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	ea42 0103 	orr.w	r1, r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 0204 	and.w	r2, r3, #4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005300:	ea42 0103 	orr.w	r1, r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e049      	b.n	80053e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fc f847 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 fbbb 	bl	8005af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e054      	b.n	80054aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d01d      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_TIM_Base_Start_IT+0xe4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d115      	bne.n	8005494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_TIM_Base_Start_IT+0xec>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d015      	beq.n	80054a6 <HAL_TIM_Base_Start_IT+0xbe>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d011      	beq.n	80054a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	e008      	b.n	80054a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800
 80054d4:	00010007 	.word	0x00010007

080054d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e049      	b.n	800557e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f841 	bl	8005586 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f000 faec 	bl	8005af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d122      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d11b      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f06f 0202 	mvn.w	r2, #2
 80055c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa6b 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 80055e2:	e005      	b.n	80055f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa5d 	bl	8005aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa6e 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d122      	bne.n	800564a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d11b      	bne.n	800564a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0204 	mvn.w	r2, #4
 800561a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa41 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 8005636:	e005      	b.n	8005644 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa33 	bl	8005aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa44 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b08      	cmp	r3, #8
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0208 	mvn.w	r2, #8
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa17 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fa09 	bl	8005aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa1a 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d122      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d11b      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0210 	mvn.w	r2, #16
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2208      	movs	r2, #8
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f9ed 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f9df 	bl	8005aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9f0 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0201 	mvn.w	r2, #1
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fb fbc7 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fcd1 	bl	80060ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fcc4 	bl	8006100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d10e      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f99e 	bl	8005ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0220 	mvn.w	r2, #32
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fc84 	bl	80060d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e088      	b.n	8005908 <HAL_TIM_IC_ConfigChannel+0x130>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f000 fa0e 	bl	8005c34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 020c 	bic.w	r2, r2, #12
 8005826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6999      	ldr	r1, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	619a      	str	r2, [r3, #24]
 800583a:	e060      	b.n	80058fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d11c      	bne.n	800587c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f000 fa92 	bl	8005d7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6999      	ldr	r1, [r3, #24]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	619a      	str	r2, [r3, #24]
 800587a:	e040      	b.n	80058fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b08      	cmp	r3, #8
 8005880:	d11b      	bne.n	80058ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f000 fadf 	bl	8005e54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 020c 	bic.w	r2, r2, #12
 80058a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	61da      	str	r2, [r3, #28]
 80058b8:	e021      	b.n	80058fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d11c      	bne.n	80058fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f000 fafc 	bl	8005ecc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69d9      	ldr	r1, [r3, #28]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	61da      	str	r2, [r3, #28]
 80058f8:	e001      	b.n	80058fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIM_ConfigClockSource+0x1c>
 8005928:	2302      	movs	r3, #2
 800592a:	e0b4      	b.n	8005a96 <HAL_TIM_ConfigClockSource+0x186>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <HAL_TIM_ConfigClockSource+0x190>)
 8005948:	4013      	ands	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d03e      	beq.n	80059e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596a:	f200 8087 	bhi.w	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	f000 8086 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x172>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597a:	d87f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d01a      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005980:	2b70      	cmp	r3, #112	; 0x70
 8005982:	d87b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b60      	cmp	r3, #96	; 0x60
 8005986:	d050      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x11a>
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d877      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d03c      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0xfa>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d873      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d058      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x13a>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d86f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d064      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d86b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d060      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d867      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05c      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d05a      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	e062      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f000 fad9 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
      break;
 80059e2:	e04f      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f000 fac2 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a06:	609a      	str	r2, [r3, #8]
      break;
 8005a08:	e03c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 f980 	bl	8005d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2150      	movs	r1, #80	; 0x50
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa8f 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005a28:	e02c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 f9dc 	bl	8005df4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2160      	movs	r1, #96	; 0x60
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fa7f 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005a48:	e01c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 f960 	bl	8005d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fa6f 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f000 fa66 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005a7a:	e003      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	fffeff88 	.word	0xfffeff88

08005aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a40      	ldr	r2, [pc, #256]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b12:	d00f      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3d      	ldr	r2, [pc, #244]	; (8005c0c <TIM_Base_SetConfig+0x118>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <TIM_Base_SetConfig+0x11c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <TIM_Base_SetConfig+0x120>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d027      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <TIM_Base_SetConfig+0x118>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d023      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <TIM_Base_SetConfig+0x11c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <TIM_Base_SetConfig+0x120>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d017      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <TIM_Base_SetConfig+0x128>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <TIM_Base_SetConfig+0x12c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <TIM_Base_SetConfig+0x130>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <TIM_Base_SetConfig+0x134>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <TIM_Base_SetConfig+0x138>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <TIM_Base_SetConfig+0x13c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_Base_SetConfig+0xf8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	615a      	str	r2, [r3, #20]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400
 8005c24:	40014800 	.word	0x40014800
 8005c28:	40001800 	.word	0x40001800
 8005c2c:	40001c00 	.word	0x40001c00
 8005c30:	40002000 	.word	0x40002000

08005c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a28      	ldr	r2, [pc, #160]	; (8005d00 <TIM_TI1_SetConfig+0xcc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d017      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_TI1_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_TI1_SetConfig+0xd4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <TIM_TI1_SetConfig+0xd8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <TIM_TI1_SetConfig+0xdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <TIM_TI1_SetConfig+0xe0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <TIM_TI1_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <TIM_TI1_SetConfig+0x6a>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <TIM_TI1_SetConfig+0x6c>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e003      	b.n	8005cbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 030a 	and.w	r3, r3, #10
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f023 0210 	bic.w	r2, r3, #16
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0210 	bic.w	r2, r3, #16
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	031b      	lsls	r3, r3, #12
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0303 	bic.w	r3, r3, #3
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	031b      	lsls	r3, r3, #12
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	031b      	lsls	r3, r3, #12
 8005f24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e06d      	b.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a30      	ldr	r2, [pc, #192]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2f      	ldr	r2, [pc, #188]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800600e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006046:	d01d      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10c      	bne.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e040      	b.n	80061a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb f9a0 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2224      	movs	r2, #36	; 0x24
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f82c 	bl	80061b0 <UART_SetConfig>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e022      	b.n	80061a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa84 	bl	8006678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb0b 	bl	80067bc <UART_CheckIdleState>
 80061a6:	4603      	mov	r3, r0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4ba6      	ldr	r3, [pc, #664]	; (8006474 <UART_SetConfig+0x2c4>)
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a94      	ldr	r2, [pc, #592]	; (8006478 <UART_SetConfig+0x2c8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d120      	bne.n	800626e <UART_SetConfig+0xbe>
 800622c:	4b93      	ldr	r3, [pc, #588]	; (800647c <UART_SetConfig+0x2cc>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d816      	bhi.n	8006268 <UART_SetConfig+0xb8>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x90>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006251 	.word	0x08006251
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006257 	.word	0x08006257
 800624c:	08006263 	.word	0x08006263
 8006250:	2301      	movs	r3, #1
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e150      	b.n	80064f8 <UART_SetConfig+0x348>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e14d      	b.n	80064f8 <UART_SetConfig+0x348>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e14a      	b.n	80064f8 <UART_SetConfig+0x348>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e147      	b.n	80064f8 <UART_SetConfig+0x348>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e144      	b.n	80064f8 <UART_SetConfig+0x348>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a83      	ldr	r2, [pc, #524]	; (8006480 <UART_SetConfig+0x2d0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d132      	bne.n	80062de <UART_SetConfig+0x12e>
 8006278:	4b80      	ldr	r3, [pc, #512]	; (800647c <UART_SetConfig+0x2cc>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d828      	bhi.n	80062d8 <UART_SetConfig+0x128>
 8006286:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0xdc>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	080062c1 	.word	0x080062c1
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062d9 	.word	0x080062d9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062cd 	.word	0x080062cd
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062c7 	.word	0x080062c7
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	080062d9 	.word	0x080062d9
 80062bc:	080062d3 	.word	0x080062d3
 80062c0:	2300      	movs	r3, #0
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e118      	b.n	80064f8 <UART_SetConfig+0x348>
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e115      	b.n	80064f8 <UART_SetConfig+0x348>
 80062cc:	2304      	movs	r3, #4
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e112      	b.n	80064f8 <UART_SetConfig+0x348>
 80062d2:	2308      	movs	r3, #8
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e10f      	b.n	80064f8 <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e10c      	b.n	80064f8 <UART_SetConfig+0x348>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a68      	ldr	r2, [pc, #416]	; (8006484 <UART_SetConfig+0x2d4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d120      	bne.n	800632a <UART_SetConfig+0x17a>
 80062e8:	4b64      	ldr	r3, [pc, #400]	; (800647c <UART_SetConfig+0x2cc>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062f2:	2b30      	cmp	r3, #48	; 0x30
 80062f4:	d013      	beq.n	800631e <UART_SetConfig+0x16e>
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d814      	bhi.n	8006324 <UART_SetConfig+0x174>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d009      	beq.n	8006312 <UART_SetConfig+0x162>
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d810      	bhi.n	8006324 <UART_SetConfig+0x174>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <UART_SetConfig+0x15c>
 8006306:	2b10      	cmp	r3, #16
 8006308:	d006      	beq.n	8006318 <UART_SetConfig+0x168>
 800630a:	e00b      	b.n	8006324 <UART_SetConfig+0x174>
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e0f2      	b.n	80064f8 <UART_SetConfig+0x348>
 8006312:	2302      	movs	r3, #2
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e0ef      	b.n	80064f8 <UART_SetConfig+0x348>
 8006318:	2304      	movs	r3, #4
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e0ec      	b.n	80064f8 <UART_SetConfig+0x348>
 800631e:	2308      	movs	r3, #8
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e0e9      	b.n	80064f8 <UART_SetConfig+0x348>
 8006324:	2310      	movs	r3, #16
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e0e6      	b.n	80064f8 <UART_SetConfig+0x348>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a56      	ldr	r2, [pc, #344]	; (8006488 <UART_SetConfig+0x2d8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d120      	bne.n	8006376 <UART_SetConfig+0x1c6>
 8006334:	4b51      	ldr	r3, [pc, #324]	; (800647c <UART_SetConfig+0x2cc>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800633e:	2bc0      	cmp	r3, #192	; 0xc0
 8006340:	d013      	beq.n	800636a <UART_SetConfig+0x1ba>
 8006342:	2bc0      	cmp	r3, #192	; 0xc0
 8006344:	d814      	bhi.n	8006370 <UART_SetConfig+0x1c0>
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d009      	beq.n	800635e <UART_SetConfig+0x1ae>
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d810      	bhi.n	8006370 <UART_SetConfig+0x1c0>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <UART_SetConfig+0x1a8>
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d006      	beq.n	8006364 <UART_SetConfig+0x1b4>
 8006356:	e00b      	b.n	8006370 <UART_SetConfig+0x1c0>
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e0cc      	b.n	80064f8 <UART_SetConfig+0x348>
 800635e:	2302      	movs	r3, #2
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e0c9      	b.n	80064f8 <UART_SetConfig+0x348>
 8006364:	2304      	movs	r3, #4
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e0c6      	b.n	80064f8 <UART_SetConfig+0x348>
 800636a:	2308      	movs	r3, #8
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e0c3      	b.n	80064f8 <UART_SetConfig+0x348>
 8006370:	2310      	movs	r3, #16
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e0c0      	b.n	80064f8 <UART_SetConfig+0x348>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a44      	ldr	r2, [pc, #272]	; (800648c <UART_SetConfig+0x2dc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d125      	bne.n	80063cc <UART_SetConfig+0x21c>
 8006380:	4b3e      	ldr	r3, [pc, #248]	; (800647c <UART_SetConfig+0x2cc>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800638e:	d017      	beq.n	80063c0 <UART_SetConfig+0x210>
 8006390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006394:	d817      	bhi.n	80063c6 <UART_SetConfig+0x216>
 8006396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639a:	d00b      	beq.n	80063b4 <UART_SetConfig+0x204>
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d811      	bhi.n	80063c6 <UART_SetConfig+0x216>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <UART_SetConfig+0x1fe>
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063aa:	d006      	beq.n	80063ba <UART_SetConfig+0x20a>
 80063ac:	e00b      	b.n	80063c6 <UART_SetConfig+0x216>
 80063ae:	2300      	movs	r3, #0
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0a1      	b.n	80064f8 <UART_SetConfig+0x348>
 80063b4:	2302      	movs	r3, #2
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e09e      	b.n	80064f8 <UART_SetConfig+0x348>
 80063ba:	2304      	movs	r3, #4
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e09b      	b.n	80064f8 <UART_SetConfig+0x348>
 80063c0:	2308      	movs	r3, #8
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e098      	b.n	80064f8 <UART_SetConfig+0x348>
 80063c6:	2310      	movs	r3, #16
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e095      	b.n	80064f8 <UART_SetConfig+0x348>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <UART_SetConfig+0x2e0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d125      	bne.n	8006422 <UART_SetConfig+0x272>
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <UART_SetConfig+0x2cc>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063e4:	d017      	beq.n	8006416 <UART_SetConfig+0x266>
 80063e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ea:	d817      	bhi.n	800641c <UART_SetConfig+0x26c>
 80063ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f0:	d00b      	beq.n	800640a <UART_SetConfig+0x25a>
 80063f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f6:	d811      	bhi.n	800641c <UART_SetConfig+0x26c>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <UART_SetConfig+0x254>
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d006      	beq.n	8006410 <UART_SetConfig+0x260>
 8006402:	e00b      	b.n	800641c <UART_SetConfig+0x26c>
 8006404:	2301      	movs	r3, #1
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e076      	b.n	80064f8 <UART_SetConfig+0x348>
 800640a:	2302      	movs	r3, #2
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e073      	b.n	80064f8 <UART_SetConfig+0x348>
 8006410:	2304      	movs	r3, #4
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e070      	b.n	80064f8 <UART_SetConfig+0x348>
 8006416:	2308      	movs	r3, #8
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e06d      	b.n	80064f8 <UART_SetConfig+0x348>
 800641c:	2310      	movs	r3, #16
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e06a      	b.n	80064f8 <UART_SetConfig+0x348>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <UART_SetConfig+0x2e4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d138      	bne.n	800649e <UART_SetConfig+0x2ee>
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <UART_SetConfig+0x2cc>)
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006432:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006436:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800643a:	d017      	beq.n	800646c <UART_SetConfig+0x2bc>
 800643c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006440:	d82a      	bhi.n	8006498 <UART_SetConfig+0x2e8>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	d00b      	beq.n	8006460 <UART_SetConfig+0x2b0>
 8006448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644c:	d824      	bhi.n	8006498 <UART_SetConfig+0x2e8>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <UART_SetConfig+0x2aa>
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d006      	beq.n	8006466 <UART_SetConfig+0x2b6>
 8006458:	e01e      	b.n	8006498 <UART_SetConfig+0x2e8>
 800645a:	2300      	movs	r3, #0
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e04b      	b.n	80064f8 <UART_SetConfig+0x348>
 8006460:	2302      	movs	r3, #2
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e048      	b.n	80064f8 <UART_SetConfig+0x348>
 8006466:	2304      	movs	r3, #4
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e045      	b.n	80064f8 <UART_SetConfig+0x348>
 800646c:	2308      	movs	r3, #8
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e042      	b.n	80064f8 <UART_SetConfig+0x348>
 8006472:	bf00      	nop
 8006474:	efff69f3 	.word	0xefff69f3
 8006478:	40011000 	.word	0x40011000
 800647c:	40023800 	.word	0x40023800
 8006480:	40004400 	.word	0x40004400
 8006484:	40004800 	.word	0x40004800
 8006488:	40004c00 	.word	0x40004c00
 800648c:	40005000 	.word	0x40005000
 8006490:	40011400 	.word	0x40011400
 8006494:	40007800 	.word	0x40007800
 8006498:	2310      	movs	r3, #16
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e02c      	b.n	80064f8 <UART_SetConfig+0x348>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a72      	ldr	r2, [pc, #456]	; (800666c <UART_SetConfig+0x4bc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d125      	bne.n	80064f4 <UART_SetConfig+0x344>
 80064a8:	4b71      	ldr	r3, [pc, #452]	; (8006670 <UART_SetConfig+0x4c0>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064b6:	d017      	beq.n	80064e8 <UART_SetConfig+0x338>
 80064b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064bc:	d817      	bhi.n	80064ee <UART_SetConfig+0x33e>
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c2:	d00b      	beq.n	80064dc <UART_SetConfig+0x32c>
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d811      	bhi.n	80064ee <UART_SetConfig+0x33e>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <UART_SetConfig+0x326>
 80064ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d2:	d006      	beq.n	80064e2 <UART_SetConfig+0x332>
 80064d4:	e00b      	b.n	80064ee <UART_SetConfig+0x33e>
 80064d6:	2300      	movs	r3, #0
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e00d      	b.n	80064f8 <UART_SetConfig+0x348>
 80064dc:	2302      	movs	r3, #2
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e00a      	b.n	80064f8 <UART_SetConfig+0x348>
 80064e2:	2304      	movs	r3, #4
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e007      	b.n	80064f8 <UART_SetConfig+0x348>
 80064e8:	2308      	movs	r3, #8
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e004      	b.n	80064f8 <UART_SetConfig+0x348>
 80064ee:	2310      	movs	r3, #16
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e001      	b.n	80064f8 <UART_SetConfig+0x348>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006500:	d15b      	bne.n	80065ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006502:	7ffb      	ldrb	r3, [r7, #31]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d828      	bhi.n	800655a <UART_SetConfig+0x3aa>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0x360>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006535 	.word	0x08006535
 8006514:	0800653d 	.word	0x0800653d
 8006518:	08006545 	.word	0x08006545
 800651c:	0800655b 	.word	0x0800655b
 8006520:	0800654b 	.word	0x0800654b
 8006524:	0800655b 	.word	0x0800655b
 8006528:	0800655b 	.word	0x0800655b
 800652c:	0800655b 	.word	0x0800655b
 8006530:	08006553 	.word	0x08006553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006534:	f7fe f9d4 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8006538:	61b8      	str	r0, [r7, #24]
        break;
 800653a:	e013      	b.n	8006564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800653c:	f7fe f9e4 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8006540:	61b8      	str	r0, [r7, #24]
        break;
 8006542:	e00f      	b.n	8006564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006544:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <UART_SetConfig+0x4c4>)
 8006546:	61bb      	str	r3, [r7, #24]
        break;
 8006548:	e00c      	b.n	8006564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654a:	f7fe f8b7 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800654e:	61b8      	str	r0, [r7, #24]
        break;
 8006550:	e008      	b.n	8006564 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006556:	61bb      	str	r3, [r7, #24]
        break;
 8006558:	e004      	b.n	8006564 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	77bb      	strb	r3, [r7, #30]
        break;
 8006562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d074      	beq.n	8006654 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	005a      	lsls	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	441a      	add	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	fbb2 f3f3 	udiv	r3, r2, r3
 800657e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b0f      	cmp	r3, #15
 8006584:	d916      	bls.n	80065b4 <UART_SetConfig+0x404>
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658c:	d212      	bcs.n	80065b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f023 030f 	bic.w	r3, r3, #15
 8006596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	b29b      	uxth	r3, r3
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	89fb      	ldrh	r3, [r7, #14]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	89fa      	ldrh	r2, [r7, #14]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	e04f      	b.n	8006654 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	77bb      	strb	r3, [r7, #30]
 80065b8:	e04c      	b.n	8006654 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d828      	bhi.n	8006612 <UART_SetConfig+0x462>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <UART_SetConfig+0x418>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	08006613 	.word	0x08006613
 80065d8:	08006603 	.word	0x08006603
 80065dc:	08006613 	.word	0x08006613
 80065e0:	08006613 	.word	0x08006613
 80065e4:	08006613 	.word	0x08006613
 80065e8:	0800660b 	.word	0x0800660b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ec:	f7fe f978 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 80065f0:	61b8      	str	r0, [r7, #24]
        break;
 80065f2:	e013      	b.n	800661c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f4:	f7fe f988 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 80065f8:	61b8      	str	r0, [r7, #24]
        break;
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065fc:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <UART_SetConfig+0x4c4>)
 80065fe:	61bb      	str	r3, [r7, #24]
        break;
 8006600:	e00c      	b.n	800661c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006602:	f7fe f85b 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8006606:	61b8      	str	r0, [r7, #24]
        break;
 8006608:	e008      	b.n	800661c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	61bb      	str	r3, [r7, #24]
        break;
 8006610:	e004      	b.n	800661c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	77bb      	strb	r3, [r7, #30]
        break;
 800661a:	bf00      	nop
    }

    if (pclk != 0U)
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085a      	lsrs	r2, r3, #1
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d909      	bls.n	8006650 <UART_SetConfig+0x4a0>
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006642:	d205      	bcs.n	8006650 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60da      	str	r2, [r3, #12]
 800664e:	e001      	b.n	8006654 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006660:	7fbb      	ldrb	r3, [r7, #30]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40007c00 	.word	0x40007c00
 8006670:	40023800 	.word	0x40023800
 8006674:	00f42400 	.word	0x00f42400

08006678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01a      	beq.n	800678e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006776:	d10a      	bne.n	800678e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	605a      	str	r2, [r3, #4]
  }
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067cc:	f7fa ffca 	bl	8001764 <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d10e      	bne.n	80067fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f831 	bl	8006856 <UART_WaitOnFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e027      	b.n	800684e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d10e      	bne.n	800682a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800680c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f81b 	bl	8006856 <UART_WaitOnFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e011      	b.n	800684e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b09c      	sub	sp, #112	; 0x70
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006866:	e0a7      	b.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	f000 80a3 	beq.w	80069b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006872:	f7fa ff77 	bl	8001764 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800687e:	429a      	cmp	r2, r3
 8006880:	d302      	bcc.n	8006888 <UART_WaitOnFlagUntilTimeout+0x32>
 8006882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006884:	2b00      	cmp	r3, #0
 8006886:	d13f      	bne.n	8006908 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800689c:	667b      	str	r3, [r7, #100]	; 0x64
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e6      	bne.n	8006888 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	663b      	str	r3, [r7, #96]	; 0x60
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068da:	64ba      	str	r2, [r7, #72]	; 0x48
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e5      	bne.n	80068ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e068      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d050      	beq.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006924:	d148      	bne.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800692e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
 8006950:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	613b      	str	r3, [r7, #16]
   return(result);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	66bb      	str	r3, [r7, #104]	; 0x68
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006982:	623a      	str	r2, [r7, #32]
 8006984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	69f9      	ldr	r1, [r7, #28]
 8006988:	6a3a      	ldr	r2, [r7, #32]
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e010      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4013      	ands	r3, r2
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f43f af48 	beq.w	8006868 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3770      	adds	r7, #112	; 0x70
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069e2:	b480      	push	{r7}
 80069e4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80069e6:	bf00      	nop
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f6:	f3ef 8305 	mrs	r3, IPSR
 80069fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80069fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10f      	bne.n	8006a22 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a02:	f3ef 8310 	mrs	r3, PRIMASK
 8006a06:	607b      	str	r3, [r7, #4]
  return(result);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a12:	603b      	str	r3, [r7, #0]
  return(result);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <osKernelInitialize+0x3a>
 8006a1a:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <osKernelInitialize+0x64>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d103      	bne.n	8006a2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a22:	f06f 0305 	mvn.w	r3, #5
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e00c      	b.n	8006a44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <osKernelInitialize+0x64>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <osKernelInitialize+0x64>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e002      	b.n	8006a44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a44:	68fb      	ldr	r3, [r7, #12]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000550 	.word	0x20000550

08006a58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a5e:	f3ef 8305 	mrs	r3, IPSR
 8006a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10f      	bne.n	8006a8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	607b      	str	r3, [r7, #4]
  return(result);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d105      	bne.n	8006a82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a76:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <osKernelStart+0x3a>
 8006a82:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <osKernelStart+0x68>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d103      	bne.n	8006a92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a8a:	f06f 0305 	mvn.w	r3, #5
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e010      	b.n	8006ab4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <osKernelStart+0x68>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d109      	bne.n	8006aae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a9a:	f7ff ffa2 	bl	80069e2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <osKernelStart+0x68>)
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006aa4:	f001 f8ca 	bl	8007c3c <vTaskStartScheduler>
      stat = osOK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e002      	b.n	8006ab4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000550 	.word	0x20000550

08006ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b090      	sub	sp, #64	; 0x40
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad4:	f3ef 8305 	mrs	r3, IPSR
 8006ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ada:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 808f 	bne.w	8006c00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006aee:	f3ef 8311 	mrs	r3, BASEPRI
 8006af2:	617b      	str	r3, [r7, #20]
  return(result);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <osThreadNew+0x3e>
 8006afa:	4b44      	ldr	r3, [pc, #272]	; (8006c0c <osThreadNew+0x148>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d07e      	beq.n	8006c00 <osThreadNew+0x13c>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d07b      	beq.n	8006c00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006b0c:	2318      	movs	r3, #24
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295
 8006b18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d045      	beq.n	8006bac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <osThreadNew+0x6a>
        name = attr->name;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <osThreadNew+0x90>
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	2b38      	cmp	r3, #56	; 0x38
 8006b46:	d805      	bhi.n	8006b54 <osThreadNew+0x90>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <osThreadNew+0x94>
        return (NULL);
 8006b54:	2300      	movs	r3, #0
 8006b56:	e054      	b.n	8006c02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	089b      	lsrs	r3, r3, #2
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <osThreadNew+0xca>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2bbb      	cmp	r3, #187	; 0xbb
 8006b76:	d90a      	bls.n	8006b8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d006      	beq.n	8006b8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <osThreadNew+0xca>
        mem = 1;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	e010      	b.n	8006bb0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <osThreadNew+0xec>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d108      	bne.n	8006bb0 <osThreadNew+0xec>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <osThreadNew+0xec>
          mem = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	623b      	str	r3, [r7, #32]
 8006baa:	e001      	b.n	8006bb0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d110      	bne.n	8006bd8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fe3f 	bl	8007850 <xTaskCreateStatic>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e013      	b.n	8006c00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f107 0310 	add.w	r3, r7, #16
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fe90 	bl	8007916 <xTaskCreate>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d001      	beq.n	8006c00 <osThreadNew+0x13c>
          hTask = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c00:	693b      	ldr	r3, [r7, #16]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3730      	adds	r7, #48	; 0x30
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000550 	.word	0x20000550

08006c10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c18:	f3ef 8305 	mrs	r3, IPSR
 8006c1c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10f      	bne.n	8006c44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c24:	f3ef 8310 	mrs	r3, PRIMASK
 8006c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c30:	f3ef 8311 	mrs	r3, BASEPRI
 8006c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <osDelay+0x3c>
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <osDelay+0x58>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d103      	bne.n	8006c4c <osDelay+0x3c>
    stat = osErrorISR;
 8006c44:	f06f 0305 	mvn.w	r3, #5
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	e007      	b.n	8006c5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 ffba 	bl	8007bd0 <vTaskDelay>
    }
  }

  return (stat);
 8006c5c:	697b      	ldr	r3, [r7, #20]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000550 	.word	0x20000550

08006c6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4a06      	ldr	r2, [pc, #24]	; (8006c9c <vApplicationGetIdleTaskMemory+0x30>)
 8006c82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20000554 	.word	0x20000554
 8006c9c:	20000610 	.word	0x20000610

08006ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8006cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a06      	ldr	r2, [pc, #24]	; (8006cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20000810 	.word	0x20000810
 8006cd0:	200008cc 	.word	0x200008cc

08006cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f103 0208 	add.w	r2, r3, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f103 0208 	add.w	r2, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f103 0208 	add.w	r2, r3, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d103      	bne.n	8006d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e00c      	b.n	8006db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e002      	b.n	8006da4 <vListInsert+0x2e>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d2f6      	bcs.n	8006d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6892      	ldr	r2, [r2, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6852      	ldr	r2, [r2, #4]
 8006e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d103      	bne.n	8006e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	1e5a      	subs	r2, r3, #1
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10c      	bne.n	8006e6a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e6a:	f002 f8a7 	bl	8008fbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	441a      	add	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d114      	bne.n	8006eea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01a      	beq.n	8006efe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f95d 	bl	800818c <xTaskRemoveFromEventList>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d012      	beq.n	8006efe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <xQueueGenericReset+0xd0>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	e009      	b.n	8006efe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3310      	adds	r3, #16
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff fef0 	bl	8006cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff feeb 	bl	8006cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006efe:	f002 f891 	bl	8009024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f02:	2301      	movs	r3, #1
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	e000ed04 	.word	0xe000ed04

08006f10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08e      	sub	sp, #56	; 0x38
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	b672      	cpsid	i
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	b662      	cpsie	i
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10c      	bne.n	8006f5e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	b672      	cpsid	i
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	b662      	cpsie	i
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <xQueueGenericCreateStatic+0x5a>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <xQueueGenericCreateStatic+0x5e>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericCreateStatic+0x60>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10c      	bne.n	8006f8e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	b672      	cpsid	i
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	b662      	cpsie	i
 8006f88:	623b      	str	r3, [r7, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <xQueueGenericCreateStatic+0x8a>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <xQueueGenericCreateStatic+0x8e>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueGenericCreateStatic+0x90>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	b672      	cpsid	i
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	b662      	cpsie	i
 8006fb8:	61fb      	str	r3, [r7, #28]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fbe:	2350      	movs	r3, #80	; 0x50
 8006fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b50      	cmp	r3, #80	; 0x50
 8006fc6:	d00c      	beq.n	8006fe2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	61bb      	str	r3, [r7, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f805 	bl	8007014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3730      	adds	r7, #48	; 0x30
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e002      	b.n	8007036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007042:	2101      	movs	r1, #1
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f7ff fef9 	bl	8006e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08e      	sub	sp, #56	; 0x38
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10c      	bne.n	8007092 <xQueueGenericSend+0x36>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <xQueueGenericSend+0x44>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueGenericSend+0x48>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueGenericSend+0x4a>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <xQueueGenericSend+0x68>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	b672      	cpsid	i
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	b662      	cpsie	i
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d103      	bne.n	80070d2 <xQueueGenericSend+0x76>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <xQueueGenericSend+0x7a>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <xQueueGenericSend+0x7c>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10c      	bne.n	80070f6 <xQueueGenericSend+0x9a>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	b672      	cpsid	i
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	b662      	cpsie	i
 80070f0:	623b      	str	r3, [r7, #32]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070f6:	f001 fa13 	bl	8008520 <xTaskGetSchedulerState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <xQueueGenericSend+0xaa>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <xQueueGenericSend+0xae>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <xQueueGenericSend+0xb0>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10c      	bne.n	800712a <xQueueGenericSend+0xce>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	b672      	cpsid	i
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	b662      	cpsie	i
 8007124:	61fb      	str	r3, [r7, #28]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800712a:	f001 ff47 	bl	8008fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <xQueueGenericSend+0xe4>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d129      	bne.n	8007194 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007146:	f000 fa15 	bl	8007574 <prvCopyDataToQueue>
 800714a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d010      	beq.n	8007176 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f001 f817 	bl	800818c <xTaskRemoveFromEventList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007164:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <xQueueGenericSend+0x208>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	e00a      	b.n	800718c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800717c:	4b39      	ldr	r3, [pc, #228]	; (8007264 <xQueueGenericSend+0x208>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800718c:	f001 ff4a 	bl	8009024 <vPortExitCritical>
				return pdPASS;
 8007190:	2301      	movs	r3, #1
 8007192:	e063      	b.n	800725c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800719a:	f001 ff43 	bl	8009024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	e05c      	b.n	800725c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f853 	bl	8008258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071b6:	f001 ff35 	bl	8009024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071ba:	f000 fdb3 	bl	8007d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071be:	f001 fefd 	bl	8008fbc <vPortEnterCritical>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d103      	bne.n	80071d8 <xQueueGenericSend+0x17c>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d103      	bne.n	80071ee <xQueueGenericSend+0x192>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ee:	f001 ff19 	bl	8009024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f2:	1d3a      	adds	r2, r7, #4
 80071f4:	f107 0314 	add.w	r3, r7, #20
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f842 	bl	8008284 <xTaskCheckForTimeOut>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d124      	bne.n	8007250 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007208:	f000 faac 	bl	8007764 <prvIsQueueFull>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	3310      	adds	r3, #16
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 ff62 	bl	80080e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007222:	f000 fa37 	bl	8007694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f000 fd8b 	bl	8007d40 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f af7c 	bne.w	800712a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007232:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <xQueueGenericSend+0x208>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	e772      	b.n	800712a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007246:	f000 fa25 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800724a:	f000 fd79 	bl	8007d40 <xTaskResumeAll>
 800724e:	e76c      	b.n	800712a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007252:	f000 fa1f 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007256:	f000 fd73 	bl	8007d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800725a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800725c:	4618      	mov	r0, r3
 800725e:	3738      	adds	r7, #56	; 0x38
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	; 0x38
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10c      	bne.n	800729a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	b672      	cpsid	i
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	b662      	cpsie	i
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <xQueueGenericSendFromISR+0x40>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <xQueueGenericSendFromISR+0x44>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <xQueueGenericSendFromISR+0x46>
 80072ac:	2300      	movs	r3, #0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10c      	bne.n	80072cc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	b672      	cpsid	i
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	b662      	cpsie	i
 80072c6:	623b      	str	r3, [r7, #32]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d103      	bne.n	80072da <xQueueGenericSendFromISR+0x72>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <xQueueGenericSendFromISR+0x76>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <xQueueGenericSendFromISR+0x78>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10c      	bne.n	80072fe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	b672      	cpsid	i
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	b662      	cpsie	i
 80072f8:	61fb      	str	r3, [r7, #28]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072fe:	f001 ff45 	bl	800918c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007302:	f3ef 8211 	mrs	r2, BASEPRI
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	b672      	cpsid	i
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	b662      	cpsie	i
 800731a:	61ba      	str	r2, [r7, #24]
 800731c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800731e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	429a      	cmp	r2, r3
 800732c:	d302      	bcc.n	8007334 <xQueueGenericSendFromISR+0xcc>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d12c      	bne.n	800738e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007344:	f000 f916 	bl	8007574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007348:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d112      	bne.n	8007378 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	3324      	adds	r3, #36	; 0x24
 800735e:	4618      	mov	r0, r3
 8007360:	f000 ff14 	bl	800818c <xTaskRemoveFromEventList>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e007      	b.n	8007388 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007378:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800737c:	3301      	adds	r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	b25a      	sxtb	r2, r3
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007388:	2301      	movs	r3, #1
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800738c:	e001      	b.n	8007392 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800738e:	2300      	movs	r3, #0
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800739c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3738      	adds	r7, #56	; 0x38
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10c      	bne.n	80073dc <xQueueReceive+0x34>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	b672      	cpsid	i
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	b662      	cpsie	i
 80073d6:	623b      	str	r3, [r7, #32]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <xQueueReceive+0x42>
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <xQueueReceive+0x46>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <xQueueReceive+0x48>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <xQueueReceive+0x66>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	b672      	cpsid	i
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	b662      	cpsie	i
 8007408:	61fb      	str	r3, [r7, #28]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800740e:	f001 f887 	bl	8008520 <xTaskGetSchedulerState>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <xQueueReceive+0x76>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <xQueueReceive+0x7a>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueReceive+0x7c>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <xQueueReceive+0x9a>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	b672      	cpsid	i
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	b662      	cpsie	i
 800743c:	61bb      	str	r3, [r7, #24]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007442:	f001 fdbb 	bl	8008fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01f      	beq.n	8007492 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007456:	f000 f8f7 	bl	8007648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00f      	beq.n	800748a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	3310      	adds	r3, #16
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fe8c 	bl	800818c <xTaskRemoveFromEventList>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800747a:	4b3d      	ldr	r3, [pc, #244]	; (8007570 <xQueueReceive+0x1c8>)
 800747c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800748a:	f001 fdcb 	bl	8009024 <vPortExitCritical>
				return pdPASS;
 800748e:	2301      	movs	r3, #1
 8007490:	e069      	b.n	8007566 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d103      	bne.n	80074a0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007498:	f001 fdc4 	bl	8009024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800749c:	2300      	movs	r3, #0
 800749e:	e062      	b.n	8007566 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a6:	f107 0310 	add.w	r3, r7, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fed4 	bl	8008258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b4:	f001 fdb6 	bl	8009024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074b8:	f000 fc34 	bl	8007d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074bc:	f001 fd7e 	bl	8008fbc <vPortEnterCritical>
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d103      	bne.n	80074d6 <xQueueReceive+0x12e>
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d103      	bne.n	80074ec <xQueueReceive+0x144>
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ec:	f001 fd9a 	bl	8009024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f0:	1d3a      	adds	r2, r7, #4
 80074f2:	f107 0310 	add.w	r3, r7, #16
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fec3 	bl	8008284 <xTaskCheckForTimeOut>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d123      	bne.n	800754c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007506:	f000 f917 	bl	8007738 <prvIsQueueEmpty>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fde3 	bl	80080e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800751e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007520:	f000 f8b8 	bl	8007694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007524:	f000 fc0c 	bl	8007d40 <xTaskResumeAll>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d189      	bne.n	8007442 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <xQueueReceive+0x1c8>)
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	e780      	b.n	8007442 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007542:	f000 f8a7 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007546:	f000 fbfb 	bl	8007d40 <xTaskResumeAll>
 800754a:	e77a      	b.n	8007442 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800754c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754e:	f000 f8a1 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007552:	f000 fbf5 	bl	8007d40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f000 f8ee 	bl	8007738 <prvIsQueueEmpty>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	f43f af6f 	beq.w	8007442 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007566:	4618      	mov	r0, r3
 8007568:	3730      	adds	r7, #48	; 0x30
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10d      	bne.n	80075ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d14d      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 ffdc 	bl	800855c <xTaskPriorityDisinherit>
 80075a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	e043      	b.n	8007636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d119      	bne.n	80075e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6858      	ldr	r0, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	461a      	mov	r2, r3
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	f002 f832 	bl	8009628 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d32b      	bcc.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	e026      	b.n	8007636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68d8      	ldr	r0, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	461a      	mov	r2, r3
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	f002 f818 	bl	8009628 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	425b      	negs	r3, r3
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d207      	bcs.n	8007624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	425b      	negs	r3, r3
 800761e:	441a      	add	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d105      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d303      	bcc.n	800767c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68d9      	ldr	r1, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	461a      	mov	r2, r3
 8007686:	6838      	ldr	r0, [r7, #0]
 8007688:	f001 ffce 	bl	8009628 <memcpy>
	}
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800769c:	f001 fc8e 	bl	8008fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a8:	e011      	b.n	80076ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d012      	beq.n	80076d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3324      	adds	r3, #36	; 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fd68 	bl	800818c <xTaskRemoveFromEventList>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076c2:	f000 fe45 	bl	8008350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dce9      	bgt.n	80076aa <prvUnlockQueue+0x16>
 80076d6:	e000      	b.n	80076da <prvUnlockQueue+0x46>
					break;
 80076d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	22ff      	movs	r2, #255	; 0xff
 80076de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076e2:	f001 fc9f 	bl	8009024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076e6:	f001 fc69 	bl	8008fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076f2:	e011      	b.n	8007718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d012      	beq.n	8007722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3310      	adds	r3, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd43 	bl	800818c <xTaskRemoveFromEventList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800770c:	f000 fe20 	bl	8008350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	3b01      	subs	r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dce9      	bgt.n	80076f4 <prvUnlockQueue+0x60>
 8007720:	e000      	b.n	8007724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	22ff      	movs	r2, #255	; 0xff
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800772c:	f001 fc7a 	bl	8009024 <vPortExitCritical>
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007740:	f001 fc3c 	bl	8008fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e001      	b.n	8007756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007756:	f001 fc65 	bl	8009024 <vPortExitCritical>

	return xReturn;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800776c:	f001 fc26 	bl	8008fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e001      	b.n	8007786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fc4d 	bl	8009024 <vPortExitCritical>

	return xReturn;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e014      	b.n	80077ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077a4:	4a0f      	ldr	r2, [pc, #60]	; (80077e4 <vQueueAddToRegistry+0x50>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10b      	bne.n	80077c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077b0:	490c      	ldr	r1, [pc, #48]	; (80077e4 <vQueueAddToRegistry+0x50>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ba:	4a0a      	ldr	r2, [pc, #40]	; (80077e4 <vQueueAddToRegistry+0x50>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077c6:	e006      	b.n	80077d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d9e7      	bls.n	80077a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000ccc 	.word	0x20000ccc

080077e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077f8:	f001 fbe0 	bl	8008fbc <vPortEnterCritical>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007802:	b25b      	sxtb	r3, r3
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d103      	bne.n	8007812 <vQueueWaitForMessageRestricted+0x2a>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007818:	b25b      	sxtb	r3, r3
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d103      	bne.n	8007828 <vQueueWaitForMessageRestricted+0x40>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007828:	f001 fbfc 	bl	8009024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3324      	adds	r3, #36	; 0x24
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fc77 	bl	8008130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff26 	bl	8007694 <prvUnlockQueue>
	}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	; 0x38
 8007854:	af04      	add	r7, sp, #16
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800785e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	623b      	str	r3, [r7, #32]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10c      	bne.n	800789e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	b672      	cpsid	i
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	b662      	cpsie	i
 8007898:	61fb      	str	r3, [r7, #28]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800789e:	23bc      	movs	r3, #188	; 0xbc
 80078a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2bbc      	cmp	r3, #188	; 0xbc
 80078a6:	d00c      	beq.n	80078c2 <xTaskCreateStatic+0x72>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	b672      	cpsid	i
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	b662      	cpsie	i
 80078bc:	61bb      	str	r3, [r7, #24]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01e      	beq.n	8007908 <xTaskCreateStatic+0xb8>
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01b      	beq.n	8007908 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078e2:	2300      	movs	r3, #0
 80078e4:	9303      	str	r3, [sp, #12]
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f850 	bl	80079a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007902:	f000 f8f5 	bl	8007af0 <prvAddNewTaskToReadyList>
 8007906:	e001      	b.n	800790c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800790c:	697b      	ldr	r3, [r7, #20]
	}
 800790e:	4618      	mov	r0, r3
 8007910:	3728      	adds	r7, #40	; 0x28
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007916:	b580      	push	{r7, lr}
 8007918:	b08c      	sub	sp, #48	; 0x30
 800791a:	af04      	add	r7, sp, #16
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fc72 	bl	8009214 <pvPortMalloc>
 8007930:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007938:	20bc      	movs	r0, #188	; 0xbc
 800793a:	f001 fc6b 	bl	8009214 <pvPortMalloc>
 800793e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
 800794c:	e005      	b.n	800795a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f001 fd2a 	bl	80093a8 <vPortFree>
 8007954:	e001      	b.n	800795a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d017      	beq.n	8007990 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	2300      	movs	r3, #0
 800796c:	9303      	str	r3, [sp, #12]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f80e 	bl	80079a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007984:	69f8      	ldr	r0, [r7, #28]
 8007986:	f000 f8b3 	bl	8007af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800798a:	2301      	movs	r3, #1
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	e002      	b.n	8007996 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007996:	69bb      	ldr	r3, [r7, #24]
	}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	461a      	mov	r2, r3
 80079b8:	21a5      	movs	r1, #165	; 0xa5
 80079ba:	f001 fe43 	bl	8009644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80079c8:	440b      	add	r3, r1
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	b672      	cpsid	i
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	b662      	cpsie	i
 80079f6:	617b      	str	r3, [r7, #20]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01f      	beq.n	8007a42 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	e012      	b.n	8007a2e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	7819      	ldrb	r1, [r3, #0]
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	4413      	add	r3, r2
 8007a16:	3334      	adds	r3, #52	; 0x34
 8007a18:	460a      	mov	r2, r1
 8007a1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d006      	beq.n	8007a36 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2b0f      	cmp	r3, #15
 8007a32:	d9e9      	bls.n	8007a08 <prvInitialiseNewTask+0x68>
 8007a34:	e000      	b.n	8007a38 <prvInitialiseNewTask+0x98>
			{
				break;
 8007a36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a40:	e003      	b.n	8007a4a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b37      	cmp	r3, #55	; 0x37
 8007a4e:	d901      	bls.n	8007a54 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a50:	2337      	movs	r3, #55	; 0x37
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2200      	movs	r2, #0
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff f952 	bl	8006d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	3318      	adds	r3, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff f94d 	bl	8006d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	3354      	adds	r3, #84	; 0x54
 8007aa4:	2260      	movs	r2, #96	; 0x60
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 fdcb 	bl	8009644 <memset>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	; (8007ae4 <prvInitialiseNewTask+0x144>)
 8007ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <prvInitialiseNewTask+0x148>)
 8007ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	4a0b      	ldr	r2, [pc, #44]	; (8007aec <prvInitialiseNewTask+0x14c>)
 8007abe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	69b8      	ldr	r0, [r7, #24]
 8007ac6:	f001 f96b 	bl	8008da0 <pxPortInitialiseStack>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007adc:	bf00      	nop
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	08009870 	.word	0x08009870
 8007ae8:	08009890 	.word	0x08009890
 8007aec:	08009850 	.word	0x08009850

08007af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007af8:	f001 fa60 	bl	8008fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007afc:	4b2d      	ldr	r3, [pc, #180]	; (8007bb4 <prvAddNewTaskToReadyList+0xc4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3301      	adds	r3, #1
 8007b02:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <prvAddNewTaskToReadyList+0xc4>)
 8007b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b06:	4b2c      	ldr	r3, [pc, #176]	; (8007bb8 <prvAddNewTaskToReadyList+0xc8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b0e:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <prvAddNewTaskToReadyList+0xc8>)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b14:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <prvAddNewTaskToReadyList+0xc4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d110      	bne.n	8007b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b1c:	f000 fc3c 	bl	8008398 <prvInitialiseTaskLists>
 8007b20:	e00d      	b.n	8007b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b22:	4b26      	ldr	r3, [pc, #152]	; (8007bbc <prvAddNewTaskToReadyList+0xcc>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b2a:	4b23      	ldr	r3, [pc, #140]	; (8007bb8 <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d802      	bhi.n	8007b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b38:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <prvAddNewTaskToReadyList+0xc8>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b3e:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <prvAddNewTaskToReadyList+0xd0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <prvAddNewTaskToReadyList+0xd0>)
 8007b46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <prvAddNewTaskToReadyList+0xd0>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4b1b      	ldr	r3, [pc, #108]	; (8007bc4 <prvAddNewTaskToReadyList+0xd4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d903      	bls.n	8007b64 <prvAddNewTaskToReadyList+0x74>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <prvAddNewTaskToReadyList+0xd4>)
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <prvAddNewTaskToReadyList+0xd8>)
 8007b72:	441a      	add	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7ff f8d7 	bl	8006d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b80:	f001 fa50 	bl	8009024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b84:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <prvAddNewTaskToReadyList+0xcc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvAddNewTaskToReadyList+0xc8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d207      	bcs.n	8007baa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <prvAddNewTaskToReadyList+0xdc>)
 8007b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200011e0 	.word	0x200011e0
 8007bb8:	20000d0c 	.word	0x20000d0c
 8007bbc:	200011ec 	.word	0x200011ec
 8007bc0:	200011fc 	.word	0x200011fc
 8007bc4:	200011e8 	.word	0x200011e8
 8007bc8:	20000d10 	.word	0x20000d10
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d019      	beq.n	8007c16 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <vTaskDelay+0x64>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00c      	beq.n	8007c04 <vTaskDelay+0x34>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	b672      	cpsid	i
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	b662      	cpsie	i
 8007bfe:	60bb      	str	r3, [r7, #8]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007c04:	f000 f88e 	bl	8007d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c08:	2100      	movs	r1, #0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fd18 	bl	8008640 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c10:	f000 f896 	bl	8007d40 <xTaskResumeAll>
 8007c14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007c1c:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <vTaskDelay+0x68>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20001208 	.word	0x20001208
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	; 0x28
 8007c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	1d39      	adds	r1, r7, #4
 8007c4e:	f107 0308 	add.w	r3, r7, #8
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff f80a 	bl	8006c6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	9202      	str	r2, [sp, #8]
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	2300      	movs	r3, #0
 8007c68:	460a      	mov	r2, r1
 8007c6a:	4926      	ldr	r1, [pc, #152]	; (8007d04 <vTaskStartScheduler+0xc8>)
 8007c6c:	4826      	ldr	r0, [pc, #152]	; (8007d08 <vTaskStartScheduler+0xcc>)
 8007c6e:	f7ff fdef 	bl	8007850 <xTaskCreateStatic>
 8007c72:	4603      	mov	r3, r0
 8007c74:	4a25      	ldr	r2, [pc, #148]	; (8007d0c <vTaskStartScheduler+0xd0>)
 8007c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c78:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <vTaskStartScheduler+0xd0>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c80:	2301      	movs	r3, #1
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e001      	b.n	8007c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d102      	bne.n	8007c96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c90:	f000 fd2a 	bl	80086e8 <xTimerCreateTimerTask>
 8007c94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d11d      	bne.n	8007cd8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	b672      	cpsid	i
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	b662      	cpsie	i
 8007cb0:	613b      	str	r3, [r7, #16]
}
 8007cb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <vTaskStartScheduler+0xd4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3354      	adds	r3, #84	; 0x54
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <vTaskStartScheduler+0xd8>)
 8007cbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <vTaskStartScheduler+0xdc>)
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <vTaskStartScheduler+0xe0>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ccc:	4b14      	ldr	r3, [pc, #80]	; (8007d20 <vTaskStartScheduler+0xe4>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cd2:	f001 f8f5 	bl	8008ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cd6:	e010      	b.n	8007cfa <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d10c      	bne.n	8007cfa <vTaskStartScheduler+0xbe>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <vTaskStartScheduler+0xbc>
}
 8007cfa:	bf00      	nop
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	080097fc 	.word	0x080097fc
 8007d08:	08008369 	.word	0x08008369
 8007d0c:	20001204 	.word	0x20001204
 8007d10:	20000d0c 	.word	0x20000d0c
 8007d14:	20000010 	.word	0x20000010
 8007d18:	20001200 	.word	0x20001200
 8007d1c:	200011ec 	.word	0x200011ec
 8007d20:	200011e4 	.word	0x200011e4

08007d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <vTaskSuspendAll+0x18>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <vTaskSuspendAll+0x18>)
 8007d30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20001208 	.word	0x20001208

08007d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d4e:	4b43      	ldr	r3, [pc, #268]	; (8007e5c <xTaskResumeAll+0x11c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10c      	bne.n	8007d70 <xTaskResumeAll+0x30>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	b672      	cpsid	i
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	b662      	cpsie	i
 8007d6a:	603b      	str	r3, [r7, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d70:	f001 f924 	bl	8008fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d74:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <xTaskResumeAll+0x11c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	4a38      	ldr	r2, [pc, #224]	; (8007e5c <xTaskResumeAll+0x11c>)
 8007d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b37      	ldr	r3, [pc, #220]	; (8007e5c <xTaskResumeAll+0x11c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d162      	bne.n	8007e4c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d86:	4b36      	ldr	r3, [pc, #216]	; (8007e60 <xTaskResumeAll+0x120>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d05e      	beq.n	8007e4c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d8e:	e02f      	b.n	8007df0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d90:	4b34      	ldr	r3, [pc, #208]	; (8007e64 <xTaskResumeAll+0x124>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3318      	adds	r3, #24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff f823 	bl	8006de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff f81e 	bl	8006de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <xTaskResumeAll+0x128>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <xTaskResumeAll+0x80>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <xTaskResumeAll+0x128>)
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <xTaskResumeAll+0x12c>)
 8007dce:	441a      	add	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7fe ffa9 	bl	8006d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4b23      	ldr	r3, [pc, #140]	; (8007e70 <xTaskResumeAll+0x130>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d302      	bcc.n	8007df0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007dea:	4b22      	ldr	r3, [pc, #136]	; (8007e74 <xTaskResumeAll+0x134>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df0:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <xTaskResumeAll+0x124>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1cb      	bne.n	8007d90 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dfe:	f000 fb6f 	bl	80084e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e02:	4b1d      	ldr	r3, [pc, #116]	; (8007e78 <xTaskResumeAll+0x138>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e0e:	f000 f847 	bl	8007ea0 <xTaskIncrementTick>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007e18:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <xTaskResumeAll+0x134>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f1      	bne.n	8007e0e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <xTaskResumeAll+0x138>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e30:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <xTaskResumeAll+0x134>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e3c:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <xTaskResumeAll+0x13c>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e4c:	f001 f8ea 	bl	8009024 <vPortExitCritical>

	return xAlreadyYielded;
 8007e50:	68bb      	ldr	r3, [r7, #8]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20001208 	.word	0x20001208
 8007e60:	200011e0 	.word	0x200011e0
 8007e64:	200011a0 	.word	0x200011a0
 8007e68:	200011e8 	.word	0x200011e8
 8007e6c:	20000d10 	.word	0x20000d10
 8007e70:	20000d0c 	.word	0x20000d0c
 8007e74:	200011f4 	.word	0x200011f4
 8007e78:	200011f0 	.word	0x200011f0
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <xTaskGetTickCount+0x1c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e8c:	687b      	ldr	r3, [r7, #4]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	200011e4 	.word	0x200011e4

08007ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eaa:	4b50      	ldr	r3, [pc, #320]	; (8007fec <xTaskIncrementTick+0x14c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f040 808b 	bne.w	8007fca <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007eb4:	4b4e      	ldr	r3, [pc, #312]	; (8007ff0 <xTaskIncrementTick+0x150>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ebc:	4a4c      	ldr	r2, [pc, #304]	; (8007ff0 <xTaskIncrementTick+0x150>)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d122      	bne.n	8007f0e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ec8:	4b4a      	ldr	r3, [pc, #296]	; (8007ff4 <xTaskIncrementTick+0x154>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00c      	beq.n	8007eec <xTaskIncrementTick+0x4c>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	b672      	cpsid	i
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	b662      	cpsie	i
 8007ee6:	603b      	str	r3, [r7, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <xTaskIncrementTick+0x4a>
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <xTaskIncrementTick+0x154>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	4b41      	ldr	r3, [pc, #260]	; (8007ff8 <xTaskIncrementTick+0x158>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a3f      	ldr	r2, [pc, #252]	; (8007ff4 <xTaskIncrementTick+0x154>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <xTaskIncrementTick+0x158>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <xTaskIncrementTick+0x15c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a3d      	ldr	r2, [pc, #244]	; (8007ffc <xTaskIncrementTick+0x15c>)
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	f000 fae9 	bl	80084e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f0e:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <xTaskIncrementTick+0x160>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d349      	bcc.n	8007fac <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <xTaskIncrementTick+0x154>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <xTaskIncrementTick+0x160>)
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	601a      	str	r2, [r3, #0]
					break;
 8007f2a:	e03f      	b.n	8007fac <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <xTaskIncrementTick+0x154>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d203      	bcs.n	8007f4c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f44:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <xTaskIncrementTick+0x160>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f4a:	e02f      	b.n	8007fac <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe ff49 	bl	8006de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3318      	adds	r3, #24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe ff40 	bl	8006de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	4b25      	ldr	r3, [pc, #148]	; (8008004 <xTaskIncrementTick+0x164>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <xTaskIncrementTick+0xdc>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	4a22      	ldr	r2, [pc, #136]	; (8008004 <xTaskIncrementTick+0x164>)
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4a1f      	ldr	r2, [pc, #124]	; (8008008 <xTaskIncrementTick+0x168>)
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7fe fecb 	bl	8006d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <xTaskIncrementTick+0x16c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d3b8      	bcc.n	8007f18 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007faa:	e7b5      	b.n	8007f18 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <xTaskIncrementTick+0x16c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4915      	ldr	r1, [pc, #84]	; (8008008 <xTaskIncrementTick+0x168>)
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d907      	bls.n	8007fd4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e004      	b.n	8007fd4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <xTaskIncrementTick+0x170>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <xTaskIncrementTick+0x170>)
 8007fd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fd4:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <xTaskIncrementTick+0x174>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fe0:	697b      	ldr	r3, [r7, #20]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20001208 	.word	0x20001208
 8007ff0:	200011e4 	.word	0x200011e4
 8007ff4:	20001198 	.word	0x20001198
 8007ff8:	2000119c 	.word	0x2000119c
 8007ffc:	200011f8 	.word	0x200011f8
 8008000:	20001200 	.word	0x20001200
 8008004:	200011e8 	.word	0x200011e8
 8008008:	20000d10 	.word	0x20000d10
 800800c:	20000d0c 	.word	0x20000d0c
 8008010:	200011f0 	.word	0x200011f0
 8008014:	200011f4 	.word	0x200011f4

08008018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800801e:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <vTaskSwitchContext+0xb4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <vTaskSwitchContext+0xb8>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800802c:	e048      	b.n	80080c0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800802e:	4b28      	ldr	r3, [pc, #160]	; (80080d0 <vTaskSwitchContext+0xb8>)
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008034:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <vTaskSwitchContext+0xbc>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e012      	b.n	8008062 <vTaskSwitchContext+0x4a>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10c      	bne.n	800805c <vTaskSwitchContext+0x44>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	b672      	cpsid	i
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	b662      	cpsie	i
 8008056:	607b      	str	r3, [r7, #4]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <vTaskSwitchContext+0x42>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	491d      	ldr	r1, [pc, #116]	; (80080d8 <vTaskSwitchContext+0xc0>)
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0e2      	beq.n	800803c <vTaskSwitchContext+0x24>
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <vTaskSwitchContext+0xc0>)
 8008082:	4413      	add	r3, r2
 8008084:	60bb      	str	r3, [r7, #8]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	3308      	adds	r3, #8
 8008098:	429a      	cmp	r2, r3
 800809a:	d104      	bne.n	80080a6 <vTaskSwitchContext+0x8e>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4a0b      	ldr	r2, [pc, #44]	; (80080dc <vTaskSwitchContext+0xc4>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	4a08      	ldr	r2, [pc, #32]	; (80080d4 <vTaskSwitchContext+0xbc>)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080b6:	4b09      	ldr	r3, [pc, #36]	; (80080dc <vTaskSwitchContext+0xc4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3354      	adds	r3, #84	; 0x54
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <vTaskSwitchContext+0xc8>)
 80080be:	6013      	str	r3, [r2, #0]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	20001208 	.word	0x20001208
 80080d0:	200011f4 	.word	0x200011f4
 80080d4:	200011e8 	.word	0x200011e8
 80080d8:	20000d10 	.word	0x20000d10
 80080dc:	20000d0c 	.word	0x20000d0c
 80080e0:	20000010 	.word	0x20000010

080080e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	60fb      	str	r3, [r7, #12]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800810e:	4b07      	ldr	r3, [pc, #28]	; (800812c <vTaskPlaceOnEventList+0x48>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3318      	adds	r3, #24
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fe fe2d 	bl	8006d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800811c:	2101      	movs	r1, #1
 800811e:	6838      	ldr	r0, [r7, #0]
 8008120:	f000 fa8e 	bl	8008640 <prvAddCurrentTaskToDelayedList>
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000d0c 	.word	0x20000d0c

08008130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10c      	bne.n	800815c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	b672      	cpsid	i
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	b662      	cpsie	i
 8008156:	617b      	str	r3, [r7, #20]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <vTaskPlaceOnEventListRestricted+0x58>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3318      	adds	r3, #24
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7fe fde2 	bl	8006d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	68b8      	ldr	r0, [r7, #8]
 800817a:	f000 fa61 	bl	8008640 <prvAddCurrentTaskToDelayedList>
	}
 800817e:	bf00      	nop
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000d0c 	.word	0x20000d0c

0800818c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10c      	bne.n	80081bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	b672      	cpsid	i
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	b662      	cpsie	i
 80081b6:	60fb      	str	r3, [r7, #12]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3318      	adds	r3, #24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fe11 	bl	8006de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c6:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <xTaskRemoveFromEventList+0xb4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d11d      	bne.n	800820a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fe08 	bl	8006de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b19      	ldr	r3, [pc, #100]	; (8008244 <xTaskRemoveFromEventList+0xb8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <xTaskRemoveFromEventList+0x60>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a16      	ldr	r2, [pc, #88]	; (8008244 <xTaskRemoveFromEventList+0xb8>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <xTaskRemoveFromEventList+0xbc>)
 80081fa:	441a      	add	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe fd93 	bl	8006d2e <vListInsertEnd>
 8008208:	e005      	b.n	8008216 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3318      	adds	r3, #24
 800820e:	4619      	mov	r1, r3
 8008210:	480e      	ldr	r0, [pc, #56]	; (800824c <xTaskRemoveFromEventList+0xc0>)
 8008212:	f7fe fd8c 	bl	8006d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <xTaskRemoveFromEventList+0xc4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	429a      	cmp	r2, r3
 8008222:	d905      	bls.n	8008230 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <xTaskRemoveFromEventList+0xc8>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e001      	b.n	8008234 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008234:	697b      	ldr	r3, [r7, #20]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20001208 	.word	0x20001208
 8008244:	200011e8 	.word	0x200011e8
 8008248:	20000d10 	.word	0x20000d10
 800824c:	200011a0 	.word	0x200011a0
 8008250:	20000d0c 	.word	0x20000d0c
 8008254:	200011f4 	.word	0x200011f4

08008258 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <vTaskInternalSetTimeOutState+0x24>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <vTaskInternalSetTimeOutState+0x28>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	200011f8 	.word	0x200011f8
 8008280:	200011e4 	.word	0x200011e4

08008284 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10c      	bne.n	80082ae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	b672      	cpsid	i
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	b662      	cpsie	i
 80082a8:	613b      	str	r3, [r7, #16]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10c      	bne.n	80082ce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80082ce:	f000 fe75 	bl	8008fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082d2:	4b1d      	ldr	r3, [pc, #116]	; (8008348 <xTaskCheckForTimeOut+0xc4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d102      	bne.n	80082f2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	e023      	b.n	800833a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <xTaskCheckForTimeOut+0xc8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d007      	beq.n	800830e <xTaskCheckForTimeOut+0x8a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	429a      	cmp	r2, r3
 8008306:	d302      	bcc.n	800830e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008308:	2301      	movs	r3, #1
 800830a:	61fb      	str	r3, [r7, #28]
 800830c:	e015      	b.n	800833a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	429a      	cmp	r2, r3
 8008316:	d20b      	bcs.n	8008330 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	1ad2      	subs	r2, r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff ff97 	bl	8008258 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	e004      	b.n	800833a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800833a:	f000 fe73 	bl	8009024 <vPortExitCritical>

	return xReturn;
 800833e:	69fb      	ldr	r3, [r7, #28]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	200011e4 	.word	0x200011e4
 800834c:	200011f8 	.word	0x200011f8

08008350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008354:	4b03      	ldr	r3, [pc, #12]	; (8008364 <vTaskMissedYield+0x14>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	bf00      	nop
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	200011f4 	.word	0x200011f4

08008368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008370:	f000 f852 	bl	8008418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <prvIdleTask+0x28>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d9f9      	bls.n	8008370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <prvIdleTask+0x2c>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800838c:	e7f0      	b.n	8008370 <prvIdleTask+0x8>
 800838e:	bf00      	nop
 8008390:	20000d10 	.word	0x20000d10
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800839e:	2300      	movs	r3, #0
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	e00c      	b.n	80083be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4a12      	ldr	r2, [pc, #72]	; (80083f8 <prvInitialiseTaskLists+0x60>)
 80083b0:	4413      	add	r3, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fc8e 	bl	8006cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3301      	adds	r3, #1
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b37      	cmp	r3, #55	; 0x37
 80083c2:	d9ef      	bls.n	80083a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083c4:	480d      	ldr	r0, [pc, #52]	; (80083fc <prvInitialiseTaskLists+0x64>)
 80083c6:	f7fe fc85 	bl	8006cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ca:	480d      	ldr	r0, [pc, #52]	; (8008400 <prvInitialiseTaskLists+0x68>)
 80083cc:	f7fe fc82 	bl	8006cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083d0:	480c      	ldr	r0, [pc, #48]	; (8008404 <prvInitialiseTaskLists+0x6c>)
 80083d2:	f7fe fc7f 	bl	8006cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083d6:	480c      	ldr	r0, [pc, #48]	; (8008408 <prvInitialiseTaskLists+0x70>)
 80083d8:	f7fe fc7c 	bl	8006cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083dc:	480b      	ldr	r0, [pc, #44]	; (800840c <prvInitialiseTaskLists+0x74>)
 80083de:	f7fe fc79 	bl	8006cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <prvInitialiseTaskLists+0x78>)
 80083e4:	4a05      	ldr	r2, [pc, #20]	; (80083fc <prvInitialiseTaskLists+0x64>)
 80083e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <prvInitialiseTaskLists+0x7c>)
 80083ea:	4a05      	ldr	r2, [pc, #20]	; (8008400 <prvInitialiseTaskLists+0x68>)
 80083ec:	601a      	str	r2, [r3, #0]
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000d10 	.word	0x20000d10
 80083fc:	20001170 	.word	0x20001170
 8008400:	20001184 	.word	0x20001184
 8008404:	200011a0 	.word	0x200011a0
 8008408:	200011b4 	.word	0x200011b4
 800840c:	200011cc 	.word	0x200011cc
 8008410:	20001198 	.word	0x20001198
 8008414:	2000119c 	.word	0x2000119c

08008418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800841e:	e019      	b.n	8008454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008420:	f000 fdcc 	bl	8008fbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008424:	4b10      	ldr	r3, [pc, #64]	; (8008468 <prvCheckTasksWaitingTermination+0x50>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fcd9 	bl	8006de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <prvCheckTasksWaitingTermination+0x54>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3b01      	subs	r3, #1
 800843c:	4a0b      	ldr	r2, [pc, #44]	; (800846c <prvCheckTasksWaitingTermination+0x54>)
 800843e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3b01      	subs	r3, #1
 8008446:	4a0a      	ldr	r2, [pc, #40]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800844a:	f000 fdeb 	bl	8009024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f810 	bl	8008474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008454:	4b06      	ldr	r3, [pc, #24]	; (8008470 <prvCheckTasksWaitingTermination+0x58>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e1      	bne.n	8008420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200011b4 	.word	0x200011b4
 800846c:	200011e0 	.word	0x200011e0
 8008470:	200011c8 	.word	0x200011c8

08008474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3354      	adds	r3, #84	; 0x54
 8008480:	4618      	mov	r0, r3
 8008482:	f001 f8f5 	bl	8009670 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800848c:	2b00      	cmp	r3, #0
 800848e:	d108      	bne.n	80084a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	4618      	mov	r0, r3
 8008496:	f000 ff87 	bl	80093a8 <vPortFree>
				vPortFree( pxTCB );
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 ff84 	bl	80093a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084a0:	e01a      	b.n	80084d8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d103      	bne.n	80084b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 ff7b 	bl	80093a8 <vPortFree>
	}
 80084b2:	e011      	b.n	80084d8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d00c      	beq.n	80084d8 <prvDeleteTCB+0x64>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	b672      	cpsid	i
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	b662      	cpsie	i
 80084d2:	60fb      	str	r3, [r7, #12]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <prvDeleteTCB+0x62>
	}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f8:	e008      	b.n	800850c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4a04      	ldr	r2, [pc, #16]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	20001198 	.word	0x20001198
 800851c:	20001200 	.word	0x20001200

08008520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <xTaskGetSchedulerState+0x34>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800852e:	2301      	movs	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	e008      	b.n	8008546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <xTaskGetSchedulerState+0x38>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800853c:	2302      	movs	r3, #2
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	e001      	b.n	8008546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008546:	687b      	ldr	r3, [r7, #4]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	200011ec 	.word	0x200011ec
 8008558:	20001208 	.word	0x20001208

0800855c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d05a      	beq.n	8008628 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008572:	4b30      	ldr	r3, [pc, #192]	; (8008634 <xTaskPriorityDisinherit+0xd8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	429a      	cmp	r2, r3
 800857a:	d00c      	beq.n	8008596 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	b672      	cpsid	i
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	b662      	cpsie	i
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10c      	bne.n	80085b8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	b672      	cpsid	i
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	b662      	cpsie	i
 80085b2:	60bb      	str	r3, [r7, #8]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085bc:	1e5a      	subs	r2, r3, #1
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d02c      	beq.n	8008628 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d128      	bne.n	8008628 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3304      	adds	r3, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fc04 	bl	8006de8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <xTaskPriorityDisinherit+0xdc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d903      	bls.n	8008608 <xTaskPriorityDisinherit+0xac>
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a0c      	ldr	r2, [pc, #48]	; (8008638 <xTaskPriorityDisinherit+0xdc>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a09      	ldr	r2, [pc, #36]	; (800863c <xTaskPriorityDisinherit+0xe0>)
 8008616:	441a      	add	r2, r3
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fb85 	bl	8006d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008628:	697b      	ldr	r3, [r7, #20]
	}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000d0c 	.word	0x20000d0c
 8008638:	200011e8 	.word	0x200011e8
 800863c:	20000d10 	.word	0x20000d10

08008640 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800864a:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008650:	4b20      	ldr	r3, [pc, #128]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3304      	adds	r3, #4
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fbc6 	bl	8006de8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d10a      	bne.n	800867a <prvAddCurrentTaskToDelayedList+0x3a>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800866a:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4819      	ldr	r0, [pc, #100]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008674:	f7fe fb5b 	bl	8006d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008678:	e026      	b.n	80086c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4413      	add	r3, r2
 8008680:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008682:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d209      	bcs.n	80086a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008692:	4b12      	ldr	r3, [pc, #72]	; (80086dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7fe fb69 	bl	8006d76 <vListInsert>
}
 80086a4:	e010      	b.n	80086c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7fe fb5f 	bl	8006d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d202      	bcs.n	80086c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086c2:	4a08      	ldr	r2, [pc, #32]	; (80086e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6013      	str	r3, [r2, #0]
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200011e4 	.word	0x200011e4
 80086d4:	20000d0c 	.word	0x20000d0c
 80086d8:	200011cc 	.word	0x200011cc
 80086dc:	2000119c 	.word	0x2000119c
 80086e0:	20001198 	.word	0x20001198
 80086e4:	20001200 	.word	0x20001200

080086e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	; 0x28
 80086ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086f2:	f000 fb15 	bl	8008d20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086f6:	4b1d      	ldr	r3, [pc, #116]	; (800876c <xTimerCreateTimerTask+0x84>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d021      	beq.n	8008742 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008706:	1d3a      	adds	r2, r7, #4
 8008708:	f107 0108 	add.w	r1, r7, #8
 800870c:	f107 030c 	add.w	r3, r7, #12
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fac5 	bl	8006ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	9202      	str	r2, [sp, #8]
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	2302      	movs	r3, #2
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	460a      	mov	r2, r1
 8008728:	4911      	ldr	r1, [pc, #68]	; (8008770 <xTimerCreateTimerTask+0x88>)
 800872a:	4812      	ldr	r0, [pc, #72]	; (8008774 <xTimerCreateTimerTask+0x8c>)
 800872c:	f7ff f890 	bl	8007850 <xTaskCreateStatic>
 8008730:	4603      	mov	r3, r0
 8008732:	4a11      	ldr	r2, [pc, #68]	; (8008778 <xTimerCreateTimerTask+0x90>)
 8008734:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <xTimerCreateTimerTask+0x90>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800873e:	2301      	movs	r3, #1
 8008740:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10c      	bne.n	8008762 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	b672      	cpsid	i
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	b662      	cpsie	i
 800875c:	613b      	str	r3, [r7, #16]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008762:	697b      	ldr	r3, [r7, #20]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	2000123c 	.word	0x2000123c
 8008770:	08009804 	.word	0x08009804
 8008774:	080088b9 	.word	0x080088b9
 8008778:	20001240 	.word	0x20001240

0800877c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10c      	bne.n	80087ae <xTimerGenericCommand+0x32>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	b672      	cpsid	i
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	b662      	cpsie	i
 80087a8:	623b      	str	r3, [r7, #32]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087ae:	4b1a      	ldr	r3, [pc, #104]	; (8008818 <xTimerGenericCommand+0x9c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02a      	beq.n	800880c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	dc18      	bgt.n	80087fa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087c8:	f7ff feaa 	bl	8008520 <xTaskGetSchedulerState>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d109      	bne.n	80087e6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <xTimerGenericCommand+0x9c>)
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f107 0110 	add.w	r1, r7, #16
 80087da:	2300      	movs	r3, #0
 80087dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087de:	f7fe fc3d 	bl	800705c <xQueueGenericSend>
 80087e2:	6278      	str	r0, [r7, #36]	; 0x24
 80087e4:	e012      	b.n	800880c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <xTimerGenericCommand+0x9c>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f107 0110 	add.w	r1, r7, #16
 80087ee:	2300      	movs	r3, #0
 80087f0:	2200      	movs	r2, #0
 80087f2:	f7fe fc33 	bl	800705c <xQueueGenericSend>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24
 80087f8:	e008      	b.n	800880c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <xTimerGenericCommand+0x9c>)
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f107 0110 	add.w	r1, r7, #16
 8008802:	2300      	movs	r3, #0
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	f7fe fd2f 	bl	8007268 <xQueueGenericSendFromISR>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800880e:	4618      	mov	r0, r3
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	2000123c 	.word	0x2000123c

0800881c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008826:	4b23      	ldr	r3, [pc, #140]	; (80088b4 <prvProcessExpiredTimer+0x98>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fad7 	bl	8006de8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d024      	beq.n	8008892 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	18d1      	adds	r1, r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	6978      	ldr	r0, [r7, #20]
 8008856:	f000 f8d3 	bl	8008a00 <prvInsertTimerInActiveList>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d021      	beq.n	80088a4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008860:	2300      	movs	r3, #0
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	2300      	movs	r3, #0
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	2100      	movs	r1, #0
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	f7ff ff86 	bl	800877c <xTimerGenericCommand>
 8008870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d115      	bne.n	80088a4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	b672      	cpsid	i
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	b662      	cpsie	i
 800888c:	60fb      	str	r3, [r7, #12]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008898:	f023 0301 	bic.w	r3, r3, #1
 800889c:	b2da      	uxtb	r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	6978      	ldr	r0, [r7, #20]
 80088aa:	4798      	blx	r3
}
 80088ac:	bf00      	nop
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20001234 	.word	0x20001234

080088b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f857 	bl	8008978 <prvGetNextExpireTime>
 80088ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4619      	mov	r1, r3
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f803 	bl	80088dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088d6:	f000 f8d5 	bl	8008a84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088da:	e7f1      	b.n	80088c0 <prvTimerTask+0x8>

080088dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088e6:	f7ff fa1d 	bl	8007d24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ea:	f107 0308 	add.w	r3, r7, #8
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f866 	bl	80089c0 <prvSampleTimeNow>
 80088f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d130      	bne.n	800895e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <prvProcessTimerOrBlockTask+0x3c>
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	429a      	cmp	r2, r3
 8008908:	d806      	bhi.n	8008918 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800890a:	f7ff fa19 	bl	8007d40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff83 	bl	800881c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008916:	e024      	b.n	8008962 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d008      	beq.n	8008930 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <prvProcessTimerOrBlockTask+0x90>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <prvProcessTimerOrBlockTask+0x50>
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <prvProcessTimerOrBlockTask+0x52>
 800892c:	2300      	movs	r3, #0
 800892e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <prvProcessTimerOrBlockTask+0x94>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4619      	mov	r1, r3
 800893e:	f7fe ff53 	bl	80077e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008942:	f7ff f9fd 	bl	8007d40 <xTaskResumeAll>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10a      	bne.n	8008962 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <prvProcessTimerOrBlockTask+0x98>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
}
 800895c:	e001      	b.n	8008962 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800895e:	f7ff f9ef 	bl	8007d40 <xTaskResumeAll>
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20001238 	.word	0x20001238
 8008970:	2000123c 	.word	0x2000123c
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008980:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <prvGetNextExpireTime+0x44>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <prvGetNextExpireTime+0x16>
 800898a:	2201      	movs	r2, #1
 800898c:	e000      	b.n	8008990 <prvGetNextExpireTime+0x18>
 800898e:	2200      	movs	r2, #0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <prvGetNextExpireTime+0x44>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e001      	b.n	80089ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089ac:	68fb      	ldr	r3, [r7, #12]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20001234 	.word	0x20001234

080089c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089c8:	f7ff fa5a 	bl	8007e80 <xTaskGetTickCount>
 80089cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <prvSampleTimeNow+0x3c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d205      	bcs.n	80089e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089d8:	f000 f93c 	bl	8008c54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e002      	b.n	80089ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089ea:	4a04      	ldr	r2, [pc, #16]	; (80089fc <prvSampleTimeNow+0x3c>)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089f0:	68fb      	ldr	r3, [r7, #12]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001244 	.word	0x20001244

08008a00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d812      	bhi.n	8008a4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d302      	bcc.n	8008a3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a34:	2301      	movs	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e01b      	b.n	8008a72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <prvInsertTimerInActiveList+0x7c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3304      	adds	r3, #4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4610      	mov	r0, r2
 8008a46:	f7fe f996 	bl	8006d76 <vListInsert>
 8008a4a:	e012      	b.n	8008a72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d206      	bcs.n	8008a62 <prvInsertTimerInActiveList+0x62>
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d302      	bcc.n	8008a62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e007      	b.n	8008a72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a62:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <prvInsertTimerInActiveList+0x80>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7fe f982 	bl	8006d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a72:	697b      	ldr	r3, [r7, #20]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20001238 	.word	0x20001238
 8008a80:	20001234 	.word	0x20001234

08008a84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08e      	sub	sp, #56	; 0x38
 8008a88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a8a:	e0d0      	b.n	8008c2e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da1a      	bge.n	8008ac8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a92:	1d3b      	adds	r3, r7, #4
 8008a94:	3304      	adds	r3, #4
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10c      	bne.n	8008ab8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	b672      	cpsid	i
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	b662      	cpsie	i
 8008ab2:	61fb      	str	r3, [r7, #28]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abe:	6850      	ldr	r0, [r2, #4]
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	6892      	ldr	r2, [r2, #8]
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f2c0 80ae 	blt.w	8008c2c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe f981 	bl	8006de8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ff69 	bl	80089c0 <prvSampleTimeNow>
 8008aee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	f200 809b 	bhi.w	8008c2e <prvProcessReceivedCommands+0x1aa>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <prvProcessReceivedCommands+0x7c>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b29 	.word	0x08008b29
 8008b0c:	08008ba1 	.word	0x08008ba1
 8008b10:	08008bb5 	.word	0x08008bb5
 8008b14:	08008c03 	.word	0x08008c03
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b29 	.word	0x08008b29
 8008b20:	08008ba1 	.word	0x08008ba1
 8008b24:	08008bb5 	.word	0x08008bb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	18d1      	adds	r1, r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b48:	f7ff ff5a 	bl	8008a00 <prvInsertTimerInActiveList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d06d      	beq.n	8008c2e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d062      	beq.n	8008c2e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	441a      	add	r2, r3
 8008b70:	2300      	movs	r3, #0
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7a:	f7ff fdff 	bl	800877c <xTimerGenericCommand>
 8008b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d153      	bne.n	8008c2e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	b672      	cpsid	i
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	b662      	cpsie	i
 8008b9a:	61bb      	str	r3, [r7, #24]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bb2:	e03c      	b.n	8008c2e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10c      	bne.n	8008bee <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	617b      	str	r3, [r7, #20]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	18d1      	adds	r1, r2, r3
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	f7ff ff00 	bl	8008a00 <prvInsertTimerInActiveList>
					break;
 8008c00:	e015      	b.n	8008c2e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d103      	bne.n	8008c18 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c12:	f000 fbc9 	bl	80093a8 <vPortFree>
 8008c16:	e00a      	b.n	8008c2e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c2a:	e000      	b.n	8008c2e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c2e:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <prvProcessReceivedCommands+0x1cc>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	1d39      	adds	r1, r7, #4
 8008c34:	2200      	movs	r2, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fbb6 	bl	80073a8 <xQueueReceive>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f47f af24 	bne.w	8008a8c <prvProcessReceivedCommands+0x8>
	}
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	3730      	adds	r7, #48	; 0x30
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000123c 	.word	0x2000123c

08008c54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c5a:	e04a      	b.n	8008cf2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c5c:	4b2e      	ldr	r3, [pc, #184]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c66:	4b2c      	ldr	r3, [pc, #176]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe f8b7 	bl	8006de8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d030      	beq.n	8008cf2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4413      	add	r3, r2
 8008c98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d90e      	bls.n	8008cc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cae:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7fe f85c 	bl	8006d76 <vListInsert>
 8008cbe:	e018      	b.n	8008cf2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7ff fd56 	bl	800877c <xTimerGenericCommand>
 8008cd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10c      	bne.n	8008cf2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	b672      	cpsid	i
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	b662      	cpsie	i
 8008cec:	603b      	str	r3, [r7, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1af      	bne.n	8008c5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <prvSwitchTimerLists+0xc8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSwitchTimerLists+0xc4>)
 8008d08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d0a:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <prvSwitchTimerLists+0xc8>)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	6013      	str	r3, [r2, #0]
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20001234 	.word	0x20001234
 8008d1c:	20001238 	.word	0x20001238

08008d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d26:	f000 f949 	bl	8008fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d120      	bne.n	8008d74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d32:	4814      	ldr	r0, [pc, #80]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d34:	f7fd ffce 	bl	8006cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d38:	4813      	ldr	r0, [pc, #76]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d3a:	f7fd ffcb 	bl	8006cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <prvCheckForValidListAndQueue+0x6c>)
 8008d40:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <prvCheckForValidListAndQueue+0x70>)
 8008d46:	4a10      	ldr	r2, [pc, #64]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <prvCheckForValidListAndQueue+0x74>)
 8008d50:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <prvCheckForValidListAndQueue+0x78>)
 8008d52:	2110      	movs	r1, #16
 8008d54:	200a      	movs	r0, #10
 8008d56:	f7fe f8db 	bl	8006f10 <xQueueGenericCreateStatic>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	490b      	ldr	r1, [pc, #44]	; (8008d9c <prvCheckForValidListAndQueue+0x7c>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fd10 	bl	8007794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d74:	f000 f956 	bl	8009024 <vPortExitCritical>
}
 8008d78:	bf00      	nop
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	2000123c 	.word	0x2000123c
 8008d84:	2000120c 	.word	0x2000120c
 8008d88:	20001220 	.word	0x20001220
 8008d8c:	20001234 	.word	0x20001234
 8008d90:	20001238 	.word	0x20001238
 8008d94:	200012e8 	.word	0x200012e8
 8008d98:	20001248 	.word	0x20001248
 8008d9c:	0800980c 	.word	0x0800980c

08008da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3b04      	subs	r3, #4
 8008db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dd0:	4a0c      	ldr	r2, [pc, #48]	; (8008e04 <pxPortInitialiseStack+0x64>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3b14      	subs	r3, #20
 8008dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f06f 0202 	mvn.w	r2, #2
 8008dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3b20      	subs	r3, #32
 8008df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008df6:	68fb      	ldr	r3, [r7, #12]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	08008e09 	.word	0x08008e09

08008e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e12:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <prvTaskExitError+0x5c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d00c      	beq.n	8008e36 <prvTaskExitError+0x2e>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	b672      	cpsid	i
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	b662      	cpsie	i
 8008e30:	60fb      	str	r3, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <prvTaskExitError+0x2c>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	b672      	cpsid	i
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	b662      	cpsie	i
 8008e4a:	60bb      	str	r3, [r7, #8]
}
 8008e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e4e:	bf00      	nop
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0fc      	beq.n	8008e50 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	2000000c 	.word	0x2000000c
	...

08008e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <pxCurrentTCBConst2>)
 8008e72:	6819      	ldr	r1, [r3, #0]
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	f380 8809 	msr	PSP, r0
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f04f 0000 	mov.w	r0, #0
 8008e86:	f380 8811 	msr	BASEPRI, r0
 8008e8a:	4770      	bx	lr
 8008e8c:	f3af 8000 	nop.w

08008e90 <pxCurrentTCBConst2>:
 8008e90:	20000d0c 	.word	0x20000d0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop

08008e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <prvPortStartFirstTask+0x24>)
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	6800      	ldr	r0, [r0, #0]
 8008e9e:	f380 8808 	msr	MSP, r0
 8008ea2:	f04f 0000 	mov.w	r0, #0
 8008ea6:	f380 8814 	msr	CONTROL, r0
 8008eaa:	b662      	cpsie	i
 8008eac:	b661      	cpsie	f
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	df00      	svc	0
 8008eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eba:	bf00      	nop
 8008ebc:	e000ed08 	.word	0xe000ed08

08008ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <xPortStartScheduler+0xe4>)
 8008ec8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	4b2f      	ldr	r3, [pc, #188]	; (8008fa8 <xPortStartScheduler+0xe8>)
 8008eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008eee:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <xPortStartScheduler+0xec>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ef4:	e009      	b.n	8008f0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <xPortStartScheduler+0xec>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	4a2b      	ldr	r2, [pc, #172]	; (8008fac <xPortStartScheduler+0xec>)
 8008efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	d0ef      	beq.n	8008ef6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f16:	4b25      	ldr	r3, [pc, #148]	; (8008fac <xPortStartScheduler+0xec>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f1c3 0307 	rsb	r3, r3, #7
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d00c      	beq.n	8008f3c <xPortStartScheduler+0x7c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	60bb      	str	r3, [r7, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <xPortStartScheduler+0xec>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	4a1a      	ldr	r2, [pc, #104]	; (8008fac <xPortStartScheduler+0xec>)
 8008f44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f46:	4b19      	ldr	r3, [pc, #100]	; (8008fac <xPortStartScheduler+0xec>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f4e:	4a17      	ldr	r2, [pc, #92]	; (8008fac <xPortStartScheduler+0xec>)
 8008f50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <xPortStartScheduler+0xf0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a14      	ldr	r2, [pc, #80]	; (8008fb0 <xPortStartScheduler+0xf0>)
 8008f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <xPortStartScheduler+0xf0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a11      	ldr	r2, [pc, #68]	; (8008fb0 <xPortStartScheduler+0xf0>)
 8008f6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f72:	f000 f8dd 	bl	8009130 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <xPortStartScheduler+0xf4>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f7c:	f000 f8fc 	bl	8009178 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <xPortStartScheduler+0xf8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0c      	ldr	r2, [pc, #48]	; (8008fb8 <xPortStartScheduler+0xf8>)
 8008f86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f8c:	f7ff ff84 	bl	8008e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f90:	f7ff f842 	bl	8008018 <vTaskSwitchContext>
	prvTaskExitError();
 8008f94:	f7ff ff38 	bl	8008e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	e000e400 	.word	0xe000e400
 8008fa8:	20001338 	.word	0x20001338
 8008fac:	2000133c 	.word	0x2000133c
 8008fb0:	e000ed20 	.word	0xe000ed20
 8008fb4:	2000000c 	.word	0x2000000c
 8008fb8:	e000ef34 	.word	0xe000ef34

08008fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	b672      	cpsid	i
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	b662      	cpsie	i
 8008fd6:	607b      	str	r3, [r7, #4]
}
 8008fd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fda:	4b10      	ldr	r3, [pc, #64]	; (800901c <vPortEnterCritical+0x60>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	4a0e      	ldr	r2, [pc, #56]	; (800901c <vPortEnterCritical+0x60>)
 8008fe2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fe4:	4b0d      	ldr	r3, [pc, #52]	; (800901c <vPortEnterCritical+0x60>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d111      	bne.n	8009010 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fec:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <vPortEnterCritical+0x64>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00c      	beq.n	8009010 <vPortEnterCritical+0x54>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	b672      	cpsid	i
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	b662      	cpsie	i
 800900a:	603b      	str	r3, [r7, #0]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <vPortEnterCritical+0x52>
	}
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	2000000c 	.word	0x2000000c
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800902a:	4b13      	ldr	r3, [pc, #76]	; (8009078 <vPortExitCritical+0x54>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <vPortExitCritical+0x28>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	b672      	cpsid	i
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	b662      	cpsie	i
 8009046:	607b      	str	r3, [r7, #4]
}
 8009048:	bf00      	nop
 800904a:	e7fe      	b.n	800904a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800904c:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <vPortExitCritical+0x54>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	4a09      	ldr	r2, [pc, #36]	; (8009078 <vPortExitCritical+0x54>)
 8009054:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <vPortExitCritical+0x54>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <vPortExitCritical+0x46>
 800905e:	2300      	movs	r3, #0
 8009060:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f383 8811 	msr	BASEPRI, r3
}
 8009068:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	2000000c 	.word	0x2000000c
 800907c:	00000000 	.word	0x00000000

08009080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009080:	f3ef 8009 	mrs	r0, PSP
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <pxCurrentTCBConst>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	f01e 0f10 	tst.w	lr, #16
 8009090:	bf08      	it	eq
 8009092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	6010      	str	r0, [r2, #0]
 800909c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090a4:	b672      	cpsid	i
 80090a6:	f380 8811 	msr	BASEPRI, r0
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	b662      	cpsie	i
 80090b4:	f7fe ffb0 	bl	8008018 <vTaskSwitchContext>
 80090b8:	f04f 0000 	mov.w	r0, #0
 80090bc:	f380 8811 	msr	BASEPRI, r0
 80090c0:	bc09      	pop	{r0, r3}
 80090c2:	6819      	ldr	r1, [r3, #0]
 80090c4:	6808      	ldr	r0, [r1, #0]
 80090c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	f01e 0f10 	tst.w	lr, #16
 80090ce:	bf08      	it	eq
 80090d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090d4:	f380 8809 	msr	PSP, r0
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop

080090e0 <pxCurrentTCBConst>:
 80090e0:	20000d0c 	.word	0x20000d0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	b672      	cpsid	i
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	b662      	cpsie	i
 8009102:	607b      	str	r3, [r7, #4]
}
 8009104:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009106:	f7fe fecb 	bl	8007ea0 <xTaskIncrementTick>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <SysTick_Handler+0x44>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	2300      	movs	r3, #0
 800911a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	f383 8811 	msr	BASEPRI, r3
}
 8009122:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	e000ed04 	.word	0xe000ed04

08009130 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009134:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <vPortSetupTimerInterrupt+0x34>)
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800913a:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <vPortSetupTimerInterrupt+0x38>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortSetupTimerInterrupt+0x3c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <vPortSetupTimerInterrupt+0x40>)
 8009146:	fba2 2303 	umull	r2, r3, r2, r3
 800914a:	099b      	lsrs	r3, r3, #6
 800914c:	4a09      	ldr	r2, [pc, #36]	; (8009174 <vPortSetupTimerInterrupt+0x44>)
 800914e:	3b01      	subs	r3, #1
 8009150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009152:	4b04      	ldr	r3, [pc, #16]	; (8009164 <vPortSetupTimerInterrupt+0x34>)
 8009154:	2207      	movs	r2, #7
 8009156:	601a      	str	r2, [r3, #0]
}
 8009158:	bf00      	nop
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	e000e010 	.word	0xe000e010
 8009168:	e000e018 	.word	0xe000e018
 800916c:	20000000 	.word	0x20000000
 8009170:	10624dd3 	.word	0x10624dd3
 8009174:	e000e014 	.word	0xe000e014

08009178 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009178:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009188 <vPortEnableVFP+0x10>
 800917c:	6801      	ldr	r1, [r0, #0]
 800917e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009182:	6001      	str	r1, [r0, #0]
 8009184:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009186:	bf00      	nop
 8009188:	e000ed88 	.word	0xe000ed88

0800918c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009192:	f3ef 8305 	mrs	r3, IPSR
 8009196:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b0f      	cmp	r3, #15
 800919c:	d916      	bls.n	80091cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800919e:	4a19      	ldr	r2, [pc, #100]	; (8009204 <vPortValidateInterruptPriority+0x78>)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091a8:	4b17      	ldr	r3, [pc, #92]	; (8009208 <vPortValidateInterruptPriority+0x7c>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	7afa      	ldrb	r2, [r7, #11]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d20c      	bcs.n	80091cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	b672      	cpsid	i
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	b662      	cpsie	i
 80091c6:	607b      	str	r3, [r7, #4]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091cc:	4b0f      	ldr	r3, [pc, #60]	; (800920c <vPortValidateInterruptPriority+0x80>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091d4:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <vPortValidateInterruptPriority+0x84>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d90c      	bls.n	80091f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	603b      	str	r3, [r7, #0]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <vPortValidateInterruptPriority+0x68>
	}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	e000e3f0 	.word	0xe000e3f0
 8009208:	20001338 	.word	0x20001338
 800920c:	e000ed0c 	.word	0xe000ed0c
 8009210:	2000133c 	.word	0x2000133c

08009214 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08a      	sub	sp, #40	; 0x28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009220:	f7fe fd80 	bl	8007d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009224:	4b5b      	ldr	r3, [pc, #364]	; (8009394 <pvPortMalloc+0x180>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800922c:	f000 f91a 	bl	8009464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009230:	4b59      	ldr	r3, [pc, #356]	; (8009398 <pvPortMalloc+0x184>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 8092 	bne.w	8009362 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01f      	beq.n	8009284 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009244:	2208      	movs	r2, #8
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b00      	cmp	r3, #0
 8009254:	d016      	beq.n	8009284 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f023 0307 	bic.w	r3, r3, #7
 800925c:	3308      	adds	r3, #8
 800925e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00c      	beq.n	8009284 <pvPortMalloc+0x70>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	b672      	cpsid	i
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	b662      	cpsie	i
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d06b      	beq.n	8009362 <pvPortMalloc+0x14e>
 800928a:	4b44      	ldr	r3, [pc, #272]	; (800939c <pvPortMalloc+0x188>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d866      	bhi.n	8009362 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009294:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <pvPortMalloc+0x18c>)
 8009296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009298:	4b41      	ldr	r3, [pc, #260]	; (80093a0 <pvPortMalloc+0x18c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800929e:	e004      	b.n	80092aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <pvPortMalloc+0xa8>
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f1      	bne.n	80092a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092bc:	4b35      	ldr	r3, [pc, #212]	; (8009394 <pvPortMalloc+0x180>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d04d      	beq.n	8009362 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2208      	movs	r2, #8
 80092cc:	4413      	add	r3, r2
 80092ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	2308      	movs	r3, #8
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d921      	bls.n	800932c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00c      	beq.n	8009314 <pvPortMalloc+0x100>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	b672      	cpsid	i
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	b662      	cpsie	i
 800930e:	613b      	str	r3, [r7, #16]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009326:	69b8      	ldr	r0, [r7, #24]
 8009328:	f000 f8fe 	bl	8009528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <pvPortMalloc+0x188>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	4a19      	ldr	r2, [pc, #100]	; (800939c <pvPortMalloc+0x188>)
 8009338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <pvPortMalloc+0x188>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	4b19      	ldr	r3, [pc, #100]	; (80093a4 <pvPortMalloc+0x190>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d203      	bcs.n	800934e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009346:	4b15      	ldr	r3, [pc, #84]	; (800939c <pvPortMalloc+0x188>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <pvPortMalloc+0x190>)
 800934c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	4b11      	ldr	r3, [pc, #68]	; (8009398 <pvPortMalloc+0x184>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	431a      	orrs	r2, r3
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009362:	f7fe fced 	bl	8007d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <pvPortMalloc+0x176>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	b662      	cpsie	i
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <pvPortMalloc+0x174>
	return pvReturn;
 800938a:	69fb      	ldr	r3, [r7, #28]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3728      	adds	r7, #40	; 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20004f48 	.word	0x20004f48
 8009398:	20004f54 	.word	0x20004f54
 800939c:	20004f4c 	.word	0x20004f4c
 80093a0:	20004f40 	.word	0x20004f40
 80093a4:	20004f50 	.word	0x20004f50

080093a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d04c      	beq.n	8009454 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093ba:	2308      	movs	r3, #8
 80093bc:	425b      	negs	r3, r3
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	4413      	add	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4b23      	ldr	r3, [pc, #140]	; (800945c <vPortFree+0xb4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4013      	ands	r3, r2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <vPortFree+0x48>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	b672      	cpsid	i
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	b662      	cpsie	i
 80093ea:	60fb      	str	r3, [r7, #12]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <vPortFree+0x6a>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	b672      	cpsid	i
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	b662      	cpsie	i
 800940c:	60bb      	str	r3, [r7, #8]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4b11      	ldr	r3, [pc, #68]	; (800945c <vPortFree+0xb4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d019      	beq.n	8009454 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <vPortFree+0xb4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009438:	f7fe fc74 	bl	8007d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <vPortFree+0xb8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4413      	add	r3, r2
 8009446:	4a06      	ldr	r2, [pc, #24]	; (8009460 <vPortFree+0xb8>)
 8009448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800944a:	6938      	ldr	r0, [r7, #16]
 800944c:	f000 f86c 	bl	8009528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009450:	f7fe fc76 	bl	8007d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20004f54 	.word	0x20004f54
 8009460:	20004f4c 	.word	0x20004f4c

08009464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800946a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800946e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009470:	4b27      	ldr	r3, [pc, #156]	; (8009510 <prvHeapInit+0xac>)
 8009472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00c      	beq.n	8009498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3307      	adds	r3, #7
 8009482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0307 	bic.w	r3, r3, #7
 800948a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	4a1f      	ldr	r2, [pc, #124]	; (8009510 <prvHeapInit+0xac>)
 8009494:	4413      	add	r3, r2
 8009496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800949c:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <prvHeapInit+0xb0>)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <prvHeapInit+0xb0>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	4413      	add	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094b0:	2208      	movs	r2, #8
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 0307 	bic.w	r3, r3, #7
 80094be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4a15      	ldr	r2, [pc, #84]	; (8009518 <prvHeapInit+0xb4>)
 80094c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094c6:	4b14      	ldr	r3, [pc, #80]	; (8009518 <prvHeapInit+0xb4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2200      	movs	r2, #0
 80094cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ce:	4b12      	ldr	r3, [pc, #72]	; (8009518 <prvHeapInit+0xb4>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	1ad2      	subs	r2, r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <prvHeapInit+0xb4>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4a0a      	ldr	r2, [pc, #40]	; (800951c <prvHeapInit+0xb8>)
 80094f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	4a09      	ldr	r2, [pc, #36]	; (8009520 <prvHeapInit+0xbc>)
 80094fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <prvHeapInit+0xc0>)
 80094fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009502:	601a      	str	r2, [r3, #0]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	20001340 	.word	0x20001340
 8009514:	20004f40 	.word	0x20004f40
 8009518:	20004f48 	.word	0x20004f48
 800951c:	20004f50 	.word	0x20004f50
 8009520:	20004f4c 	.word	0x20004f4c
 8009524:	20004f54 	.word	0x20004f54

08009528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009530:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <prvInsertBlockIntoFreeList+0xac>)
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e002      	b.n	800953c <prvInsertBlockIntoFreeList+0x14>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	429a      	cmp	r2, r3
 8009544:	d8f7      	bhi.n	8009536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	4413      	add	r3, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d108      	bne.n	800956a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	441a      	add	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	441a      	add	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d118      	bne.n	80095b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d00d      	beq.n	80095a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	441a      	add	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e008      	b.n	80095b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095a6:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <prvInsertBlockIntoFreeList+0xb0>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e003      	b.n	80095b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d002      	beq.n	80095c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20004f40 	.word	0x20004f40
 80095d8:	20004f48 	.word	0x20004f48

080095dc <__libc_init_array>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	4d0d      	ldr	r5, [pc, #52]	; (8009614 <__libc_init_array+0x38>)
 80095e0:	4c0d      	ldr	r4, [pc, #52]	; (8009618 <__libc_init_array+0x3c>)
 80095e2:	1b64      	subs	r4, r4, r5
 80095e4:	10a4      	asrs	r4, r4, #2
 80095e6:	2600      	movs	r6, #0
 80095e8:	42a6      	cmp	r6, r4
 80095ea:	d109      	bne.n	8009600 <__libc_init_array+0x24>
 80095ec:	4d0b      	ldr	r5, [pc, #44]	; (800961c <__libc_init_array+0x40>)
 80095ee:	4c0c      	ldr	r4, [pc, #48]	; (8009620 <__libc_init_array+0x44>)
 80095f0:	f000 f8f2 	bl	80097d8 <_init>
 80095f4:	1b64      	subs	r4, r4, r5
 80095f6:	10a4      	asrs	r4, r4, #2
 80095f8:	2600      	movs	r6, #0
 80095fa:	42a6      	cmp	r6, r4
 80095fc:	d105      	bne.n	800960a <__libc_init_array+0x2e>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	f855 3b04 	ldr.w	r3, [r5], #4
 8009604:	4798      	blx	r3
 8009606:	3601      	adds	r6, #1
 8009608:	e7ee      	b.n	80095e8 <__libc_init_array+0xc>
 800960a:	f855 3b04 	ldr.w	r3, [r5], #4
 800960e:	4798      	blx	r3
 8009610:	3601      	adds	r6, #1
 8009612:	e7f2      	b.n	80095fa <__libc_init_array+0x1e>
 8009614:	080098b8 	.word	0x080098b8
 8009618:	080098b8 	.word	0x080098b8
 800961c:	080098b8 	.word	0x080098b8
 8009620:	080098bc 	.word	0x080098bc

08009624 <__retarget_lock_acquire_recursive>:
 8009624:	4770      	bx	lr

08009626 <__retarget_lock_release_recursive>:
 8009626:	4770      	bx	lr

08009628 <memcpy>:
 8009628:	440a      	add	r2, r1
 800962a:	4291      	cmp	r1, r2
 800962c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009630:	d100      	bne.n	8009634 <memcpy+0xc>
 8009632:	4770      	bx	lr
 8009634:	b510      	push	{r4, lr}
 8009636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800963a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800963e:	4291      	cmp	r1, r2
 8009640:	d1f9      	bne.n	8009636 <memcpy+0xe>
 8009642:	bd10      	pop	{r4, pc}

08009644 <memset>:
 8009644:	4402      	add	r2, r0
 8009646:	4603      	mov	r3, r0
 8009648:	4293      	cmp	r3, r2
 800964a:	d100      	bne.n	800964e <memset+0xa>
 800964c:	4770      	bx	lr
 800964e:	f803 1b01 	strb.w	r1, [r3], #1
 8009652:	e7f9      	b.n	8009648 <memset+0x4>

08009654 <cleanup_glue>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	6809      	ldr	r1, [r1, #0]
 800965a:	4605      	mov	r5, r0
 800965c:	b109      	cbz	r1, 8009662 <cleanup_glue+0xe>
 800965e:	f7ff fff9 	bl	8009654 <cleanup_glue>
 8009662:	4621      	mov	r1, r4
 8009664:	4628      	mov	r0, r5
 8009666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800966a:	f000 b869 	b.w	8009740 <_free_r>
	...

08009670 <_reclaim_reent>:
 8009670:	4b2c      	ldr	r3, [pc, #176]	; (8009724 <_reclaim_reent+0xb4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4283      	cmp	r3, r0
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	4604      	mov	r4, r0
 800967a:	d051      	beq.n	8009720 <_reclaim_reent+0xb0>
 800967c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800967e:	b143      	cbz	r3, 8009692 <_reclaim_reent+0x22>
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d14a      	bne.n	800971c <_reclaim_reent+0xac>
 8009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009688:	6819      	ldr	r1, [r3, #0]
 800968a:	b111      	cbz	r1, 8009692 <_reclaim_reent+0x22>
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f857 	bl	8009740 <_free_r>
 8009692:	6961      	ldr	r1, [r4, #20]
 8009694:	b111      	cbz	r1, 800969c <_reclaim_reent+0x2c>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f852 	bl	8009740 <_free_r>
 800969c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800969e:	b111      	cbz	r1, 80096a6 <_reclaim_reent+0x36>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f84d 	bl	8009740 <_free_r>
 80096a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096a8:	b111      	cbz	r1, 80096b0 <_reclaim_reent+0x40>
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f848 	bl	8009740 <_free_r>
 80096b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096b2:	b111      	cbz	r1, 80096ba <_reclaim_reent+0x4a>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 f843 	bl	8009740 <_free_r>
 80096ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096bc:	b111      	cbz	r1, 80096c4 <_reclaim_reent+0x54>
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f83e 	bl	8009740 <_free_r>
 80096c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096c6:	b111      	cbz	r1, 80096ce <_reclaim_reent+0x5e>
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f839 	bl	8009740 <_free_r>
 80096ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096d0:	b111      	cbz	r1, 80096d8 <_reclaim_reent+0x68>
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f834 	bl	8009740 <_free_r>
 80096d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096da:	b111      	cbz	r1, 80096e2 <_reclaim_reent+0x72>
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 f82f 	bl	8009740 <_free_r>
 80096e2:	69a3      	ldr	r3, [r4, #24]
 80096e4:	b1e3      	cbz	r3, 8009720 <_reclaim_reent+0xb0>
 80096e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096e8:	4620      	mov	r0, r4
 80096ea:	4798      	blx	r3
 80096ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096ee:	b1b9      	cbz	r1, 8009720 <_reclaim_reent+0xb0>
 80096f0:	4620      	mov	r0, r4
 80096f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096f6:	f7ff bfad 	b.w	8009654 <cleanup_glue>
 80096fa:	5949      	ldr	r1, [r1, r5]
 80096fc:	b941      	cbnz	r1, 8009710 <_reclaim_reent+0xa0>
 80096fe:	3504      	adds	r5, #4
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	2d80      	cmp	r5, #128	; 0x80
 8009704:	68d9      	ldr	r1, [r3, #12]
 8009706:	d1f8      	bne.n	80096fa <_reclaim_reent+0x8a>
 8009708:	4620      	mov	r0, r4
 800970a:	f000 f819 	bl	8009740 <_free_r>
 800970e:	e7ba      	b.n	8009686 <_reclaim_reent+0x16>
 8009710:	680e      	ldr	r6, [r1, #0]
 8009712:	4620      	mov	r0, r4
 8009714:	f000 f814 	bl	8009740 <_free_r>
 8009718:	4631      	mov	r1, r6
 800971a:	e7ef      	b.n	80096fc <_reclaim_reent+0x8c>
 800971c:	2500      	movs	r5, #0
 800971e:	e7ef      	b.n	8009700 <_reclaim_reent+0x90>
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	bf00      	nop
 8009724:	20000010 	.word	0x20000010

08009728 <__malloc_lock>:
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__malloc_lock+0x8>)
 800972a:	f7ff bf7b 	b.w	8009624 <__retarget_lock_acquire_recursive>
 800972e:	bf00      	nop
 8009730:	20004f58 	.word	0x20004f58

08009734 <__malloc_unlock>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__malloc_unlock+0x8>)
 8009736:	f7ff bf76 	b.w	8009626 <__retarget_lock_release_recursive>
 800973a:	bf00      	nop
 800973c:	20004f58 	.word	0x20004f58

08009740 <_free_r>:
 8009740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009742:	2900      	cmp	r1, #0
 8009744:	d044      	beq.n	80097d0 <_free_r+0x90>
 8009746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974a:	9001      	str	r0, [sp, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f1a1 0404 	sub.w	r4, r1, #4
 8009752:	bfb8      	it	lt
 8009754:	18e4      	addlt	r4, r4, r3
 8009756:	f7ff ffe7 	bl	8009728 <__malloc_lock>
 800975a:	4a1e      	ldr	r2, [pc, #120]	; (80097d4 <_free_r+0x94>)
 800975c:	9801      	ldr	r0, [sp, #4]
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	b933      	cbnz	r3, 8009770 <_free_r+0x30>
 8009762:	6063      	str	r3, [r4, #4]
 8009764:	6014      	str	r4, [r2, #0]
 8009766:	b003      	add	sp, #12
 8009768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800976c:	f7ff bfe2 	b.w	8009734 <__malloc_unlock>
 8009770:	42a3      	cmp	r3, r4
 8009772:	d908      	bls.n	8009786 <_free_r+0x46>
 8009774:	6825      	ldr	r5, [r4, #0]
 8009776:	1961      	adds	r1, r4, r5
 8009778:	428b      	cmp	r3, r1
 800977a:	bf01      	itttt	eq
 800977c:	6819      	ldreq	r1, [r3, #0]
 800977e:	685b      	ldreq	r3, [r3, #4]
 8009780:	1949      	addeq	r1, r1, r5
 8009782:	6021      	streq	r1, [r4, #0]
 8009784:	e7ed      	b.n	8009762 <_free_r+0x22>
 8009786:	461a      	mov	r2, r3
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	b10b      	cbz	r3, 8009790 <_free_r+0x50>
 800978c:	42a3      	cmp	r3, r4
 800978e:	d9fa      	bls.n	8009786 <_free_r+0x46>
 8009790:	6811      	ldr	r1, [r2, #0]
 8009792:	1855      	adds	r5, r2, r1
 8009794:	42a5      	cmp	r5, r4
 8009796:	d10b      	bne.n	80097b0 <_free_r+0x70>
 8009798:	6824      	ldr	r4, [r4, #0]
 800979a:	4421      	add	r1, r4
 800979c:	1854      	adds	r4, r2, r1
 800979e:	42a3      	cmp	r3, r4
 80097a0:	6011      	str	r1, [r2, #0]
 80097a2:	d1e0      	bne.n	8009766 <_free_r+0x26>
 80097a4:	681c      	ldr	r4, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	6053      	str	r3, [r2, #4]
 80097aa:	4421      	add	r1, r4
 80097ac:	6011      	str	r1, [r2, #0]
 80097ae:	e7da      	b.n	8009766 <_free_r+0x26>
 80097b0:	d902      	bls.n	80097b8 <_free_r+0x78>
 80097b2:	230c      	movs	r3, #12
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	e7d6      	b.n	8009766 <_free_r+0x26>
 80097b8:	6825      	ldr	r5, [r4, #0]
 80097ba:	1961      	adds	r1, r4, r5
 80097bc:	428b      	cmp	r3, r1
 80097be:	bf04      	itt	eq
 80097c0:	6819      	ldreq	r1, [r3, #0]
 80097c2:	685b      	ldreq	r3, [r3, #4]
 80097c4:	6063      	str	r3, [r4, #4]
 80097c6:	bf04      	itt	eq
 80097c8:	1949      	addeq	r1, r1, r5
 80097ca:	6021      	streq	r1, [r4, #0]
 80097cc:	6054      	str	r4, [r2, #4]
 80097ce:	e7ca      	b.n	8009766 <_free_r+0x26>
 80097d0:	b003      	add	sp, #12
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	20004f5c 	.word	0x20004f5c

080097d8 <_init>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr

080097e4 <_fini>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

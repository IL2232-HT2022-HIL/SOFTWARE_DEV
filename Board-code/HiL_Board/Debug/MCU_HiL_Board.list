
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800e7ec  0800e7ec  0001e7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9bc  0800e9bc  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9bc  0800e9bc  0001e9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9c4  0800e9c4  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9c4  0800e9c4  0001e9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9c8  0800e9c8  0001e9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800eb40  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800ebe0  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006dac  200002b4  0800ec80  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007060  0800ec80  00027060  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033657  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006213  00000000  00000000  00053939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002620  00000000  00000000  00059b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002388  00000000  00000000  0005c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009a3b  00000000  00000000  0005e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031557  00000000  00000000  00067f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00118a5c  00000000  00000000  0009948a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b1ee6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a4d0  00000000  00000000  001b1f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e7d4 	.word	0x0800e7d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800e7d4 	.word	0x0800e7d4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f8d2 	bl	80017cc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f866 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fada 	bl	8000be4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000630:	f000 f8d2 	bl	80007d8 <MX_CAN1_Init>
  MX_DAC_Init();
 8000634:	f000 f904 	bl	8000840 <MX_DAC_Init>
  MX_ETH_Init();
 8000638:	f000 f92c 	bl	8000894 <MX_ETH_Init>
  MX_I2C1_Init();
 800063c:	f000 f978 	bl	8000930 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000640:	f000 f9b6 	bl	80009b0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000644:	f000 f9ee 	bl	8000a24 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000648:	f000 fa26 	bl	8000a98 <MX_TIM1_Init>
  MX_UART7_Init();
 800064c:	f000 fa9a 	bl	8000b84 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000650:	2100      	movs	r1, #0
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0xa0>)
 8000654:	f001 fb14 	bl	8001c80 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f00a f934 	bl	800a8c4 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 800065c:	f007 fef2 	bl	8008444 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <main+0xa4>)
 8000662:	2100      	movs	r1, #0
 8000664:	4816      	ldr	r0, [pc, #88]	; (80006c0 <main+0xa8>)
 8000666:	f00a f997 	bl	800a998 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <main+0xac>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <main+0xb0>)
 8000672:	2100      	movs	r1, #0
 8000674:	4815      	ldr	r0, [pc, #84]	; (80006cc <main+0xb4>)
 8000676:	f00a f98f 	bl	800a998 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <main+0xb8>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <main+0xbc>)
 8000682:	2100      	movs	r1, #0
 8000684:	4814      	ldr	r0, [pc, #80]	; (80006d8 <main+0xc0>)
 8000686:	f00a f987 	bl	800a998 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <main+0xc4>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <main+0xc8>)
 8000692:	2100      	movs	r1, #0
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <main+0xcc>)
 8000696:	f00a f97f 	bl	800a998 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <main+0xd0>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <main+0xd4>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <main+0xd8>)
 80006a6:	f00a f977 	bl	800a998 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <main+0xdc>)
 80006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b0:	f00a f93c 	bl	800a92c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x9c>
 80006b6:	bf00      	nop
 80006b8:	20000330 	.word	0x20000330
 80006bc:	0800e890 	.word	0x0800e890
 80006c0:	08000e71 	.word	0x08000e71
 80006c4:	200005e4 	.word	0x200005e4
 80006c8:	0800e8b4 	.word	0x0800e8b4
 80006cc:	08000e85 	.word	0x08000e85
 80006d0:	200005e8 	.word	0x200005e8
 80006d4:	0800e8d8 	.word	0x0800e8d8
 80006d8:	08000e95 	.word	0x08000e95
 80006dc:	200005ec 	.word	0x200005ec
 80006e0:	0800e8fc 	.word	0x0800e8fc
 80006e4:	08000efd 	.word	0x08000efd
 80006e8:	200005f0 	.word	0x200005f0
 80006ec:	0800e920 	.word	0x0800e920
 80006f0:	08000f0d 	.word	0x08000f0d
 80006f4:	200005f4 	.word	0x200005f4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00d fef6 	bl	800e4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <SystemClock_Config+0xd8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <SystemClock_Config+0xd8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <SystemClock_Config+0xd8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073c:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <SystemClock_Config+0xdc>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <SystemClock_Config+0xdc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000768:	2360      	movs	r3, #96	; 0x60
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4618      	mov	r0, r3
 800077e:	f003 fce7 	bl	8004150 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 fbda 	bl	8000f40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078c:	f003 fc90 	bl	80040b0 <HAL_PWREx_EnableOverDrive>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000796:	f000 fbd3 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 ff78 	bl	80046ac <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007c2:	f000 fbbd 	bl	8000f40 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_CAN1_Init+0x60>)
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_CAN1_Init+0x64>)
 80007e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_CAN1_Init+0x60>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_CAN1_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_CAN1_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_CAN1_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_CAN1_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_CAN1_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_CAN1_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_CAN1_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_CAN1_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_CAN1_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_CAN1_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_CAN1_Init+0x60>)
 8000826:	f001 f82b 	bl	8001880 <HAL_CAN_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fb86 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000308 	.word	0x20000308
 800083c:	40006400 	.word	0x40006400

08000840 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_DAC_Init+0x4c>)
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_DAC_Init+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_DAC_Init+0x4c>)
 8000856:	f001 f9f1 	bl	8001c3c <HAL_DAC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000860:	f000 fb6e 	bl	8000f40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_DAC_Init+0x4c>)
 8000874:	f001 fadf 	bl	8001e36 <HAL_DAC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800087e:	f000 fb5f 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000330 	.word	0x20000330
 8000890:	40007400 	.word	0x40007400

08000894 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ETH_Init+0x84>)
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <MX_ETH_Init+0x88>)
 800089c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <MX_ETH_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ETH_Init+0x8c>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ETH_Init+0x8c>)
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_ETH_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ETH_Init+0x8c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_ETH_Init+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_ETH_Init+0x84>)
 80008c4:	4a16      	ldr	r2, [pc, #88]	; (8000920 <MX_ETH_Init+0x8c>)
 80008c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_ETH_Init+0x84>)
 80008ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x84>)
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <MX_ETH_Init+0x90>)
 80008d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_ETH_Init+0x84>)
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_ETH_Init+0x94>)
 80008da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x84>)
 80008de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x84>)
 80008e6:	f001 faff 	bl	8001ee8 <HAL_ETH_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 fb26 	bl	8000f40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f4:	2238      	movs	r2, #56	; 0x38
 80008f6:	2100      	movs	r1, #0
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x98>)
 80008fa:	f00d fdfd 	bl	800e4f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_ETH_Init+0x98>)
 8000900:	2221      	movs	r2, #33	; 0x21
 8000902:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0x98>)
 8000906:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800090a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_ETH_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000344 	.word	0x20000344
 800091c:	40028000 	.word	0x40028000
 8000920:	20000600 	.word	0x20000600
 8000924:	20000214 	.word	0x20000214
 8000928:	20000174 	.word	0x20000174
 800092c:	200002d0 	.word	0x200002d0

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C1_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C1_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C1_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x74>)
 800096c:	f001 ffc0 	bl	80028f0 <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fae3 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_I2C1_Init+0x74>)
 800097e:	f002 f847 	bl	8002a10 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 fada 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000990:	f002 f889 	bl	8002aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fad1 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200003f4 	.word	0x200003f4
 80009a8:	40005400 	.word	0x40005400
 80009ac:	20303e5d 	.word	0x20303e5d

080009b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <MX_SPI1_Init+0x70>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_SPI1_Init+0x6c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI1_Init+0x6c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_SPI1_Init+0x6c>)
 8000a0a:	f004 fccf 	bl	80053ac <HAL_SPI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a14:	f000 fa94 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000448 	.word	0x20000448
 8000a20:	40013000 	.word	0x40013000

08000a24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <MX_SPI3_Init+0x70>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a42:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a56:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_SPI3_Init+0x6c>)
 8000a7e:	f004 fc95 	bl	80053ac <HAL_SPI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a88:	f000 fa5a 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200004ac 	.word	0x200004ac
 8000a94:	40003c00 	.word	0x40003c00

08000a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <MX_TIM1_Init+0xe8>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4822      	ldr	r0, [pc, #136]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000af2:	f004 fd06 	bl	8005502 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 fa20 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481b      	ldr	r0, [pc, #108]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000b0e:	f004 ffe3 	bl	8005ad8 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b18:	f000 fa12 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000b1e:	f004 fdbf 	bl	80056a0 <HAL_TIM_IC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b28:	f000 fa0a 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000b40:	f005 fb20 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b4a:	f000 f9f9 	bl	8000f40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_TIM1_Init+0xe4>)
 8000b66:	f004 ff1b 	bl	80059a0 <HAL_TIM_IC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b70:	f000 f9e6 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000510 	.word	0x20000510
 8000b80:	40010000 	.word	0x40010000

08000b84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_UART7_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MX_UART7_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_UART7_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_UART7_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_UART7_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_UART7_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_UART7_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_UART7_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_UART7_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_UART7_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_UART7_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_UART7_Init+0x58>)
 8000bc8:	f005 fb88 	bl	80062dc <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f9b5 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000055c 	.word	0x2000055c
 8000be0:	40007800 	.word	0x40007800

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	4b95      	ldr	r3, [pc, #596]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a94      	ldr	r2, [pc, #592]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b8f      	ldr	r3, [pc, #572]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a8e      	ldr	r2, [pc, #568]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b8c      	ldr	r3, [pc, #560]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	4b89      	ldr	r3, [pc, #548]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a88      	ldr	r2, [pc, #544]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b86      	ldr	r3, [pc, #536]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a82      	ldr	r2, [pc, #520]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b80      	ldr	r3, [pc, #512]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b7d      	ldr	r3, [pc, #500]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a7c      	ldr	r2, [pc, #496]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b7a      	ldr	r3, [pc, #488]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b77      	ldr	r3, [pc, #476]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a76      	ldr	r2, [pc, #472]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4b71      	ldr	r3, [pc, #452]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a70      	ldr	r2, [pc, #448]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b6e      	ldr	r3, [pc, #440]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b6b      	ldr	r3, [pc, #428]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a6a      	ldr	r2, [pc, #424]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <MX_GPIO_Init+0x26c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4865      	ldr	r0, [pc, #404]	; (8000e54 <MX_GPIO_Init+0x270>)
 8000cc0:	f001 fdfc 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000cca:	4863      	ldr	r0, [pc, #396]	; (8000e58 <MX_GPIO_Init+0x274>)
 8000ccc:	f001 fdf6 	bl	80028bc <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	210c      	movs	r1, #12
 8000cd4:	4861      	ldr	r0, [pc, #388]	; (8000e5c <MX_GPIO_Init+0x278>)
 8000cd6:	f001 fdf1 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000ce0:	485f      	ldr	r0, [pc, #380]	; (8000e60 <MX_GPIO_Init+0x27c>)
 8000ce2:	f001 fdeb 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cec:	485d      	ldr	r0, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x280>)
 8000cee:	f001 fde5 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2174      	movs	r1, #116	; 0x74
 8000cf6:	485c      	ldr	r0, [pc, #368]	; (8000e68 <MX_GPIO_Init+0x284>)
 8000cf8:	f001 fde0 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000cfc:	f241 0308 	movw	r3, #4104	; 0x1008
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4856      	ldr	r0, [pc, #344]	; (8000e6c <MX_GPIO_Init+0x288>)
 8000d12:	f001 fc0f 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000d16:	f248 0305 	movw	r3, #32773	; 0x8005
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	484e      	ldr	r0, [pc, #312]	; (8000e64 <MX_GPIO_Init+0x280>)
 8000d2c:	f001 fc02 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4843      	ldr	r0, [pc, #268]	; (8000e54 <MX_GPIO_Init+0x270>)
 8000d48:	f001 fbf4 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4840      	ldr	r0, [pc, #256]	; (8000e60 <MX_GPIO_Init+0x27c>)
 8000d60:	f001 fbe8 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x274>)
 8000d78:	f001 fbdc 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000d7c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d82:	2311      	movs	r3, #17
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4830      	ldr	r0, [pc, #192]	; (8000e58 <MX_GPIO_Init+0x274>)
 8000d96:	f001 fbcd 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d9e:	2311      	movs	r3, #17
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_GPIO_Init+0x278>)
 8000db2:	f001 fbbf 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000db6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4824      	ldr	r0, [pc, #144]	; (8000e60 <MX_GPIO_Init+0x27c>)
 8000dd0:	f001 fbb0 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	481d      	ldr	r0, [pc, #116]	; (8000e64 <MX_GPIO_Init+0x280>)
 8000dee:	f001 fba1 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000df2:	2304      	movs	r3, #4
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_GPIO_Init+0x284>)
 8000e0a:	f001 fb93 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000e0e:	2370      	movs	r3, #112	; 0x70
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e12:	2311      	movs	r3, #17
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x284>)
 8000e26:	f001 fb85 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_GPIO_Init+0x274>)
 8000e42:	f001 fb77 	bl	8002534 <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	; 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	40021000 	.word	0x40021000

08000e70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e78:	f00c fd50 	bl	800d91c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f009 fe31 	bl	800aae4 <osDelay>
 8000e82:	e7fb      	b.n	8000e7c <StartDefaultTask+0xc>

08000e84 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f009 fe29 	bl	800aae4 <osDelay>
 8000e92:	e7fb      	b.n	8000e8c <StartTask_gateway+0x8>

08000e94 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if( USB_MSGQ_Rx != NULL )
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <StartTask_controller+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d025      	beq.n	8000ef0 <StartTask_controller+0x5c>
	  {

			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <StartTask_controller+0x64>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	f107 011c 	add.w	r1, r7, #28
 8000eac:	2300      	movs	r3, #0
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f009 ff40 	bl	800ad34 <osMessageQueueGet>
 8000eb4:	6238      	str	r0, [r7, #32]

			if (status == osOK)
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d119      	bne.n	8000ef0 <StartTask_controller+0x5c>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec0:	e00e      	b.n	8000ee0 <StartTask_controller+0x4c>
				{
					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 8000ec2:	f107 021c 	add.w	r2, r7, #28
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	3328      	adds	r3, #40	; 0x28
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f843 2c1c 	str.w	r2, [r3, #-28]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d9ed      	bls.n	8000ec2 <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4618      	mov	r0, r3
 8000eec:	f007 faf2 	bl	80084d4 <HiL_controller_read_message>
			}
	  }

	  osDelay(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f009 fdf7 	bl	800aae4 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000ef6:	e7d1      	b.n	8000e9c <StartTask_controller+0x8>
 8000ef8:	200005f8 	.word	0x200005f8

08000efc <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f009 fded 	bl	800aae4 <osDelay>
 8000f0a:	e7fb      	b.n	8000f04 <StartTask_SHT20+0x8>

08000f0c <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f009 fde5 	bl	800aae4 <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <StartTask_74HC595D+0x8>

08000f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f2e:	f000 fc63 	bl	80017f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40001000 	.word	0x40001000

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	210f      	movs	r1, #15
 8000f86:	f06f 0001 	mvn.w	r0, #1
 8000f8a:	f000 fe2d 	bl	8001be8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_CAN_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d127      	bne.n	800100e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_CAN_MspInit+0x80>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ffe:	2309      	movs	r3, #9
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_CAN_MspInit+0x84>)
 800100a:	f001 fa93 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40006400 	.word	0x40006400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020c00 	.word	0x40020c00

08001024 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_DAC_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_DAC_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_DAC_MspInit+0x88>)
 800104c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_DAC_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_DAC_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_DAC_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_DAC_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8001076:	2310      	movs	r3, #16
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_DAC_MspInit+0x8c>)
 800108a:	f001 fa53 	bl	8002534 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	210f      	movs	r1, #15
 8001092:	2036      	movs	r0, #54	; 0x36
 8001094:	f000 fda8 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001098:	2036      	movs	r0, #54	; 0x36
 800109a:	f000 fdc1 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40007400 	.word	0x40007400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_ETH_MspInit+0x158>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	f040 8096 	bne.w	8001204 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a46      	ldr	r2, [pc, #280]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a40      	ldr	r2, [pc, #256]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800110e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 800116e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_ETH_MspInit+0x15c>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001180:	2332      	movs	r3, #50	; 0x32
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001190:	230b      	movs	r3, #11
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <HAL_ETH_MspInit+0x160>)
 800119c:	f001 f9ca 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011a0:	2386      	movs	r3, #134	; 0x86
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b0:	230b      	movs	r3, #11
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <HAL_ETH_MspInit+0x164>)
 80011bc:	f001 f9ba 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d2:	230b      	movs	r3, #11
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <HAL_ETH_MspInit+0x168>)
 80011de:	f001 f9a9 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f4:	230b      	movs	r3, #11
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <HAL_ETH_MspInit+0x16c>)
 8001200:	f001 f998 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3738      	adds	r7, #56	; 0x38
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40028000 	.word	0x40028000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40021800 	.word	0x40021800

08001224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ae      	sub	sp, #184	; 0xb8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2290      	movs	r2, #144	; 0x90
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f00d f957 	bl	800e4f8 <memset>
  if(hi2c->Instance==I2C1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <HAL_I2C_MspInit+0xb4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13c      	bne.n	80012ce <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001258:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fc7a 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800126e:	f7ff fe67 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 800128a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001292:	2312      	movs	r3, #18
 8001294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a4:	2304      	movs	r3, #4
 80012a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_I2C_MspInit+0xbc>)
 80012b2:	f001 f93f 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0xb8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	37b8      	adds	r7, #184	; 0xb8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_SPI_MspInit+0x148>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d144      	bne.n	8001390 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a49      	ldr	r2, [pc, #292]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 800130c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a43      	ldr	r2, [pc, #268]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135e:	2305      	movs	r3, #5
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4832      	ldr	r0, [pc, #200]	; (8001434 <HAL_SPI_MspInit+0x150>)
 800136a:	f001 f8e3 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800136e:	2308      	movs	r3, #8
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <HAL_SPI_MspInit+0x154>)
 800138a:	f001 f8d3 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800138e:	e049      	b.n	8001424 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <HAL_SPI_MspInit+0x158>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d144      	bne.n	8001424 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_SPI_MspInit+0x14c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 80013e2:	2304      	movs	r3, #4
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013f2:	2307      	movs	r3, #7
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <HAL_SPI_MspInit+0x154>)
 80013fe:	f001 f899 	bl	8002534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001414:	2306      	movs	r3, #6
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <HAL_SPI_MspInit+0x15c>)
 8001420:	f001 f888 	bl	8002534 <HAL_GPIO_Init>
}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013000 	.word	0x40013000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40020400 	.word	0x40020400
 800143c:	40003c00 	.word	0x40003c00
 8001440:	40020800 	.word	0x40020800

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d128      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_TIM_Base_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <HAL_TIM_Base_MspInit+0x84>)
 80014b4:	f001 f83e 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ae      	sub	sp, #184	; 0xb8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2290      	movs	r2, #144	; 0x90
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00d f803 	bl	800e4f8 <memset>
  if(huart->Instance==UART7)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_UART_MspInit+0xb4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d13c      	bne.n	8001576 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001502:	2300      	movs	r3, #0
 8001504:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fb26 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001516:	f7ff fd13 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_UART_MspInit+0xb8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0xb8>)
 8001520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0xb8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_UART_MspInit+0xb8>)
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 800154a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800154e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001564:	2308      	movs	r3, #8
 8001566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0xbc>)
 8001572:	f000 ffdf 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	37b8      	adds	r7, #184	; 0xb8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40007800 	.word	0x40007800
 8001584:	40023800 	.word	0x40023800
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800159c:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_InitTick+0xe0>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_InitTick+0xe0>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_InitTick+0xe0>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b4:	f107 0210 	add.w	r2, r7, #16
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fa9a 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ce:	f003 fa6b 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80015d2:	6378      	str	r0, [r7, #52]	; 0x34
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015d6:	f003 fa67 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80015da:	4603      	mov	r3, r0
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_InitTick+0xe4>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	3b01      	subs	r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_InitTick+0xe8>)
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_InitTick+0xec>)
 80015f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <HAL_InitTick+0xe8>)
 80015f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <HAL_InitTick+0xe8>)
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_InitTick+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_InitTick+0xe8>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_InitTick+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001614:	4817      	ldr	r0, [pc, #92]	; (8001674 <HAL_InitTick+0xe8>)
 8001616:	f003 ff74 	bl	8005502 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001624:	2b00      	cmp	r3, #0
 8001626:	d11b      	bne.n	8001660 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <HAL_InitTick+0xe8>)
 800162a:	f003 ffc1 	bl	80055b0 <HAL_TIM_Base_Start_IT>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001634:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001638:	2b00      	cmp	r3, #0
 800163a:	d111      	bne.n	8001660 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163c:	2036      	movs	r0, #54	; 0x36
 800163e:	f000 faef 	bl	8001c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d808      	bhi.n	800165a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	2036      	movs	r0, #54	; 0x36
 800164e:	f000 facb 	bl	8001be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_InitTick+0xf0>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e002      	b.n	8001660 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001660:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001664:	4618      	mov	r0, r3
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	431bde83 	.word	0x431bde83
 8001674:	20000608 	.word	0x20000608
 8001678:	40001000 	.word	0x40001000
 800167c:	20000004 	.word	0x20000004

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <TIM6_DAC_IRQHandler+0x20>)
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <TIM6_DAC_IRQHandler+0x20>)
 80016bc:	f000 fb32 	bl	8001d24 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <TIM6_DAC_IRQHandler+0x24>)
 80016c2:	f004 f84e 	bl	8005762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000330 	.word	0x20000330
 80016d0:	20000608 	.word	0x20000608

080016d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <OTG_FS_IRQHandler+0x10>)
 80016da:	f001 fb76 	bl	8002dca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20006b48 	.word	0x20006b48

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f00c fea4 	bl	800e464 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20080000 	.word	0x20080000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000654 	.word	0x20000654
 8001750:	20007060 	.word	0x20007060

08001754 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a2:	f7ff ffd7 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f00c fe63 	bl	800e470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7fe ff35 	bl	8000618 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80017bc:	0800e9cc 	.word	0x0800e9cc
  ldr r2, =_sbss
 80017c0:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 80017c4:	20007060 	.word	0x20007060

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x28>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f9f8 	bl	8001bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f7ff fed2 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fbb0 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	20000658 	.word	0x20000658

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000658 	.word	0x20000658

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0ed      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fb7c 	bl	8000f9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff ffb4 	bl	8001820 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ba:	e012      	b.n	80018e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018bc:	f7ff ffb0 	bl	8001820 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d90b      	bls.n	80018e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0c5      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0e5      	beq.n	80018bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0202 	bic.w	r2, r2, #2
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001900:	f7ff ff8e 	bl	8001820 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001906:	e012      	b.n	800192e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001908:	f7ff ff8a 	bl	8001820 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d90b      	bls.n	800192e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e09f      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e5      	bne.n	8001908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7e5b      	ldrb	r3, [r3, #25]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e9b      	ldrb	r3, [r3, #26]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0220 	bic.w	r2, r2, #32
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7edb      	ldrb	r3, [r3, #27]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0210 	bic.w	r2, r2, #16
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0210 	orr.w	r2, r2, #16
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0208 	bic.w	r2, r2, #8
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f5b      	ldrb	r3, [r3, #29]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0204 	orr.w	r2, r2, #4
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	ea42 0103 	orr.w	r1, r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <__NVIC_SetPriorityGrouping>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	05fa0000 	.word	0x05fa0000

08001ac0 <__NVIC_GetPriorityGrouping>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff4c 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfa:	f7ff ff61 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001bfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffb1 	bl	8001b6c <NVIC_EncodePriority>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff80 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff54 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e014      	b.n	8001c78 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	791b      	ldrb	r3, [r3, #4]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f9e0 	bl	8001024 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	795b      	ldrb	r3, [r3, #5]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_DAC_Start+0x16>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e040      	b.n	8001d18 <HAL_DAC_Start+0x98>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2201      	movs	r2, #1
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001cca:	2b3c      	cmp	r3, #60	; 0x3c
 8001ccc:	d11d      	bne.n	8001d0a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e014      	b.n	8001d0a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	213c      	movs	r1, #60	; 0x3c
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d107      	bne.n	8001d0a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0202 	orr.w	r2, r2, #2
 8001d08:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	d120      	bne.n	8001d7e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d118      	bne.n	8001d7e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d76:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f852 	bl	8001e22 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d8c:	d120      	bne.n	8001dd0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d9c:	d118      	bne.n	8001dd0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f043 0202 	orr.w	r2, r3, #2
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f882 	bl	8001ed4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e004      	b.n	8001e0c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	3314      	adds	r3, #20
 8001e0a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	795b      	ldrb	r3, [r3, #5]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DAC_ConfigChannel+0x18>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e03c      	b.n	8001ec8 <HAL_DAC_ConfigChannel+0x92>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2202      	movs	r2, #2
 8001e58:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	22c0      	movs	r2, #192	; 0xc0
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06a      	b.n	8001fd0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2223      	movs	r2, #35	; 0x23
 8001f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff f8d1 	bl	80010b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_ETH_Init+0xf0>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_ETH_Init+0xf0>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_ETH_Init+0xf0>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_ETH_Init+0xf4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_ETH_Init+0xf4>)
 8001f30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f34:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_ETH_Init+0xf4>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4927      	ldr	r1, [pc, #156]	; (8001fdc <HAL_ETH_Init+0xf4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_ETH_Init+0xf4>)
 8001f46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7ff fc5e 	bl	8001820 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f66:	e011      	b.n	8001f8c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f68:	f7ff fc5a 	bl	8001820 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f76:	d909      	bls.n	8001f8c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	22e0      	movs	r2, #224	; 0xe0
 8001f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e021      	b.n	8001fd0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e4      	bne.n	8001f68 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f958 	bl	8002254 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f9ff 	bl	80023a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa55 	bl	800245a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f9bd 	bl	8002338 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800

08001fe0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4b51      	ldr	r3, [pc, #324]	; (800213c <ETH_SetMACConfig+0x15c>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	7c1b      	ldrb	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetMACConfig+0x28>
 8002002:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x2a>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7c5b      	ldrb	r3, [r3, #17]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <ETH_SetMACConfig+0x38>
 8002012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002016:	e000      	b.n	800201a <ETH_SetMACConfig+0x3a>
 8002018:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800201a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002020:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7fdb      	ldrb	r3, [r3, #31]
 8002026:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002028:	431a      	orrs	r2, r3
                        macconf->Speed |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800202e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	7f92      	ldrb	r2, [r2, #30]
 8002034:	2a00      	cmp	r2, #0
 8002036:	d102      	bne.n	800203e <ETH_SetMACConfig+0x5e>
 8002038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0x60>
 800203e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7f1b      	ldrb	r3, [r3, #28]
 8002046:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002048:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800204e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002056:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800205e:	2a00      	cmp	r2, #0
 8002060:	d102      	bne.n	8002068 <ETH_SetMACConfig+0x88>
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	e000      	b.n	800206a <ETH_SetMACConfig+0x8a>
 8002068:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800206a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	7bdb      	ldrb	r3, [r3, #15]
 8002070:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002072:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002078:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002080:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002082:	4313      	orrs	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fbcc 	bl	8001838 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d101      	bne.n	80020ce <ETH_SetMACConfig+0xee>
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	e000      	b.n	80020d0 <ETH_SetMACConfig+0xf0>
 80020ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020de:	2a01      	cmp	r2, #1
 80020e0:	d101      	bne.n	80020e6 <ETH_SetMACConfig+0x106>
 80020e2:	2208      	movs	r2, #8
 80020e4:	e000      	b.n	80020e8 <ETH_SetMACConfig+0x108>
 80020e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020f0:	2a01      	cmp	r2, #1
 80020f2:	d101      	bne.n	80020f8 <ETH_SetMACConfig+0x118>
 80020f4:	2204      	movs	r2, #4
 80020f6:	e000      	b.n	80020fa <ETH_SetMACConfig+0x11a>
 80020f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002102:	2a01      	cmp	r2, #1
 8002104:	d101      	bne.n	800210a <ETH_SetMACConfig+0x12a>
 8002106:	2202      	movs	r2, #2
 8002108:	e000      	b.n	800210c <ETH_SetMACConfig+0x12c>
 800210a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800210c:	4313      	orrs	r3, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff fb87 	bl	8001838 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	ff20810f 	.word	0xff20810f

08002140 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <ETH_SetDMAConfig+0x110>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7b1b      	ldrb	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <ETH_SetDMAConfig+0x2c>
 8002166:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800216a:	e000      	b.n	800216e <ETH_SetDMAConfig+0x2e>
 800216c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	7b5b      	ldrb	r3, [r3, #13]
 8002172:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002174:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	7f52      	ldrb	r2, [r2, #29]
 800217a:	2a00      	cmp	r2, #0
 800217c:	d102      	bne.n	8002184 <ETH_SetDMAConfig+0x44>
 800217e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002182:	e000      	b.n	8002186 <ETH_SetDMAConfig+0x46>
 8002184:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002186:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	7b9b      	ldrb	r3, [r3, #14]
 800218c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800218e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002194:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	7f1b      	ldrb	r3, [r3, #28]
 800219a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800219c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	7f9b      	ldrb	r3, [r3, #30]
 80021a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021b4:	4313      	orrs	r3, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7ff fb2e 	bl	8001838 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	461a      	mov	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002200:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002208:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800220a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002212:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002218:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002222:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002226:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff faff 	bl	8001838 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	f8de3f23 	.word	0xf8de3f23

08002254 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0a6      	sub	sp, #152	; 0x98
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002268:	2300      	movs	r3, #0
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002290:	2300      	movs	r3, #0
 8002292:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800229a:	2300      	movs	r3, #0
 800229c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe86 	bl	8001fe0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022d8:	2301      	movs	r3, #1
 80022da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002300:	2301      	movs	r3, #1
 8002302:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002308:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800230a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800230e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002314:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff08 	bl	8002140 <ETH_SetDMAConfig>
}
 8002330:	bf00      	nop
 8002332:	3798      	adds	r7, #152	; 0x98
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3305      	adds	r3, #5
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	3204      	adds	r2, #4
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <ETH_MACAddressConfig+0x68>)
 800235a:	4413      	add	r3, r2
 800235c:	461a      	mov	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3303      	adds	r3, #3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	061a      	lsls	r2, r3, #24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3302      	adds	r3, #2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	4313      	orrs	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <ETH_MACAddressConfig+0x6c>)
 800238a:	4413      	add	r3, r2
 800238c:	461a      	mov	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40028040 	.word	0x40028040
 80023a4:	40028044 	.word	0x40028044

080023a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e03e      	b.n	8002434 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	3206      	adds	r2, #6
 80023e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d80c      	bhi.n	8002418 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68d9      	ldr	r1, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e004      	b.n	8002422 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d9bd      	bls.n	80023b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244c:	611a      	str	r2, [r3, #16]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e046      	b.n	80024f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6919      	ldr	r1, [r3, #16]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80024ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	3212      	adds	r2, #18
 80024c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d80c      	bhi.n	80024e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	e004      	b.n	80024f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d9b5      	bls.n	8002468 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e175      	b.n	8002840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8164 	bne.w	800283a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x56>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80be 	beq.w	800283a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_GPIO_Init+0x328>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_GPIO_Init+0x32c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d037      	beq.n	8002772 <HAL_GPIO_Init+0x23e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x330>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d031      	beq.n	800276e <HAL_GPIO_Init+0x23a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x334>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x236>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x338>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x232>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x33c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x22e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x340>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x22a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x344>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x350>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x21a>
 800274a:	2309      	movs	r3, #9
 800274c:	e012      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800274e:	230a      	movs	r3, #10
 8002750:	e010      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002752:	2308      	movs	r3, #8
 8002754:	e00e      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002756:	2307      	movs	r3, #7
 8002758:	e00c      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275a:	2306      	movs	r3, #6
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275e:	2305      	movs	r3, #5
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	; (800285c <HAL_GPIO_Init+0x328>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_GPIO_Init+0x354>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f ae86 	bls.w	8002554 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022400 	.word	0x40022400
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fc84 	bl	8001224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e006      	b.n	8002978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d104      	bne.n	800298a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_I2C_Init+0x11c>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	02008000 	.word	0x02008000

08002a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d138      	bne.n	8002a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e032      	b.n	8002a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d139      	bne.n	8002b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e033      	b.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2224      	movs	r2, #36	; 0x24
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b40:	b08f      	sub	sp, #60	; 0x3c
 8002b42:	af0a      	add	r7, sp, #40	; 0x28
 8002b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e116      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f00b f90c 	bl	800dd88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f917 	bl	8006dc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	687e      	ldr	r6, [r7, #4]
 8002b9c:	466d      	mov	r5, sp
 8002b9e:	f106 0410 	add.w	r4, r6, #16
 8002ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bb2:	1d33      	adds	r3, r6, #4
 8002bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	f003 fff8 	bl	8006bac <USB_CoreInit>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0d7      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f905 	bl	8006de4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e04a      	b.n	8002c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	333d      	adds	r3, #61	; 0x3d
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333c      	adds	r3, #60	; 0x3c
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	b298      	uxth	r0, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3344      	adds	r3, #68	; 0x44
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3340      	adds	r3, #64	; 0x40
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3348      	adds	r3, #72	; 0x48
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334c      	adds	r3, #76	; 0x4c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	3301      	adds	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3af      	bcc.n	8002be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e044      	b.n	8002d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3b5      	bcc.n	8002c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	687e      	ldr	r6, [r7, #4]
 8002d22:	466d      	mov	r5, sp
 8002d24:	f106 0410 	add.w	r4, r6, #16
 8002d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d38:	1d33      	adds	r3, r6, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f004 f89d 	bl	8006e7c <USB_DevInit>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e014      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f001 f97b 	bl	8004068 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 f9eb 	bl	8008152 <USB_DevDisconnect>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_Start+0x16>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e012      	b.n	8002dc2 <HAL_PCD_Start+0x3c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fff9 	bl	8006da0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 f9ac 	bl	8008110 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dca:	b590      	push	{r4, r7, lr}
 8002dcc:	b08d      	sub	sp, #52	; 0x34
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 fa6a 	bl	80082ba <USB_GetMode>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 84b7 	bne.w	800375c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 f9ce 	bl	8008194 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 84ad 	beq.w	800375a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 f9bb 	bl	8008194 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d107      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f002 0202 	and.w	r2, r2, #2
 8002e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f005 f9a9 	bl	8008194 <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d161      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0210 	bic.w	r2, r2, #16
 8002e5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	0c5b      	lsrs	r3, r3, #17
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d124      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d035      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a38      	ldr	r0, [r7, #32]
 8002ea8:	f004 ffe0 	bl	8007e6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb8:	441a      	add	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6a1a      	ldr	r2, [r3, #32]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eca:	441a      	add	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	621a      	str	r2, [r3, #32]
 8002ed0:	e016      	b.n	8002f00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	0c5b      	lsrs	r3, r3, #17
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d110      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6a38      	ldr	r0, [r7, #32]
 8002eea:	f004 ffbf 	bl	8007e6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efa:	441a      	add	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0210 	orr.w	r2, r2, #16
 8002f0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 f93d 	bl	8008194 <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f24:	f040 80a7 	bne.w	8003076 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f005 f942 	bl	80081ba <USB_ReadDevAllOutEpInterrupt>
 8002f36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f38:	e099      	b.n	800306e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 808e 	beq.w	8003062 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f005 f966 	bl	8008222 <USB_ReadDevOutEPInterrupt>
 8002f56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2301      	movs	r3, #1
 8002f72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fef0 	bl	8003d5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 ffc6 	bl	8003f2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2310      	movs	r3, #16
 8002fba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d030      	beq.n	8003028 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d109      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	78db      	ldrb	r3, [r3, #3]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d108      	bne.n	8003016 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f00a ffdd 	bl	800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	2302      	movs	r3, #2
 8003026:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	2320      	movs	r3, #32
 8003042:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003060:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af62 	bne.w	8002f3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f005 f88a 	bl	8008194 <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308a:	f040 80db 	bne.w	8003244 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f005 f8ab 	bl	80081ee <USB_ReadDevAllInEpInterrupt>
 8003098:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800309e:	e0cd      	b.n	800323c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80c2 	beq.w	8003230 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f005 f8d1 	bl	800825e <USB_ReadDevInEPInterrupt>
 80030bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d057      	beq.n	8003178 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69f9      	ldr	r1, [r7, #28]
 80030e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030e8:	4013      	ands	r3, r2
 80030ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	2301      	movs	r3, #1
 80030fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d132      	bne.n	800316c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334c      	adds	r3, #76	; 0x4c
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3348      	adds	r3, #72	; 0x48
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4419      	add	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	334c      	adds	r3, #76	; 0x4c
 800313c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d113      	bne.n	800316c <HAL_PCD_IRQHandler+0x3a2>
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3354      	adds	r3, #84	; 0x54
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003164:	461a      	mov	r2, r3
 8003166:	2101      	movs	r1, #1
 8003168:	f005 f8da 	bl	8008320 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f00a fea7 	bl	800dec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2308      	movs	r3, #8
 8003192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	2310      	movs	r3, #16
 80031ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d8:	6a38      	ldr	r0, [r7, #32]
 80031da:	f003 ffad 	bl	8007138 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	3338      	adds	r3, #56	; 0x38
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	3304      	adds	r3, #4
 80031f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f00a fef4 	bl	800dff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	2302      	movs	r3, #2
 800321c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fd08 	bl	8003c40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	3301      	adds	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f af2e 	bne.w	80030a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f004 ffa3 	bl	8008194 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003258:	d122      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003280:	2100      	movs	r1, #0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f00b f86e 	bl	800e364 <HAL_PCDEx_LPM_Callback>
 8003288:	e002      	b.n	8003290 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f00a fe92 	bl	800dfb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 ff75 	bl	8008194 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d112      	bne.n	80032dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f00a fe4e 	bl	800df68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 ff57 	bl	8008194 <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d121      	bne.n	8003336 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003300:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d111      	bne.n	8003330 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003326:	2101      	movs	r1, #1
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f00b f81b 	bl	800e364 <HAL_PCDEx_LPM_Callback>
 800332e:	e002      	b.n	8003336 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f00a fe19 	bl	800df68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f004 ff2a 	bl	8008194 <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	f040 80b7 	bne.w	80034bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2110      	movs	r1, #16
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fee5 	bl	8007138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003372:	e046      	b.n	8003402 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	461a      	mov	r2, r3
 8003382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003386:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	440a      	add	r2, r1
 800339e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	3301      	adds	r3, #1
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003408:	429a      	cmp	r2, r3
 800340a:	d3b3      	bcc.n	8003374 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800341e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003438:	f043 030b 	orr.w	r3, r3, #11
 800343c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344e:	f043 030b 	orr.w	r3, r3, #11
 8003452:	6453      	str	r3, [r2, #68]	; 0x44
 8003454:	e015      	b.n	8003482 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003464:	4619      	mov	r1, r3
 8003466:	f242 032b 	movw	r3, #8235	; 0x202b
 800346a:	4313      	orrs	r3, r2
 800346c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347c:	f043 030b 	orr.w	r3, r3, #11
 8003480:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003490:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003494:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a6:	461a      	mov	r2, r3
 80034a8:	f004 ff3a 	bl	8008320 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fe67 	bl	8008194 <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d0:	d124      	bne.n	800351c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 fefe 	bl	80082d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 fea6 	bl	8007232 <USB_GetDevSpeed>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	f001 facd 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 80034f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	4620      	mov	r0, r4
 8003502:	f003 fbab 	bl	8006c5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00a fd05 	bl	800df16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 fe37 	bl	8008194 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d10a      	bne.n	8003546 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f00a fce2 	bl	800defa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 0208 	and.w	r2, r2, #8
 8003544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fe22 	bl	8008194 <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d122      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003566:	2301      	movs	r3, #1
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e014      	b.n	8003596 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fb27 	bl	8003bde <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	3301      	adds	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	429a      	cmp	r2, r3
 800359e:	d3e5      	bcc.n	800356c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fdf5 	bl	8008194 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b4:	d13b      	bne.n	800362e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b6:	2301      	movs	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e02b      	b.n	8003614 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3340      	adds	r3, #64	; 0x40
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d115      	bne.n	800360e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da12      	bge.n	800360e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	333f      	adds	r3, #63	; 0x3f
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fae8 	bl	8003bde <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	429a      	cmp	r2, r3
 800361c:	d3ce      	bcc.n	80035bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800362c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fdae 	bl	8008194 <USB_ReadInterrupts>
 8003638:	4603      	mov	r3, r0
 800363a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003642:	d155      	bne.n	80036f0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003644:	2301      	movs	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
 8003648:	e045      	b.n	80036d6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d12e      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003672:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	da2b      	bge.n	80036d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003684:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003688:	429a      	cmp	r2, r3
 800368a:	d121      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036cc:	6053      	str	r3, [r2, #4]
            break;
 80036ce:	e007      	b.n	80036e0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	3301      	adds	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3b4      	bcc.n	800364a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fd4d 	bl	8008194 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d10a      	bne.n	800371c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00a fc86 	bl	800e018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f004 fd37 	bl	8008194 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d115      	bne.n	800375c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f00a fc76 	bl	800e034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	e000      	b.n	800375c <HAL_PCD_IRQHandler+0x992>
      return;
 800375a:	bf00      	nop
    }
  }
}
 800375c:	3734      	adds	r7, #52	; 0x34
 800375e:	46bd      	mov	sp, r7
 8003760:	bd90      	pop	{r4, r7, pc}

08003762 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_PCD_SetAddress+0x1a>
 8003778:	2302      	movs	r3, #2
 800377a:	e013      	b.n	80037a4 <HAL_PCD_SetAddress+0x42>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fc95 	bl	80080c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	70fb      	strb	r3, [r7, #3]
 80037be:	460b      	mov	r3, r1
 80037c0:	803b      	strh	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0f      	bge.n	80037f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3338      	adds	r3, #56	; 0x38
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
 80037f0:	e00f      	b.n	8003812 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800381e:	883a      	ldrh	r2, [r7, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	78ba      	ldrb	r2, [r7, #2]
 8003828:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800383c:	78bb      	ldrb	r3, [r7, #2]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d102      	bne.n	8003848 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_PCD_EP_Open+0xaa>
 8003852:	2302      	movs	r3, #2
 8003854:	e00e      	b.n	8003874 <HAL_PCD_EP_Open+0xc8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	4618      	mov	r0, r3
 8003866:	f003 fd09 	bl	800727c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003872:	7afb      	ldrb	r3, [r7, #11]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da0f      	bge.n	80038b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	705a      	strb	r2, [r3, #1]
 80038ae:	e00f      	b.n	80038d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_PCD_EP_Close+0x6e>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e00e      	b.n	8003908 <HAL_PCD_EP_Close+0x8c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fd47 	bl	800738c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	460b      	mov	r3, r1
 800391e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2200      	movs	r2, #0
 8003950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396c:	7afb      	ldrb	r3, [r7, #11]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	f004 f82e 	bl	80079e4 <USB_EP0StartXfer>
 8003988:	e008      	b.n	800399c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	f003 fdd4 	bl	8007544 <USB_EPStartXfer>
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039c8:	681b      	ldr	r3, [r3, #0]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	460b      	mov	r3, r1
 80039e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	3338      	adds	r3, #56	; 0x38
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2201      	movs	r2, #1
 8003a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6979      	ldr	r1, [r7, #20]
 8003a48:	f003 ffcc 	bl	80079e4 <USB_EP0StartXfer>
 8003a4c:	e008      	b.n	8003a60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	f003 fd72 	bl	8007544 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d901      	bls.n	8003a88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e050      	b.n	8003b2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0f      	bge.n	8003ab0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00d      	b.n	8003acc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_PCD_EP_SetStall+0x82>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e01e      	b.n	8003b2a <HAL_PCD_EP_SetStall+0xc0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68f9      	ldr	r1, [r7, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fa0e 	bl	8007f1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	b2d9      	uxtb	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f004 fc00 	bl	8008320 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d901      	bls.n	8003b50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e042      	b.n	8003bd6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da0f      	bge.n	8003b78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	3338      	adds	r3, #56	; 0x38
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
 8003b76:	e00f      	b.n	8003b98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_PCD_EP_ClrStall+0x86>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e00e      	b.n	8003bd6 <HAL_PCD_EP_ClrStall+0xa4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fa16 	bl	8007ff8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da0c      	bge.n	8003c0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	; 0x38
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00c      	b.n	8003c26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	3304      	adds	r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 f835 	bl	8007c9c <USB_EPStopXfer>
 8003c32:	4603      	mov	r3, r0
 8003c34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c36:	7afb      	ldrb	r3, [r7, #11]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3338      	adds	r3, #56	; 0x38
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d901      	bls.n	8003c78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e06c      	b.n	8003d52 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d902      	bls.n	8003c94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3303      	adds	r3, #3
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c9c:	e02b      	b.n	8003cf6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d902      	bls.n	8003cba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3303      	adds	r3, #3
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6919      	ldr	r1, [r3, #16]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f004 f889 	bl	8007df0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d809      	bhi.n	8003d20 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d203      	bcs.n	8003d20 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1be      	bne.n	8003c9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d811      	bhi.n	8003d50 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	6939      	ldr	r1, [r7, #16]
 8003d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	333c      	adds	r3, #60	; 0x3c
 8003d74:	3304      	adds	r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d17b      	bne.n	8003e8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	f240 80b9 	bls.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80b3 	beq.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc4:	6093      	str	r3, [r2, #8]
 8003dc6:	e0a7      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	2320      	movs	r3, #32
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	e098      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 8093 	bne.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d90f      	bls.n	8003e1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	461a      	mov	r2, r3
 8003e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e16:	6093      	str	r3, [r2, #8]
 8003e18:	e07e      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	1ad2      	subs	r2, r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e64:	461a      	mov	r2, r3
 8003e66:	2101      	movs	r1, #1
 8003e68:	f004 fa5a 	bl	8008320 <USB_EP0_OutStart>
 8003e6c:	e006      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f00a f804 	bl	800de90 <HAL_PCD_DataOutStageCallback>
 8003e88:	e046      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d124      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	6093      	str	r3, [r2, #8]
 8003eb0:	e032      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2320      	movs	r3, #32
 8003ecc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f009 ffdb 	bl	800de90 <HAL_PCD_DataOutStageCallback>
 8003eda:	e01d      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d114      	bne.n	8003f0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f04:	461a      	mov	r2, r3
 8003f06:	2100      	movs	r1, #0
 8003f08:	f004 fa0a 	bl	8008320 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f009 ffbc 	bl	800de90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	4f54300a 	.word	0x4f54300a
 8003f28:	4f54310a 	.word	0x4f54310a

08003f2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	333c      	adds	r3, #60	; 0x3c
 8003f44:	3304      	adds	r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d90e      	bls.n	8003f80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f009 ff73 	bl	800de6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90c      	bls.n	8003fa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f004 f9bc 	bl	8008320 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	4f54300a 	.word	0x4f54300a

08003fb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d107      	bne.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fd6:	883b      	ldrh	r3, [r7, #0]
 8003fd8:	0419      	lsls	r1, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe4:	e028      	b.n	8004038 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e00d      	b.n	8004016 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3340      	adds	r3, #64	; 0x40
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	3301      	adds	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	3b01      	subs	r3, #1
 800401c:	429a      	cmp	r2, r3
 800401e:	d3ec      	bcc.n	8003ffa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004020:	883b      	ldrh	r3, [r7, #0]
 8004022:	0418      	lsls	r0, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	3b01      	subs	r3, #1
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	4302      	orrs	r2, r0
 8004030:	3340      	adds	r3, #64	; 0x40
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004098:	4313      	orrs	r3, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	10000003 	.word	0x10000003

080040b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_PWREx_EnableOverDrive+0x98>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1d      	ldr	r2, [pc, #116]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040de:	f7fd fb9f 	bl	8001820 <HAL_GetTick>
 80040e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040e4:	e009      	b.n	80040fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e6:	f7fd fb9b 	bl	8001820 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f4:	d901      	bls.n	80040fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e022      	b.n	8004140 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d1ee      	bne.n	80040e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 800410e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004112:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004114:	f7fd fb84 	bl	8001820 <HAL_GetTick>
 8004118:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800411a:	e009      	b.n	8004130 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800411c:	f7fd fb80 	bl	8001820 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412a:	d901      	bls.n	8004130 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e007      	b.n	8004140 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800413c:	d1ee      	bne.n	800411c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	40007000 	.word	0x40007000

08004150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e29b      	b.n	800469e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8087 	beq.w	8004282 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004174:	4b96      	ldr	r3, [pc, #600]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b04      	cmp	r3, #4
 800417e:	d00c      	beq.n	800419a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004180:	4b93      	ldr	r3, [pc, #588]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d112      	bne.n	80041b2 <HAL_RCC_OscConfig+0x62>
 800418c:	4b90      	ldr	r3, [pc, #576]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004198:	d10b      	bne.n	80041b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419a:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d06c      	beq.n	8004280 <HAL_RCC_OscConfig+0x130>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d168      	bne.n	8004280 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e275      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x7a>
 80041bc:	4b84      	ldr	r3, [pc, #528]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a83      	ldr	r2, [pc, #524]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e02e      	b.n	8004228 <HAL_RCC_OscConfig+0xd8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x9c>
 80041d2:	4b7f      	ldr	r3, [pc, #508]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7e      	ldr	r2, [pc, #504]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7b      	ldr	r2, [pc, #492]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xd8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0xc0>
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a75      	ldr	r2, [pc, #468]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xd8>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd faf6 	bl	8001820 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd faf2 	bl	8001820 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e229      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xe8>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fae2 	bl	8001820 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fd fade 	bl	8001820 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e215      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x110>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d069      	beq.n	8004362 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d11c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x190>
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x17a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e1e9      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	493d      	ldr	r1, [pc, #244]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042de:	e040      	b.n	8004362 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d023      	beq.n	8004330 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e8:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a38      	ldr	r2, [pc, #224]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fa94 	bl	8001820 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fd fa90 	bl	8001820 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e1c7      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4929      	ldr	r1, [pc, #164]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
 800432e:	e018      	b.n	8004362 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fa70 	bl	8001820 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd fa6c 	bl	8001820 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1a3      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d038      	beq.n	80043e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d019      	beq.n	80043aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fd fa4d 	bl	8001820 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438a:	f7fd fa49 	bl	8001820 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e180      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x23a>
 80043a8:	e01a      	b.n	80043e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80043ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ae:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fa33 	bl	8001820 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fa2f 	bl	8001820 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d903      	bls.n	80043d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e166      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
 80043d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	4b92      	ldr	r3, [pc, #584]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ee      	bne.n	80043be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a4 	beq.w	8004536 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a88      	ldr	r2, [pc, #544]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
 8004406:	4b86      	ldr	r3, [pc, #536]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004416:	4b83      	ldr	r3, [pc, #524]	; (8004624 <HAL_RCC_OscConfig+0x4d4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004422:	4b80      	ldr	r3, [pc, #512]	; (8004624 <HAL_RCC_OscConfig+0x4d4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7f      	ldr	r2, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x4d4>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fd f9f7 	bl	8001820 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd f9f3 	bl	8001820 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	; 0x64
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e12a      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004448:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x4d4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x31a>
 800445c:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	4a6f      	ldr	r2, [pc, #444]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	; 0x70
 8004468:	e02d      	b.n	80044c6 <HAL_RCC_OscConfig+0x376>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x33c>
 8004472:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	4b68      	ldr	r3, [pc, #416]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a67      	ldr	r2, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	e01c      	b.n	80044c6 <HAL_RCC_OscConfig+0x376>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_OscConfig+0x35e>
 8004494:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a61      	ldr	r2, [pc, #388]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a5e      	ldr	r2, [pc, #376]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e00b      	b.n	80044c6 <HAL_RCC_OscConfig+0x376>
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a5b      	ldr	r2, [pc, #364]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ba:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a58      	ldr	r2, [pc, #352]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fd f9a7 	bl	8001820 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fd f9a3 	bl	8001820 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0d8      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ee      	beq.n	80044d6 <HAL_RCC_OscConfig+0x386>
 80044f8:	e014      	b.n	8004524 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fd f991 	bl	8001820 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fd f98d 	bl	8001820 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0c2      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ee      	bne.n	8004502 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80ae 	beq.w	800469c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004540:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b08      	cmp	r3, #8
 800454a:	d06d      	beq.n	8004628 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d14b      	bne.n	80045ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a31      	ldr	r2, [pc, #196]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd f95e 	bl	8001820 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd f95a 	bl	8001820 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e091      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	491b      	ldr	r1, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f92c 	bl	8001820 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd f928 	bl	8001820 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e05f      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x47c>
 80045ea:	e057      	b.n	800469c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 80045f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd f912 	bl	8001820 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd f90e 	bl	8001820 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e045      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x4b0>
 800461e:	e03d      	b.n	800469c <HAL_RCC_OscConfig+0x54c>
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_RCC_OscConfig+0x558>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d030      	beq.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d129      	bne.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d122      	bne.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800465e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004660:	4293      	cmp	r3, r2
 8004662:	d119      	bne.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	3b01      	subs	r3, #1
 8004672:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d10f      	bne.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d0      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d910      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 020f 	bic.w	r2, r3, #15
 80046da:	4965      	ldr	r1, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d040      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d115      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e073      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06b      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4936      	ldr	r1, [pc, #216]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fd f83e 	bl	8001820 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fd f83a 	bl	8001820 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e053      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d210      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 020f 	bic.w	r2, r3, #15
 80047e6:	4922      	ldr	r1, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f821 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1cc>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1d0>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1d4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc fe94 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	0800e944 	.word	0x0800e944
 800487c:	20000000 	.word	0x20000000
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b094      	sub	sp, #80	; 0x50
 800488a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
 8004890:	2300      	movs	r3, #0
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	2300      	movs	r3, #0
 8004896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489c:	4b79      	ldr	r3, [pc, #484]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d00d      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x40>
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	f200 80e1 	bhi.w	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x34>
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x3a>
 80048b6:	e0db      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048bc:	e0db      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048be:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c2:	e0d8      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c4:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ce:	4b6d      	ldr	r3, [pc, #436]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d063      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
 80048ee:	2300      	movs	r3, #0
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	f04f 0000 	mov.w	r0, #0
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	0159      	lsls	r1, r3, #5
 8004904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004908:	0150      	lsls	r0, r2, #5
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4621      	mov	r1, r4
 8004910:	1a51      	subs	r1, r2, r1
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	4629      	mov	r1, r5
 8004916:	eb63 0301 	sbc.w	r3, r3, r1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004928:	4659      	mov	r1, fp
 800492a:	018b      	lsls	r3, r1, #6
 800492c:	4651      	mov	r1, sl
 800492e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004932:	4651      	mov	r1, sl
 8004934:	018a      	lsls	r2, r1, #6
 8004936:	4651      	mov	r1, sl
 8004938:	ebb2 0801 	subs.w	r8, r2, r1
 800493c:	4659      	mov	r1, fp
 800493e:	eb63 0901 	sbc.w	r9, r3, r1
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004956:	4690      	mov	r8, r2
 8004958:	4699      	mov	r9, r3
 800495a:	4623      	mov	r3, r4
 800495c:	eb18 0303 	adds.w	r3, r8, r3
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	462b      	mov	r3, r5
 8004964:	eb49 0303 	adc.w	r3, r9, r3
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004976:	4629      	mov	r1, r5
 8004978:	024b      	lsls	r3, r1, #9
 800497a:	4621      	mov	r1, r4
 800497c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004980:	4621      	mov	r1, r4
 8004982:	024a      	lsls	r2, r1, #9
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	2200      	movs	r2, #0
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004994:	f7fb fc54 	bl	8000240 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	e058      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	2200      	movs	r2, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	4611      	mov	r1, r2
 80049ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	f04f 0000 	mov.w	r0, #0
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	0159      	lsls	r1, r3, #5
 80049ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ce:	0150      	lsls	r0, r2, #5
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4641      	mov	r1, r8
 80049d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f4:	ebb2 040a 	subs.w	r4, r2, sl
 80049f8:	eb63 050b 	sbc.w	r5, r3, fp
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb45 0303 	adc.w	r3, r5, r3
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	028b      	lsls	r3, r1, #10
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a34:	4621      	mov	r1, r4
 8004a36:	028a      	lsls	r2, r1, #10
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a48:	f7fb fbfa 	bl	8000240 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3750      	adds	r7, #80	; 0x50
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	007a1200 	.word	0x007a1200

08004a90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000000 	.word	0x20000000

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aac:	f7ff fff0 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800e954 	.word	0x0800e954

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffdc 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0b5b      	lsrs	r3, r3, #13
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	0800e954 	.word	0x0800e954

08004af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	220f      	movs	r2, #15
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_RCC_GetClockConfig+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d012      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b84:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a68      	ldr	r2, [pc, #416]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	4964      	ldr	r1, [pc, #400]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d017      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	4959      	ldr	r1, [pc, #356]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d101      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bf2:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	494a      	ldr	r1, [pc, #296]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c10:	d101      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 808b 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c40:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	4a39      	ldr	r2, [pc, #228]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a34      	ldr	r2, [pc, #208]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fc fddc 	bl	8001820 <HAL_GetTick>
 8004c68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fc fdd8 	bl	8001820 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e38f      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d035      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d02e      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d114      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fda0 	bl	8001820 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fc fd9c 	bl	8001820 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e351      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0ee      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d12:	d111      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d22:	400b      	ands	r3, r1
 8004d24:	4901      	ldr	r1, [pc, #4]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40007000 	.word	0x40007000
 8004d34:	0ffffcff 	.word	0x0ffffcff
 8004d38:	4bac      	ldr	r3, [pc, #688]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4aab      	ldr	r2, [pc, #684]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	4ba9      	ldr	r3, [pc, #676]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	49a6      	ldr	r1, [pc, #664]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d62:	4ba2      	ldr	r3, [pc, #648]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d68:	4aa0      	ldr	r2, [pc, #640]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d72:	4b9e      	ldr	r3, [pc, #632]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	499b      	ldr	r1, [pc, #620]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d90:	4b96      	ldr	r3, [pc, #600]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9e:	4993      	ldr	r1, [pc, #588]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db2:	4b8e      	ldr	r3, [pc, #568]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc0:	498a      	ldr	r1, [pc, #552]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dd4:	4b85      	ldr	r3, [pc, #532]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	4982      	ldr	r1, [pc, #520]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004df6:	4b7d      	ldr	r3, [pc, #500]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	4979      	ldr	r1, [pc, #484]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e18:	4b74      	ldr	r3, [pc, #464]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f023 0203 	bic.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	4971      	ldr	r1, [pc, #452]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e40:	f023 020c 	bic.w	r2, r3, #12
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	4968      	ldr	r1, [pc, #416]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e5c:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	4960      	ldr	r1, [pc, #384]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	4957      	ldr	r1, [pc, #348]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ea0:	4b52      	ldr	r3, [pc, #328]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	494f      	ldr	r1, [pc, #316]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	4946      	ldr	r1, [pc, #280]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ee4:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	493e      	ldr	r1, [pc, #248]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f06:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f14:	4935      	ldr	r1, [pc, #212]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f28:	4b30      	ldr	r3, [pc, #192]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f36:	492d      	ldr	r1, [pc, #180]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f4a:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f58:	4924      	ldr	r1, [pc, #144]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f98:	4914      	ldr	r1, [pc, #80]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	490b      	ldr	r1, [pc, #44]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00f      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe0:	4902      	ldr	r1, [pc, #8]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fe8:	e002      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ffc:	4b8a      	ldr	r3, [pc, #552]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005002:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	4986      	ldr	r1, [pc, #536]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005020:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005030:	497d      	ldr	r1, [pc, #500]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d006      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80d6 	beq.w	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800504c:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a75      	ldr	r2, [pc, #468]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fc fbe2 	bl	8001820 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005060:	f7fc fbde 	bl	8001820 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e195      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005072:	4b6d      	ldr	r3, [pc, #436]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d021      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	2b00      	cmp	r3, #0
 8005090:	d11d      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005092:	4b65      	ldr	r3, [pc, #404]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050a0:	4b61      	ldr	r3, [pc, #388]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a6:	0e1b      	lsrs	r3, r3, #24
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	019a      	lsls	r2, r3, #6
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	4958      	ldr	r1, [pc, #352]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d129      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050fa:	4b4b      	ldr	r3, [pc, #300]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005108:	4b47      	ldr	r3, [pc, #284]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	0f1b      	lsrs	r3, r3, #28
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	071b      	lsls	r3, r3, #28
 800512e:	493e      	ldr	r1, [pc, #248]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005136:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	f023 021f 	bic.w	r2, r3, #31
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	3b01      	subs	r3, #1
 8005146:	4938      	ldr	r1, [pc, #224]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01d      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800515a:	4b33      	ldr	r3, [pc, #204]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005168:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516e:	0f1b      	lsrs	r3, r3, #28
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	019a      	lsls	r2, r3, #6
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	061b      	lsls	r3, r3, #24
 8005188:	431a      	orrs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	071b      	lsls	r3, r3, #28
 800518e:	4926      	ldr	r1, [pc, #152]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	071b      	lsls	r3, r3, #28
 80051be:	491a      	ldr	r1, [pc, #104]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d2:	f7fc fb25 	bl	8001820 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051da:	f7fc fb21 	bl	8001820 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0d8      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	f040 80ce 	bne.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a08      	ldr	r2, [pc, #32]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fc fb08 	bl	8001820 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005212:	e00b      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005214:	f7fc fb04 	bl	8001820 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d904      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e0bb      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800522c:	4b5e      	ldr	r3, [pc, #376]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005238:	d0ec      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02e      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d12a      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005262:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005270:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	0f1b      	lsrs	r3, r3, #28
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	019a      	lsls	r2, r3, #6
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	071b      	lsls	r3, r3, #28
 8005296:	4944      	ldr	r1, [pc, #272]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800529e:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	493d      	ldr	r1, [pc, #244]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d022      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d11d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	0e1b      	lsrs	r3, r3, #24
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052dc:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	0f1b      	lsrs	r3, r3, #28
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	431a      	orrs	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	071b      	lsls	r3, r3, #28
 8005302:	4929      	ldr	r1, [pc, #164]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d028      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	0e1b      	lsrs	r3, r3, #24
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4917      	ldr	r1, [pc, #92]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4911      	ldr	r1, [pc, #68]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a0e      	ldr	r2, [pc, #56]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005374:	f7fc fa54 	bl	8001820 <HAL_GetTick>
 8005378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800537a:	e008      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800537c:	f7fc fa50 	bl	8001820 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e007      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539a:	d1ef      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800

080053ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e09d      	b.n	80054fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff70 	bl	80012e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005424:	d902      	bls.n	800542c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e002      	b.n	8005432 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800542c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800543a:	d007      	beq.n	800544c <HAL_SPI_Init+0xa0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005444:	d002      	beq.n	800544c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	ea42 0103 	orr.w	r1, r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	f003 0204 	and.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e049      	b.n	80055a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fb ff8b 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3304      	adds	r3, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f000 fbbb 	bl	8005cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e054      	b.n	8005672 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a26      	ldr	r2, [pc, #152]	; (8005680 <HAL_TIM_Base_Start_IT+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f2:	d01d      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a22      	ldr	r2, [pc, #136]	; (8005684 <HAL_TIM_Base_Start_IT+0xd4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_TIM_Base_Start_IT+0xd8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <HAL_TIM_Base_Start_IT+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_TIM_Base_Start_IT+0xe0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_TIM_Base_Start_IT+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_TIM_Base_Start_IT+0xe8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d115      	bne.n	800565c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <HAL_TIM_Base_Start_IT+0xec>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d015      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005648:	d011      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565a:	e008      	b.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e000      	b.n	8005670 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800
 800569c:	00010007 	.word	0x00010007

080056a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e049      	b.n	8005746 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f841 	bl	800574e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 faec 	bl	8005cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d122      	bne.n	80057be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d11b      	bne.n	80057be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f06f 0202 	mvn.w	r2, #2
 800578e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa6b 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80057aa:	e005      	b.n	80057b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa5d 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa6e 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d122      	bne.n	8005812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d11b      	bne.n	8005812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0204 	mvn.w	r2, #4
 80057e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fa41 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80057fe:	e005      	b.n	800580c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa33 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa44 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d122      	bne.n	8005866 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b08      	cmp	r3, #8
 800582c:	d11b      	bne.n	8005866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f06f 0208 	mvn.w	r2, #8
 8005836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2204      	movs	r2, #4
 800583c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fa17 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 8005852:	e005      	b.n	8005860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa09 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa1a 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d122      	bne.n	80058ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b10      	cmp	r3, #16
 8005880:	d11b      	bne.n	80058ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f06f 0210 	mvn.w	r2, #16
 800588a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2208      	movs	r2, #8
 8005890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f9ed 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80058a6:	e005      	b.n	80058b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f9df 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9f0 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10e      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d107      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f06f 0201 	mvn.w	r2, #1
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fb fb1b 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d10e      	bne.n	8005912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d107      	bne.n	8005912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fcd1 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fcc4 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f99e 	bl	8005ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b20      	cmp	r3, #32
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b20      	cmp	r3, #32
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0220 	mvn.w	r2, #32
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc84 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_IC_ConfigChannel+0x1e>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e088      	b.n	8005ad0 <HAL_TIM_IC_ConfigChannel+0x130>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f000 fa0e 	bl	8005dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 020c 	bic.w	r2, r2, #12
 80059ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6999      	ldr	r1, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e060      	b.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d11c      	bne.n	8005a44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f000 fa92 	bl	8005f42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6999      	ldr	r1, [r3, #24]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	021a      	lsls	r2, r3, #8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	619a      	str	r2, [r3, #24]
 8005a42:	e040      	b.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d11b      	bne.n	8005a82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f000 fadf 	bl	800601c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 020c 	bic.w	r2, r2, #12
 8005a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	61da      	str	r2, [r3, #28]
 8005a80:	e021      	b.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d11c      	bne.n	8005ac2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f000 fafc 	bl	8006094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005aaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69d9      	ldr	r1, [r3, #28]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	61da      	str	r2, [r3, #28]
 8005ac0:	e001      	b.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIM_ConfigClockSource+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0b4      	b.n	8005c5e <HAL_TIM_ConfigClockSource+0x186>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4b56      	ldr	r3, [pc, #344]	; (8005c68 <HAL_TIM_ConfigClockSource+0x190>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d03e      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0xd4>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	f200 8087 	bhi.w	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	f000 8086 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x172>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d87f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b70      	cmp	r3, #112	; 0x70
 8005b46:	d01a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xa6>
 8005b48:	2b70      	cmp	r3, #112	; 0x70
 8005b4a:	d87b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b60      	cmp	r3, #96	; 0x60
 8005b4e:	d050      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b50:	2b60      	cmp	r3, #96	; 0x60
 8005b52:	d877      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b50      	cmp	r3, #80	; 0x50
 8005b56:	d03c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b58:	2b50      	cmp	r3, #80	; 0x50
 8005b5a:	d873      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d058      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x13a>
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d86f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d064      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	d86b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d060      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d867      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d05a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b7c:	e062      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f000 fad9 	bl	8006144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	609a      	str	r2, [r3, #8]
      break;
 8005baa:	e04f      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f000 fac2 	bl	8006144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bce:	609a      	str	r2, [r3, #8]
      break;
 8005bd0:	e03c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 f980 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2150      	movs	r1, #80	; 0x50
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fa8f 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e02c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 f9dc 	bl	8005fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2160      	movs	r1, #96	; 0x60
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fa7f 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005c10:	e01c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 f960 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa6f 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005c30:	e00c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 fa66 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	fffeff88 	.word	0xfffeff88

08005c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3d      	ldr	r2, [pc, #244]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d027      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d023      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_Base_SetConfig+0x128>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <TIM_Base_SetConfig+0x12c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <TIM_Base_SetConfig+0x130>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <TIM_Base_SetConfig+0x134>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <TIM_Base_SetConfig+0x138>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <TIM_Base_SetConfig+0x13c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40001800 	.word	0x40001800
 8005df4:	40001c00 	.word	0x40001c00
 8005df8:	40002000 	.word	0x40002000

08005dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a28      	ldr	r2, [pc, #160]	; (8005ec8 <TIM_TI1_SetConfig+0xcc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01b      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d017      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <TIM_TI1_SetConfig+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <TIM_TI1_SetConfig+0xd4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <TIM_TI1_SetConfig+0xd8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <TIM_TI1_SetConfig+0xdc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a21      	ldr	r2, [pc, #132]	; (8005edc <TIM_TI1_SetConfig+0xe0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_TI1_SetConfig+0x66>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <TIM_TI1_SetConfig+0xe4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <TIM_TI1_SetConfig+0x6a>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <TIM_TI1_SetConfig+0x6c>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e003      	b.n	8005e86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f023 030a 	bic.w	r3, r3, #10
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 030a 	and.w	r3, r3, #10
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40001800 	.word	0x40001800

08005ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 030a 	bic.w	r3, r3, #10
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f023 0210 	bic.w	r2, r3, #16
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f023 0210 	bic.w	r2, r3, #16
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	031b      	lsls	r3, r3, #12
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	b2db      	uxtb	r3, r3
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800606c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	031b      	lsls	r3, r3, #12
 80060d8:	b29b      	uxth	r3, r3
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	031b      	lsls	r3, r3, #12
 80060ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 0307 	orr.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	431a      	orrs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e06d      	b.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a30      	ldr	r2, [pc, #192]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2f      	ldr	r2, [pc, #188]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d01d      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10c      	bne.n	8006266 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40014000 	.word	0x40014000
 800629c:	40001800 	.word	0x40001800

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e040      	b.n	8006370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb f8e4 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f82c 	bl	8006378 <UART_SetConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e022      	b.n	8006370 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa84 	bl	8006840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb0b 	bl	8006984 <UART_CheckIdleState>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4ba6      	ldr	r3, [pc, #664]	; (800663c <UART_SetConfig+0x2c4>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a94      	ldr	r2, [pc, #592]	; (8006640 <UART_SetConfig+0x2c8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d120      	bne.n	8006436 <UART_SetConfig+0xbe>
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <UART_SetConfig+0x2cc>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d816      	bhi.n	8006430 <UART_SetConfig+0xb8>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x90>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	08006425 	.word	0x08006425
 8006410:	0800641f 	.word	0x0800641f
 8006414:	0800642b 	.word	0x0800642b
 8006418:	2301      	movs	r3, #1
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e150      	b.n	80066c0 <UART_SetConfig+0x348>
 800641e:	2302      	movs	r3, #2
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e14d      	b.n	80066c0 <UART_SetConfig+0x348>
 8006424:	2304      	movs	r3, #4
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e14a      	b.n	80066c0 <UART_SetConfig+0x348>
 800642a:	2308      	movs	r3, #8
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e147      	b.n	80066c0 <UART_SetConfig+0x348>
 8006430:	2310      	movs	r3, #16
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e144      	b.n	80066c0 <UART_SetConfig+0x348>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a83      	ldr	r2, [pc, #524]	; (8006648 <UART_SetConfig+0x2d0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d132      	bne.n	80064a6 <UART_SetConfig+0x12e>
 8006440:	4b80      	ldr	r3, [pc, #512]	; (8006644 <UART_SetConfig+0x2cc>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f003 030c 	and.w	r3, r3, #12
 800644a:	2b0c      	cmp	r3, #12
 800644c:	d828      	bhi.n	80064a0 <UART_SetConfig+0x128>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0xdc>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006489 	.word	0x08006489
 8006458:	080064a1 	.word	0x080064a1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064a1 	.word	0x080064a1
 8006464:	08006495 	.word	0x08006495
 8006468:	080064a1 	.word	0x080064a1
 800646c:	080064a1 	.word	0x080064a1
 8006470:	080064a1 	.word	0x080064a1
 8006474:	0800648f 	.word	0x0800648f
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a1 	.word	0x080064a1
 8006484:	0800649b 	.word	0x0800649b
 8006488:	2300      	movs	r3, #0
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e118      	b.n	80066c0 <UART_SetConfig+0x348>
 800648e:	2302      	movs	r3, #2
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e115      	b.n	80066c0 <UART_SetConfig+0x348>
 8006494:	2304      	movs	r3, #4
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e112      	b.n	80066c0 <UART_SetConfig+0x348>
 800649a:	2308      	movs	r3, #8
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e10f      	b.n	80066c0 <UART_SetConfig+0x348>
 80064a0:	2310      	movs	r3, #16
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e10c      	b.n	80066c0 <UART_SetConfig+0x348>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a68      	ldr	r2, [pc, #416]	; (800664c <UART_SetConfig+0x2d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d120      	bne.n	80064f2 <UART_SetConfig+0x17a>
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <UART_SetConfig+0x2cc>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d013      	beq.n	80064e6 <UART_SetConfig+0x16e>
 80064be:	2b30      	cmp	r3, #48	; 0x30
 80064c0:	d814      	bhi.n	80064ec <UART_SetConfig+0x174>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d009      	beq.n	80064da <UART_SetConfig+0x162>
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d810      	bhi.n	80064ec <UART_SetConfig+0x174>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <UART_SetConfig+0x15c>
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d006      	beq.n	80064e0 <UART_SetConfig+0x168>
 80064d2:	e00b      	b.n	80064ec <UART_SetConfig+0x174>
 80064d4:	2300      	movs	r3, #0
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e0f2      	b.n	80066c0 <UART_SetConfig+0x348>
 80064da:	2302      	movs	r3, #2
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e0ef      	b.n	80066c0 <UART_SetConfig+0x348>
 80064e0:	2304      	movs	r3, #4
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e0ec      	b.n	80066c0 <UART_SetConfig+0x348>
 80064e6:	2308      	movs	r3, #8
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e0e9      	b.n	80066c0 <UART_SetConfig+0x348>
 80064ec:	2310      	movs	r3, #16
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e0e6      	b.n	80066c0 <UART_SetConfig+0x348>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a56      	ldr	r2, [pc, #344]	; (8006650 <UART_SetConfig+0x2d8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d120      	bne.n	800653e <UART_SetConfig+0x1c6>
 80064fc:	4b51      	ldr	r3, [pc, #324]	; (8006644 <UART_SetConfig+0x2cc>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006506:	2bc0      	cmp	r3, #192	; 0xc0
 8006508:	d013      	beq.n	8006532 <UART_SetConfig+0x1ba>
 800650a:	2bc0      	cmp	r3, #192	; 0xc0
 800650c:	d814      	bhi.n	8006538 <UART_SetConfig+0x1c0>
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d009      	beq.n	8006526 <UART_SetConfig+0x1ae>
 8006512:	2b80      	cmp	r3, #128	; 0x80
 8006514:	d810      	bhi.n	8006538 <UART_SetConfig+0x1c0>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <UART_SetConfig+0x1a8>
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d006      	beq.n	800652c <UART_SetConfig+0x1b4>
 800651e:	e00b      	b.n	8006538 <UART_SetConfig+0x1c0>
 8006520:	2300      	movs	r3, #0
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e0cc      	b.n	80066c0 <UART_SetConfig+0x348>
 8006526:	2302      	movs	r3, #2
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e0c9      	b.n	80066c0 <UART_SetConfig+0x348>
 800652c:	2304      	movs	r3, #4
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0c6      	b.n	80066c0 <UART_SetConfig+0x348>
 8006532:	2308      	movs	r3, #8
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e0c3      	b.n	80066c0 <UART_SetConfig+0x348>
 8006538:	2310      	movs	r3, #16
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e0c0      	b.n	80066c0 <UART_SetConfig+0x348>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a44      	ldr	r2, [pc, #272]	; (8006654 <UART_SetConfig+0x2dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d125      	bne.n	8006594 <UART_SetConfig+0x21c>
 8006548:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <UART_SetConfig+0x2cc>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006556:	d017      	beq.n	8006588 <UART_SetConfig+0x210>
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d817      	bhi.n	800658e <UART_SetConfig+0x216>
 800655e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006562:	d00b      	beq.n	800657c <UART_SetConfig+0x204>
 8006564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006568:	d811      	bhi.n	800658e <UART_SetConfig+0x216>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <UART_SetConfig+0x1fe>
 800656e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006572:	d006      	beq.n	8006582 <UART_SetConfig+0x20a>
 8006574:	e00b      	b.n	800658e <UART_SetConfig+0x216>
 8006576:	2300      	movs	r3, #0
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e0a1      	b.n	80066c0 <UART_SetConfig+0x348>
 800657c:	2302      	movs	r3, #2
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e09e      	b.n	80066c0 <UART_SetConfig+0x348>
 8006582:	2304      	movs	r3, #4
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e09b      	b.n	80066c0 <UART_SetConfig+0x348>
 8006588:	2308      	movs	r3, #8
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e098      	b.n	80066c0 <UART_SetConfig+0x348>
 800658e:	2310      	movs	r3, #16
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e095      	b.n	80066c0 <UART_SetConfig+0x348>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2f      	ldr	r2, [pc, #188]	; (8006658 <UART_SetConfig+0x2e0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d125      	bne.n	80065ea <UART_SetConfig+0x272>
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <UART_SetConfig+0x2cc>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ac:	d017      	beq.n	80065de <UART_SetConfig+0x266>
 80065ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065b2:	d817      	bhi.n	80065e4 <UART_SetConfig+0x26c>
 80065b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b8:	d00b      	beq.n	80065d2 <UART_SetConfig+0x25a>
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065be:	d811      	bhi.n	80065e4 <UART_SetConfig+0x26c>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <UART_SetConfig+0x254>
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c8:	d006      	beq.n	80065d8 <UART_SetConfig+0x260>
 80065ca:	e00b      	b.n	80065e4 <UART_SetConfig+0x26c>
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e076      	b.n	80066c0 <UART_SetConfig+0x348>
 80065d2:	2302      	movs	r3, #2
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e073      	b.n	80066c0 <UART_SetConfig+0x348>
 80065d8:	2304      	movs	r3, #4
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e070      	b.n	80066c0 <UART_SetConfig+0x348>
 80065de:	2308      	movs	r3, #8
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e06d      	b.n	80066c0 <UART_SetConfig+0x348>
 80065e4:	2310      	movs	r3, #16
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e06a      	b.n	80066c0 <UART_SetConfig+0x348>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	; (800665c <UART_SetConfig+0x2e4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d138      	bne.n	8006666 <UART_SetConfig+0x2ee>
 80065f4:	4b13      	ldr	r3, [pc, #76]	; (8006644 <UART_SetConfig+0x2cc>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006602:	d017      	beq.n	8006634 <UART_SetConfig+0x2bc>
 8006604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006608:	d82a      	bhi.n	8006660 <UART_SetConfig+0x2e8>
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660e:	d00b      	beq.n	8006628 <UART_SetConfig+0x2b0>
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d824      	bhi.n	8006660 <UART_SetConfig+0x2e8>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <UART_SetConfig+0x2aa>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x2b6>
 8006620:	e01e      	b.n	8006660 <UART_SetConfig+0x2e8>
 8006622:	2300      	movs	r3, #0
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e04b      	b.n	80066c0 <UART_SetConfig+0x348>
 8006628:	2302      	movs	r3, #2
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e048      	b.n	80066c0 <UART_SetConfig+0x348>
 800662e:	2304      	movs	r3, #4
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e045      	b.n	80066c0 <UART_SetConfig+0x348>
 8006634:	2308      	movs	r3, #8
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e042      	b.n	80066c0 <UART_SetConfig+0x348>
 800663a:	bf00      	nop
 800663c:	efff69f3 	.word	0xefff69f3
 8006640:	40011000 	.word	0x40011000
 8006644:	40023800 	.word	0x40023800
 8006648:	40004400 	.word	0x40004400
 800664c:	40004800 	.word	0x40004800
 8006650:	40004c00 	.word	0x40004c00
 8006654:	40005000 	.word	0x40005000
 8006658:	40011400 	.word	0x40011400
 800665c:	40007800 	.word	0x40007800
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e02c      	b.n	80066c0 <UART_SetConfig+0x348>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a72      	ldr	r2, [pc, #456]	; (8006834 <UART_SetConfig+0x4bc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0x344>
 8006670:	4b71      	ldr	r3, [pc, #452]	; (8006838 <UART_SetConfig+0x4c0>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800667a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800667e:	d017      	beq.n	80066b0 <UART_SetConfig+0x338>
 8006680:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006684:	d817      	bhi.n	80066b6 <UART_SetConfig+0x33e>
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d00b      	beq.n	80066a4 <UART_SetConfig+0x32c>
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	d811      	bhi.n	80066b6 <UART_SetConfig+0x33e>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <UART_SetConfig+0x326>
 8006696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669a:	d006      	beq.n	80066aa <UART_SetConfig+0x332>
 800669c:	e00b      	b.n	80066b6 <UART_SetConfig+0x33e>
 800669e:	2300      	movs	r3, #0
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e00d      	b.n	80066c0 <UART_SetConfig+0x348>
 80066a4:	2302      	movs	r3, #2
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e00a      	b.n	80066c0 <UART_SetConfig+0x348>
 80066aa:	2304      	movs	r3, #4
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e007      	b.n	80066c0 <UART_SetConfig+0x348>
 80066b0:	2308      	movs	r3, #8
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e004      	b.n	80066c0 <UART_SetConfig+0x348>
 80066b6:	2310      	movs	r3, #16
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e001      	b.n	80066c0 <UART_SetConfig+0x348>
 80066bc:	2310      	movs	r3, #16
 80066be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	d15b      	bne.n	8006782 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d828      	bhi.n	8006722 <UART_SetConfig+0x3aa>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x360>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006705 	.word	0x08006705
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	08006723 	.word	0x08006723
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006723 	.word	0x08006723
 80066f0:	08006723 	.word	0x08006723
 80066f4:	08006723 	.word	0x08006723
 80066f8:	0800671b 	.word	0x0800671b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fc:	f7fe f9d4 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006700:	61b8      	str	r0, [r7, #24]
        break;
 8006702:	e013      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fe f9e4 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8006708:	61b8      	str	r0, [r7, #24]
        break;
 800670a:	e00f      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800670c:	4b4b      	ldr	r3, [pc, #300]	; (800683c <UART_SetConfig+0x4c4>)
 800670e:	61bb      	str	r3, [r7, #24]
        break;
 8006710:	e00c      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006712:	f7fe f8b7 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8006716:	61b8      	str	r0, [r7, #24]
        break;
 8006718:	e008      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e004      	b.n	800672c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	77bb      	strb	r3, [r7, #30]
        break;
 800672a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d074      	beq.n	800681c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	005a      	lsls	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d916      	bls.n	800677c <UART_SetConfig+0x404>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d212      	bcs.n	800677c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f023 030f 	bic.w	r3, r3, #15
 800675e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b29a      	uxth	r2, r3
 800676c:	89fb      	ldrh	r3, [r7, #14]
 800676e:	4313      	orrs	r3, r2
 8006770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	89fa      	ldrh	r2, [r7, #14]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e04f      	b.n	800681c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	77bb      	strb	r3, [r7, #30]
 8006780:	e04c      	b.n	800681c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006782:	7ffb      	ldrb	r3, [r7, #31]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d828      	bhi.n	80067da <UART_SetConfig+0x462>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0x418>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	080067db 	.word	0x080067db
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067db 	.word	0x080067db
 80067a8:	080067db 	.word	0x080067db
 80067ac:	080067db 	.word	0x080067db
 80067b0:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe f978 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80067b8:	61b8      	str	r0, [r7, #24]
        break;
 80067ba:	e013      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fe f988 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80067c0:	61b8      	str	r0, [r7, #24]
        break;
 80067c2:	e00f      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <UART_SetConfig+0x4c4>)
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e00c      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ca:	f7fe f85b 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 80067ce:	61b8      	str	r0, [r7, #24]
        break;
 80067d0:	e008      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e004      	b.n	80067e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	77bb      	strb	r3, [r7, #30]
        break;
 80067e2:	bf00      	nop
    }

    if (pclk != 0U)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085a      	lsrs	r2, r3, #1
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b0f      	cmp	r3, #15
 8006802:	d909      	bls.n	8006818 <UART_SetConfig+0x4a0>
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680a:	d205      	bcs.n	8006818 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e001      	b.n	800681c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006828:	7fbb      	ldrb	r3, [r7, #30]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40007c00 	.word	0x40007c00
 8006838:	40023800 	.word	0x40023800
 800683c:	00f42400 	.word	0x00f42400

08006840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01a      	beq.n	8006956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d10a      	bne.n	8006956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006994:	f7fa ff44 	bl	8001820 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d10e      	bne.n	80069c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f831 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e027      	b.n	8006a16 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d10e      	bne.n	80069f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f81b 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e011      	b.n	8006a16 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	e0a7      	b.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a36:	f000 80a3 	beq.w	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fa fef1 	bl	8001820 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d13f      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a64:	667b      	str	r3, [r7, #100]	; 0x64
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	663b      	str	r3, [r7, #96]	; 0x60
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e068      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d050      	beq.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d148      	bne.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e6      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b4a:	623a      	str	r2, [r7, #32]
 8006b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	69f9      	ldr	r1, [r7, #28]
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e5      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e010      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69da      	ldr	r2, [r3, #28]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	f43f af48 	beq.w	8006a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3770      	adds	r7, #112	; 0x70
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bac:	b084      	sub	sp, #16
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	f107 001c 	add.w	r0, r7, #28
 8006bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d120      	bne.n	8006c06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	4b20      	ldr	r3, [pc, #128]	; (8006c58 <USB_CoreInit+0xac>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fbee 	bl	80083dc <USB_CoreReset>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e010      	b.n	8006c28 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fbe2 	bl	80083dc <USB_CoreReset>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d10b      	bne.n	8006c46 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f043 0206 	orr.w	r2, r3, #6
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f043 0220 	orr.w	r2, r3, #32
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c52:	b004      	add	sp, #16
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	ffbdffbf 	.word	0xffbdffbf

08006c5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d165      	bne.n	8006d3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4a41      	ldr	r2, [pc, #260]	; (8006d78 <USB_SetTurnaroundTime+0x11c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d906      	bls.n	8006c86 <USB_SetTurnaroundTime+0x2a>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <USB_SetTurnaroundTime+0x120>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d202      	bcs.n	8006c86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c80:	230f      	movs	r3, #15
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e062      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a3c      	ldr	r2, [pc, #240]	; (8006d7c <USB_SetTurnaroundTime+0x120>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d306      	bcc.n	8006c9c <USB_SetTurnaroundTime+0x40>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4a3b      	ldr	r2, [pc, #236]	; (8006d80 <USB_SetTurnaroundTime+0x124>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d202      	bcs.n	8006c9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c96:	230e      	movs	r3, #14
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	e057      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4a38      	ldr	r2, [pc, #224]	; (8006d80 <USB_SetTurnaroundTime+0x124>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d306      	bcc.n	8006cb2 <USB_SetTurnaroundTime+0x56>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <USB_SetTurnaroundTime+0x128>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d202      	bcs.n	8006cb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cac:	230d      	movs	r3, #13
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e04c      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a33      	ldr	r2, [pc, #204]	; (8006d84 <USB_SetTurnaroundTime+0x128>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d306      	bcc.n	8006cc8 <USB_SetTurnaroundTime+0x6c>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a32      	ldr	r2, [pc, #200]	; (8006d88 <USB_SetTurnaroundTime+0x12c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d802      	bhi.n	8006cc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	e041      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4a2f      	ldr	r2, [pc, #188]	; (8006d88 <USB_SetTurnaroundTime+0x12c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d906      	bls.n	8006cde <USB_SetTurnaroundTime+0x82>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4a2e      	ldr	r2, [pc, #184]	; (8006d8c <USB_SetTurnaroundTime+0x130>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d802      	bhi.n	8006cde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006cd8:	230b      	movs	r3, #11
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e036      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <USB_SetTurnaroundTime+0x130>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d906      	bls.n	8006cf4 <USB_SetTurnaroundTime+0x98>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <USB_SetTurnaroundTime+0x134>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d802      	bhi.n	8006cf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006cee:	230a      	movs	r3, #10
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	e02b      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <USB_SetTurnaroundTime+0x134>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d906      	bls.n	8006d0a <USB_SetTurnaroundTime+0xae>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <USB_SetTurnaroundTime+0x138>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d202      	bcs.n	8006d0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d04:	2309      	movs	r3, #9
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e020      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <USB_SetTurnaroundTime+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d306      	bcc.n	8006d20 <USB_SetTurnaroundTime+0xc4>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <USB_SetTurnaroundTime+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d802      	bhi.n	8006d20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e015      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <USB_SetTurnaroundTime+0x13c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d906      	bls.n	8006d36 <USB_SetTurnaroundTime+0xda>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <USB_SetTurnaroundTime+0x140>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d202      	bcs.n	8006d36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d30:	2307      	movs	r3, #7
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e00a      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d36:	2306      	movs	r3, #6
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e007      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d42:	2309      	movs	r3, #9
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e001      	b.n	8006d4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d48:	2309      	movs	r3, #9
 8006d4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	029b      	lsls	r3, r3, #10
 8006d60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	00d8acbf 	.word	0x00d8acbf
 8006d7c:	00e4e1c0 	.word	0x00e4e1c0
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	01067380 	.word	0x01067380
 8006d88:	011a499f 	.word	0x011a499f
 8006d8c:	01312cff 	.word	0x01312cff
 8006d90:	014ca43f 	.word	0x014ca43f
 8006d94:	016e3600 	.word	0x016e3600
 8006d98:	01a6ab1f 	.word	0x01a6ab1f
 8006d9c:	01e84800 	.word	0x01e84800

08006da0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d115      	bne.n	8006e32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e12:	2001      	movs	r0, #1
 8006e14:	f7fa fd10 	bl	8001838 <HAL_Delay>
      ms++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fa4b 	bl	80082ba <USB_GetMode>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d01e      	beq.n	8006e68 <USB_SetCurrentMode+0x84>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b31      	cmp	r3, #49	; 0x31
 8006e2e:	d9f0      	bls.n	8006e12 <USB_SetCurrentMode+0x2e>
 8006e30:	e01a      	b.n	8006e68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d115      	bne.n	8006e64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7fa fcf7 	bl	8001838 <HAL_Delay>
      ms++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fa32 	bl	80082ba <USB_GetMode>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USB_SetCurrentMode+0x84>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b31      	cmp	r3, #49	; 0x31
 8006e60:	d9f0      	bls.n	8006e44 <USB_SetCurrentMode+0x60>
 8006e62:	e001      	b.n	8006e68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e005      	b.n	8006e74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b32      	cmp	r3, #50	; 0x32
 8006e6c:	d101      	bne.n	8006e72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	e009      	b.n	8006eb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3340      	adds	r3, #64	; 0x40
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3301      	adds	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2b0e      	cmp	r3, #14
 8006eb4:	d9f2      	bls.n	8006e9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d11c      	bne.n	8006ef6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e005      	b.n	8006f02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	4619      	mov	r1, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	680b      	ldr	r3, [r1, #0]
 8006f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d10c      	bne.n	8006f42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f965 	bl	8007200 <USB_SetDevSpeed>
 8006f36:	e008      	b.n	8006f4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f38:	2101      	movs	r1, #1
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f960 	bl	8007200 <USB_SetDevSpeed>
 8006f40:	e003      	b.n	8006f4a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f42:	2103      	movs	r1, #3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f95b 	bl	8007200 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f8f3 	bl	8007138 <USB_FlushTxFifo>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f91f 	bl	80071a0 <USB_FlushRxFifo>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	461a      	mov	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e043      	b.n	800701e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fac:	d118      	bne.n	8006fe0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e013      	b.n	8006ff2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e008      	b.n	8006ff2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	461a      	mov	r2, r3
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	461a      	mov	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	461a      	mov	r2, r3
 8007012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3301      	adds	r3, #1
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d3b7      	bcc.n	8006f96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e043      	b.n	80070b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007042:	d118      	bne.n	8007076 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e013      	b.n	8007088 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	461a      	mov	r2, r3
 800706e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e008      	b.n	8007088 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	461a      	mov	r2, r3
 8007096:	2300      	movs	r3, #0
 8007098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	461a      	mov	r2, r3
 80070a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3b7      	bcc.n	800702c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f043 0210 	orr.w	r2, r3, #16
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <USB_DevInit+0x2b4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f043 0208 	orr.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d105      	bne.n	8007120 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <USB_DevInit+0x2b8>)
 800711a:	4313      	orrs	r3, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800712c:	b004      	add	sp, #16
 800712e:	4770      	bx	lr
 8007130:	803c3800 	.word	0x803c3800
 8007134:	40000004 	.word	0x40000004

08007138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <USB_FlushTxFifo+0x64>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e01b      	b.n	8007190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	daf2      	bge.n	8007146 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	019b      	lsls	r3, r3, #6
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <USB_FlushTxFifo+0x64>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e006      	b.n	8007190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b20      	cmp	r3, #32
 800718c:	d0f0      	beq.n	8007170 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	00030d40 	.word	0x00030d40

080071a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a11      	ldr	r2, [pc, #68]	; (80071fc <USB_FlushRxFifo+0x5c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e018      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	daf2      	bge.n	80071ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2210      	movs	r2, #16
 80071ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a08      	ldr	r2, [pc, #32]	; (80071fc <USB_FlushRxFifo+0x5c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e006      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d0f0      	beq.n	80071d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	00030d40 	.word	0x00030d40

08007200 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007220:	4313      	orrs	r3, r2
 8007222:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0306 	and.w	r3, r3, #6
 800724a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
 8007256:	e00a      	b.n	800726e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d002      	beq.n	8007264 <USB_GetDevSpeed+0x32>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b06      	cmp	r3, #6
 8007262:	d102      	bne.n	800726a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007264:	2302      	movs	r3, #2
 8007266:	75fb      	strb	r3, [r7, #23]
 8007268:	e001      	b.n	800726e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800726a:	230f      	movs	r3, #15
 800726c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d139      	bne.n	800730c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	2101      	movs	r1, #1
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d153      	bne.n	8007378 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	0159      	lsls	r1, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	440b      	add	r3, r1
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	4619      	mov	r1, r3
 8007304:	4b20      	ldr	r3, [pc, #128]	; (8007388 <USB_ActivateEndpoint+0x10c>)
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]
 800730a:	e035      	b.n	8007378 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2101      	movs	r1, #1
 800731e:	fa01 f303 	lsl.w	r3, r1, r3
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732a:	4313      	orrs	r3, r2
 800732c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d119      	bne.n	8007378 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007360:	430b      	orrs	r3, r1
 8007362:	431a      	orrs	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	0159      	lsls	r1, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	440b      	add	r3, r1
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	4619      	mov	r1, r3
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <USB_ActivateEndpoint+0x10c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	10008000 	.word	0x10008000

0800738c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d161      	bne.n	800746c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073be:	d11f      	bne.n	8007400 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	2101      	movs	r1, #1
 8007412:	fa01 f303 	lsl.w	r3, r1, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007420:	4013      	ands	r3, r2
 8007422:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	b29b      	uxth	r3, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007444:	4013      	ands	r3, r2
 8007446:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0159      	lsls	r1, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	440b      	add	r3, r1
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	4619      	mov	r1, r3
 8007464:	4b35      	ldr	r3, [pc, #212]	; (800753c <USB_DeactivateEndpoint+0x1b0>)
 8007466:	4013      	ands	r3, r2
 8007468:	600b      	str	r3, [r1, #0]
 800746a:	e060      	b.n	800752e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800747e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007482:	d11f      	bne.n	80074c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f303 	lsl.w	r3, r1, r3
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	43db      	mvns	r3, r3
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e4:	4013      	ands	r3, r2
 80074e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	2101      	movs	r1, #1
 80074fa:	fa01 f303 	lsl.w	r3, r1, r3
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	43db      	mvns	r3, r3
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007508:	4013      	ands	r3, r2
 800750a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	0159      	lsls	r1, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	440b      	add	r3, r1
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	4619      	mov	r1, r3
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <USB_DeactivateEndpoint+0x1b4>)
 800752a:	4013      	ands	r3, r2
 800752c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	ec337800 	.word	0xec337800
 8007540:	eff37800 	.word	0xeff37800

08007544 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 8163 	bne.w	800782c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d132      	bne.n	80075d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	0159      	lsls	r1, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	440b      	add	r3, r1
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	4619      	mov	r1, r3
 800758a:	4ba5      	ldr	r3, [pc, #660]	; (8007820 <USB_EPStartXfer+0x2dc>)
 800758c:	4013      	ands	r3, r2
 800758e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	0159      	lsls	r1, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	4619      	mov	r1, r3
 80075cc:	4b95      	ldr	r3, [pc, #596]	; (8007824 <USB_EPStartXfer+0x2e0>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	610b      	str	r3, [r1, #16]
 80075d2:	e074      	b.n	80076be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	0159      	lsls	r1, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	440b      	add	r3, r1
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	4619      	mov	r1, r3
 80075f0:	4b8c      	ldr	r3, [pc, #560]	; (8007824 <USB_EPStartXfer+0x2e0>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	0159      	lsls	r1, r3, #5
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	440b      	add	r3, r1
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	4619      	mov	r1, r3
 8007612:	4b83      	ldr	r3, [pc, #524]	; (8007820 <USB_EPStartXfer+0x2dc>)
 8007614:	4013      	ands	r3, r2
 8007616:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6999      	ldr	r1, [r3, #24]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	440b      	add	r3, r1
 8007630:	1e59      	subs	r1, r3, #1
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	fbb1 f3f3 	udiv	r3, r1, r3
 800763a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800763c:	4b7a      	ldr	r3, [pc, #488]	; (8007828 <USB_EPStartXfer+0x2e4>)
 800763e:	400b      	ands	r3, r1
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	0148      	lsls	r0, r1, #5
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	4401      	add	r1, r0
 8007648:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800764c:	4313      	orrs	r3, r2
 800764e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	0148      	lsls	r0, r1, #5
 800766a:	69f9      	ldr	r1, [r7, #28]
 800766c:	4401      	add	r1, r0
 800766e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007672:	4313      	orrs	r3, r2
 8007674:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d11f      	bne.n	80076be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800769c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d14b      	bne.n	800775c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d128      	bne.n	800773a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d110      	bne.n	800771a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e00f      	b.n	800773a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007738:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e137      	b.n	80079cc <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800777a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	791b      	ldrb	r3, [r3, #4]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d015      	beq.n	80077b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 811f 	beq.w	80079cc <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	69f9      	ldr	r1, [r7, #28]
 80077a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077aa:	4313      	orrs	r3, r2
 80077ac:	634b      	str	r3, [r1, #52]	; 0x34
 80077ae:	e10d      	b.n	80079cc <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d110      	bne.n	80077e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e00f      	b.n	8007802 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007800:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6919      	ldr	r1, [r3, #16]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	b298      	uxth	r0, r3
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	4603      	mov	r3, r0
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 faea 	bl	8007df0 <USB_WritePacket>
 800781c:	e0d6      	b.n	80079cc <USB_EPStartXfer+0x488>
 800781e:	bf00      	nop
 8007820:	e007ffff 	.word	0xe007ffff
 8007824:	fff80000 	.word	0xfff80000
 8007828:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	440b      	add	r3, r1
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	4619      	mov	r1, r3
 8007848:	4b63      	ldr	r3, [pc, #396]	; (80079d8 <USB_EPStartXfer+0x494>)
 800784a:	4013      	ands	r3, r2
 800784c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	0159      	lsls	r1, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	440b      	add	r3, r1
 8007864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007868:	4619      	mov	r1, r3
 800786a:	4b5c      	ldr	r3, [pc, #368]	; (80079dc <USB_EPStartXfer+0x498>)
 800786c:	4013      	ands	r3, r2
 800786e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d123      	bne.n	80078c0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	0148      	lsls	r0, r1, #5
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	4401      	add	r1, r0
 8007896:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800789a:	4313      	orrs	r3, r2
 800789c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078bc:	6113      	str	r3, [r2, #16]
 80078be:	e037      	b.n	8007930 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	1e5a      	subs	r2, r3, #1
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	8afa      	ldrh	r2, [r7, #22]
 80078dc:	fb03 f202 	mul.w	r2, r3, r2
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	8afb      	ldrh	r3, [r7, #22]
 80078f4:	04d9      	lsls	r1, r3, #19
 80078f6:	4b3a      	ldr	r3, [pc, #232]	; (80079e0 <USB_EPStartXfer+0x49c>)
 80078f8:	400b      	ands	r3, r1
 80078fa:	69b9      	ldr	r1, [r7, #24]
 80078fc:	0148      	lsls	r0, r1, #5
 80078fe:	69f9      	ldr	r1, [r7, #28]
 8007900:	4401      	add	r1, r0
 8007902:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007906:	4313      	orrs	r3, r2
 8007908:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	691a      	ldr	r2, [r3, #16]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007920:	69b9      	ldr	r1, [r7, #24]
 8007922:	0148      	lsls	r0, r1, #5
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	4401      	add	r1, r0
 8007928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800792c:	4313      	orrs	r3, r2
 800792e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10d      	bne.n	8007952 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6919      	ldr	r1, [r3, #16]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	460a      	mov	r2, r1
 8007950:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d128      	bne.n	80079ac <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d110      	bne.n	800798c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e00f      	b.n	80079ac <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	fff80000 	.word	0xfff80000
 80079dc:	e007ffff 	.word	0xe007ffff
 80079e0:	1ff80000 	.word	0x1ff80000

080079e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f040 80ce 	bne.w	8007ba2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d132      	bne.n	8007a74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	0159      	lsls	r1, r3, #5
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	440b      	add	r3, r1
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4b9a      	ldr	r3, [pc, #616]	; (8007c94 <USB_EP0StartXfer+0x2b0>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	0159      	lsls	r1, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	440b      	add	r3, r1
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4b8a      	ldr	r3, [pc, #552]	; (8007c98 <USB_EP0StartXfer+0x2b4>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]
 8007a72:	e04e      	b.n	8007b12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4b81      	ldr	r3, [pc, #516]	; (8007c98 <USB_EP0StartXfer+0x2b4>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	0159      	lsls	r1, r3, #5
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	440b      	add	r3, r1
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <USB_EP0StartXfer+0x2b0>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b02:	6939      	ldr	r1, [r7, #16]
 8007b04:	0148      	lsls	r0, r1, #5
 8007b06:	6979      	ldr	r1, [r7, #20]
 8007b08:	4401      	add	r1, r0
 8007b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d11e      	bne.n	8007b56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e097      	b.n	8007c86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8083 	beq.w	8007c86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	2101      	movs	r1, #1
 8007b92:	fa01 f303 	lsl.w	r3, r1, r3
 8007b96:	6979      	ldr	r1, [r7, #20]
 8007b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	634b      	str	r3, [r1, #52]	; 0x34
 8007ba0:	e071      	b.n	8007c86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	0159      	lsls	r1, r3, #5
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <USB_EP0StartXfer+0x2b4>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	0159      	lsls	r1, r3, #5
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	440b      	add	r3, r1
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	4619      	mov	r1, r3
 8007be0:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <USB_EP0StartXfer+0x2b0>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c34:	6939      	ldr	r1, [r7, #16]
 8007c36:	0148      	lsls	r0, r1, #5
 8007c38:	6979      	ldr	r1, [r7, #20]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c40:	4313      	orrs	r3, r2
 8007c42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10d      	bne.n	8007c66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6919      	ldr	r1, [r3, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	460a      	mov	r2, r1
 8007c64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	e007ffff 	.word	0xe007ffff
 8007c98:	fff80000 	.word	0xfff80000

08007c9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d14a      	bne.n	8007d50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd2:	f040 8086 	bne.w	8007de2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cf8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d902      	bls.n	8007d34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
          break;
 8007d32:	e056      	b.n	8007de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d4c:	d0e7      	beq.n	8007d1e <USB_EPStopXfer+0x82>
 8007d4e:	e048      	b.n	8007de2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d68:	d13b      	bne.n	8007de2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d902      	bls.n	8007dc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc6:	e00c      	b.n	8007de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de0:	d0e7      	beq.n	8007db2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b089      	sub	sp, #36	; 0x24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	460b      	mov	r3, r1
 8007e00:	71fb      	strb	r3, [r7, #7]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d123      	bne.n	8007e5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	3303      	adds	r3, #3
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e018      	b.n	8007e56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	031a      	lsls	r2, r3, #12
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e30:	461a      	mov	r2, r3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	3301      	adds	r3, #1
 8007e42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	3301      	adds	r3, #1
 8007e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d3e2      	bcc.n	8007e24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3724      	adds	r7, #36	; 0x24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b08b      	sub	sp, #44	; 0x2c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e92:	2300      	movs	r3, #0
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	e014      	b.n	8007ec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	3301      	adds	r3, #1
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	3301      	adds	r3, #1
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3e6      	bcc.n	8007e98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007eca:	8bfb      	ldrh	r3, [r7, #30]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01e      	beq.n	8007f0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eda:	461a      	mov	r2, r3
 8007edc:	f107 0310 	add.w	r3, r7, #16
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3301      	adds	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f02:	8bfb      	ldrh	r3, [r7, #30]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f08:	8bfb      	ldrh	r3, [r7, #30]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1ea      	bne.n	8007ee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	372c      	adds	r7, #44	; 0x2c
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d12c      	bne.n	8007f92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	db12      	blt.n	8007f70 <USB_EPSetStall+0x54>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e02b      	b.n	8007fea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	db12      	blt.n	8007fca <USB_EPSetStall+0xae>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00f      	beq.n	8007fca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	0151      	lsls	r1, r2, #5
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	440a      	add	r2, r1
 8007fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fe8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	785b      	ldrb	r3, [r3, #1]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d128      	bne.n	8008066 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008032:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	791b      	ldrb	r3, [r3, #4]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d003      	beq.n	8008044 <USB_EPClearStall+0x4c>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	791b      	ldrb	r3, [r3, #4]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d138      	bne.n	80080b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	440a      	add	r2, r1
 800805a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	e027      	b.n	80080b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d003      	beq.n	8008096 <USB_EPClearStall+0x9e>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	791b      	ldrb	r3, [r3, #4]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d10f      	bne.n	80080b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80080f8:	68f9      	ldr	r1, [r7, #12]
 80080fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fe:	4313      	orrs	r3, r2
 8008100:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800813e:	f023 0302 	bic.w	r3, r3, #2
 8008142:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008180:	f043 0302 	orr.w	r3, r3, #2
 8008184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4013      	ands	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081ac:	68fb      	ldr	r3, [r7, #12]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	4013      	ands	r3, r2
 80081dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	0c1b      	lsrs	r3, r3, #16
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4013      	ands	r3, r2
 8008210:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	b29b      	uxth	r3, r3
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4013      	ands	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008250:	68bb      	ldr	r3, [r7, #8]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800825e:	b480      	push	{r7}
 8008260:	b087      	sub	sp, #28
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	fa22 f303 	lsr.w	r3, r2, r3
 800828e:	01db      	lsls	r3, r3, #7
 8008290:	b2db      	uxtb	r3, r3
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4013      	ands	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ac:	68bb      	ldr	r3, [r7, #8]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0301 	and.w	r3, r3, #1
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f2:	4619      	mov	r1, r3
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <USB_ActivateSetup+0x44>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	fffff800 	.word	0xfffff800

08008320 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	460b      	mov	r3, r1
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	333c      	adds	r3, #60	; 0x3c
 8008336:	3304      	adds	r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4a26      	ldr	r2, [pc, #152]	; (80083d8 <USB_EP0_OutStart+0xb8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d90a      	bls.n	800835a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008354:	d101      	bne.n	800835a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e037      	b.n	80083ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008360:	461a      	mov	r2, r3
 8008362:	2300      	movs	r3, #0
 8008364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008388:	f043 0318 	orr.w	r3, r3, #24
 800838c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d10f      	bne.n	80083c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	4f54300a 	.word	0x4f54300a

080083dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4a13      	ldr	r2, [pc, #76]	; (8008440 <USB_CoreReset+0x64>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e01b      	b.n	8008432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	daf2      	bge.n	80083e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f043 0201 	orr.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a09      	ldr	r2, [pc, #36]	; (8008440 <USB_CoreReset+0x64>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d901      	bls.n	8008424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e006      	b.n	8008432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d0f0      	beq.n	8008412 <USB_CoreReset+0x36>

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	00030d40 	.word	0x00030d40

08008444 <HiL_Init_MSGQ>:
#include "HiL_Init_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
extern osMessageQueueId_t USB_MSGQ_Tx;

int HiL_Init_MSGQ (void) {
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 8008448:	2200      	movs	r2, #0
 800844a:	2104      	movs	r1, #4
 800844c:	200a      	movs	r0, #10
 800844e:	f002 fb77 	bl	800ab40 <osMessageQueueNew>
 8008452:	4603      	mov	r3, r0
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <HiL_Init_MSGQ+0x48>)
 8008456:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <HiL_Init_MSGQ+0x48>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HiL_Init_MSGQ+0x22>
	  return -1;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008464:	e00f      	b.n	8008486 <HiL_Init_MSGQ+0x42>
  }
  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 8008466:	2200      	movs	r2, #0
 8008468:	2104      	movs	r1, #4
 800846a:	200a      	movs	r0, #10
 800846c:	f002 fb68 	bl	800ab40 <osMessageQueueNew>
 8008470:	4603      	mov	r3, r0
 8008472:	4a07      	ldr	r2, [pc, #28]	; (8008490 <HiL_Init_MSGQ+0x4c>)
 8008474:	6013      	str	r3, [r2, #0]
    if (USB_MSGQ_Tx == NULL) {
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HiL_Init_MSGQ+0x4c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <HiL_Init_MSGQ+0x40>
  	  return -1;
 800847e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008482:	e000      	b.n	8008486 <HiL_Init_MSGQ+0x42>
    }
  return 0;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200005f8 	.word	0x200005f8
 8008490:	200005fc 	.word	0x200005fc

08008494 <HiL_controller_copy_array>:

static uint8_t recieved_data[4];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(int* to_be_copied)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<4; i++)
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	e00b      	b.n	80084ba <HiL_controller_copy_array+0x26>
	{
		recieved_data[i] = to_be_copied[i];
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	b2d1      	uxtb	r1, r2
 80084b0:	4a07      	ldr	r2, [pc, #28]	; (80084d0 <HiL_controller_copy_array+0x3c>)
 80084b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<4; i++)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	3301      	adds	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d9f0      	bls.n	80084a2 <HiL_controller_copy_array+0xe>
	}
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	2000065c 	.word	0x2000065c

080084d4 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(int* recieved_data)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 80084dc:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <HiL_controller_read_message+0xdc>)
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 80084e2:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <HiL_controller_read_message+0xdc>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ffd3 	bl	8008494 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d84b      	bhi.n	800858e <HiL_controller_read_message+0xba>
 80084f6:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <HiL_controller_read_message+0x28>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	0800850d 	.word	0x0800850d
 8008500:	08008513 	.word	0x08008513
 8008504:	08008545 	.word	0x08008545
 8008508:	08008577 	.word	0x08008577
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800850c:	f000 f852 	bl	80085b4 <HiL_controller_send_message>
			break;
 8008510:	e049      	b.n	80085a6 <HiL_controller_read_message+0xd2>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3304      	adds	r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 8008518:	b2da      	uxtb	r2, r3
													recieved_data[CONTROLLER_ACTION1]);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3308      	adds	r3, #8
 800851e:	681b      	ldr	r3, [r3, #0]
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 8008520:	b2db      	uxtb	r3, r3
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f000 f8a5 	bl	8008674 <HiL_mcu_commands_binary_action>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008530:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	4a1e      	ldr	r2, [pc, #120]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008538:	7852      	ldrb	r2, [r2, #1]
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f85f 	bl	8008600 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 8008542:	e030      	b.n	80085a6 <HiL_controller_read_message+0xd2>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3308      	adds	r3, #8
 8008548:	681b      	ldr	r3, [r3, #0]
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800854a:	b2da      	uxtb	r2, r3
													recieved_data[CONTROLLER_ACTION2]);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	330c      	adds	r3, #12
 8008550:	681b      	ldr	r3, [r3, #0]
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f000 f868 	bl	800862c <HiL_mcu_commands_potentiometer_emulator>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008562:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008564:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	4a11      	ldr	r2, [pc, #68]	; (80085b0 <HiL_controller_read_message+0xdc>)
 800856a:	7852      	ldrb	r2, [r2, #1]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f846 	bl	8008600 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 8008574:	e017      	b.n	80085a6 <HiL_controller_read_message+0xd2>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008578:	2202      	movs	r2, #2
 800857a:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <HiL_controller_read_message+0xdc>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008582:	7852      	ldrb	r2, [r2, #1]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f83a 	bl	8008600 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800858c:	e00b      	b.n	80085a6 <HiL_controller_read_message+0xd2>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008590:	2201      	movs	r2, #1
 8008592:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <HiL_controller_read_message+0xdc>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4a05      	ldr	r2, [pc, #20]	; (80085b0 <HiL_controller_read_message+0xdc>)
 800859a:	7852      	ldrb	r2, [r2, #1]
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f82e 	bl	8008600 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000660 	.word	0x20000660

080085b4 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 80085b8:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <HiL_controller_send_message+0x44>)
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d111      	bne.n	80085e4 <HiL_controller_send_message+0x30>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 80085c0:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <HiL_controller_send_message+0x44>)
 80085c2:	789b      	ldrb	r3, [r3, #2]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f8ff 	bl	80087c8 <HiL_mcu_commands_binary_status>
 80085ca:	4603      	mov	r3, r0
 80085cc:	461a      	mov	r2, r3
 80085ce:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <HiL_controller_send_message+0x48>)
 80085d0:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 80085d2:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <HiL_controller_send_message+0x48>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	4a09      	ldr	r2, [pc, #36]	; (80085fc <HiL_controller_send_message+0x48>)
 80085d8:	7852      	ldrb	r2, [r2, #1]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f80f 	bl	8008600 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 80085e2:	e007      	b.n	80085f4 <HiL_controller_send_message+0x40>


		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <HiL_controller_send_message+0x48>)
 80085e6:	2202      	movs	r2, #2
 80085e8:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 80085ea:	2120      	movs	r1, #32
 80085ec:	2000      	movs	r0, #0
 80085ee:	f000 f807 	bl	8008600 <HiL_gateway_transmit_message>
	}
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	2000065c 	.word	0x2000065c
 80085fc:	20000660 	.word	0x20000660

08008600 <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	460a      	mov	r2, r1
 800860a:	71fb      	strb	r3, [r7, #7]
 800860c:	4613      	mov	r3, r2
 800860e:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 8008614:	79bb      	ldrb	r3, [r7, #6]
 8008616:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f005 fa58 	bl	800dad4 <CDC_Transmit_FS>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HiL_mcu_commands_potentiometer_emulator>:

#include "HiL_mcu_commands.h"


uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	460a      	mov	r2, r1
 8008636:	71fb      	strb	r3, [r7, #7]
 8008638:	4613      	mov	r3, r2
 800863a:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	b29a      	uxth	r2, r3
 8008640:	79bb      	ldrb	r3, [r7, #6]
 8008642:	b29b      	uxth	r3, r3
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	4413      	add	r3, r2
 800864a:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800864c:	89fb      	ldrh	r3, [r7, #14]
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008652:	d301      	bcc.n	8008658 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 8008654:	2303      	movs	r3, #3
 8008656:	e006      	b.n	8008666 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 8008658:	89fb      	ldrh	r3, [r7, #14]
 800865a:	2200      	movs	r2, #0
 800865c:	2100      	movs	r1, #0
 800865e:	4804      	ldr	r0, [pc, #16]	; (8008670 <HiL_mcu_commands_potentiometer_emulator+0x44>)
 8008660:	f7f9 fbba 	bl	8001dd8 <HAL_DAC_SetValue>
	return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000330 	.word	0x20000330

08008674 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	460a      	mov	r2, r1
 800867e:	71fb      	strb	r3, [r7, #7]
 8008680:	4613      	mov	r3, r2
 8008682:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 8008684:	79bb      	ldrb	r3, [r7, #6]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d102      	bne.n	8008690 <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800868a:	2301      	movs	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e007      	b.n	80086a0 <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 8008690:	79bb      	ldrb	r3, [r7, #6]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
 800869a:	e001      	b.n	80086a0 <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800869c:	2303      	movs	r3, #3
 800869e:	e082      	b.n	80087a6 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d87c      	bhi.n	80087a0 <HiL_mcu_commands_binary_action+0x12c>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <HiL_mcu_commands_binary_action+0x38>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086e1 	.word	0x080086e1
 80086b0:	080086f1 	.word	0x080086f1
 80086b4:	08008701 	.word	0x08008701
 80086b8:	0800870f 	.word	0x0800870f
 80086bc:	0800871f 	.word	0x0800871f
 80086c0:	0800872d 	.word	0x0800872d
 80086c4:	0800873b 	.word	0x0800873b
 80086c8:	08008749 	.word	0x08008749
 80086cc:	08008757 	.word	0x08008757
 80086d0:	08008765 	.word	0x08008765
 80086d4:	08008775 	.word	0x08008775
 80086d8:	08008783 	.word	0x08008783
 80086dc:	08008793 	.word	0x08008793
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086e8:	4831      	ldr	r0, [pc, #196]	; (80087b0 <HiL_mcu_commands_binary_action+0x13c>)
 80086ea:	f7fa f8e7 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 80086ee:	e059      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086f8:	482d      	ldr	r0, [pc, #180]	; (80087b0 <HiL_mcu_commands_binary_action+0x13c>)
 80086fa:	f7fa f8df 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 80086fe:	e051      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	461a      	mov	r2, r3
 8008704:	2110      	movs	r1, #16
 8008706:	482a      	ldr	r0, [pc, #168]	; (80087b0 <HiL_mcu_commands_binary_action+0x13c>)
 8008708:	f7fa f8d8 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 800870c:	e04a      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	461a      	mov	r2, r3
 8008712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008716:	4826      	ldr	r0, [pc, #152]	; (80087b0 <HiL_mcu_commands_binary_action+0x13c>)
 8008718:	f7fa f8d0 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 800871c:	e042      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	461a      	mov	r2, r3
 8008722:	2108      	movs	r1, #8
 8008724:	4823      	ldr	r0, [pc, #140]	; (80087b4 <HiL_mcu_commands_binary_action+0x140>)
 8008726:	f7fa f8c9 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 800872a:	e03b      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	461a      	mov	r2, r3
 8008730:	2104      	movs	r1, #4
 8008732:	4820      	ldr	r0, [pc, #128]	; (80087b4 <HiL_mcu_commands_binary_action+0x140>)
 8008734:	f7fa f8c2 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008738:	e034      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	461a      	mov	r2, r3
 800873e:	2110      	movs	r1, #16
 8008740:	481d      	ldr	r0, [pc, #116]	; (80087b8 <HiL_mcu_commands_binary_action+0x144>)
 8008742:	f7fa f8bb 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008746:	e02d      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	461a      	mov	r2, r3
 800874c:	2120      	movs	r1, #32
 800874e:	481a      	ldr	r0, [pc, #104]	; (80087b8 <HiL_mcu_commands_binary_action+0x144>)
 8008750:	f7fa f8b4 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008754:	e026      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	461a      	mov	r2, r3
 800875a:	2140      	movs	r1, #64	; 0x40
 800875c:	4816      	ldr	r0, [pc, #88]	; (80087b8 <HiL_mcu_commands_binary_action+0x144>)
 800875e:	f7fa f8ad 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008762:	e01f      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	461a      	mov	r2, r3
 8008768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800876c:	4813      	ldr	r0, [pc, #76]	; (80087bc <HiL_mcu_commands_binary_action+0x148>)
 800876e:	f7fa f8a5 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008772:	e017      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	461a      	mov	r2, r3
 8008778:	2180      	movs	r1, #128	; 0x80
 800877a:	4811      	ldr	r0, [pc, #68]	; (80087c0 <HiL_mcu_commands_binary_action+0x14c>)
 800877c:	f7fa f89e 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008780:	e010      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	461a      	mov	r2, r3
 8008786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800878a:	480e      	ldr	r0, [pc, #56]	; (80087c4 <HiL_mcu_commands_binary_action+0x150>)
 800878c:	f7fa f896 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 8008790:	e008      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	461a      	mov	r2, r3
 8008796:	2104      	movs	r1, #4
 8008798:	4807      	ldr	r0, [pc, #28]	; (80087b8 <HiL_mcu_commands_binary_action+0x144>)
 800879a:	f7fa f88f 	bl	80028bc <HAL_GPIO_WritePin>
			break;
 800879e:	e001      	b.n	80087a4 <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 80087a0:	2302      	movs	r3, #2
 80087a2:	e000      	b.n	80087a6 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 80087a4:	2300      	movs	r3, #0
	
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40020400 	.word	0x40020400
 80087b4:	40021800 	.word	0x40021800
 80087b8:	40020c00 	.word	0x40020c00
 80087bc:	40020800 	.word	0x40020800
 80087c0:	40021400 	.word	0x40021400
 80087c4:	40020000 	.word	0x40020000

080087c8 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d870      	bhi.n	80088ba <HiL_mcu_commands_binary_status+0xf2>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <HiL_mcu_commands_binary_status+0x18>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008815 	.word	0x08008815
 80087e4:	08008823 	.word	0x08008823
 80087e8:	08008831 	.word	0x08008831
 80087ec:	0800883d 	.word	0x0800883d
 80087f0:	0800884b 	.word	0x0800884b
 80087f4:	08008857 	.word	0x08008857
 80087f8:	08008863 	.word	0x08008863
 80087fc:	0800886f 	.word	0x0800886f
 8008800:	0800887b 	.word	0x0800887b
 8008804:	08008887 	.word	0x08008887
 8008808:	08008895 	.word	0x08008895
 800880c:	080088a1 	.word	0x080088a1
 8008810:	080088af 	.word	0x080088af
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 8008814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008818:	482a      	ldr	r0, [pc, #168]	; (80088c4 <HiL_mcu_commands_binary_status+0xfc>)
 800881a:	f7fa f837 	bl	800288c <HAL_GPIO_ReadPin>
 800881e:	4603      	mov	r3, r0
 8008820:	e04c      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 8008822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008826:	4827      	ldr	r0, [pc, #156]	; (80088c4 <HiL_mcu_commands_binary_status+0xfc>)
 8008828:	f7fa f830 	bl	800288c <HAL_GPIO_ReadPin>
 800882c:	4603      	mov	r3, r0
 800882e:	e045      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 8008830:	2110      	movs	r1, #16
 8008832:	4824      	ldr	r0, [pc, #144]	; (80088c4 <HiL_mcu_commands_binary_status+0xfc>)
 8008834:	f7fa f82a 	bl	800288c <HAL_GPIO_ReadPin>
 8008838:	4603      	mov	r3, r0
 800883a:	e03f      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800883c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008840:	4820      	ldr	r0, [pc, #128]	; (80088c4 <HiL_mcu_commands_binary_status+0xfc>)
 8008842:	f7fa f823 	bl	800288c <HAL_GPIO_ReadPin>
 8008846:	4603      	mov	r3, r0
 8008848:	e038      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800884a:	2108      	movs	r1, #8
 800884c:	481e      	ldr	r0, [pc, #120]	; (80088c8 <HiL_mcu_commands_binary_status+0x100>)
 800884e:	f7fa f81d 	bl	800288c <HAL_GPIO_ReadPin>
 8008852:	4603      	mov	r3, r0
 8008854:	e032      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 8008856:	2104      	movs	r1, #4
 8008858:	481b      	ldr	r0, [pc, #108]	; (80088c8 <HiL_mcu_commands_binary_status+0x100>)
 800885a:	f7fa f817 	bl	800288c <HAL_GPIO_ReadPin>
 800885e:	4603      	mov	r3, r0
 8008860:	e02c      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 8008862:	2110      	movs	r1, #16
 8008864:	4819      	ldr	r0, [pc, #100]	; (80088cc <HiL_mcu_commands_binary_status+0x104>)
 8008866:	f7fa f811 	bl	800288c <HAL_GPIO_ReadPin>
 800886a:	4603      	mov	r3, r0
 800886c:	e026      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800886e:	2120      	movs	r1, #32
 8008870:	4816      	ldr	r0, [pc, #88]	; (80088cc <HiL_mcu_commands_binary_status+0x104>)
 8008872:	f7fa f80b 	bl	800288c <HAL_GPIO_ReadPin>
 8008876:	4603      	mov	r3, r0
 8008878:	e020      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800887a:	2140      	movs	r1, #64	; 0x40
 800887c:	4813      	ldr	r0, [pc, #76]	; (80088cc <HiL_mcu_commands_binary_status+0x104>)
 800887e:	f7fa f805 	bl	800288c <HAL_GPIO_ReadPin>
 8008882:	4603      	mov	r3, r0
 8008884:	e01a      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 8008886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800888a:	4811      	ldr	r0, [pc, #68]	; (80088d0 <HiL_mcu_commands_binary_status+0x108>)
 800888c:	f7f9 fffe 	bl	800288c <HAL_GPIO_ReadPin>
 8008890:	4603      	mov	r3, r0
 8008892:	e013      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 8008894:	2180      	movs	r1, #128	; 0x80
 8008896:	480f      	ldr	r0, [pc, #60]	; (80088d4 <HiL_mcu_commands_binary_status+0x10c>)
 8008898:	f7f9 fff8 	bl	800288c <HAL_GPIO_ReadPin>
 800889c:	4603      	mov	r3, r0
 800889e:	e00d      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 80088a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088a4:	480c      	ldr	r0, [pc, #48]	; (80088d8 <HiL_mcu_commands_binary_status+0x110>)
 80088a6:	f7f9 fff1 	bl	800288c <HAL_GPIO_ReadPin>
 80088aa:	4603      	mov	r3, r0
 80088ac:	e006      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 80088ae:	2104      	movs	r1, #4
 80088b0:	4806      	ldr	r0, [pc, #24]	; (80088cc <HiL_mcu_commands_binary_status+0x104>)
 80088b2:	f7f9 ffeb 	bl	800288c <HAL_GPIO_ReadPin>
 80088b6:	4603      	mov	r3, r0
 80088b8:	e000      	b.n	80088bc <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 80088ba:	2302      	movs	r3, #2

	}
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40020400 	.word	0x40020400
 80088c8:	40021800 	.word	0x40021800
 80088cc:	40020c00 	.word	0x40020c00
 80088d0:	40020800 	.word	0x40020800
 80088d4:	40021400 	.word	0x40021400
 80088d8:	40020000 	.word	0x40020000

080088dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088ec:	f005 fde6 	bl	800e4bc <malloc>
 80088f0:	4603      	mov	r3, r0
 80088f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	32b0      	adds	r2, #176	; 0xb0
 8008904:	2100      	movs	r1, #0
 8008906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800890a:	2302      	movs	r3, #2
 800890c:	e0d4      	b.n	8008ab8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800890e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008912:	2100      	movs	r1, #0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f005 fdef 	bl	800e4f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	32b0      	adds	r2, #176	; 0xb0
 8008924:	68f9      	ldr	r1, [r7, #12]
 8008926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	32b0      	adds	r2, #176	; 0xb0
 8008934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	7c1b      	ldrb	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d138      	bne.n	80089b8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008946:	4b5e      	ldr	r3, [pc, #376]	; (8008ac0 <USBD_CDC_Init+0x1e4>)
 8008948:	7819      	ldrb	r1, [r3, #0]
 800894a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800894e:	2202      	movs	r2, #2
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f005 fbe4 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008956:	4b5a      	ldr	r3, [pc, #360]	; (8008ac0 <USBD_CDC_Init+0x1e4>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f003 020f 	and.w	r2, r3, #15
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	2201      	movs	r2, #1
 800896e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008970:	4b54      	ldr	r3, [pc, #336]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 8008972:	7819      	ldrb	r1, [r3, #0]
 8008974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008978:	2202      	movs	r2, #2
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f005 fbcf 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008980:	4b50      	ldr	r3, [pc, #320]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008998:	2201      	movs	r2, #1
 800899a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800899c:	4b4a      	ldr	r3, [pc, #296]	; (8008ac8 <USBD_CDC_Init+0x1ec>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	3326      	adds	r3, #38	; 0x26
 80089b2:	2210      	movs	r2, #16
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e035      	b.n	8008a24 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089b8:	4b41      	ldr	r3, [pc, #260]	; (8008ac0 <USBD_CDC_Init+0x1e4>)
 80089ba:	7819      	ldrb	r1, [r3, #0]
 80089bc:	2340      	movs	r3, #64	; 0x40
 80089be:	2202      	movs	r2, #2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f005 fbac 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089c6:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <USBD_CDC_Init+0x1e4>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3324      	adds	r3, #36	; 0x24
 80089dc:	2201      	movs	r2, #1
 80089de:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089e0:	4b38      	ldr	r3, [pc, #224]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 80089e2:	7819      	ldrb	r1, [r3, #0]
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	2202      	movs	r2, #2
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f005 fb98 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089ee:	4b35      	ldr	r3, [pc, #212]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	f003 020f 	and.w	r2, r3, #15
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a06:	2201      	movs	r2, #1
 8008a08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	; (8008ac8 <USBD_CDC_Init+0x1ec>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 020f 	and.w	r2, r3, #15
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	3326      	adds	r3, #38	; 0x26
 8008a20:	2210      	movs	r2, #16
 8008a22:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <USBD_CDC_Init+0x1ec>)
 8008a26:	7819      	ldrb	r1, [r3, #0]
 8008a28:	2308      	movs	r3, #8
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f005 fb76 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a32:	4b25      	ldr	r3, [pc, #148]	; (8008ac8 <USBD_CDC_Init+0x1ec>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	f003 020f 	and.w	r2, r3, #15
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	3324      	adds	r3, #36	; 0x24
 8008a48:	2201      	movs	r2, #1
 8008a4a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	33b0      	adds	r3, #176	; 0xb0
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008a82:	2302      	movs	r3, #2
 8008a84:	e018      	b.n	8008ab8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7c1b      	ldrb	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 8008a90:	7819      	ldrb	r1, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f005 fc2d 	bl	800e2fc <USBD_LL_PrepareReceive>
 8008aa2:	e008      	b.n	8008ab6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <USBD_CDC_Init+0x1e8>)
 8008aa6:	7819      	ldrb	r1, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f005 fc23 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000093 	.word	0x20000093
 8008ac4:	20000094 	.word	0x20000094
 8008ac8:	20000095 	.word	0x20000095

08008acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ad8:	4b3a      	ldr	r3, [pc, #232]	; (8008bc4 <USBD_CDC_DeInit+0xf8>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f005 fb43 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ae4:	4b37      	ldr	r3, [pc, #220]	; (8008bc4 <USBD_CDC_DeInit+0xf8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 020f 	and.w	r2, r3, #15
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	3324      	adds	r3, #36	; 0x24
 8008afa:	2200      	movs	r2, #0
 8008afc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008afe:	4b32      	ldr	r3, [pc, #200]	; (8008bc8 <USBD_CDC_DeInit+0xfc>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f005 fb30 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b0a:	4b2f      	ldr	r3, [pc, #188]	; (8008bc8 <USBD_CDC_DeInit+0xfc>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 020f 	and.w	r2, r3, #15
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b22:	2200      	movs	r2, #0
 8008b24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b26:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <USBD_CDC_DeInit+0x100>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f005 fb1c 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b32:	4b26      	ldr	r3, [pc, #152]	; (8008bcc <USBD_CDC_DeInit+0x100>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	3324      	adds	r3, #36	; 0x24
 8008b48:	2200      	movs	r2, #0
 8008b4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b4c:	4b1f      	ldr	r3, [pc, #124]	; (8008bcc <USBD_CDC_DeInit+0x100>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	f003 020f 	and.w	r2, r3, #15
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	440b      	add	r3, r1
 8008b60:	3326      	adds	r3, #38	; 0x26
 8008b62:	2200      	movs	r2, #0
 8008b64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32b0      	adds	r2, #176	; 0xb0
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01f      	beq.n	8008bb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	33b0      	adds	r3, #176	; 0xb0
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32b0      	adds	r2, #176	; 0xb0
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f005 fc96 	bl	800e4cc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32b0      	adds	r2, #176	; 0xb0
 8008baa:	2100      	movs	r1, #0
 8008bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000093 	.word	0x20000093
 8008bc8:	20000094 	.word	0x20000094
 8008bcc:	20000095 	.word	0x20000095

08008bd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	32b0      	adds	r2, #176	; 0xb0
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e0bf      	b.n	8008d80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d050      	beq.n	8008cae <USBD_CDC_Setup+0xde>
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	f040 80af 	bne.w	8008d70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	88db      	ldrh	r3, [r3, #6]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d03a      	beq.n	8008c90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b25b      	sxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da1b      	bge.n	8008c5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	33b0      	adds	r3, #176	; 0xb0
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	88d2      	ldrh	r2, [r2, #6]
 8008c40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	88db      	ldrh	r3, [r3, #6]
 8008c46:	2b07      	cmp	r3, #7
 8008c48:	bf28      	it	cs
 8008c4a:	2307      	movcs	r3, #7
 8008c4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	89fa      	ldrh	r2, [r7, #14]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 fdad 	bl	800a7b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c5a:	e090      	b.n	8008d7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b3f      	cmp	r3, #63	; 0x3f
 8008c6c:	d803      	bhi.n	8008c76 <USBD_CDC_Setup+0xa6>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	e000      	b.n	8008c78 <USBD_CDC_Setup+0xa8>
 8008c76:	2240      	movs	r2, #64	; 0x40
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c7e:	6939      	ldr	r1, [r7, #16]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c86:	461a      	mov	r2, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fdbf 	bl	800a80c <USBD_CtlPrepareRx>
      break;
 8008c8e:	e076      	b.n	8008d7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	33b0      	adds	r3, #176	; 0xb0
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	7850      	ldrb	r0, [r2, #1]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	4798      	blx	r3
      break;
 8008cac:	e067      	b.n	8008d7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b0b      	cmp	r3, #11
 8008cb4:	d851      	bhi.n	8008d5a <USBD_CDC_Setup+0x18a>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <USBD_CDC_Setup+0xec>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008d69 	.word	0x08008d69
 8008cc4:	08008d5b 	.word	0x08008d5b
 8008cc8:	08008d5b 	.word	0x08008d5b
 8008ccc:	08008d5b 	.word	0x08008d5b
 8008cd0:	08008d5b 	.word	0x08008d5b
 8008cd4:	08008d5b 	.word	0x08008d5b
 8008cd8:	08008d5b 	.word	0x08008d5b
 8008cdc:	08008d5b 	.word	0x08008d5b
 8008ce0:	08008d5b 	.word	0x08008d5b
 8008ce4:	08008d17 	.word	0x08008d17
 8008ce8:	08008d41 	.word	0x08008d41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d107      	bne.n	8008d08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cf8:	f107 030a 	add.w	r3, r7, #10
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fd57 	bl	800a7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d06:	e032      	b.n	8008d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 fce1 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	75fb      	strb	r3, [r7, #23]
          break;
 8008d14:	e02b      	b.n	8008d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d107      	bne.n	8008d32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d22:	f107 030d 	add.w	r3, r7, #13
 8008d26:	2201      	movs	r2, #1
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fd42 	bl	800a7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d30:	e01d      	b.n	8008d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fccc 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d3e:	e016      	b.n	8008d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d00f      	beq.n	8008d6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fcbf 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d54:	2303      	movs	r3, #3
 8008d56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d58:	e008      	b.n	8008d6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 fcb8 	bl	800a6d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	75fb      	strb	r3, [r7, #23]
          break;
 8008d66:	e002      	b.n	8008d6e <USBD_CDC_Setup+0x19e>
          break;
 8008d68:	bf00      	nop
 8008d6a:	e008      	b.n	8008d7e <USBD_CDC_Setup+0x1ae>
          break;
 8008d6c:	bf00      	nop
      }
      break;
 8008d6e:	e006      	b.n	8008d7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fcad 	bl	800a6d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32b0      	adds	r2, #176	; 0xb0
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e065      	b.n	8008e7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	32b0      	adds	r2, #176	; 0xb0
 8008dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	3318      	adds	r3, #24
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d02f      	beq.n	8008e3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	f003 020f 	and.w	r2, r3, #15
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3318      	adds	r3, #24
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	f003 010f 	and.w	r1, r3, #15
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	440b      	add	r3, r1
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4403      	add	r3, r0
 8008e04:	3348      	adds	r3, #72	; 0x48
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d112      	bne.n	8008e3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	f003 020f 	and.w	r2, r3, #15
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	3318      	adds	r3, #24
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e2e:	78f9      	ldrb	r1, [r7, #3]
 8008e30:	2300      	movs	r3, #0
 8008e32:	2200      	movs	r2, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f005 fa40 	bl	800e2ba <USBD_LL_Transmit>
 8008e3a:	e01f      	b.n	8008e7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	33b0      	adds	r3, #176	; 0xb0
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d010      	beq.n	8008e7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	33b0      	adds	r3, #176	; 0xb0
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	32b0      	adds	r2, #176	; 0xb0
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	32b0      	adds	r2, #176	; 0xb0
 8008eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e01a      	b.n	8008eee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f005 fa3e 	bl	800e33e <USBD_LL_GetRxDataSize>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	33b0      	adds	r3, #176	; 0xb0
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	32b0      	adds	r2, #176	; 0xb0
 8008f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e025      	b.n	8008f64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	33b0      	adds	r3, #176	; 0xb0
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01a      	beq.n	8008f62 <USBD_CDC_EP0_RxReady+0x6c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f32:	2bff      	cmp	r3, #255	; 0xff
 8008f34:	d015      	beq.n	8008f62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	33b0      	adds	r3, #176	; 0xb0
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f56:	b292      	uxth	r2, r2
 8008f58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	22ff      	movs	r2, #255	; 0xff
 8008f5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f74:	2182      	movs	r1, #130	; 0x82
 8008f76:	4818      	ldr	r0, [pc, #96]	; (8008fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f78:	f000 fd49 	bl	8009a0e <USBD_GetEpDesc>
 8008f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4815      	ldr	r0, [pc, #84]	; (8008fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f82:	f000 fd44 	bl	8009a0e <USBD_GetEpDesc>
 8008f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f88:	2181      	movs	r1, #129	; 0x81
 8008f8a:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f8c:	f000 fd3f 	bl	8009a0e <USBD_GetEpDesc>
 8008f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d006      	beq.n	8008fb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fac:	711a      	strb	r2, [r3, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc0:	711a      	strb	r2, [r3, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2243      	movs	r2, #67	; 0x43
 8008fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000050 	.word	0x20000050

08008fdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fe4:	2182      	movs	r1, #130	; 0x82
 8008fe6:	4818      	ldr	r0, [pc, #96]	; (8009048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fe8:	f000 fd11 	bl	8009a0e <USBD_GetEpDesc>
 8008fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4815      	ldr	r0, [pc, #84]	; (8009048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ff2:	f000 fd0c 	bl	8009a0e <USBD_GetEpDesc>
 8008ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ff8:	2181      	movs	r1, #129	; 0x81
 8008ffa:	4813      	ldr	r0, [pc, #76]	; (8009048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ffc:	f000 fd07 	bl	8009a0e <USBD_GetEpDesc>
 8009000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2210      	movs	r2, #16
 800900c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2200      	movs	r2, #0
 8009018:	711a      	strb	r2, [r3, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f042 0202 	orr.w	r2, r2, #2
 8009020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	711a      	strb	r2, [r3, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f042 0202 	orr.w	r2, r2, #2
 8009034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2243      	movs	r2, #67	; 0x43
 800903a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000050 	.word	0x20000050

0800904c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009054:	2182      	movs	r1, #130	; 0x82
 8009056:	4818      	ldr	r0, [pc, #96]	; (80090b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009058:	f000 fcd9 	bl	8009a0e <USBD_GetEpDesc>
 800905c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800905e:	2101      	movs	r1, #1
 8009060:	4815      	ldr	r0, [pc, #84]	; (80090b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009062:	f000 fcd4 	bl	8009a0e <USBD_GetEpDesc>
 8009066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009068:	2181      	movs	r1, #129	; 0x81
 800906a:	4813      	ldr	r0, [pc, #76]	; (80090b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800906c:	f000 fccf 	bl	8009a0e <USBD_GetEpDesc>
 8009070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2210      	movs	r2, #16
 800907c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2200      	movs	r2, #0
 8009088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800908c:	711a      	strb	r2, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d006      	beq.n	80090a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090a0:	711a      	strb	r2, [r3, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2243      	movs	r2, #67	; 0x43
 80090aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000050 	.word	0x20000050

080090bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	220a      	movs	r2, #10
 80090c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090ca:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	2000000c 	.word	0x2000000c

080090dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e009      	b.n	8009104 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	33b0      	adds	r3, #176	; 0xb0
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	32b0      	adds	r2, #176	; 0xb0
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	e008      	b.n	8009148 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	32b0      	adds	r2, #176	; 0xb0
 8009168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	e004      	b.n	8009182 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32b0      	adds	r2, #176	; 0xb0
 80091a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80091a8:	2301      	movs	r3, #1
 80091aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e025      	b.n	8009202 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d11f      	bne.n	8009200 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80091c8:	4b10      	ldr	r3, [pc, #64]	; (800920c <USBD_CDC_TransmitPacket+0x7c>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 020f 	and.w	r2, r3, #15
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4403      	add	r3, r0
 80091e2:	3318      	adds	r3, #24
 80091e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <USBD_CDC_TransmitPacket+0x7c>)
 80091e8:	7819      	ldrb	r1, [r3, #0]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f005 f85f 	bl	800e2ba <USBD_LL_Transmit>

    ret = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000093 	.word	0x20000093

08009210 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	32b0      	adds	r2, #176	; 0xb0
 8009222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009226:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	32b0      	adds	r2, #176	; 0xb0
 8009232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	e018      	b.n	8009270 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7c1b      	ldrb	r3, [r3, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <USBD_CDC_ReceivePacket+0x68>)
 8009248:	7819      	ldrb	r1, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f005 f851 	bl	800e2fc <USBD_LL_PrepareReceive>
 800925a:	e008      	b.n	800926e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <USBD_CDC_ReceivePacket+0x68>)
 800925e:	7819      	ldrb	r1, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f005 f847 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000094 	.word	0x20000094

0800927c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009290:	2303      	movs	r3, #3
 8009292:	e01f      	b.n	80092d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	79fa      	ldrb	r2, [r7, #7]
 80092c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f004 fec1 	bl	800e050 <USBD_LL_Init>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e025      	b.n	8009340 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	32ae      	adds	r2, #174	; 0xae
 8009306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00f      	beq.n	8009330 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	; 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	f107 020e 	add.w	r2, r7, #14
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	4602      	mov	r2, r0
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f004 fec9 	bl	800e0e8 <USBD_LL_Start>
 8009356:	4603      	mov	r3, r0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d009      	beq.n	80093a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	4611      	mov	r1, r2
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	4611      	mov	r1, r2
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f932 	bl	800a65e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009408:	461a      	mov	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	2b02      	cmp	r3, #2
 800941c:	d01a      	beq.n	8009454 <USBD_LL_SetupStage+0x72>
 800941e:	2b02      	cmp	r3, #2
 8009420:	d822      	bhi.n	8009468 <USBD_LL_SetupStage+0x86>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <USBD_LL_SetupStage+0x4a>
 8009426:	2b01      	cmp	r3, #1
 8009428:	d00a      	beq.n	8009440 <USBD_LL_SetupStage+0x5e>
 800942a:	e01d      	b.n	8009468 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb5f 	bl	8009af8 <USBD_StdDevReq>
 800943a:	4603      	mov	r3, r0
 800943c:	73fb      	strb	r3, [r7, #15]
      break;
 800943e:	e020      	b.n	8009482 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fbc7 	bl	8009bdc <USBD_StdItfReq>
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]
      break;
 8009452:	e016      	b.n	8009482 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc29 	bl	8009cb4 <USBD_StdEPReq>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
      break;
 8009466:	e00c      	b.n	8009482 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800946e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009472:	b2db      	uxtb	r3, r3
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f004 fe96 	bl	800e1a8 <USBD_LL_StallEP>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]
      break;
 8009480:	bf00      	nop
  }

  return ret;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	460b      	mov	r3, r1
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d16e      	bne.n	8009582 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	f040 8098 	bne.w	80095e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d913      	bls.n	80094ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	1ad2      	subs	r2, r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	4293      	cmp	r3, r2
 80094dc:	bf28      	it	cs
 80094de:	4613      	movcs	r3, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f001 f9ae 	bl	800a846 <USBD_CtlContinueRx>
 80094ea:	e07d      	b.n	80095e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d014      	beq.n	8009524 <USBD_LL_DataOutStage+0x98>
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d81d      	bhi.n	800953a <USBD_LL_DataOutStage+0xae>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <USBD_LL_DataOutStage+0x7c>
 8009502:	2b01      	cmp	r3, #1
 8009504:	d003      	beq.n	800950e <USBD_LL_DataOutStage+0x82>
 8009506:	e018      	b.n	800953a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	75bb      	strb	r3, [r7, #22]
            break;
 800950c:	e018      	b.n	8009540 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009514:	b2db      	uxtb	r3, r3
 8009516:	4619      	mov	r1, r3
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 fa5e 	bl	80099da <USBD_CoreFindIF>
 800951e:	4603      	mov	r3, r0
 8009520:	75bb      	strb	r3, [r7, #22]
            break;
 8009522:	e00d      	b.n	8009540 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800952a:	b2db      	uxtb	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fa60 	bl	80099f4 <USBD_CoreFindEP>
 8009534:	4603      	mov	r3, r0
 8009536:	75bb      	strb	r3, [r7, #22]
            break;
 8009538:	e002      	b.n	8009540 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	75bb      	strb	r3, [r7, #22]
            break;
 800953e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009540:	7dbb      	ldrb	r3, [r7, #22]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d119      	bne.n	800957a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b03      	cmp	r3, #3
 8009550:	d113      	bne.n	800957a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009552:	7dba      	ldrb	r2, [r7, #22]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	32ae      	adds	r2, #174	; 0xae
 8009558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009562:	7dba      	ldrb	r2, [r7, #22]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800956a:	7dba      	ldrb	r2, [r7, #22]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	32ae      	adds	r2, #174	; 0xae
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 f974 	bl	800a868 <USBD_CtlSendStatus>
 8009580:	e032      	b.n	80095e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009588:	b2db      	uxtb	r3, r3
 800958a:	4619      	mov	r1, r3
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fa31 	bl	80099f4 <USBD_CoreFindEP>
 8009592:	4603      	mov	r3, r0
 8009594:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009596:	7dbb      	ldrb	r3, [r7, #22]
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d025      	beq.n	80095e8 <USBD_LL_DataOutStage+0x15c>
 800959c:	7dbb      	ldrb	r3, [r7, #22]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d122      	bne.n	80095e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d117      	bne.n	80095de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095ae:	7dba      	ldrb	r2, [r7, #22]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	32ae      	adds	r2, #174	; 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00f      	beq.n	80095de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80095be:	7dba      	ldrb	r2, [r7, #22]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095c6:	7dba      	ldrb	r2, [r7, #22]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	32ae      	adds	r2, #174	; 0xae
 80095cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	7afa      	ldrb	r2, [r7, #11]
 80095d4:	4611      	mov	r1, r2
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	4798      	blx	r3
 80095da:	4603      	mov	r3, r0
 80095dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	e000      	b.n	80095ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b086      	sub	sp, #24
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	460b      	mov	r3, r1
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d16f      	bne.n	80096e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3314      	adds	r3, #20
 800960a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009612:	2b02      	cmp	r3, #2
 8009614:	d15a      	bne.n	80096cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	429a      	cmp	r2, r3
 8009620:	d914      	bls.n	800964c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	461a      	mov	r2, r3
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f001 f8d6 	bl	800a7ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800963e:	2300      	movs	r3, #0
 8009640:	2200      	movs	r2, #0
 8009642:	2100      	movs	r1, #0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f004 fe59 	bl	800e2fc <USBD_LL_PrepareReceive>
 800964a:	e03f      	b.n	80096cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	429a      	cmp	r2, r3
 8009656:	d11c      	bne.n	8009692 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009660:	429a      	cmp	r2, r3
 8009662:	d316      	bcc.n	8009692 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800966e:	429a      	cmp	r2, r3
 8009670:	d20f      	bcs.n	8009692 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f001 f8b7 	bl	800a7ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009684:	2300      	movs	r3, #0
 8009686:	2200      	movs	r2, #0
 8009688:	2100      	movs	r1, #0
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f004 fe36 	bl	800e2fc <USBD_LL_PrepareReceive>
 8009690:	e01c      	b.n	80096cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d10f      	bne.n	80096be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d009      	beq.n	80096be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096be:	2180      	movs	r1, #128	; 0x80
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f004 fd71 	bl	800e1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 f8e1 	bl	800a88e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d03a      	beq.n	800974c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fe42 	bl	8009360 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096e4:	e032      	b.n	800974c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f97f 	bl	80099f4 <USBD_CoreFindEP>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2bff      	cmp	r3, #255	; 0xff
 80096fe:	d025      	beq.n	800974c <USBD_LL_DataInStage+0x15a>
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d122      	bne.n	800974c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b03      	cmp	r3, #3
 8009710:	d11c      	bne.n	800974c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009712:	7dfa      	ldrb	r2, [r7, #23]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	32ae      	adds	r2, #174	; 0xae
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d014      	beq.n	800974c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009722:	7dfa      	ldrb	r2, [r7, #23]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800972a:	7dfa      	ldrb	r2, [r7, #23]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	32ae      	adds	r2, #174	; 0xae
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	7afa      	ldrb	r2, [r7, #11]
 8009738:	4611      	mov	r1, r2
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	4798      	blx	r3
 800973e:	4603      	mov	r3, r0
 8009740:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009742:	7dbb      	ldrb	r3, [r7, #22]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009748:	7dbb      	ldrb	r3, [r7, #22]
 800974a:	e000      	b.n	800974e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d014      	beq.n	80097bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6852      	ldr	r2, [r2, #4]
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	4611      	mov	r1, r2
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097b8:	2303      	movs	r3, #3
 80097ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	2200      	movs	r2, #0
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f004 fcab 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2240      	movs	r2, #64	; 0x40
 80097d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	2200      	movs	r2, #0
 80097dc:	2180      	movs	r1, #128	; 0x80
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f004 fc9d 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2240      	movs	r2, #64	; 0x40
 80097ee:	621a      	str	r2, [r3, #32]

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	b2da      	uxtb	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2204      	movs	r2, #4
 8009834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b04      	cmp	r3, #4
 8009858:	d106      	bne.n	8009868 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009860:	b2da      	uxtb	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d110      	bne.n	80098ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	32ae      	adds	r2, #174	; 0xae
 80098cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e01c      	b.n	8009912 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d115      	bne.n	8009910 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	32ae      	adds	r2, #174	; 0xae
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00b      	beq.n	8009910 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	32ae      	adds	r2, #174	; 0xae
 8009902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	32ae      	adds	r2, #174	; 0xae
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	e01c      	b.n	8009976 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b03      	cmp	r3, #3
 8009946:	d115      	bne.n	8009974 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32ae      	adds	r2, #174	; 0xae
 8009952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	32ae      	adds	r2, #174	; 0xae
 8009966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	78fa      	ldrb	r2, [r7, #3]
 800996e:	4611      	mov	r1, r2
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6852      	ldr	r2, [r2, #4]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	4611      	mov	r1, r2
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80099cc:	2303      	movs	r3, #3
 80099ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b086      	sub	sp, #24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d920      	bls.n	8009a78 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a3e:	e013      	b.n	8009a68 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a40:	f107 030a 	add.w	r3, r7, #10
 8009a44:	4619      	mov	r1, r3
 8009a46:	6978      	ldr	r0, [r7, #20]
 8009a48:	f000 f81b 	bl	8009a82 <USBD_GetNextDesc>
 8009a4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	d108      	bne.n	8009a68 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	789b      	ldrb	r3, [r3, #2]
 8009a5e:	78fa      	ldrb	r2, [r7, #3]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d008      	beq.n	8009a76 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	885b      	ldrh	r3, [r3, #2]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	897b      	ldrh	r3, [r7, #10]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d8e5      	bhi.n	8009a40 <USBD_GetEpDesc+0x32>
 8009a74:	e000      	b.n	8009a78 <USBD_GetEpDesc+0x6a>
          break;
 8009a76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a78:	693b      	ldr	r3, [r7, #16]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	881a      	ldrh	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4413      	add	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009aae:	68fb      	ldr	r3, [r7, #12]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ada:	8a3b      	ldrh	r3, [r7, #16]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	b21a      	sxth	r2, r3
 8009ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b21b      	sxth	r3, r3
 8009ae8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009aea:	89fb      	ldrh	r3, [r7, #14]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b0e:	2b40      	cmp	r3, #64	; 0x40
 8009b10:	d005      	beq.n	8009b1e <USBD_StdDevReq+0x26>
 8009b12:	2b40      	cmp	r3, #64	; 0x40
 8009b14:	d857      	bhi.n	8009bc6 <USBD_StdDevReq+0xce>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <USBD_StdDevReq+0x42>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d153      	bne.n	8009bc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	32ae      	adds	r2, #174	; 0xae
 8009b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
      break;
 8009b38:	e04a      	b.n	8009bd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	d83b      	bhi.n	8009bba <USBD_StdDevReq+0xc2>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <USBD_StdDevReq+0x50>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009bb1 	.word	0x08009bb1
 8009b50:	08009bbb 	.word	0x08009bbb
 8009b54:	08009ba7 	.word	0x08009ba7
 8009b58:	08009bbb 	.word	0x08009bbb
 8009b5c:	08009b7b 	.word	0x08009b7b
 8009b60:	08009b71 	.word	0x08009b71
 8009b64:	08009bbb 	.word	0x08009bbb
 8009b68:	08009b93 	.word	0x08009b93
 8009b6c:	08009b85 	.word	0x08009b85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa3c 	bl	8009ff0 <USBD_GetDescriptor>
          break;
 8009b78:	e024      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fbcb 	bl	800a318 <USBD_SetAddress>
          break;
 8009b82:	e01f      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fc0a 	bl	800a3a0 <USBD_SetConfig>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b90:	e018      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fcad 	bl	800a4f4 <USBD_GetConfig>
          break;
 8009b9a:	e013      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fcde 	bl	800a560 <USBD_GetStatus>
          break;
 8009ba4:	e00e      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fd0d 	bl	800a5c8 <USBD_SetFeature>
          break;
 8009bae:	e009      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fd31 	bl	800a61a <USBD_ClrFeature>
          break;
 8009bb8:	e004      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fd88 	bl	800a6d2 <USBD_CtlError>
          break;
 8009bc2:	bf00      	nop
      }
      break;
 8009bc4:	e004      	b.n	8009bd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fd82 	bl	800a6d2 <USBD_CtlError>
      break;
 8009bce:	bf00      	nop
  }

  return ret;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop

08009bdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bf2:	2b40      	cmp	r3, #64	; 0x40
 8009bf4:	d005      	beq.n	8009c02 <USBD_StdItfReq+0x26>
 8009bf6:	2b40      	cmp	r3, #64	; 0x40
 8009bf8:	d852      	bhi.n	8009ca0 <USBD_StdItfReq+0xc4>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <USBD_StdItfReq+0x26>
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d14e      	bne.n	8009ca0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d840      	bhi.n	8009c92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	889b      	ldrh	r3, [r3, #4]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d836      	bhi.n	8009c88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	889b      	ldrh	r3, [r3, #4]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff fed9 	bl	80099da <USBD_CoreFindIF>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2bff      	cmp	r3, #255	; 0xff
 8009c30:	d01d      	beq.n	8009c6e <USBD_StdItfReq+0x92>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d11a      	bne.n	8009c6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c38:	7bba      	ldrb	r2, [r7, #14]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32ae      	adds	r2, #174	; 0xae
 8009c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00f      	beq.n	8009c68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c48:	7bba      	ldrb	r2, [r7, #14]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c50:	7bba      	ldrb	r2, [r7, #14]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	32ae      	adds	r2, #174	; 0xae
 8009c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c66:	e004      	b.n	8009c72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c6c:	e001      	b.n	8009c72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d110      	bne.n	8009c9c <USBD_StdItfReq+0xc0>
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fdf1 	bl	800a868 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c86:	e009      	b.n	8009c9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fd21 	bl	800a6d2 <USBD_CtlError>
          break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fd1c 	bl	800a6d2 <USBD_CtlError>
          break;
 8009c9a:	e000      	b.n	8009c9e <USBD_StdItfReq+0xc2>
          break;
 8009c9c:	bf00      	nop
      }
      break;
 8009c9e:	e004      	b.n	8009caa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fd15 	bl	800a6d2 <USBD_CtlError>
      break;
 8009ca8:	bf00      	nop
  }

  return ret;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d007      	beq.n	8009ce4 <USBD_StdEPReq+0x30>
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	f200 817f 	bhi.w	8009fd8 <USBD_StdEPReq+0x324>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d02a      	beq.n	8009d34 <USBD_StdEPReq+0x80>
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	f040 817a 	bne.w	8009fd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe83 	bl	80099f4 <USBD_CoreFindEP>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	2bff      	cmp	r3, #255	; 0xff
 8009cf6:	f000 8174 	beq.w	8009fe2 <USBD_StdEPReq+0x32e>
 8009cfa:	7b7b      	ldrb	r3, [r7, #13]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 8170 	bne.w	8009fe2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d02:	7b7a      	ldrb	r2, [r7, #13]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d0a:	7b7a      	ldrb	r2, [r7, #13]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	32ae      	adds	r2, #174	; 0xae
 8009d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 8163 	beq.w	8009fe2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d1c:	7b7a      	ldrb	r2, [r7, #13]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32ae      	adds	r2, #174	; 0xae
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d32:	e156      	b.n	8009fe2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d008      	beq.n	8009d4e <USBD_StdEPReq+0x9a>
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	f300 8145 	bgt.w	8009fcc <USBD_StdEPReq+0x318>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 809b 	beq.w	8009e7e <USBD_StdEPReq+0x1ca>
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d03c      	beq.n	8009dc6 <USBD_StdEPReq+0x112>
 8009d4c:	e13e      	b.n	8009fcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d002      	beq.n	8009d60 <USBD_StdEPReq+0xac>
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d016      	beq.n	8009d8c <USBD_StdEPReq+0xd8>
 8009d5e:	e02c      	b.n	8009dba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00d      	beq.n	8009d82 <USBD_StdEPReq+0xce>
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b80      	cmp	r3, #128	; 0x80
 8009d6a:	d00a      	beq.n	8009d82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f004 fa19 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d76:	2180      	movs	r1, #128	; 0x80
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f004 fa15 	bl	800e1a8 <USBD_LL_StallEP>
 8009d7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d80:	e020      	b.n	8009dc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fca4 	bl	800a6d2 <USBD_CtlError>
              break;
 8009d8a:	e01b      	b.n	8009dc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10e      	bne.n	8009db2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <USBD_StdEPReq+0xfe>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b80      	cmp	r3, #128	; 0x80
 8009d9e:	d008      	beq.n	8009db2 <USBD_StdEPReq+0xfe>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	88db      	ldrh	r3, [r3, #6]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d104      	bne.n	8009db2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f004 f9fb 	bl	800e1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fd58 	bl	800a868 <USBD_CtlSendStatus>

              break;
 8009db8:	e004      	b.n	8009dc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fc88 	bl	800a6d2 <USBD_CtlError>
              break;
 8009dc2:	bf00      	nop
          }
          break;
 8009dc4:	e107      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d002      	beq.n	8009dd8 <USBD_StdEPReq+0x124>
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d016      	beq.n	8009e04 <USBD_StdEPReq+0x150>
 8009dd6:	e04b      	b.n	8009e70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <USBD_StdEPReq+0x146>
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b80      	cmp	r3, #128	; 0x80
 8009de2:	d00a      	beq.n	8009dfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f004 f9dd 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dee:	2180      	movs	r1, #128	; 0x80
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f004 f9d9 	bl	800e1a8 <USBD_LL_StallEP>
 8009df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df8:	e040      	b.n	8009e7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc68 	bl	800a6d2 <USBD_CtlError>
              break;
 8009e02:	e03b      	b.n	8009e7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	885b      	ldrh	r3, [r3, #2]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d136      	bne.n	8009e7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f004 f9e3 	bl	800e1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fd21 	bl	800a868 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fde2 	bl	80099f4 <USBD_CoreFindEP>
 8009e30:	4603      	mov	r3, r0
 8009e32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e34:	7b7b      	ldrb	r3, [r7, #13]
 8009e36:	2bff      	cmp	r3, #255	; 0xff
 8009e38:	d01f      	beq.n	8009e7a <USBD_StdEPReq+0x1c6>
 8009e3a:	7b7b      	ldrb	r3, [r7, #13]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d11c      	bne.n	8009e7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e40:	7b7a      	ldrb	r2, [r7, #13]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e48:	7b7a      	ldrb	r2, [r7, #13]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	; 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d010      	beq.n	8009e7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e58:	7b7a      	ldrb	r2, [r7, #13]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	32ae      	adds	r2, #174	; 0xae
 8009e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e6e:	e004      	b.n	8009e7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fc2d 	bl	800a6d2 <USBD_CtlError>
              break;
 8009e78:	e000      	b.n	8009e7c <USBD_StdEPReq+0x1c8>
              break;
 8009e7a:	bf00      	nop
          }
          break;
 8009e7c:	e0ab      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d002      	beq.n	8009e90 <USBD_StdEPReq+0x1dc>
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d032      	beq.n	8009ef4 <USBD_StdEPReq+0x240>
 8009e8e:	e097      	b.n	8009fc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <USBD_StdEPReq+0x1f2>
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b80      	cmp	r3, #128	; 0x80
 8009e9a:	d004      	beq.n	8009ea6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fc17 	bl	800a6d2 <USBD_CtlError>
                break;
 8009ea4:	e091      	b.n	8009fca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da0b      	bge.n	8009ec6 <USBD_StdEPReq+0x212>
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	3310      	adds	r3, #16
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	e00b      	b.n	8009ede <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	3304      	adds	r3, #4
 8009ede:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fc61 	bl	800a7b4 <USBD_CtlSendData>
              break;
 8009ef2:	e06a      	b.n	8009fca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da11      	bge.n	8009f20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	f003 020f 	and.w	r2, r3, #15
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3324      	adds	r3, #36	; 0x24
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d117      	bne.n	8009f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fbda 	bl	800a6d2 <USBD_CtlError>
                  break;
 8009f1e:	e054      	b.n	8009fca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	f003 020f 	and.w	r2, r3, #15
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fbc7 	bl	800a6d2 <USBD_CtlError>
                  break;
 8009f44:	e041      	b.n	8009fca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da0b      	bge.n	8009f66 <USBD_StdEPReq+0x2b2>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	3304      	adds	r3, #4
 8009f64:	e00b      	b.n	8009f7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <USBD_StdEPReq+0x2d8>
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b80      	cmp	r3, #128	; 0x80
 8009f8a:	d103      	bne.n	8009f94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e00e      	b.n	8009fb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f004 f943 	bl	800e224 <USBD_LL_IsStallEP>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	e002      	b.n	8009fb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fbfb 	bl	800a7b4 <USBD_CtlSendData>
              break;
 8009fbe:	e004      	b.n	8009fca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fb85 	bl	800a6d2 <USBD_CtlError>
              break;
 8009fc8:	bf00      	nop
          }
          break;
 8009fca:	e004      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fb7f 	bl	800a6d2 <USBD_CtlError>
          break;
 8009fd4:	bf00      	nop
      }
      break;
 8009fd6:	e005      	b.n	8009fe4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fb79 	bl	800a6d2 <USBD_CtlError>
      break;
 8009fe0:	e000      	b.n	8009fe4 <USBD_StdEPReq+0x330>
      break;
 8009fe2:	bf00      	nop
  }

  return ret;
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	885b      	ldrh	r3, [r3, #2]
 800a00a:	0a1b      	lsrs	r3, r3, #8
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	2b0e      	cmp	r3, #14
 800a012:	f200 8152 	bhi.w	800a2ba <USBD_GetDescriptor+0x2ca>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <USBD_GetDescriptor+0x2c>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a08d 	.word	0x0800a08d
 800a020:	0800a0a5 	.word	0x0800a0a5
 800a024:	0800a0e5 	.word	0x0800a0e5
 800a028:	0800a2bb 	.word	0x0800a2bb
 800a02c:	0800a2bb 	.word	0x0800a2bb
 800a030:	0800a25b 	.word	0x0800a25b
 800a034:	0800a287 	.word	0x0800a287
 800a038:	0800a2bb 	.word	0x0800a2bb
 800a03c:	0800a2bb 	.word	0x0800a2bb
 800a040:	0800a2bb 	.word	0x0800a2bb
 800a044:	0800a2bb 	.word	0x0800a2bb
 800a048:	0800a2bb 	.word	0x0800a2bb
 800a04c:	0800a2bb 	.word	0x0800a2bb
 800a050:	0800a2bb 	.word	0x0800a2bb
 800a054:	0800a059 	.word	0x0800a059
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a07a:	e126      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb27 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	3301      	adds	r3, #1
 800a088:	72fb      	strb	r3, [r7, #11]
      break;
 800a08a:	e11e      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
      break;
 800a0a2:	e112      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7c1b      	ldrb	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	f107 0208 	add.w	r2, r7, #8
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4798      	blx	r3
 800a0bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0c6:	e100      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	f107 0208 	add.w	r2, r7, #8
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	2202      	movs	r2, #2
 800a0e0:	701a      	strb	r2, [r3, #0]
      break;
 800a0e2:	e0f2      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	f200 80ac 	bhi.w	800a248 <USBD_GetDescriptor+0x258>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_GetDescriptor+0x108>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a145 	.word	0x0800a145
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a1ad 	.word	0x0800a1ad
 800a108:	0800a1e1 	.word	0x0800a1e1
 800a10c:	0800a215 	.word	0x0800a215
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	4610      	mov	r0, r2
 800a12e:	4798      	blx	r3
 800a130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a132:	e091      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 facb 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
          break;
 800a142:	e089      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a166:	e077      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fab1 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
          break;
 800a176:	e06f      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19a:	e05d      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa97 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a1a4:	7afb      	ldrb	r3, [r7, #11]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1aa:	e055      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ce:	e043      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa7d 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1de:	e03b      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	7c12      	ldrb	r2, [r2, #16]
 800a1f8:	f107 0108 	add.w	r1, r7, #8
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3
 800a200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a202:	e029      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa63 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	3301      	adds	r3, #1
 800a210:	72fb      	strb	r3, [r7, #11]
          break;
 800a212:	e021      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	7c12      	ldrb	r2, [r2, #16]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a236:	e00f      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa49 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
          break;
 800a246:	e007      	b.n	800a258 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa41 	bl	800a6d2 <USBD_CtlError>
          err++;
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	3301      	adds	r3, #1
 800a254:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a256:	bf00      	nop
      }
      break;
 800a258:	e037      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c1b      	ldrb	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26a:	f107 0208 	add.w	r2, r7, #8
 800a26e:	4610      	mov	r0, r2
 800a270:	4798      	blx	r3
 800a272:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a274:	e029      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa2a 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	3301      	adds	r3, #1
 800a282:	72fb      	strb	r3, [r7, #11]
      break;
 800a284:	e021      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10d      	bne.n	800a2aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	f107 0208 	add.w	r2, r7, #8
 800a29a:	4610      	mov	r0, r2
 800a29c:	4798      	blx	r3
 800a29e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	2207      	movs	r2, #7
 800a2a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a8:	e00f      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa10 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b8:	e007      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fa08 	bl	800a6d2 <USBD_CtlError>
      err++;
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c8:	bf00      	nop
  }

  if (err != 0U)
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d11e      	bne.n	800a30e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	88db      	ldrh	r3, [r3, #6]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d016      	beq.n	800a306 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a2d8:	893b      	ldrh	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88da      	ldrh	r2, [r3, #6]
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	bf28      	it	cs
 800a2e8:	4613      	movcs	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa5d 	bl	800a7b4 <USBD_CtlSendData>
 800a2fa:	e009      	b.n	800a310 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f9e7 	bl	800a6d2 <USBD_CtlError>
 800a304:	e004      	b.n	800a310 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 faae 	bl	800a868 <USBD_CtlSendStatus>
 800a30c:	e000      	b.n	800a310 <USBD_GetDescriptor+0x320>
    return;
 800a30e:	bf00      	nop
  }
}
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop

0800a318 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	889b      	ldrh	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d131      	bne.n	800a38e <USBD_SetAddress+0x76>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	88db      	ldrh	r3, [r3, #6]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d12d      	bne.n	800a38e <USBD_SetAddress+0x76>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	885b      	ldrh	r3, [r3, #2]
 800a336:	2b7f      	cmp	r3, #127	; 0x7f
 800a338:	d829      	bhi.n	800a38e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d104      	bne.n	800a35c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f9bc 	bl	800a6d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35a:	e01d      	b.n	800a398 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7bfa      	ldrb	r2, [r7, #15]
 800a360:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f003 ff87 	bl	800e27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa7a 	bl	800a868 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a382:	e009      	b.n	800a398 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38c:	e004      	b.n	800a398 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f99e 	bl	800a6d2 <USBD_CtlError>
  }
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	885b      	ldrh	r3, [r3, #2]
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	4b4e      	ldr	r3, [pc, #312]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a3b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3b8:	4b4d      	ldr	r3, [pc, #308]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d905      	bls.n	800a3cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f985 	bl	800a6d2 <USBD_CtlError>
    return USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e08c      	b.n	800a4e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d002      	beq.n	800a3de <USBD_SetConfig+0x3e>
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d029      	beq.n	800a430 <USBD_SetConfig+0x90>
 800a3dc:	e075      	b.n	800a4ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3de:	4b44      	ldr	r3, [pc, #272]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d020      	beq.n	800a428 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3e6:	4b42      	ldr	r3, [pc, #264]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3f0:	4b3f      	ldr	r3, [pc, #252]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7fe ffbd 	bl	8009376 <USBD_SetClassConfig>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f962 	bl	800a6d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2202      	movs	r2, #2
 800a412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a416:	e065      	b.n	800a4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa25 	bl	800a868 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2203      	movs	r2, #3
 800a422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a426:	e05d      	b.n	800a4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa1d 	bl	800a868 <USBD_CtlSendStatus>
      break;
 800a42e:	e059      	b.n	800a4e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a430:	4b2f      	ldr	r3, [pc, #188]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d112      	bne.n	800a45e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a440:	4b2b      	ldr	r3, [pc, #172]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a44a:	4b29      	ldr	r3, [pc, #164]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7fe ffac 	bl	80093ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa06 	bl	800a868 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a45c:	e042      	b.n	800a4e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a45e:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d02a      	beq.n	800a4c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7fe ff9a 	bl	80093ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a47a:	4b1d      	ldr	r3, [pc, #116]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a484:	4b1a      	ldr	r3, [pc, #104]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe ff73 	bl	8009376 <USBD_SetClassConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00f      	beq.n	800a4ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f918 	bl	800a6d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7fe ff7f 	bl	80093ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4b8:	e014      	b.n	800a4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f9d4 	bl	800a868 <USBD_CtlSendStatus>
      break;
 800a4c0:	e010      	b.n	800a4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f9d0 	bl	800a868 <USBD_CtlSendStatus>
      break;
 800a4c8:	e00c      	b.n	800a4e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f900 	bl	800a6d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <USBD_SetConfig+0x150>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe ff68 	bl	80093ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e2:	bf00      	nop
  }

  return ret;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000662 	.word	0x20000662

0800a4f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	88db      	ldrh	r3, [r3, #6]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d004      	beq.n	800a510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8e2 	bl	800a6d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a50e:	e023      	b.n	800a558 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	dc02      	bgt.n	800a522 <USBD_GetConfig+0x2e>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dc03      	bgt.n	800a528 <USBD_GetConfig+0x34>
 800a520:	e015      	b.n	800a54e <USBD_GetConfig+0x5a>
 800a522:	2b03      	cmp	r3, #3
 800a524:	d00b      	beq.n	800a53e <USBD_GetConfig+0x4a>
 800a526:	e012      	b.n	800a54e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3308      	adds	r3, #8
 800a532:	2201      	movs	r2, #1
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f93c 	bl	800a7b4 <USBD_CtlSendData>
        break;
 800a53c:	e00c      	b.n	800a558 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3304      	adds	r3, #4
 800a542:	2201      	movs	r2, #1
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f934 	bl	800a7b4 <USBD_CtlSendData>
        break;
 800a54c:	e004      	b.n	800a558 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f8be 	bl	800a6d2 <USBD_CtlError>
        break;
 800a556:	bf00      	nop
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a570:	b2db      	uxtb	r3, r3
 800a572:	3b01      	subs	r3, #1
 800a574:	2b02      	cmp	r3, #2
 800a576:	d81e      	bhi.n	800a5b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	88db      	ldrh	r3, [r3, #6]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d004      	beq.n	800a58a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8a5 	bl	800a6d2 <USBD_CtlError>
        break;
 800a588:	e01a      	b.n	800a5c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f043 0202 	orr.w	r2, r3, #2
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f900 	bl	800a7b4 <USBD_CtlSendData>
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f88a 	bl	800a6d2 <USBD_CtlError>
      break;
 800a5be:	bf00      	nop
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	885b      	ldrh	r3, [r3, #2]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d107      	bne.n	800a5ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f940 	bl	800a868 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5e8:	e013      	b.n	800a612 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d10b      	bne.n	800a60a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	889b      	ldrh	r3, [r3, #4]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f930 	bl	800a868 <USBD_CtlSendStatus>
}
 800a608:	e003      	b.n	800a612 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f860 	bl	800a6d2 <USBD_CtlError>
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	3b01      	subs	r3, #1
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d80b      	bhi.n	800a64a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d10c      	bne.n	800a654 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f910 	bl	800a868 <USBD_CtlSendStatus>
      }
      break;
 800a648:	e004      	b.n	800a654 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f840 	bl	800a6d2 <USBD_CtlError>
      break;
 800a652:	e000      	b.n	800a656 <USBD_ClrFeature+0x3c>
      break;
 800a654:	bf00      	nop
  }
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	781a      	ldrb	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7ff fa17 	bl	8009abc <SWAPBYTE>
 800a68e:	4603      	mov	r3, r0
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff fa0a 	bl	8009abc <SWAPBYTE>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff f9fd 	bl	8009abc <SWAPBYTE>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	80da      	strh	r2, [r3, #6]
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6dc:	2180      	movs	r1, #128	; 0x80
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f003 fd62 	bl	800e1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f003 fd5e 	bl	800e1a8 <USBD_LL_StallEP>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d036      	beq.n	800a778 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f000 f836 	bl	800a780 <USBD_GetLen>
 800a714:	4603      	mov	r3, r0
 800a716:	3301      	adds	r3, #1
 800a718:	b29b      	uxth	r3, r3
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	4413      	add	r3, r2
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	7812      	ldrb	r2, [r2, #0]
 800a72c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	3301      	adds	r3, #1
 800a732:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	4413      	add	r3, r2
 800a73a:	2203      	movs	r2, #3
 800a73c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
 800a740:	3301      	adds	r3, #1
 800a742:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a744:	e013      	b.n	800a76e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	4413      	add	r3, r2
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	7812      	ldrb	r2, [r2, #0]
 800a750:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3301      	adds	r3, #1
 800a756:	613b      	str	r3, [r7, #16]
    idx++;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	3301      	adds	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
    idx++;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	3301      	adds	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1e7      	bne.n	800a746 <USBD_GetString+0x52>
 800a776:	e000      	b.n	800a77a <USBD_GetString+0x86>
    return;
 800a778:	bf00      	nop
  }
}
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a790:	e005      	b.n	800a79e <USBD_GetLen+0x1e>
  {
    len++;
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	3301      	adds	r3, #1
 800a796:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1f5      	bne.n	800a792 <USBD_GetLen+0x12>
  }

  return len;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f003 fd6d 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f003 fd5c 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2203      	movs	r2, #3
 800a81c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	2100      	movs	r1, #0
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f003 fd60 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	60b9      	str	r1, [r7, #8]
 800a850:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	2100      	movs	r1, #0
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f003 fd4f 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2204      	movs	r2, #4
 800a874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a878:	2300      	movs	r3, #0
 800a87a:	2200      	movs	r2, #0
 800a87c:	2100      	movs	r1, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f003 fd1b 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2205      	movs	r2, #5
 800a89a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f003 fd29 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a8b8:	bf00      	nop
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
	...

0800a8c4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ca:	f3ef 8305 	mrs	r3, IPSR
 800a8ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10f      	bne.n	800a8f6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8da:	607b      	str	r3, [r7, #4]
  return(result);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8e2:	f3ef 8311 	mrs	r3, BASEPRI
 800a8e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <osKernelInitialize+0x3a>
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <osKernelInitialize+0x64>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d103      	bne.n	800a8fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a8f6:	f06f 0305 	mvn.w	r3, #5
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e00c      	b.n	800a918 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <osKernelInitialize+0x64>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d105      	bne.n	800a912 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <osKernelInitialize+0x64>)
 800a908:	2201      	movs	r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	e002      	b.n	800a918 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a918:	68fb      	ldr	r3, [r7, #12]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20000664 	.word	0x20000664

0800a92c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a932:	f3ef 8305 	mrs	r3, IPSR
 800a936:	60bb      	str	r3, [r7, #8]
  return(result);
 800a938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10f      	bne.n	800a95e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a93e:	f3ef 8310 	mrs	r3, PRIMASK
 800a942:	607b      	str	r3, [r7, #4]
  return(result);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d105      	bne.n	800a956 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a94a:	f3ef 8311 	mrs	r3, BASEPRI
 800a94e:	603b      	str	r3, [r7, #0]
  return(result);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <osKernelStart+0x3a>
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <osKernelStart+0x68>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d103      	bne.n	800a966 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a95e:	f06f 0305 	mvn.w	r3, #5
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e010      	b.n	800a988 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a966:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <osKernelStart+0x68>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d109      	bne.n	800a982 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a96e:	f7ff ffa1 	bl	800a8b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a972:	4b08      	ldr	r3, [pc, #32]	; (800a994 <osKernelStart+0x68>)
 800a974:	2202      	movs	r2, #2
 800a976:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a978:	f001 fafe 	bl	800bf78 <vTaskStartScheduler>
      stat = osOK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e002      	b.n	800a988 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a986:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a988:	68fb      	ldr	r3, [r7, #12]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000664 	.word	0x20000664

0800a998 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b090      	sub	sp, #64	; 0x40
 800a99c:	af04      	add	r7, sp, #16
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a8:	f3ef 8305 	mrs	r3, IPSR
 800a9ac:	61fb      	str	r3, [r7, #28]
  return(result);
 800a9ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 8090 	bne.w	800aad6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d105      	bne.n	800a9ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a9c6:	617b      	str	r3, [r7, #20]
  return(result);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <osThreadNew+0x3e>
 800a9ce:	4b44      	ldr	r3, [pc, #272]	; (800aae0 <osThreadNew+0x148>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d07f      	beq.n	800aad6 <osThreadNew+0x13e>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d07c      	beq.n	800aad6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a9dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a9e2:	2318      	movs	r3, #24
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a9ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9ee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d045      	beq.n	800aa82 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <osThreadNew+0x6c>
        name = attr->name;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d008      	beq.n	800aa2a <osThreadNew+0x92>
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	2b38      	cmp	r3, #56	; 0x38
 800aa1c:	d805      	bhi.n	800aa2a <osThreadNew+0x92>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <osThreadNew+0x96>
        return (NULL);
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e054      	b.n	800aad8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	089b      	lsrs	r3, r3, #2
 800aa3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00e      	beq.n	800aa64 <osThreadNew+0xcc>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	2bbb      	cmp	r3, #187	; 0xbb
 800aa4c:	d90a      	bls.n	800aa64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d006      	beq.n	800aa64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <osThreadNew+0xcc>
        mem = 1;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	623b      	str	r3, [r7, #32]
 800aa62:	e010      	b.n	800aa86 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10c      	bne.n	800aa86 <osThreadNew+0xee>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d108      	bne.n	800aa86 <osThreadNew+0xee>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <osThreadNew+0xee>
          mem = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	623b      	str	r3, [r7, #32]
 800aa80:	e001      	b.n	800aa86 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d110      	bne.n	800aaae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa94:	9202      	str	r2, [sp, #8]
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f001 f872 	bl	800bb8c <xTaskCreateStatic>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	613b      	str	r3, [r7, #16]
 800aaac:	e013      	b.n	800aad6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d110      	bne.n	800aad6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	f107 0310 	add.w	r3, r7, #16
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f001 f8c3 	bl	800bc52 <xTaskCreate>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d001      	beq.n	800aad6 <osThreadNew+0x13e>
          hTask = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aad6:	693b      	ldr	r3, [r7, #16]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3730      	adds	r7, #48	; 0x30
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000664 	.word	0x20000664

0800aae4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaec:	f3ef 8305 	mrs	r3, IPSR
 800aaf0:	613b      	str	r3, [r7, #16]
  return(result);
 800aaf2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10f      	bne.n	800ab18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf8:	f3ef 8310 	mrs	r3, PRIMASK
 800aafc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab04:	f3ef 8311 	mrs	r3, BASEPRI
 800ab08:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d007      	beq.n	800ab20 <osDelay+0x3c>
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <osDelay+0x58>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d103      	bne.n	800ab20 <osDelay+0x3c>
    stat = osErrorISR;
 800ab18:	f06f 0305 	mvn.w	r3, #5
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e007      	b.n	800ab30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 f9ee 	bl	800bf0c <vTaskDelay>
    }
  }

  return (stat);
 800ab30:	697b      	ldr	r3, [r7, #20]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000664 	.word	0x20000664

0800ab40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af02      	add	r7, sp, #8
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab50:	f3ef 8305 	mrs	r3, IPSR
 800ab54:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d16f      	bne.n	800ac3c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab60:	617b      	str	r3, [r7, #20]
  return(result);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d105      	bne.n	800ab74 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab68:	f3ef 8311 	mrs	r3, BASEPRI
 800ab6c:	613b      	str	r3, [r7, #16]
  return(result);
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <osMessageQueueNew+0x3c>
 800ab74:	4b34      	ldr	r3, [pc, #208]	; (800ac48 <osMessageQueueNew+0x108>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d05f      	beq.n	800ac3c <osMessageQueueNew+0xfc>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d05c      	beq.n	800ac3c <osMessageQueueNew+0xfc>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d059      	beq.n	800ac3c <osMessageQueueNew+0xfc>
    mem = -1;
 800ab88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d029      	beq.n	800abe8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d012      	beq.n	800abc2 <osMessageQueueNew+0x82>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	2b4f      	cmp	r3, #79	; 0x4f
 800aba2:	d90e      	bls.n	800abc2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	695a      	ldr	r2, [r3, #20]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	429a      	cmp	r2, r3
 800abba:	d302      	bcc.n	800abc2 <osMessageQueueNew+0x82>
        mem = 1;
 800abbc:	2301      	movs	r3, #1
 800abbe:	623b      	str	r3, [r7, #32]
 800abc0:	e014      	b.n	800abec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d110      	bne.n	800abec <osMessageQueueNew+0xac>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10c      	bne.n	800abec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d108      	bne.n	800abec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d104      	bne.n	800abec <osMessageQueueNew+0xac>
          mem = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	623b      	str	r3, [r7, #32]
 800abe6:	e001      	b.n	800abec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d10b      	bne.n	800ac0a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	2100      	movs	r1, #0
 800abfc:	9100      	str	r1, [sp, #0]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 fa5b 	bl	800b0bc <xQueueGenericCreateStatic>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24
 800ac08:	e008      	b.n	800ac1c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d105      	bne.n	800ac1c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ac10:	2200      	movs	r2, #0
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 fad3 	bl	800b1c0 <xQueueGenericCreate>
 800ac1a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00c      	beq.n	800ac3c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <osMessageQueueNew+0xf0>
        name = attr->name;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	e001      	b.n	800ac34 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac34:	69f9      	ldr	r1, [r7, #28]
 800ac36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac38:	f000 ff4a 	bl	800bad0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3728      	adds	r7, #40	; 0x28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000664 	.word	0x20000664

0800ac4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08a      	sub	sp, #40	; 0x28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac64:	f3ef 8305 	mrs	r3, IPSR
 800ac68:	61fb      	str	r3, [r7, #28]
  return(result);
 800ac6a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10f      	bne.n	800ac90 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac70:	f3ef 8310 	mrs	r3, PRIMASK
 800ac74:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d105      	bne.n	800ac88 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac7c:	f3ef 8311 	mrs	r3, BASEPRI
 800ac80:	617b      	str	r3, [r7, #20]
  return(result);
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d02c      	beq.n	800ace2 <osMessageQueuePut+0x96>
 800ac88:	4b28      	ldr	r3, [pc, #160]	; (800ad2c <osMessageQueuePut+0xe0>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d128      	bne.n	800ace2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d005      	beq.n	800aca2 <osMessageQueuePut+0x56>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <osMessageQueuePut+0x56>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800aca2:	f06f 0303 	mvn.w	r3, #3
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aca8:	e039      	b.n	800ad1e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800acae:	f107 0210 	add.w	r2, r7, #16
 800acb2:	2300      	movs	r3, #0
 800acb4:	68b9      	ldr	r1, [r7, #8]
 800acb6:	6a38      	ldr	r0, [r7, #32]
 800acb8:	f000 fbee 	bl	800b498 <xQueueGenericSendFromISR>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d003      	beq.n	800acca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800acc2:	f06f 0302 	mvn.w	r3, #2
 800acc6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800acc8:	e029      	b.n	800ad1e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d026      	beq.n	800ad1e <osMessageQueuePut+0xd2>
 800acd0:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <osMessageQueuePut+0xe4>)
 800acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ace0:	e01d      	b.n	800ad1e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <osMessageQueuePut+0xa2>
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d103      	bne.n	800acf6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800acee:	f06f 0303 	mvn.w	r3, #3
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
 800acf4:	e014      	b.n	800ad20 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800acf6:	2300      	movs	r3, #0
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	6a38      	ldr	r0, [r7, #32]
 800acfe:	f000 fac5 	bl	800b28c <xQueueGenericSend>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d00b      	beq.n	800ad20 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ad0e:	f06f 0301 	mvn.w	r3, #1
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
 800ad14:	e004      	b.n	800ad20 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ad16:	f06f 0302 	mvn.w	r3, #2
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1c:	e000      	b.n	800ad20 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3728      	adds	r7, #40	; 0x28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000664 	.word	0x20000664
 800ad30:	e000ed04 	.word	0xe000ed04

0800ad34 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad4a:	f3ef 8305 	mrs	r3, IPSR
 800ad4e:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad50:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10f      	bne.n	800ad76 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad56:	f3ef 8310 	mrs	r3, PRIMASK
 800ad5a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad62:	f3ef 8311 	mrs	r3, BASEPRI
 800ad66:	617b      	str	r3, [r7, #20]
  return(result);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d02c      	beq.n	800adc8 <osMessageQueueGet+0x94>
 800ad6e:	4b28      	ldr	r3, [pc, #160]	; (800ae10 <osMessageQueueGet+0xdc>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d128      	bne.n	800adc8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <osMessageQueueGet+0x54>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <osMessageQueueGet+0x54>
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ad88:	f06f 0303 	mvn.w	r3, #3
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad8e:	e038      	b.n	800ae02 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ad94:	f107 0310 	add.w	r3, r7, #16
 800ad98:	461a      	mov	r2, r3
 800ad9a:	68b9      	ldr	r1, [r7, #8]
 800ad9c:	6a38      	ldr	r0, [r7, #32]
 800ad9e:	f000 fd01 	bl	800b7a4 <xQueueReceiveFromISR>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d003      	beq.n	800adb0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ada8:	f06f 0302 	mvn.w	r3, #2
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adae:	e028      	b.n	800ae02 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d025      	beq.n	800ae02 <osMessageQueueGet+0xce>
 800adb6:	4b17      	ldr	r3, [pc, #92]	; (800ae14 <osMessageQueueGet+0xe0>)
 800adb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adc6:	e01c      	b.n	800ae02 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <osMessageQueueGet+0xa0>
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d103      	bne.n	800addc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800add4:	f06f 0303 	mvn.w	r3, #3
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
 800adda:	e013      	b.n	800ae04 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	6a38      	ldr	r0, [r7, #32]
 800ade2:	f000 fbf9 	bl	800b5d8 <xQueueReceive>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d00b      	beq.n	800ae04 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800adf2:	f06f 0301 	mvn.w	r3, #1
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
 800adf8:	e004      	b.n	800ae04 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800adfa:	f06f 0302 	mvn.w	r3, #2
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ae00:	e000      	b.n	800ae04 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae02:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3728      	adds	r7, #40	; 0x28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20000664 	.word	0x20000664
 800ae14:	e000ed04 	.word	0xe000ed04

0800ae18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4a07      	ldr	r2, [pc, #28]	; (800ae44 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	4a06      	ldr	r2, [pc, #24]	; (800ae48 <vApplicationGetIdleTaskMemory+0x30>)
 800ae2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae36:	601a      	str	r2, [r3, #0]
}
 800ae38:	bf00      	nop
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20000668 	.word	0x20000668
 800ae48:	20000724 	.word	0x20000724

0800ae4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4a07      	ldr	r2, [pc, #28]	; (800ae78 <vApplicationGetTimerTaskMemory+0x2c>)
 800ae5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	4a06      	ldr	r2, [pc, #24]	; (800ae7c <vApplicationGetTimerTaskMemory+0x30>)
 800ae62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae6a:	601a      	str	r2, [r3, #0]
}
 800ae6c:	bf00      	nop
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	20000b24 	.word	0x20000b24
 800ae7c:	20000be0 	.word	0x20000be0

0800ae80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f103 0208 	add.w	r2, r3, #8
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f103 0208 	add.w	r2, r3, #8
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f103 0208 	add.w	r2, r3, #8
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aece:	bf00      	nop
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aeda:	b480      	push	{r7}
 800aedc:	b085      	sub	sp, #20
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
}
 800af16:	bf00      	nop
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af22:	b480      	push	{r7}
 800af24:	b085      	sub	sp, #20
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af38:	d103      	bne.n	800af42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	e00c      	b.n	800af5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3308      	adds	r3, #8
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	e002      	b.n	800af50 <vListInsert+0x2e>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d2f6      	bcs.n	800af4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	601a      	str	r2, [r3, #0]
}
 800af88:	bf00      	nop
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6892      	ldr	r2, [r2, #8]
 800afaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6852      	ldr	r2, [r2, #4]
 800afb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d103      	bne.n	800afc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1e5a      	subs	r2, r3, #1
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10c      	bne.n	800b016 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	b672      	cpsid	i
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	b662      	cpsie	i
 800b010:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b016:	f002 f971 	bl	800d2fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	68f9      	ldr	r1, [r7, #12]
 800b024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b026:	fb01 f303 	mul.w	r3, r1, r3
 800b02a:	441a      	add	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b046:	3b01      	subs	r3, #1
 800b048:	68f9      	ldr	r1, [r7, #12]
 800b04a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	441a      	add	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	22ff      	movs	r2, #255	; 0xff
 800b05a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	22ff      	movs	r2, #255	; 0xff
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d114      	bne.n	800b096 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d01a      	beq.n	800b0aa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3310      	adds	r3, #16
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 fa25 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d012      	beq.n	800b0aa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <xQueueGenericReset+0xd0>)
 800b086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	e009      	b.n	800b0aa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3310      	adds	r3, #16
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fef0 	bl	800ae80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3324      	adds	r3, #36	; 0x24
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff feeb 	bl	800ae80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0aa:	f002 f95b 	bl	800d364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0ae:	2301      	movs	r3, #1
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	e000ed04 	.word	0xe000ed04

0800b0bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08e      	sub	sp, #56	; 0x38
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10c      	bne.n	800b0ea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	b672      	cpsid	i
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	b662      	cpsie	i
 800b0e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10c      	bne.n	800b10a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	b672      	cpsid	i
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	b662      	cpsie	i
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <xQueueGenericCreateStatic+0x5a>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <xQueueGenericCreateStatic+0x5e>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <xQueueGenericCreateStatic+0x60>
 800b11a:	2300      	movs	r3, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10c      	bne.n	800b13a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	b672      	cpsid	i
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	b662      	cpsie	i
 800b134:	623b      	str	r3, [r7, #32]
}
 800b136:	bf00      	nop
 800b138:	e7fe      	b.n	800b138 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <xQueueGenericCreateStatic+0x8a>
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <xQueueGenericCreateStatic+0x8e>
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <xQueueGenericCreateStatic+0x90>
 800b14a:	2300      	movs	r3, #0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10c      	bne.n	800b16a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	b672      	cpsid	i
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	b662      	cpsie	i
 800b164:	61fb      	str	r3, [r7, #28]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b16a:	2350      	movs	r3, #80	; 0x50
 800b16c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b50      	cmp	r3, #80	; 0x50
 800b172:	d00c      	beq.n	800b18e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b178:	b672      	cpsid	i
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	b662      	cpsie	i
 800b188:	61bb      	str	r3, [r7, #24]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b18e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00d      	beq.n	800b1b6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f847 	bl	800b244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3730      	adds	r7, #48	; 0x30
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	; 0x28
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10c      	bne.n	800b1ee <xQueueGenericCreate+0x2e>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	b672      	cpsid	i
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	b662      	cpsie	i
 800b1e8:	613b      	str	r3, [r7, #16]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61fb      	str	r3, [r7, #28]
 800b1f8:	e004      	b.n	800b204 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	fb02 f303 	mul.w	r3, r2, r3
 800b202:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	3350      	adds	r3, #80	; 0x50
 800b208:	4618      	mov	r0, r3
 800b20a:	f002 f9a3 	bl	800d554 <pvPortMalloc>
 800b20e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d011      	beq.n	800b23a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	3350      	adds	r3, #80	; 0x50
 800b21e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b228:	79fa      	ldrb	r2, [r7, #7]
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	4613      	mov	r3, r2
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f805 	bl	800b244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b23a:	69bb      	ldr	r3, [r7, #24]
	}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3720      	adds	r7, #32
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
 800b250:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d103      	bne.n	800b260 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e002      	b.n	800b266 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b272:	2101      	movs	r1, #1
 800b274:	69b8      	ldr	r0, [r7, #24]
 800b276:	f7ff feb7 	bl	800afe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	78fa      	ldrb	r2, [r7, #3]
 800b27e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08e      	sub	sp, #56	; 0x38
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b29a:	2300      	movs	r3, #0
 800b29c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10c      	bne.n	800b2c2 <xQueueGenericSend+0x36>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	b672      	cpsid	i
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	b662      	cpsie	i
 800b2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d103      	bne.n	800b2d0 <xQueueGenericSend+0x44>
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <xQueueGenericSend+0x48>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e000      	b.n	800b2d6 <xQueueGenericSend+0x4a>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10c      	bne.n	800b2f4 <xQueueGenericSend+0x68>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	b672      	cpsid	i
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	b662      	cpsie	i
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d103      	bne.n	800b302 <xQueueGenericSend+0x76>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d101      	bne.n	800b306 <xQueueGenericSend+0x7a>
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <xQueueGenericSend+0x7c>
 800b306:	2300      	movs	r3, #0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10c      	bne.n	800b326 <xQueueGenericSend+0x9a>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	b672      	cpsid	i
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	b662      	cpsie	i
 800b320:	623b      	str	r3, [r7, #32]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b326:	f001 fa99 	bl	800c85c <xTaskGetSchedulerState>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueGenericSend+0xaa>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueGenericSend+0xae>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericSend+0xb0>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10c      	bne.n	800b35a <xQueueGenericSend+0xce>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	b672      	cpsid	i
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	b662      	cpsie	i
 800b354:	61fb      	str	r3, [r7, #28]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b35a:	f001 ffcf 	bl	800d2fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b366:	429a      	cmp	r2, r3
 800b368:	d302      	bcc.n	800b370 <xQueueGenericSend+0xe4>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d129      	bne.n	800b3c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b376:	f000 fa9b 	bl	800b8b0 <prvCopyDataToQueue>
 800b37a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	d010      	beq.n	800b3a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	3324      	adds	r3, #36	; 0x24
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 f89d 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d013      	beq.n	800b3bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b394:	4b3f      	ldr	r3, [pc, #252]	; (800b494 <xQueueGenericSend+0x208>)
 800b396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	e00a      	b.n	800b3bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3ac:	4b39      	ldr	r3, [pc, #228]	; (800b494 <xQueueGenericSend+0x208>)
 800b3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3bc:	f001 ffd2 	bl	800d364 <vPortExitCritical>
				return pdPASS;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e063      	b.n	800b48c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d103      	bne.n	800b3d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3ca:	f001 ffcb 	bl	800d364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e05c      	b.n	800b48c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3d8:	f107 0314 	add.w	r3, r7, #20
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 f8d9 	bl	800c594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3e6:	f001 ffbd 	bl	800d364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ea:	f000 fe39 	bl	800c060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3ee:	f001 ff85 	bl	800d2fc <vPortEnterCritical>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f8:	b25b      	sxtb	r3, r3
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3fe:	d103      	bne.n	800b408 <xQueueGenericSend+0x17c>
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40e:	b25b      	sxtb	r3, r3
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b414:	d103      	bne.n	800b41e <xQueueGenericSend+0x192>
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b41e:	f001 ffa1 	bl	800d364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b422:	1d3a      	adds	r2, r7, #4
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	4611      	mov	r1, r2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 f8c8 	bl	800c5c0 <xTaskCheckForTimeOut>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d124      	bne.n	800b480 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b438:	f000 fb32 	bl	800baa0 <prvIsQueueFull>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d018      	beq.n	800b474 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	3310      	adds	r3, #16
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 ffe8 	bl	800c420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b452:	f000 fabd 	bl	800b9d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b456:	f000 fe11 	bl	800c07c <xTaskResumeAll>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f47f af7c 	bne.w	800b35a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <xQueueGenericSend+0x208>)
 800b464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	e772      	b.n	800b35a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b476:	f000 faab 	bl	800b9d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b47a:	f000 fdff 	bl	800c07c <xTaskResumeAll>
 800b47e:	e76c      	b.n	800b35a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b482:	f000 faa5 	bl	800b9d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b486:	f000 fdf9 	bl	800c07c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b48a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3738      	adds	r7, #56	; 0x38
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	; 0x38
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10c      	bne.n	800b4ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	b672      	cpsid	i
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	b662      	cpsie	i
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d103      	bne.n	800b4d8 <xQueueGenericSendFromISR+0x40>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <xQueueGenericSendFromISR+0x44>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e000      	b.n	800b4de <xQueueGenericSendFromISR+0x46>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10c      	bne.n	800b4fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	b672      	cpsid	i
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	b662      	cpsie	i
 800b4f6:	623b      	str	r3, [r7, #32]
}
 800b4f8:	bf00      	nop
 800b4fa:	e7fe      	b.n	800b4fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d103      	bne.n	800b50a <xQueueGenericSendFromISR+0x72>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <xQueueGenericSendFromISR+0x76>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e000      	b.n	800b510 <xQueueGenericSendFromISR+0x78>
 800b50e:	2300      	movs	r3, #0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10c      	bne.n	800b52e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	b672      	cpsid	i
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	b662      	cpsie	i
 800b528:	61fb      	str	r3, [r7, #28]
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b52e:	f001 ffcd 	bl	800d4cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b532:	f3ef 8211 	mrs	r2, BASEPRI
 800b536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53a:	b672      	cpsid	i
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	b662      	cpsie	i
 800b54a:	61ba      	str	r2, [r7, #24]
 800b54c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b54e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d302      	bcc.n	800b564 <xQueueGenericSendFromISR+0xcc>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d12c      	bne.n	800b5be <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b574:	f000 f99c 	bl	800b8b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b578:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b580:	d112      	bne.n	800b5a8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d016      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	3324      	adds	r3, #36	; 0x24
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 ff9a 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00e      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e007      	b.n	800b5b8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	b25a      	sxtb	r2, r3
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b5bc:	e001      	b.n	800b5c2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3738      	adds	r7, #56	; 0x38
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08c      	sub	sp, #48	; 0x30
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10c      	bne.n	800b60c <xQueueReceive+0x34>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f6:	b672      	cpsid	i
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	b662      	cpsie	i
 800b606:	623b      	str	r3, [r7, #32]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d103      	bne.n	800b61a <xQueueReceive+0x42>
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <xQueueReceive+0x46>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <xQueueReceive+0x48>
 800b61e:	2300      	movs	r3, #0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10c      	bne.n	800b63e <xQueueReceive+0x66>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	b672      	cpsid	i
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	b662      	cpsie	i
 800b638:	61fb      	str	r3, [r7, #28]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b63e:	f001 f90d 	bl	800c85c <xTaskGetSchedulerState>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d102      	bne.n	800b64e <xQueueReceive+0x76>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <xQueueReceive+0x7a>
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <xQueueReceive+0x7c>
 800b652:	2300      	movs	r3, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10c      	bne.n	800b672 <xQueueReceive+0x9a>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	b672      	cpsid	i
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	b662      	cpsie	i
 800b66c:	61bb      	str	r3, [r7, #24]
}
 800b66e:	bf00      	nop
 800b670:	e7fe      	b.n	800b670 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b672:	f001 fe43 	bl	800d2fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01f      	beq.n	800b6c2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b686:	f000 f97d 	bl	800b984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	1e5a      	subs	r2, r3, #1
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00f      	beq.n	800b6ba <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	3310      	adds	r3, #16
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 ff12 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6aa:	4b3d      	ldr	r3, [pc, #244]	; (800b7a0 <xQueueReceive+0x1c8>)
 800b6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6ba:	f001 fe53 	bl	800d364 <vPortExitCritical>
				return pdPASS;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e069      	b.n	800b796 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6c8:	f001 fe4c 	bl	800d364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e062      	b.n	800b796 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6d6:	f107 0310 	add.w	r3, r7, #16
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 ff5a 	bl	800c594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6e4:	f001 fe3e 	bl	800d364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6e8:	f000 fcba 	bl	800c060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ec:	f001 fe06 	bl	800d2fc <vPortEnterCritical>
 800b6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6f6:	b25b      	sxtb	r3, r3
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6fc:	d103      	bne.n	800b706 <xQueueReceive+0x12e>
 800b6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b712:	d103      	bne.n	800b71c <xQueueReceive+0x144>
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b71c:	f001 fe22 	bl	800d364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b720:	1d3a      	adds	r2, r7, #4
 800b722:	f107 0310 	add.w	r3, r7, #16
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 ff49 	bl	800c5c0 <xTaskCheckForTimeOut>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d123      	bne.n	800b77c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b736:	f000 f99d 	bl	800ba74 <prvIsQueueEmpty>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d017      	beq.n	800b770 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fe69 	bl	800c420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b750:	f000 f93e 	bl	800b9d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b754:	f000 fc92 	bl	800c07c <xTaskResumeAll>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d189      	bne.n	800b672 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b75e:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <xQueueReceive+0x1c8>)
 800b760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	e780      	b.n	800b672 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b772:	f000 f92d 	bl	800b9d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b776:	f000 fc81 	bl	800c07c <xTaskResumeAll>
 800b77a:	e77a      	b.n	800b672 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77e:	f000 f927 	bl	800b9d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b782:	f000 fc7b 	bl	800c07c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b788:	f000 f974 	bl	800ba74 <prvIsQueueEmpty>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f43f af6f 	beq.w	800b672 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b794:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b796:	4618      	mov	r0, r3
 800b798:	3730      	adds	r7, #48	; 0x30
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08e      	sub	sp, #56	; 0x38
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10c      	bne.n	800b7d4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	b672      	cpsid	i
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	b662      	cpsie	i
 800b7ce:	623b      	str	r3, [r7, #32]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d103      	bne.n	800b7e2 <xQueueReceiveFromISR+0x3e>
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <xQueueReceiveFromISR+0x42>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e000      	b.n	800b7e8 <xQueueReceiveFromISR+0x44>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10c      	bne.n	800b806 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	b672      	cpsid	i
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	b662      	cpsie	i
 800b800:	61fb      	str	r3, [r7, #28]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b806:	f001 fe61 	bl	800d4cc <vPortValidateInterruptPriority>
	__asm volatile
 800b80a:	f3ef 8211 	mrs	r2, BASEPRI
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	b672      	cpsid	i
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	b662      	cpsie	i
 800b822:	61ba      	str	r2, [r7, #24]
 800b824:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b826:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	2b00      	cmp	r3, #0
 800b834:	d02f      	beq.n	800b896 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b840:	68b9      	ldr	r1, [r7, #8]
 800b842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b844:	f000 f89e 	bl	800b984 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b850:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b858:	d112      	bne.n	800b880 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d016      	beq.n	800b890 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	3310      	adds	r3, #16
 800b866:	4618      	mov	r0, r3
 800b868:	f000 fe2e 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00e      	beq.n	800b890 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e007      	b.n	800b890 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b884:	3301      	adds	r3, #1
 800b886:	b2db      	uxtb	r3, r3
 800b888:	b25a      	sxtb	r2, r3
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b890:	2301      	movs	r3, #1
 800b892:	637b      	str	r3, [r7, #52]	; 0x34
 800b894:	e001      	b.n	800b89a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b896:	2300      	movs	r3, #0
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f383 8811 	msr	BASEPRI, r3
}
 800b8a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3738      	adds	r7, #56	; 0x38
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10d      	bne.n	800b8ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d14d      	bne.n	800b972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 ffdc 	bl	800c898 <xTaskPriorityDisinherit>
 800b8e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	609a      	str	r2, [r3, #8]
 800b8e8:	e043      	b.n	800b972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d119      	bne.n	800b924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6858      	ldr	r0, [r3, #4]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	f002 fdee 	bl	800e4dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b908:	441a      	add	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	429a      	cmp	r2, r3
 800b918:	d32b      	bcc.n	800b972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	605a      	str	r2, [r3, #4]
 800b922:	e026      	b.n	800b972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	68d8      	ldr	r0, [r3, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	461a      	mov	r2, r3
 800b92e:	68b9      	ldr	r1, [r7, #8]
 800b930:	f002 fdd4 	bl	800e4dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93c:	425b      	negs	r3, r3
 800b93e:	441a      	add	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d207      	bcs.n	800b960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b958:	425b      	negs	r3, r3
 800b95a:	441a      	add	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d105      	bne.n	800b972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	3b01      	subs	r3, #1
 800b970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b97a:	697b      	ldr	r3, [r7, #20]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	441a      	add	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d303      	bcc.n	800b9b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68d9      	ldr	r1, [r3, #12]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6838      	ldr	r0, [r7, #0]
 800b9c4:	f002 fd8a 	bl	800e4dc <memcpy>
	}
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9d8:	f001 fc90 	bl	800d2fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9e4:	e011      	b.n	800ba0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d012      	beq.n	800ba14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3324      	adds	r3, #36	; 0x24
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 fd68 	bl	800c4c8 <xTaskRemoveFromEventList>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9fe:	f000 fe45 	bl	800c68c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dce9      	bgt.n	800b9e6 <prvUnlockQueue+0x16>
 800ba12:	e000      	b.n	800ba16 <prvUnlockQueue+0x46>
					break;
 800ba14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	22ff      	movs	r2, #255	; 0xff
 800ba1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba1e:	f001 fca1 	bl	800d364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba22:	f001 fc6b 	bl	800d2fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba2e:	e011      	b.n	800ba54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d012      	beq.n	800ba5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 fd43 	bl	800c4c8 <xTaskRemoveFromEventList>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba48:	f000 fe20 	bl	800c68c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dce9      	bgt.n	800ba30 <prvUnlockQueue+0x60>
 800ba5c:	e000      	b.n	800ba60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	22ff      	movs	r2, #255	; 0xff
 800ba64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba68:	f001 fc7c 	bl	800d364 <vPortExitCritical>
}
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba7c:	f001 fc3e 	bl	800d2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	e001      	b.n	800ba92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba92:	f001 fc67 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800ba96:	68fb      	ldr	r3, [r7, #12]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800baa8:	f001 fc28 	bl	800d2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d102      	bne.n	800babe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bab8:	2301      	movs	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	e001      	b.n	800bac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bac2:	f001 fc4f 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800bac6:	68fb      	ldr	r3, [r7, #12]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e014      	b.n	800bb0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bae0:	4a0f      	ldr	r2, [pc, #60]	; (800bb20 <vQueueAddToRegistry+0x50>)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10b      	bne.n	800bb04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800baec:	490c      	ldr	r1, [pc, #48]	; (800bb20 <vQueueAddToRegistry+0x50>)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800baf6:	4a0a      	ldr	r2, [pc, #40]	; (800bb20 <vQueueAddToRegistry+0x50>)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	4413      	add	r3, r2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb02:	e006      	b.n	800bb12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3301      	adds	r3, #1
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b07      	cmp	r3, #7
 800bb0e:	d9e7      	bls.n	800bae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	200013e0 	.word	0x200013e0

0800bb24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb34:	f001 fbe2 	bl	800d2fc <vPortEnterCritical>
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb3e:	b25b      	sxtb	r3, r3
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb44:	d103      	bne.n	800bb4e <vQueueWaitForMessageRestricted+0x2a>
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb54:	b25b      	sxtb	r3, r3
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb5a:	d103      	bne.n	800bb64 <vQueueWaitForMessageRestricted+0x40>
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb64:	f001 fbfe 	bl	800d364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	3324      	adds	r3, #36	; 0x24
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fc77 	bl	800c46c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7ff ff26 	bl	800b9d0 <prvUnlockQueue>
	}
 800bb84:	bf00      	nop
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08e      	sub	sp, #56	; 0x38
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10c      	bne.n	800bbba <xTaskCreateStatic+0x2e>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	b672      	cpsid	i
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	b662      	cpsie	i
 800bbb4:	623b      	str	r3, [r7, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10c      	bne.n	800bbda <xTaskCreateStatic+0x4e>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	b672      	cpsid	i
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	b662      	cpsie	i
 800bbd4:	61fb      	str	r3, [r7, #28]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbda:	23bc      	movs	r3, #188	; 0xbc
 800bbdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2bbc      	cmp	r3, #188	; 0xbc
 800bbe2:	d00c      	beq.n	800bbfe <xTaskCreateStatic+0x72>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	b672      	cpsid	i
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	b662      	cpsie	i
 800bbf8:	61bb      	str	r3, [r7, #24]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d01e      	beq.n	800bc44 <xTaskCreateStatic+0xb8>
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d01b      	beq.n	800bc44 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	2202      	movs	r2, #2
 800bc1a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	9302      	str	r3, [sp, #8]
 800bc26:	f107 0314 	add.w	r3, r7, #20
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f850 	bl	800bcdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc3e:	f000 f8f5 	bl	800be2c <prvAddNewTaskToReadyList>
 800bc42:	e001      	b.n	800bc48 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc48:	697b      	ldr	r3, [r7, #20]
	}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3728      	adds	r7, #40	; 0x28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b08c      	sub	sp, #48	; 0x30
 800bc56:	af04      	add	r7, sp, #16
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 fc74 	bl	800d554 <pvPortMalloc>
 800bc6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00e      	beq.n	800bc92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc74:	20bc      	movs	r0, #188	; 0xbc
 800bc76:	f001 fc6d 	bl	800d554 <pvPortMalloc>
 800bc7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	631a      	str	r2, [r3, #48]	; 0x30
 800bc88:	e005      	b.n	800bc96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc8a:	6978      	ldr	r0, [r7, #20]
 800bc8c:	f001 fd2c 	bl	800d6e8 <vPortFree>
 800bc90:	e001      	b.n	800bc96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d017      	beq.n	800bccc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bca4:	88fa      	ldrh	r2, [r7, #6]
 800bca6:	2300      	movs	r3, #0
 800bca8:	9303      	str	r3, [sp, #12]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	9302      	str	r3, [sp, #8]
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f80e 	bl	800bcdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcc0:	69f8      	ldr	r0, [r7, #28]
 800bcc2:	f000 f8b3 	bl	800be2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	61bb      	str	r3, [r7, #24]
 800bcca:	e002      	b.n	800bcd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
	}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3720      	adds	r7, #32
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	21a5      	movs	r1, #165	; 0xa5
 800bcf6:	f002 fbff 	bl	800e4f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd04:	440b      	add	r3, r1
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	f023 0307 	bic.w	r3, r3, #7
 800bd12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00c      	beq.n	800bd38 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	b672      	cpsid	i
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	b662      	cpsie	i
 800bd32:	617b      	str	r3, [r7, #20]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d01f      	beq.n	800bd7e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	e012      	b.n	800bd6a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
 800bd4a:	7819      	ldrb	r1, [r3, #0]
 800bd4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	4413      	add	r3, r2
 800bd52:	3334      	adds	r3, #52	; 0x34
 800bd54:	460a      	mov	r2, r1
 800bd56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d006      	beq.n	800bd72 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	3301      	adds	r3, #1
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	2b0f      	cmp	r3, #15
 800bd6e:	d9e9      	bls.n	800bd44 <prvInitialiseNewTask+0x68>
 800bd70:	e000      	b.n	800bd74 <prvInitialiseNewTask+0x98>
			{
				break;
 800bd72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd7c:	e003      	b.n	800bd86 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	2b37      	cmp	r3, #55	; 0x37
 800bd8a:	d901      	bls.n	800bd90 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd8c:	2337      	movs	r3, #55	; 0x37
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2200      	movs	r2, #0
 800bda0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff f88a 	bl	800aec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	3318      	adds	r3, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff f885 	bl	800aec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	3354      	adds	r3, #84	; 0x54
 800bde0:	2260      	movs	r2, #96	; 0x60
 800bde2:	2100      	movs	r1, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f002 fb87 	bl	800e4f8 <memset>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <prvInitialiseNewTask+0x144>)
 800bdee:	659a      	str	r2, [r3, #88]	; 0x58
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	4a0c      	ldr	r2, [pc, #48]	; (800be24 <prvInitialiseNewTask+0x148>)
 800bdf4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	4a0b      	ldr	r2, [pc, #44]	; (800be28 <prvInitialiseNewTask+0x14c>)
 800bdfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	68f9      	ldr	r1, [r7, #12]
 800be00:	69b8      	ldr	r0, [r7, #24]
 800be02:	f001 f96b 	bl	800d0dc <pxPortInitialiseStack>
 800be06:	4602      	mov	r2, r0
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be18:	bf00      	nop
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	0800e97c 	.word	0x0800e97c
 800be24:	0800e99c 	.word	0x0800e99c
 800be28:	0800e95c 	.word	0x0800e95c

0800be2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be34:	f001 fa62 	bl	800d2fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be38:	4b2d      	ldr	r3, [pc, #180]	; (800bef0 <prvAddNewTaskToReadyList+0xc4>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	4a2c      	ldr	r2, [pc, #176]	; (800bef0 <prvAddNewTaskToReadyList+0xc4>)
 800be40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be42:	4b2c      	ldr	r3, [pc, #176]	; (800bef4 <prvAddNewTaskToReadyList+0xc8>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be4a:	4a2a      	ldr	r2, [pc, #168]	; (800bef4 <prvAddNewTaskToReadyList+0xc8>)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be50:	4b27      	ldr	r3, [pc, #156]	; (800bef0 <prvAddNewTaskToReadyList+0xc4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d110      	bne.n	800be7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be58:	f000 fc3c 	bl	800c6d4 <prvInitialiseTaskLists>
 800be5c:	e00d      	b.n	800be7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be5e:	4b26      	ldr	r3, [pc, #152]	; (800bef8 <prvAddNewTaskToReadyList+0xcc>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d109      	bne.n	800be7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <prvAddNewTaskToReadyList+0xc8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	429a      	cmp	r2, r3
 800be72:	d802      	bhi.n	800be7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be74:	4a1f      	ldr	r2, [pc, #124]	; (800bef4 <prvAddNewTaskToReadyList+0xc8>)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be7a:	4b20      	ldr	r3, [pc, #128]	; (800befc <prvAddNewTaskToReadyList+0xd0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3301      	adds	r3, #1
 800be80:	4a1e      	ldr	r2, [pc, #120]	; (800befc <prvAddNewTaskToReadyList+0xd0>)
 800be82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be84:	4b1d      	ldr	r3, [pc, #116]	; (800befc <prvAddNewTaskToReadyList+0xd0>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be90:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <prvAddNewTaskToReadyList+0xd4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d903      	bls.n	800bea0 <prvAddNewTaskToReadyList+0x74>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9c:	4a18      	ldr	r2, [pc, #96]	; (800bf00 <prvAddNewTaskToReadyList+0xd4>)
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4a15      	ldr	r2, [pc, #84]	; (800bf04 <prvAddNewTaskToReadyList+0xd8>)
 800beae:	441a      	add	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	f7ff f80f 	bl	800aeda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bebc:	f001 fa52 	bl	800d364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bec0:	4b0d      	ldr	r3, [pc, #52]	; (800bef8 <prvAddNewTaskToReadyList+0xcc>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00e      	beq.n	800bee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bec8:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <prvAddNewTaskToReadyList+0xc8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d207      	bcs.n	800bee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bed6:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <prvAddNewTaskToReadyList+0xdc>)
 800bed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bee6:	bf00      	nop
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200018f4 	.word	0x200018f4
 800bef4:	20001420 	.word	0x20001420
 800bef8:	20001900 	.word	0x20001900
 800befc:	20001910 	.word	0x20001910
 800bf00:	200018fc 	.word	0x200018fc
 800bf04:	20001424 	.word	0x20001424
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d019      	beq.n	800bf52 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf1e:	4b14      	ldr	r3, [pc, #80]	; (800bf70 <vTaskDelay+0x64>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00c      	beq.n	800bf40 <vTaskDelay+0x34>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	b672      	cpsid	i
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	b662      	cpsie	i
 800bf3a:	60bb      	str	r3, [r7, #8]
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bf40:	f000 f88e 	bl	800c060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf44:	2100      	movs	r1, #0
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fd18 	bl	800c97c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf4c:	f000 f896 	bl	800c07c <xTaskResumeAll>
 800bf50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d107      	bne.n	800bf68 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <vTaskDelay+0x68>)
 800bf5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf68:	bf00      	nop
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	2000191c 	.word	0x2000191c
 800bf74:	e000ed04 	.word	0xe000ed04

0800bf78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf86:	463a      	mov	r2, r7
 800bf88:	1d39      	adds	r1, r7, #4
 800bf8a:	f107 0308 	add.w	r3, r7, #8
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe ff42 	bl	800ae18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	9202      	str	r2, [sp, #8]
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	460a      	mov	r2, r1
 800bfa6:	4926      	ldr	r1, [pc, #152]	; (800c040 <vTaskStartScheduler+0xc8>)
 800bfa8:	4826      	ldr	r0, [pc, #152]	; (800c044 <vTaskStartScheduler+0xcc>)
 800bfaa:	f7ff fdef 	bl	800bb8c <xTaskCreateStatic>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	4a25      	ldr	r2, [pc, #148]	; (800c048 <vTaskStartScheduler+0xd0>)
 800bfb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfb4:	4b24      	ldr	r3, [pc, #144]	; (800c048 <vTaskStartScheduler+0xd0>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	e001      	b.n	800bfc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d102      	bne.n	800bfd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bfcc:	f000 fd2a 	bl	800ca24 <xTimerCreateTimerTask>
 800bfd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d11d      	bne.n	800c014 <vTaskStartScheduler+0x9c>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	b672      	cpsid	i
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	b662      	cpsie	i
 800bfec:	613b      	str	r3, [r7, #16]
}
 800bfee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bff0:	4b16      	ldr	r3, [pc, #88]	; (800c04c <vTaskStartScheduler+0xd4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3354      	adds	r3, #84	; 0x54
 800bff6:	4a16      	ldr	r2, [pc, #88]	; (800c050 <vTaskStartScheduler+0xd8>)
 800bff8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bffa:	4b16      	ldr	r3, [pc, #88]	; (800c054 <vTaskStartScheduler+0xdc>)
 800bffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c002:	4b15      	ldr	r3, [pc, #84]	; (800c058 <vTaskStartScheduler+0xe0>)
 800c004:	2201      	movs	r2, #1
 800c006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c008:	4b14      	ldr	r3, [pc, #80]	; (800c05c <vTaskStartScheduler+0xe4>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c00e:	f001 f8f7 	bl	800d200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c012:	e010      	b.n	800c036 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c01a:	d10c      	bne.n	800c036 <vTaskStartScheduler+0xbe>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	b672      	cpsid	i
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	b662      	cpsie	i
 800c030:	60fb      	str	r3, [r7, #12]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <vTaskStartScheduler+0xbc>
}
 800c036:	bf00      	nop
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	0800e834 	.word	0x0800e834
 800c044:	0800c6a5 	.word	0x0800c6a5
 800c048:	20001918 	.word	0x20001918
 800c04c:	20001420 	.word	0x20001420
 800c050:	20000110 	.word	0x20000110
 800c054:	20001914 	.word	0x20001914
 800c058:	20001900 	.word	0x20001900
 800c05c:	200018f8 	.word	0x200018f8

0800c060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c060:	b480      	push	{r7}
 800c062:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c064:	4b04      	ldr	r3, [pc, #16]	; (800c078 <vTaskSuspendAll+0x18>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	4a03      	ldr	r2, [pc, #12]	; (800c078 <vTaskSuspendAll+0x18>)
 800c06c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c06e:	bf00      	nop
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	2000191c 	.word	0x2000191c

0800c07c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c08a:	4b43      	ldr	r3, [pc, #268]	; (800c198 <xTaskResumeAll+0x11c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10c      	bne.n	800c0ac <xTaskResumeAll+0x30>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	b672      	cpsid	i
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	b662      	cpsie	i
 800c0a6:	603b      	str	r3, [r7, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0ac:	f001 f926 	bl	800d2fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0b0:	4b39      	ldr	r3, [pc, #228]	; (800c198 <xTaskResumeAll+0x11c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	4a38      	ldr	r2, [pc, #224]	; (800c198 <xTaskResumeAll+0x11c>)
 800c0b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ba:	4b37      	ldr	r3, [pc, #220]	; (800c198 <xTaskResumeAll+0x11c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d162      	bne.n	800c188 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0c2:	4b36      	ldr	r3, [pc, #216]	; (800c19c <xTaskResumeAll+0x120>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d05e      	beq.n	800c188 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0ca:	e02f      	b.n	800c12c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0cc:	4b34      	ldr	r3, [pc, #208]	; (800c1a0 <xTaskResumeAll+0x124>)
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3318      	adds	r3, #24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe ff5b 	bl	800af94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe ff56 	bl	800af94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ec:	4b2d      	ldr	r3, [pc, #180]	; (800c1a4 <xTaskResumeAll+0x128>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d903      	bls.n	800c0fc <xTaskResumeAll+0x80>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	4a2a      	ldr	r2, [pc, #168]	; (800c1a4 <xTaskResumeAll+0x128>)
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c100:	4613      	mov	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4a27      	ldr	r2, [pc, #156]	; (800c1a8 <xTaskResumeAll+0x12c>)
 800c10a:	441a      	add	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3304      	adds	r3, #4
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f7fe fee1 	bl	800aeda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4b23      	ldr	r3, [pc, #140]	; (800c1ac <xTaskResumeAll+0x130>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c126:	4b22      	ldr	r3, [pc, #136]	; (800c1b0 <xTaskResumeAll+0x134>)
 800c128:	2201      	movs	r2, #1
 800c12a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c12c:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <xTaskResumeAll+0x124>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1cb      	bne.n	800c0cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c13a:	f000 fb6f 	bl	800c81c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c13e:	4b1d      	ldr	r3, [pc, #116]	; (800c1b4 <xTaskResumeAll+0x138>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d010      	beq.n	800c16c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c14a:	f000 f847 	bl	800c1dc <xTaskIncrementTick>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c154:	4b16      	ldr	r3, [pc, #88]	; (800c1b0 <xTaskResumeAll+0x134>)
 800c156:	2201      	movs	r2, #1
 800c158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1f1      	bne.n	800c14a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c166:	4b13      	ldr	r3, [pc, #76]	; (800c1b4 <xTaskResumeAll+0x138>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <xTaskResumeAll+0x134>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d009      	beq.n	800c188 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c178:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <xTaskResumeAll+0x13c>)
 800c17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c188:	f001 f8ec 	bl	800d364 <vPortExitCritical>

	return xAlreadyYielded;
 800c18c:	68bb      	ldr	r3, [r7, #8]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	2000191c 	.word	0x2000191c
 800c19c:	200018f4 	.word	0x200018f4
 800c1a0:	200018b4 	.word	0x200018b4
 800c1a4:	200018fc 	.word	0x200018fc
 800c1a8:	20001424 	.word	0x20001424
 800c1ac:	20001420 	.word	0x20001420
 800c1b0:	20001908 	.word	0x20001908
 800c1b4:	20001904 	.word	0x20001904
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1c2:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <xTaskGetTickCount+0x1c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1c8:	687b      	ldr	r3, [r7, #4]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	200018f8 	.word	0x200018f8

0800c1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1e6:	4b50      	ldr	r3, [pc, #320]	; (800c328 <xTaskIncrementTick+0x14c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f040 808b 	bne.w	800c306 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1f0:	4b4e      	ldr	r3, [pc, #312]	; (800c32c <xTaskIncrementTick+0x150>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1f8:	4a4c      	ldr	r2, [pc, #304]	; (800c32c <xTaskIncrementTick+0x150>)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d122      	bne.n	800c24a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c204:	4b4a      	ldr	r3, [pc, #296]	; (800c330 <xTaskIncrementTick+0x154>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00c      	beq.n	800c228 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	b672      	cpsid	i
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	b662      	cpsie	i
 800c222:	603b      	str	r3, [r7, #0]
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <xTaskIncrementTick+0x4a>
 800c228:	4b41      	ldr	r3, [pc, #260]	; (800c330 <xTaskIncrementTick+0x154>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60fb      	str	r3, [r7, #12]
 800c22e:	4b41      	ldr	r3, [pc, #260]	; (800c334 <xTaskIncrementTick+0x158>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a3f      	ldr	r2, [pc, #252]	; (800c330 <xTaskIncrementTick+0x154>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	4a3f      	ldr	r2, [pc, #252]	; (800c334 <xTaskIncrementTick+0x158>)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	4b3e      	ldr	r3, [pc, #248]	; (800c338 <xTaskIncrementTick+0x15c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3301      	adds	r3, #1
 800c242:	4a3d      	ldr	r2, [pc, #244]	; (800c338 <xTaskIncrementTick+0x15c>)
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	f000 fae9 	bl	800c81c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c24a:	4b3c      	ldr	r3, [pc, #240]	; (800c33c <xTaskIncrementTick+0x160>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	429a      	cmp	r2, r3
 800c252:	d349      	bcc.n	800c2e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c254:	4b36      	ldr	r3, [pc, #216]	; (800c330 <xTaskIncrementTick+0x154>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d104      	bne.n	800c268 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c25e:	4b37      	ldr	r3, [pc, #220]	; (800c33c <xTaskIncrementTick+0x160>)
 800c260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c264:	601a      	str	r2, [r3, #0]
					break;
 800c266:	e03f      	b.n	800c2e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c268:	4b31      	ldr	r3, [pc, #196]	; (800c330 <xTaskIncrementTick+0x154>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d203      	bcs.n	800c288 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c280:	4a2e      	ldr	r2, [pc, #184]	; (800c33c <xTaskIncrementTick+0x160>)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c286:	e02f      	b.n	800c2e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fe81 	bl	800af94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	3318      	adds	r3, #24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe fe78 	bl	800af94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	4b25      	ldr	r3, [pc, #148]	; (800c340 <xTaskIncrementTick+0x164>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d903      	bls.n	800c2b8 <xTaskIncrementTick+0xdc>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	4a22      	ldr	r2, [pc, #136]	; (800c340 <xTaskIncrementTick+0x164>)
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4a1f      	ldr	r2, [pc, #124]	; (800c344 <xTaskIncrementTick+0x168>)
 800c2c6:	441a      	add	r2, r3
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	f7fe fe03 	bl	800aeda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4b1b      	ldr	r3, [pc, #108]	; (800c348 <xTaskIncrementTick+0x16c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d3b8      	bcc.n	800c254 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2e6:	e7b5      	b.n	800c254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2e8:	4b17      	ldr	r3, [pc, #92]	; (800c348 <xTaskIncrementTick+0x16c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ee:	4915      	ldr	r1, [pc, #84]	; (800c344 <xTaskIncrementTick+0x168>)
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d907      	bls.n	800c310 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c300:	2301      	movs	r3, #1
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	e004      	b.n	800c310 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c306:	4b11      	ldr	r3, [pc, #68]	; (800c34c <xTaskIncrementTick+0x170>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	4a0f      	ldr	r2, [pc, #60]	; (800c34c <xTaskIncrementTick+0x170>)
 800c30e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c310:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <xTaskIncrementTick+0x174>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c318:	2301      	movs	r3, #1
 800c31a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c31c:	697b      	ldr	r3, [r7, #20]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	2000191c 	.word	0x2000191c
 800c32c:	200018f8 	.word	0x200018f8
 800c330:	200018ac 	.word	0x200018ac
 800c334:	200018b0 	.word	0x200018b0
 800c338:	2000190c 	.word	0x2000190c
 800c33c:	20001914 	.word	0x20001914
 800c340:	200018fc 	.word	0x200018fc
 800c344:	20001424 	.word	0x20001424
 800c348:	20001420 	.word	0x20001420
 800c34c:	20001904 	.word	0x20001904
 800c350:	20001908 	.word	0x20001908

0800c354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c35a:	4b2b      	ldr	r3, [pc, #172]	; (800c408 <vTaskSwitchContext+0xb4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c362:	4b2a      	ldr	r3, [pc, #168]	; (800c40c <vTaskSwitchContext+0xb8>)
 800c364:	2201      	movs	r2, #1
 800c366:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c368:	e048      	b.n	800c3fc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800c36a:	4b28      	ldr	r3, [pc, #160]	; (800c40c <vTaskSwitchContext+0xb8>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c370:	4b27      	ldr	r3, [pc, #156]	; (800c410 <vTaskSwitchContext+0xbc>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	e012      	b.n	800c39e <vTaskSwitchContext+0x4a>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10c      	bne.n	800c398 <vTaskSwitchContext+0x44>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	b672      	cpsid	i
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	b662      	cpsie	i
 800c392:	607b      	str	r3, [r7, #4]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <vTaskSwitchContext+0x42>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	491d      	ldr	r1, [pc, #116]	; (800c414 <vTaskSwitchContext+0xc0>)
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0e2      	beq.n	800c378 <vTaskSwitchContext+0x24>
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4a15      	ldr	r2, [pc, #84]	; (800c414 <vTaskSwitchContext+0xc0>)
 800c3be:	4413      	add	r3, r2
 800c3c0:	60bb      	str	r3, [r7, #8]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	605a      	str	r2, [r3, #4]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d104      	bne.n	800c3e2 <vTaskSwitchContext+0x8e>
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	605a      	str	r2, [r3, #4]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	4a0b      	ldr	r2, [pc, #44]	; (800c418 <vTaskSwitchContext+0xc4>)
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	4a08      	ldr	r2, [pc, #32]	; (800c410 <vTaskSwitchContext+0xbc>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3f2:	4b09      	ldr	r3, [pc, #36]	; (800c418 <vTaskSwitchContext+0xc4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3354      	adds	r3, #84	; 0x54
 800c3f8:	4a08      	ldr	r2, [pc, #32]	; (800c41c <vTaskSwitchContext+0xc8>)
 800c3fa:	6013      	str	r3, [r2, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	2000191c 	.word	0x2000191c
 800c40c:	20001908 	.word	0x20001908
 800c410:	200018fc 	.word	0x200018fc
 800c414:	20001424 	.word	0x20001424
 800c418:	20001420 	.word	0x20001420
 800c41c:	20000110 	.word	0x20000110

0800c420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10c      	bne.n	800c44a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	b672      	cpsid	i
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	b662      	cpsie	i
 800c444:	60fb      	str	r3, [r7, #12]
}
 800c446:	bf00      	nop
 800c448:	e7fe      	b.n	800c448 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c44a:	4b07      	ldr	r3, [pc, #28]	; (800c468 <vTaskPlaceOnEventList+0x48>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3318      	adds	r3, #24
 800c450:	4619      	mov	r1, r3
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7fe fd65 	bl	800af22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c458:	2101      	movs	r1, #1
 800c45a:	6838      	ldr	r0, [r7, #0]
 800c45c:	f000 fa8e 	bl	800c97c <prvAddCurrentTaskToDelayedList>
}
 800c460:	bf00      	nop
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20001420 	.word	0x20001420

0800c46c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10c      	bne.n	800c498 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	b672      	cpsid	i
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	b662      	cpsie	i
 800c492:	617b      	str	r3, [r7, #20]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c498:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3318      	adds	r3, #24
 800c49e:	4619      	mov	r1, r3
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f7fe fd1a 	bl	800aeda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c4ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	68b8      	ldr	r0, [r7, #8]
 800c4b6:	f000 fa61 	bl	800c97c <prvAddCurrentTaskToDelayedList>
	}
 800c4ba:	bf00      	nop
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20001420 	.word	0x20001420

0800c4c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10c      	bne.n	800c4f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	b672      	cpsid	i
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	b662      	cpsie	i
 800c4f2:	60fb      	str	r3, [r7, #12]
}
 800c4f4:	bf00      	nop
 800c4f6:	e7fe      	b.n	800c4f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	3318      	adds	r3, #24
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe fd49 	bl	800af94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c502:	4b1e      	ldr	r3, [pc, #120]	; (800c57c <xTaskRemoveFromEventList+0xb4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d11d      	bne.n	800c546 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fe fd40 	bl	800af94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	4b19      	ldr	r3, [pc, #100]	; (800c580 <xTaskRemoveFromEventList+0xb8>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d903      	bls.n	800c528 <xTaskRemoveFromEventList+0x60>
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c524:	4a16      	ldr	r2, [pc, #88]	; (800c580 <xTaskRemoveFromEventList+0xb8>)
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4a13      	ldr	r2, [pc, #76]	; (800c584 <xTaskRemoveFromEventList+0xbc>)
 800c536:	441a      	add	r2, r3
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f7fe fccb 	bl	800aeda <vListInsertEnd>
 800c544:	e005      	b.n	800c552 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	3318      	adds	r3, #24
 800c54a:	4619      	mov	r1, r3
 800c54c:	480e      	ldr	r0, [pc, #56]	; (800c588 <xTaskRemoveFromEventList+0xc0>)
 800c54e:	f7fe fcc4 	bl	800aeda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <xTaskRemoveFromEventList+0xc4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d905      	bls.n	800c56c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c560:	2301      	movs	r3, #1
 800c562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c564:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <xTaskRemoveFromEventList+0xc8>)
 800c566:	2201      	movs	r2, #1
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	e001      	b.n	800c570 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c570:	697b      	ldr	r3, [r7, #20]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2000191c 	.word	0x2000191c
 800c580:	200018fc 	.word	0x200018fc
 800c584:	20001424 	.word	0x20001424
 800c588:	200018b4 	.word	0x200018b4
 800c58c:	20001420 	.word	0x20001420
 800c590:	20001908 	.word	0x20001908

0800c594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c59c:	4b06      	ldr	r3, [pc, #24]	; (800c5b8 <vTaskInternalSetTimeOutState+0x24>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5a4:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <vTaskInternalSetTimeOutState+0x28>)
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	605a      	str	r2, [r3, #4]
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	2000190c 	.word	0x2000190c
 800c5bc:	200018f8 	.word	0x200018f8

0800c5c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10c      	bne.n	800c5ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d4:	b672      	cpsid	i
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	b662      	cpsie	i
 800c5e4:	613b      	str	r3, [r7, #16]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10c      	bne.n	800c60a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	b672      	cpsid	i
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	b662      	cpsie	i
 800c604:	60fb      	str	r3, [r7, #12]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c60a:	f000 fe77 	bl	800d2fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c60e:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <xTaskCheckForTimeOut+0xc4>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c626:	d102      	bne.n	800c62e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c628:	2300      	movs	r3, #0
 800c62a:	61fb      	str	r3, [r7, #28]
 800c62c:	e023      	b.n	800c676 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	4b15      	ldr	r3, [pc, #84]	; (800c688 <xTaskCheckForTimeOut+0xc8>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d007      	beq.n	800c64a <xTaskCheckForTimeOut+0x8a>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	69ba      	ldr	r2, [r7, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d302      	bcc.n	800c64a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c644:	2301      	movs	r3, #1
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	e015      	b.n	800c676 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	429a      	cmp	r2, r3
 800c652:	d20b      	bcs.n	800c66c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	1ad2      	subs	r2, r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff ff97 	bl	800c594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	61fb      	str	r3, [r7, #28]
 800c66a:	e004      	b.n	800c676 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c672:	2301      	movs	r3, #1
 800c674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c676:	f000 fe75 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800c67a:	69fb      	ldr	r3, [r7, #28]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	200018f8 	.word	0x200018f8
 800c688:	2000190c 	.word	0x2000190c

0800c68c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <vTaskMissedYield+0x14>)
 800c692:	2201      	movs	r2, #1
 800c694:	601a      	str	r2, [r3, #0]
}
 800c696:	bf00      	nop
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	20001908 	.word	0x20001908

0800c6a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6ac:	f000 f852 	bl	800c754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6b0:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <prvIdleTask+0x28>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d9f9      	bls.n	800c6ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <prvIdleTask+0x2c>)
 800c6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6c8:	e7f0      	b.n	800c6ac <prvIdleTask+0x8>
 800c6ca:	bf00      	nop
 800c6cc:	20001424 	.word	0x20001424
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6da:	2300      	movs	r3, #0
 800c6dc:	607b      	str	r3, [r7, #4]
 800c6de:	e00c      	b.n	800c6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4a12      	ldr	r2, [pc, #72]	; (800c734 <prvInitialiseTaskLists+0x60>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fbc6 	bl	800ae80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	607b      	str	r3, [r7, #4]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b37      	cmp	r3, #55	; 0x37
 800c6fe:	d9ef      	bls.n	800c6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c700:	480d      	ldr	r0, [pc, #52]	; (800c738 <prvInitialiseTaskLists+0x64>)
 800c702:	f7fe fbbd 	bl	800ae80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c706:	480d      	ldr	r0, [pc, #52]	; (800c73c <prvInitialiseTaskLists+0x68>)
 800c708:	f7fe fbba 	bl	800ae80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c70c:	480c      	ldr	r0, [pc, #48]	; (800c740 <prvInitialiseTaskLists+0x6c>)
 800c70e:	f7fe fbb7 	bl	800ae80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c712:	480c      	ldr	r0, [pc, #48]	; (800c744 <prvInitialiseTaskLists+0x70>)
 800c714:	f7fe fbb4 	bl	800ae80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c718:	480b      	ldr	r0, [pc, #44]	; (800c748 <prvInitialiseTaskLists+0x74>)
 800c71a:	f7fe fbb1 	bl	800ae80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c71e:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <prvInitialiseTaskLists+0x78>)
 800c720:	4a05      	ldr	r2, [pc, #20]	; (800c738 <prvInitialiseTaskLists+0x64>)
 800c722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <prvInitialiseTaskLists+0x7c>)
 800c726:	4a05      	ldr	r2, [pc, #20]	; (800c73c <prvInitialiseTaskLists+0x68>)
 800c728:	601a      	str	r2, [r3, #0]
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20001424 	.word	0x20001424
 800c738:	20001884 	.word	0x20001884
 800c73c:	20001898 	.word	0x20001898
 800c740:	200018b4 	.word	0x200018b4
 800c744:	200018c8 	.word	0x200018c8
 800c748:	200018e0 	.word	0x200018e0
 800c74c:	200018ac 	.word	0x200018ac
 800c750:	200018b0 	.word	0x200018b0

0800c754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c75a:	e019      	b.n	800c790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c75c:	f000 fdce 	bl	800d2fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c760:	4b10      	ldr	r3, [pc, #64]	; (800c7a4 <prvCheckTasksWaitingTermination+0x50>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3304      	adds	r3, #4
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe fc11 	bl	800af94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c772:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <prvCheckTasksWaitingTermination+0x54>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3b01      	subs	r3, #1
 800c778:	4a0b      	ldr	r2, [pc, #44]	; (800c7a8 <prvCheckTasksWaitingTermination+0x54>)
 800c77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c77c:	4b0b      	ldr	r3, [pc, #44]	; (800c7ac <prvCheckTasksWaitingTermination+0x58>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	3b01      	subs	r3, #1
 800c782:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <prvCheckTasksWaitingTermination+0x58>)
 800c784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c786:	f000 fded 	bl	800d364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f810 	bl	800c7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c790:	4b06      	ldr	r3, [pc, #24]	; (800c7ac <prvCheckTasksWaitingTermination+0x58>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e1      	bne.n	800c75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c798:	bf00      	nop
 800c79a:	bf00      	nop
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	200018c8 	.word	0x200018c8
 800c7a8:	200018f4 	.word	0x200018f4
 800c7ac:	200018dc 	.word	0x200018dc

0800c7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3354      	adds	r3, #84	; 0x54
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f001 ff91 	bl	800e6e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d108      	bne.n	800c7de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 ff89 	bl	800d6e8 <vPortFree>
				vPortFree( pxTCB );
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 ff86 	bl	800d6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7dc:	e01a      	b.n	800c814 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d103      	bne.n	800c7f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 ff7d 	bl	800d6e8 <vPortFree>
	}
 800c7ee:	e011      	b.n	800c814 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d00c      	beq.n	800c814 <prvDeleteTCB+0x64>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	b672      	cpsid	i
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	b662      	cpsie	i
 800c80e:	60fb      	str	r3, [r7, #12]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <prvDeleteTCB+0x62>
	}
 800c814:	bf00      	nop
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c822:	4b0c      	ldr	r3, [pc, #48]	; (800c854 <prvResetNextTaskUnblockTime+0x38>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <prvResetNextTaskUnblockTime+0x3c>)
 800c82e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c834:	e008      	b.n	800c848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <prvResetNextTaskUnblockTime+0x38>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a04      	ldr	r2, [pc, #16]	; (800c858 <prvResetNextTaskUnblockTime+0x3c>)
 800c846:	6013      	str	r3, [r2, #0]
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	200018ac 	.word	0x200018ac
 800c858:	20001914 	.word	0x20001914

0800c85c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c862:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <xTaskGetSchedulerState+0x34>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d102      	bne.n	800c870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c86a:	2301      	movs	r3, #1
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	e008      	b.n	800c882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c870:	4b08      	ldr	r3, [pc, #32]	; (800c894 <xTaskGetSchedulerState+0x38>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c878:	2302      	movs	r3, #2
 800c87a:	607b      	str	r3, [r7, #4]
 800c87c:	e001      	b.n	800c882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c87e:	2300      	movs	r3, #0
 800c880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c882:	687b      	ldr	r3, [r7, #4]
	}
 800c884:	4618      	mov	r0, r3
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	20001900 	.word	0x20001900
 800c894:	2000191c 	.word	0x2000191c

0800c898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d05a      	beq.n	800c964 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8ae:	4b30      	ldr	r3, [pc, #192]	; (800c970 <xTaskPriorityDisinherit+0xd8>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d00c      	beq.n	800c8d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	b672      	cpsid	i
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	b662      	cpsie	i
 800c8cc:	60fb      	str	r3, [r7, #12]
}
 800c8ce:	bf00      	nop
 800c8d0:	e7fe      	b.n	800c8d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10c      	bne.n	800c8f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	b672      	cpsid	i
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	b662      	cpsie	i
 800c8ee:	60bb      	str	r3, [r7, #8]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f8:	1e5a      	subs	r2, r3, #1
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c906:	429a      	cmp	r2, r3
 800c908:	d02c      	beq.n	800c964 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d128      	bne.n	800c964 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	3304      	adds	r3, #4
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe fb3c 	bl	800af94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c934:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <xTaskPriorityDisinherit+0xdc>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d903      	bls.n	800c944 <xTaskPriorityDisinherit+0xac>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	4a0c      	ldr	r2, [pc, #48]	; (800c974 <xTaskPriorityDisinherit+0xdc>)
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4a09      	ldr	r2, [pc, #36]	; (800c978 <xTaskPriorityDisinherit+0xe0>)
 800c952:	441a      	add	r2, r3
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7fe fabd 	bl	800aeda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c964:	697b      	ldr	r3, [r7, #20]
	}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20001420 	.word	0x20001420
 800c974:	200018fc 	.word	0x200018fc
 800c978:	20001424 	.word	0x20001424

0800c97c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c986:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <prvAddCurrentTaskToDelayedList+0x90>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c98c:	4b20      	ldr	r3, [pc, #128]	; (800ca10 <prvAddCurrentTaskToDelayedList+0x94>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3304      	adds	r3, #4
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fafe 	bl	800af94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c99e:	d10a      	bne.n	800c9b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d007      	beq.n	800c9b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ca10 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4819      	ldr	r0, [pc, #100]	; (800ca14 <prvAddCurrentTaskToDelayedList+0x98>)
 800c9b0:	f7fe fa93 	bl	800aeda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9b4:	e026      	b.n	800ca04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9be:	4b14      	ldr	r3, [pc, #80]	; (800ca10 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d209      	bcs.n	800c9e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ce:	4b12      	ldr	r3, [pc, #72]	; (800ca18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7fe faa1 	bl	800af22 <vListInsert>
}
 800c9e0:	e010      	b.n	800ca04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9e2:	4b0e      	ldr	r3, [pc, #56]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ca10 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f7fe fa97 	bl	800af22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d202      	bcs.n	800ca04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c9fe:	4a08      	ldr	r2, [pc, #32]	; (800ca20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	6013      	str	r3, [r2, #0]
}
 800ca04:	bf00      	nop
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200018f8 	.word	0x200018f8
 800ca10:	20001420 	.word	0x20001420
 800ca14:	200018e0 	.word	0x200018e0
 800ca18:	200018b0 	.word	0x200018b0
 800ca1c:	200018ac 	.word	0x200018ac
 800ca20:	20001914 	.word	0x20001914

0800ca24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	; 0x28
 800ca28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca2e:	f000 fb15 	bl	800d05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca32:	4b1d      	ldr	r3, [pc, #116]	; (800caa8 <xTimerCreateTimerTask+0x84>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d021      	beq.n	800ca7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca42:	1d3a      	adds	r2, r7, #4
 800ca44:	f107 0108 	add.w	r1, r7, #8
 800ca48:	f107 030c 	add.w	r3, r7, #12
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe f9fd 	bl	800ae4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	9202      	str	r2, [sp, #8]
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	2300      	movs	r3, #0
 800ca62:	460a      	mov	r2, r1
 800ca64:	4911      	ldr	r1, [pc, #68]	; (800caac <xTimerCreateTimerTask+0x88>)
 800ca66:	4812      	ldr	r0, [pc, #72]	; (800cab0 <xTimerCreateTimerTask+0x8c>)
 800ca68:	f7ff f890 	bl	800bb8c <xTaskCreateStatic>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4a11      	ldr	r2, [pc, #68]	; (800cab4 <xTimerCreateTimerTask+0x90>)
 800ca70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca72:	4b10      	ldr	r3, [pc, #64]	; (800cab4 <xTimerCreateTimerTask+0x90>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10c      	bne.n	800ca9e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	b672      	cpsid	i
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	b662      	cpsie	i
 800ca98:	613b      	str	r3, [r7, #16]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ca9e:	697b      	ldr	r3, [r7, #20]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20001950 	.word	0x20001950
 800caac:	0800e83c 	.word	0x0800e83c
 800cab0:	0800cbf5 	.word	0x0800cbf5
 800cab4:	20001954 	.word	0x20001954

0800cab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10c      	bne.n	800caea <xTimerGenericCommand+0x32>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	b672      	cpsid	i
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	b662      	cpsie	i
 800cae4:	623b      	str	r3, [r7, #32]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800caea:	4b1a      	ldr	r3, [pc, #104]	; (800cb54 <xTimerGenericCommand+0x9c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d02a      	beq.n	800cb48 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b05      	cmp	r3, #5
 800cb02:	dc18      	bgt.n	800cb36 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb04:	f7ff feaa 	bl	800c85c <xTaskGetSchedulerState>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d109      	bne.n	800cb22 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb0e:	4b11      	ldr	r3, [pc, #68]	; (800cb54 <xTimerGenericCommand+0x9c>)
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f107 0110 	add.w	r1, r7, #16
 800cb16:	2300      	movs	r3, #0
 800cb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb1a:	f7fe fbb7 	bl	800b28c <xQueueGenericSend>
 800cb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800cb20:	e012      	b.n	800cb48 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb22:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <xTimerGenericCommand+0x9c>)
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	f107 0110 	add.w	r1, r7, #16
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f7fe fbad 	bl	800b28c <xQueueGenericSend>
 800cb32:	6278      	str	r0, [r7, #36]	; 0x24
 800cb34:	e008      	b.n	800cb48 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb36:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <xTimerGenericCommand+0x9c>)
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	f107 0110 	add.w	r1, r7, #16
 800cb3e:	2300      	movs	r3, #0
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	f7fe fca9 	bl	800b498 <xQueueGenericSendFromISR>
 800cb46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3728      	adds	r7, #40	; 0x28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20001950 	.word	0x20001950

0800cb58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b088      	sub	sp, #32
 800cb5c:	af02      	add	r7, sp, #8
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb62:	4b23      	ldr	r3, [pc, #140]	; (800cbf0 <prvProcessExpiredTimer+0x98>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fe fa0f 	bl	800af94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d024      	beq.n	800cbce <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	699a      	ldr	r2, [r3, #24]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	18d1      	adds	r1, r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	6978      	ldr	r0, [r7, #20]
 800cb92:	f000 f8d3 	bl	800cd3c <prvInsertTimerInActiveList>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d021      	beq.n	800cbe0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	2300      	movs	r3, #0
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	2100      	movs	r1, #0
 800cba6:	6978      	ldr	r0, [r7, #20]
 800cba8:	f7ff ff86 	bl	800cab8 <xTimerGenericCommand>
 800cbac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d115      	bne.n	800cbe0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	b672      	cpsid	i
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	b662      	cpsie	i
 800cbc8:	60fb      	str	r3, [r7, #12]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd4:	f023 0301 	bic.w	r3, r3, #1
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	6978      	ldr	r0, [r7, #20]
 800cbe6:	4798      	blx	r3
}
 800cbe8:	bf00      	nop
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20001948 	.word	0x20001948

0800cbf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbfc:	f107 0308 	add.w	r3, r7, #8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 f857 	bl	800ccb4 <prvGetNextExpireTime>
 800cc06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f803 	bl	800cc18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc12:	f000 f8d5 	bl	800cdc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc16:	e7f1      	b.n	800cbfc <prvTimerTask+0x8>

0800cc18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc22:	f7ff fa1d 	bl	800c060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 f866 	bl	800ccfc <prvSampleTimeNow>
 800cc30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d130      	bne.n	800cc9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <prvProcessTimerOrBlockTask+0x3c>
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d806      	bhi.n	800cc54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc46:	f7ff fa19 	bl	800c07c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff ff83 	bl	800cb58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc52:	e024      	b.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d008      	beq.n	800cc6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc5a:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <prvProcessTimerOrBlockTask+0x90>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <prvProcessTimerOrBlockTask+0x50>
 800cc64:	2301      	movs	r3, #1
 800cc66:	e000      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x52>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <prvProcessTimerOrBlockTask+0x94>)
 800cc6e:	6818      	ldr	r0, [r3, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	f7fe ff53 	bl	800bb24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc7e:	f7ff f9fd 	bl	800c07c <xTaskResumeAll>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc88:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <prvProcessTimerOrBlockTask+0x98>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
}
 800cc98:	e001      	b.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc9a:	f7ff f9ef 	bl	800c07c <xTaskResumeAll>
}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	2000194c 	.word	0x2000194c
 800ccac:	20001950 	.word	0x20001950
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <prvGetNextExpireTime+0x44>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <prvGetNextExpireTime+0x16>
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	e000      	b.n	800cccc <prvGetNextExpireTime+0x18>
 800ccca:	2200      	movs	r2, #0
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <prvGetNextExpireTime+0x44>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e001      	b.n	800cce8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cce8:	68fb      	ldr	r3, [r7, #12]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	20001948 	.word	0x20001948

0800ccfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd04:	f7ff fa5a 	bl	800c1bc <xTaskGetTickCount>
 800cd08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <prvSampleTimeNow+0x3c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d205      	bcs.n	800cd20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd14:	f000 f93c 	bl	800cf90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e002      	b.n	800cd26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd26:	4a04      	ldr	r2, [pc, #16]	; (800cd38 <prvSampleTimeNow+0x3c>)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20001958 	.word	0x20001958

0800cd3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d812      	bhi.n	800cd88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	1ad2      	subs	r2, r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e01b      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <prvInsertTimerInActiveList+0x7c>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	4619      	mov	r1, r3
 800cd80:	4610      	mov	r0, r2
 800cd82:	f7fe f8ce 	bl	800af22 <vListInsert>
 800cd86:	e012      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d206      	bcs.n	800cd9e <prvInsertTimerInActiveList+0x62>
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d302      	bcc.n	800cd9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	e007      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd9e:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <prvInsertTimerInActiveList+0x80>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3304      	adds	r3, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	4610      	mov	r0, r2
 800cdaa:	f7fe f8ba 	bl	800af22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cdae:	697b      	ldr	r3, [r7, #20]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	2000194c 	.word	0x2000194c
 800cdbc:	20001948 	.word	0x20001948

0800cdc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08e      	sub	sp, #56	; 0x38
 800cdc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdc6:	e0d0      	b.n	800cf6a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	da1a      	bge.n	800ce04 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdce:	1d3b      	adds	r3, r7, #4
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10c      	bne.n	800cdf4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	b672      	cpsid	i
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	b662      	cpsie	i
 800cdee:	61fb      	str	r3, [r7, #28]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfa:	6850      	ldr	r0, [r2, #4]
 800cdfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfe:	6892      	ldr	r2, [r2, #8]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f2c0 80ae 	blt.w	800cf68 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe f8b9 	bl	800af94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce22:	463b      	mov	r3, r7
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff ff69 	bl	800ccfc <prvSampleTimeNow>
 800ce2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b09      	cmp	r3, #9
 800ce30:	f200 809b 	bhi.w	800cf6a <prvProcessReceivedCommands+0x1aa>
 800ce34:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <prvProcessReceivedCommands+0x7c>)
 800ce36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3a:	bf00      	nop
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce65 	.word	0x0800ce65
 800ce44:	0800ce65 	.word	0x0800ce65
 800ce48:	0800cedd 	.word	0x0800cedd
 800ce4c:	0800cef1 	.word	0x0800cef1
 800ce50:	0800cf3f 	.word	0x0800cf3f
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce65 	.word	0x0800ce65
 800ce5c:	0800cedd 	.word	0x0800cedd
 800ce60:	0800cef1 	.word	0x0800cef1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce6a:	f043 0301 	orr.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	18d1      	adds	r1, r2, r3
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce84:	f7ff ff5a 	bl	800cd3c <prvInsertTimerInActiveList>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d06d      	beq.n	800cf6a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d062      	beq.n	800cf6a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	441a      	add	r2, r3
 800ceac:	2300      	movs	r3, #0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb6:	f7ff fdff 	bl	800cab8 <xTimerGenericCommand>
 800ceba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d153      	bne.n	800cf6a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	b672      	cpsid	i
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	b662      	cpsie	i
 800ced6:	61bb      	str	r3, [r7, #24]
}
 800ced8:	bf00      	nop
 800ceda:	e7fe      	b.n	800ceda <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee2:	f023 0301 	bic.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ceee:	e03c      	b.n	800cf6a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef6:	f043 0301 	orr.w	r3, r3, #1
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10c      	bne.n	800cf2a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	b672      	cpsid	i
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	b662      	cpsie	i
 800cf24:	617b      	str	r3, [r7, #20]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	699a      	ldr	r2, [r3, #24]
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	18d1      	adds	r1, r2, r3
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf38:	f7ff ff00 	bl	800cd3c <prvInsertTimerInActiveList>
					break;
 800cf3c:	e015      	b.n	800cf6a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf44:	f003 0302 	and.w	r3, r3, #2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d103      	bne.n	800cf54 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800cf4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf4e:	f000 fbcb 	bl	800d6e8 <vPortFree>
 800cf52:	e00a      	b.n	800cf6a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf5a:	f023 0301 	bic.w	r3, r3, #1
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf66:	e000      	b.n	800cf6a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cf68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf6a:	4b08      	ldr	r3, [pc, #32]	; (800cf8c <prvProcessReceivedCommands+0x1cc>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	1d39      	adds	r1, r7, #4
 800cf70:	2200      	movs	r2, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fb30 	bl	800b5d8 <xQueueReceive>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f47f af24 	bne.w	800cdc8 <prvProcessReceivedCommands+0x8>
	}
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	3730      	adds	r7, #48	; 0x30
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20001950 	.word	0x20001950

0800cf90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf96:	e04a      	b.n	800d02e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf98:	4b2e      	ldr	r3, [pc, #184]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa2:	4b2c      	ldr	r3, [pc, #176]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd ffef 	bl	800af94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d030      	beq.n	800d02e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d90e      	bls.n	800cffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfea:	4b1a      	ldr	r3, [pc, #104]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3304      	adds	r3, #4
 800cff2:	4619      	mov	r1, r3
 800cff4:	4610      	mov	r0, r2
 800cff6:	f7fd ff94 	bl	800af22 <vListInsert>
 800cffa:	e018      	b.n	800d02e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cffc:	2300      	movs	r3, #0
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	2300      	movs	r3, #0
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f7ff fd56 	bl	800cab8 <xTimerGenericCommand>
 800d00c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10c      	bne.n	800d02e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	b672      	cpsid	i
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	b662      	cpsie	i
 800d028:	603b      	str	r3, [r7, #0]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d02e:	4b09      	ldr	r3, [pc, #36]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1af      	bne.n	800cf98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d038:	4b06      	ldr	r3, [pc, #24]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d03e:	4b06      	ldr	r3, [pc, #24]	; (800d058 <prvSwitchTimerLists+0xc8>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a04      	ldr	r2, [pc, #16]	; (800d054 <prvSwitchTimerLists+0xc4>)
 800d044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d046:	4a04      	ldr	r2, [pc, #16]	; (800d058 <prvSwitchTimerLists+0xc8>)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	6013      	str	r3, [r2, #0]
}
 800d04c:	bf00      	nop
 800d04e:	3718      	adds	r7, #24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20001948 	.word	0x20001948
 800d058:	2000194c 	.word	0x2000194c

0800d05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d062:	f000 f94b 	bl	800d2fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d066:	4b15      	ldr	r3, [pc, #84]	; (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d120      	bne.n	800d0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d06e:	4814      	ldr	r0, [pc, #80]	; (800d0c0 <prvCheckForValidListAndQueue+0x64>)
 800d070:	f7fd ff06 	bl	800ae80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d074:	4813      	ldr	r0, [pc, #76]	; (800d0c4 <prvCheckForValidListAndQueue+0x68>)
 800d076:	f7fd ff03 	bl	800ae80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d07a:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <prvCheckForValidListAndQueue+0x6c>)
 800d07c:	4a10      	ldr	r2, [pc, #64]	; (800d0c0 <prvCheckForValidListAndQueue+0x64>)
 800d07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d080:	4b12      	ldr	r3, [pc, #72]	; (800d0cc <prvCheckForValidListAndQueue+0x70>)
 800d082:	4a10      	ldr	r2, [pc, #64]	; (800d0c4 <prvCheckForValidListAndQueue+0x68>)
 800d084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d086:	2300      	movs	r3, #0
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	4b11      	ldr	r3, [pc, #68]	; (800d0d0 <prvCheckForValidListAndQueue+0x74>)
 800d08c:	4a11      	ldr	r2, [pc, #68]	; (800d0d4 <prvCheckForValidListAndQueue+0x78>)
 800d08e:	2110      	movs	r1, #16
 800d090:	200a      	movs	r0, #10
 800d092:	f7fe f813 	bl	800b0bc <xQueueGenericCreateStatic>
 800d096:	4603      	mov	r3, r0
 800d098:	4a08      	ldr	r2, [pc, #32]	; (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d09c:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d005      	beq.n	800d0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	490b      	ldr	r1, [pc, #44]	; (800d0d8 <prvCheckForValidListAndQueue+0x7c>)
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe fd10 	bl	800bad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0b0:	f000 f958 	bl	800d364 <vPortExitCritical>
}
 800d0b4:	bf00      	nop
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20001950 	.word	0x20001950
 800d0c0:	20001920 	.word	0x20001920
 800d0c4:	20001934 	.word	0x20001934
 800d0c8:	20001948 	.word	0x20001948
 800d0cc:	2000194c 	.word	0x2000194c
 800d0d0:	200019fc 	.word	0x200019fc
 800d0d4:	2000195c 	.word	0x2000195c
 800d0d8:	0800e844 	.word	0x0800e844

0800d0dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3b04      	subs	r3, #4
 800d0ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3b04      	subs	r3, #4
 800d0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f023 0201 	bic.w	r2, r3, #1
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3b04      	subs	r3, #4
 800d10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d10c:	4a0c      	ldr	r2, [pc, #48]	; (800d140 <pxPortInitialiseStack+0x64>)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3b14      	subs	r3, #20
 800d116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3b04      	subs	r3, #4
 800d122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f06f 0202 	mvn.w	r2, #2
 800d12a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3b20      	subs	r3, #32
 800d130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d132:	68fb      	ldr	r3, [r7, #12]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	0800d145 	.word	0x0800d145

0800d144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d14e:	4b14      	ldr	r3, [pc, #80]	; (800d1a0 <prvTaskExitError+0x5c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d156:	d00c      	beq.n	800d172 <prvTaskExitError+0x2e>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15c:	b672      	cpsid	i
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	b662      	cpsie	i
 800d16c:	60fb      	str	r3, [r7, #12]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <prvTaskExitError+0x2c>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	b672      	cpsid	i
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	b662      	cpsie	i
 800d186:	60bb      	str	r3, [r7, #8]
}
 800d188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d18a:	bf00      	nop
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0fc      	beq.n	800d18c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	20000098 	.word	0x20000098
	...

0800d1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <pxCurrentTCBConst2>)
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	6808      	ldr	r0, [r1, #0]
 800d1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ba:	f380 8809 	msr	PSP, r0
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f04f 0000 	mov.w	r0, #0
 800d1c6:	f380 8811 	msr	BASEPRI, r0
 800d1ca:	4770      	bx	lr
 800d1cc:	f3af 8000 	nop.w

0800d1d0 <pxCurrentTCBConst2>:
 800d1d0:	20001420 	.word	0x20001420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop

0800d1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1d8:	4808      	ldr	r0, [pc, #32]	; (800d1fc <prvPortStartFirstTask+0x24>)
 800d1da:	6800      	ldr	r0, [r0, #0]
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	f380 8808 	msr	MSP, r0
 800d1e2:	f04f 0000 	mov.w	r0, #0
 800d1e6:	f380 8814 	msr	CONTROL, r0
 800d1ea:	b662      	cpsie	i
 800d1ec:	b661      	cpsie	f
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	df00      	svc	0
 800d1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1fa:	bf00      	nop
 800d1fc:	e000ed08 	.word	0xe000ed08

0800d200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d206:	4b37      	ldr	r3, [pc, #220]	; (800d2e4 <xPortStartScheduler+0xe4>)
 800d208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	22ff      	movs	r2, #255	; 0xff
 800d216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b2f      	ldr	r3, [pc, #188]	; (800d2e8 <xPortStartScheduler+0xe8>)
 800d22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d22e:	4b2f      	ldr	r3, [pc, #188]	; (800d2ec <xPortStartScheduler+0xec>)
 800d230:	2207      	movs	r2, #7
 800d232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d234:	e009      	b.n	800d24a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d236:	4b2d      	ldr	r3, [pc, #180]	; (800d2ec <xPortStartScheduler+0xec>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	4a2b      	ldr	r2, [pc, #172]	; (800d2ec <xPortStartScheduler+0xec>)
 800d23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	b2db      	uxtb	r3, r3
 800d248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d252:	2b80      	cmp	r3, #128	; 0x80
 800d254:	d0ef      	beq.n	800d236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d256:	4b25      	ldr	r3, [pc, #148]	; (800d2ec <xPortStartScheduler+0xec>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f1c3 0307 	rsb	r3, r3, #7
 800d25e:	2b04      	cmp	r3, #4
 800d260:	d00c      	beq.n	800d27c <xPortStartScheduler+0x7c>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	b672      	cpsid	i
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	b662      	cpsie	i
 800d276:	60bb      	str	r3, [r7, #8]
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d27c:	4b1b      	ldr	r3, [pc, #108]	; (800d2ec <xPortStartScheduler+0xec>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	021b      	lsls	r3, r3, #8
 800d282:	4a1a      	ldr	r2, [pc, #104]	; (800d2ec <xPortStartScheduler+0xec>)
 800d284:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d286:	4b19      	ldr	r3, [pc, #100]	; (800d2ec <xPortStartScheduler+0xec>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d28e:	4a17      	ldr	r2, [pc, #92]	; (800d2ec <xPortStartScheduler+0xec>)
 800d290:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	b2da      	uxtb	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d29a:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <xPortStartScheduler+0xf0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a14      	ldr	r2, [pc, #80]	; (800d2f0 <xPortStartScheduler+0xf0>)
 800d2a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2a6:	4b12      	ldr	r3, [pc, #72]	; (800d2f0 <xPortStartScheduler+0xf0>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a11      	ldr	r2, [pc, #68]	; (800d2f0 <xPortStartScheduler+0xf0>)
 800d2ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2b2:	f000 f8dd 	bl	800d470 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2b6:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <xPortStartScheduler+0xf4>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2bc:	f000 f8fc 	bl	800d4b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2c0:	4b0d      	ldr	r3, [pc, #52]	; (800d2f8 <xPortStartScheduler+0xf8>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <xPortStartScheduler+0xf8>)
 800d2c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d2ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2cc:	f7ff ff84 	bl	800d1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2d0:	f7ff f840 	bl	800c354 <vTaskSwitchContext>
	prvTaskExitError();
 800d2d4:	f7ff ff36 	bl	800d144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	e000e400 	.word	0xe000e400
 800d2e8:	20001a4c 	.word	0x20001a4c
 800d2ec:	20001a50 	.word	0x20001a50
 800d2f0:	e000ed20 	.word	0xe000ed20
 800d2f4:	20000098 	.word	0x20000098
 800d2f8:	e000ef34 	.word	0xe000ef34

0800d2fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	b672      	cpsid	i
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	b662      	cpsie	i
 800d316:	607b      	str	r3, [r7, #4]
}
 800d318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d31a:	4b10      	ldr	r3, [pc, #64]	; (800d35c <vPortEnterCritical+0x60>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3301      	adds	r3, #1
 800d320:	4a0e      	ldr	r2, [pc, #56]	; (800d35c <vPortEnterCritical+0x60>)
 800d322:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d324:	4b0d      	ldr	r3, [pc, #52]	; (800d35c <vPortEnterCritical+0x60>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d111      	bne.n	800d350 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d32c:	4b0c      	ldr	r3, [pc, #48]	; (800d360 <vPortEnterCritical+0x64>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00c      	beq.n	800d350 <vPortEnterCritical+0x54>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	b672      	cpsid	i
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	b662      	cpsie	i
 800d34a:	603b      	str	r3, [r7, #0]
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <vPortEnterCritical+0x52>
	}
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000098 	.word	0x20000098
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d36a:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <vPortExitCritical+0x54>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10c      	bne.n	800d38c <vPortExitCritical+0x28>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	b672      	cpsid	i
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	b662      	cpsie	i
 800d386:	607b      	str	r3, [r7, #4]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <vPortExitCritical+0x54>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3b01      	subs	r3, #1
 800d392:	4a09      	ldr	r2, [pc, #36]	; (800d3b8 <vPortExitCritical+0x54>)
 800d394:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d396:	4b08      	ldr	r3, [pc, #32]	; (800d3b8 <vPortExitCritical+0x54>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <vPortExitCritical+0x46>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	f383 8811 	msr	BASEPRI, r3
}
 800d3a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3aa:	bf00      	nop
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	20000098 	.word	0x20000098
 800d3bc:	00000000 	.word	0x00000000

0800d3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3c0:	f3ef 8009 	mrs	r0, PSP
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4b15      	ldr	r3, [pc, #84]	; (800d420 <pxCurrentTCBConst>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	f01e 0f10 	tst.w	lr, #16
 800d3d0:	bf08      	it	eq
 800d3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d3e4:	b672      	cpsid	i
 800d3e6:	f380 8811 	msr	BASEPRI, r0
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	b662      	cpsie	i
 800d3f4:	f7fe ffae 	bl	800c354 <vTaskSwitchContext>
 800d3f8:	f04f 0000 	mov.w	r0, #0
 800d3fc:	f380 8811 	msr	BASEPRI, r0
 800d400:	bc09      	pop	{r0, r3}
 800d402:	6819      	ldr	r1, [r3, #0]
 800d404:	6808      	ldr	r0, [r1, #0]
 800d406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40a:	f01e 0f10 	tst.w	lr, #16
 800d40e:	bf08      	it	eq
 800d410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d414:	f380 8809 	msr	PSP, r0
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop

0800d420 <pxCurrentTCBConst>:
 800d420:	20001420 	.word	0x20001420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop

0800d428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	b672      	cpsid	i
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	b662      	cpsie	i
 800d442:	607b      	str	r3, [r7, #4]
}
 800d444:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d446:	f7fe fec9 	bl	800c1dc <xTaskIncrementTick>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d450:	4b06      	ldr	r3, [pc, #24]	; (800d46c <SysTick_Handler+0x44>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	2300      	movs	r3, #0
 800d45a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	f383 8811 	msr	BASEPRI, r3
}
 800d462:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	e000ed04 	.word	0xe000ed04

0800d470 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d470:	b480      	push	{r7}
 800d472:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d474:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <vPortSetupTimerInterrupt+0x34>)
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d47a:	4b0b      	ldr	r3, [pc, #44]	; (800d4a8 <vPortSetupTimerInterrupt+0x38>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d480:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <vPortSetupTimerInterrupt+0x3c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a0a      	ldr	r2, [pc, #40]	; (800d4b0 <vPortSetupTimerInterrupt+0x40>)
 800d486:	fba2 2303 	umull	r2, r3, r2, r3
 800d48a:	099b      	lsrs	r3, r3, #6
 800d48c:	4a09      	ldr	r2, [pc, #36]	; (800d4b4 <vPortSetupTimerInterrupt+0x44>)
 800d48e:	3b01      	subs	r3, #1
 800d490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d492:	4b04      	ldr	r3, [pc, #16]	; (800d4a4 <vPortSetupTimerInterrupt+0x34>)
 800d494:	2207      	movs	r2, #7
 800d496:	601a      	str	r2, [r3, #0]
}
 800d498:	bf00      	nop
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	e000e010 	.word	0xe000e010
 800d4a8:	e000e018 	.word	0xe000e018
 800d4ac:	20000000 	.word	0x20000000
 800d4b0:	10624dd3 	.word	0x10624dd3
 800d4b4:	e000e014 	.word	0xe000e014

0800d4b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d4c8 <vPortEnableVFP+0x10>
 800d4bc:	6801      	ldr	r1, [r0, #0]
 800d4be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4c2:	6001      	str	r1, [r0, #0]
 800d4c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4c6:	bf00      	nop
 800d4c8:	e000ed88 	.word	0xe000ed88

0800d4cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4d2:	f3ef 8305 	mrs	r3, IPSR
 800d4d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b0f      	cmp	r3, #15
 800d4dc:	d916      	bls.n	800d50c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4de:	4a19      	ldr	r2, [pc, #100]	; (800d544 <vPortValidateInterruptPriority+0x78>)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4e8:	4b17      	ldr	r3, [pc, #92]	; (800d548 <vPortValidateInterruptPriority+0x7c>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	7afa      	ldrb	r2, [r7, #11]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d20c      	bcs.n	800d50c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	b672      	cpsid	i
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	b662      	cpsie	i
 800d506:	607b      	str	r3, [r7, #4]
}
 800d508:	bf00      	nop
 800d50a:	e7fe      	b.n	800d50a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d50c:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <vPortValidateInterruptPriority+0x80>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d514:	4b0e      	ldr	r3, [pc, #56]	; (800d550 <vPortValidateInterruptPriority+0x84>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d90c      	bls.n	800d536 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	b672      	cpsid	i
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	b662      	cpsie	i
 800d530:	603b      	str	r3, [r7, #0]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <vPortValidateInterruptPriority+0x68>
	}
 800d536:	bf00      	nop
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	e000e3f0 	.word	0xe000e3f0
 800d548:	20001a4c 	.word	0x20001a4c
 800d54c:	e000ed0c 	.word	0xe000ed0c
 800d550:	20001a50 	.word	0x20001a50

0800d554 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	; 0x28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d560:	f7fe fd7e 	bl	800c060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d564:	4b5b      	ldr	r3, [pc, #364]	; (800d6d4 <pvPortMalloc+0x180>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d101      	bne.n	800d570 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d56c:	f000 f91a 	bl	800d7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d570:	4b59      	ldr	r3, [pc, #356]	; (800d6d8 <pvPortMalloc+0x184>)
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4013      	ands	r3, r2
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f040 8092 	bne.w	800d6a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d01f      	beq.n	800d5c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d584:	2208      	movs	r2, #8
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4413      	add	r3, r2
 800d58a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f003 0307 	and.w	r3, r3, #7
 800d592:	2b00      	cmp	r3, #0
 800d594:	d016      	beq.n	800d5c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f023 0307 	bic.w	r3, r3, #7
 800d59c:	3308      	adds	r3, #8
 800d59e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f003 0307 	and.w	r3, r3, #7
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00c      	beq.n	800d5c4 <pvPortMalloc+0x70>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	b672      	cpsid	i
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	b662      	cpsie	i
 800d5be:	617b      	str	r3, [r7, #20]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d06b      	beq.n	800d6a2 <pvPortMalloc+0x14e>
 800d5ca:	4b44      	ldr	r3, [pc, #272]	; (800d6dc <pvPortMalloc+0x188>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d866      	bhi.n	800d6a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5d4:	4b42      	ldr	r3, [pc, #264]	; (800d6e0 <pvPortMalloc+0x18c>)
 800d5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5d8:	4b41      	ldr	r3, [pc, #260]	; (800d6e0 <pvPortMalloc+0x18c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5de:	e004      	b.n	800d5ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d903      	bls.n	800d5fc <pvPortMalloc+0xa8>
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f1      	bne.n	800d5e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5fc:	4b35      	ldr	r3, [pc, #212]	; (800d6d4 <pvPortMalloc+0x180>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d602:	429a      	cmp	r2, r3
 800d604:	d04d      	beq.n	800d6a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2208      	movs	r2, #8
 800d60c:	4413      	add	r3, r2
 800d60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	1ad2      	subs	r2, r2, r3
 800d620:	2308      	movs	r3, #8
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	429a      	cmp	r2, r3
 800d626:	d921      	bls.n	800d66c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4413      	add	r3, r2
 800d62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	f003 0307 	and.w	r3, r3, #7
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00c      	beq.n	800d654 <pvPortMalloc+0x100>
	__asm volatile
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	b672      	cpsid	i
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	b662      	cpsie	i
 800d64e:	613b      	str	r3, [r7, #16]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d666:	69b8      	ldr	r0, [r7, #24]
 800d668:	f000 f8fe 	bl	800d868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d66c:	4b1b      	ldr	r3, [pc, #108]	; (800d6dc <pvPortMalloc+0x188>)
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	4a19      	ldr	r2, [pc, #100]	; (800d6dc <pvPortMalloc+0x188>)
 800d678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d67a:	4b18      	ldr	r3, [pc, #96]	; (800d6dc <pvPortMalloc+0x188>)
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	4b19      	ldr	r3, [pc, #100]	; (800d6e4 <pvPortMalloc+0x190>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d203      	bcs.n	800d68e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d686:	4b15      	ldr	r3, [pc, #84]	; (800d6dc <pvPortMalloc+0x188>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a16      	ldr	r2, [pc, #88]	; (800d6e4 <pvPortMalloc+0x190>)
 800d68c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d690:	685a      	ldr	r2, [r3, #4]
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <pvPortMalloc+0x184>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	431a      	orrs	r2, r3
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	2200      	movs	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6a2:	f7fe fceb 	bl	800c07c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	f003 0307 	and.w	r3, r3, #7
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00c      	beq.n	800d6ca <pvPortMalloc+0x176>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	b672      	cpsid	i
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	b662      	cpsie	i
 800d6c4:	60fb      	str	r3, [r7, #12]
}
 800d6c6:	bf00      	nop
 800d6c8:	e7fe      	b.n	800d6c8 <pvPortMalloc+0x174>
	return pvReturn;
 800d6ca:	69fb      	ldr	r3, [r7, #28]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3728      	adds	r7, #40	; 0x28
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	2000565c 	.word	0x2000565c
 800d6d8:	20005668 	.word	0x20005668
 800d6dc:	20005660 	.word	0x20005660
 800d6e0:	20005654 	.word	0x20005654
 800d6e4:	20005664 	.word	0x20005664

0800d6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d04c      	beq.n	800d794 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6fa:	2308      	movs	r3, #8
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4413      	add	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b23      	ldr	r3, [pc, #140]	; (800d79c <vPortFree+0xb4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10c      	bne.n	800d730 <vPortFree+0x48>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	b672      	cpsid	i
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	b662      	cpsie	i
 800d72a:	60fb      	str	r3, [r7, #12]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00c      	beq.n	800d752 <vPortFree+0x6a>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	b672      	cpsid	i
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	b662      	cpsie	i
 800d74c:	60bb      	str	r3, [r7, #8]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	4b11      	ldr	r3, [pc, #68]	; (800d79c <vPortFree+0xb4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4013      	ands	r3, r2
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d019      	beq.n	800d794 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d115      	bne.n	800d794 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	4b0b      	ldr	r3, [pc, #44]	; (800d79c <vPortFree+0xb4>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	43db      	mvns	r3, r3
 800d772:	401a      	ands	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d778:	f7fe fc72 	bl	800c060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	4b07      	ldr	r3, [pc, #28]	; (800d7a0 <vPortFree+0xb8>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4413      	add	r3, r2
 800d786:	4a06      	ldr	r2, [pc, #24]	; (800d7a0 <vPortFree+0xb8>)
 800d788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d78a:	6938      	ldr	r0, [r7, #16]
 800d78c:	f000 f86c 	bl	800d868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d790:	f7fe fc74 	bl	800c07c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d794:	bf00      	nop
 800d796:	3718      	adds	r7, #24
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20005668 	.word	0x20005668
 800d7a0:	20005660 	.word	0x20005660

0800d7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7b0:	4b27      	ldr	r3, [pc, #156]	; (800d850 <prvHeapInit+0xac>)
 800d7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00c      	beq.n	800d7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3307      	adds	r3, #7
 800d7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0307 	bic.w	r3, r3, #7
 800d7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	4a1f      	ldr	r2, [pc, #124]	; (800d850 <prvHeapInit+0xac>)
 800d7d4:	4413      	add	r3, r2
 800d7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7dc:	4a1d      	ldr	r2, [pc, #116]	; (800d854 <prvHeapInit+0xb0>)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7e2:	4b1c      	ldr	r3, [pc, #112]	; (800d854 <prvHeapInit+0xb0>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7f0:	2208      	movs	r2, #8
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f023 0307 	bic.w	r3, r3, #7
 800d7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a15      	ldr	r2, [pc, #84]	; (800d858 <prvHeapInit+0xb4>)
 800d804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d806:	4b14      	ldr	r3, [pc, #80]	; (800d858 <prvHeapInit+0xb4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2200      	movs	r2, #0
 800d80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d80e:	4b12      	ldr	r3, [pc, #72]	; (800d858 <prvHeapInit+0xb4>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	1ad2      	subs	r2, r2, r3
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d824:	4b0c      	ldr	r3, [pc, #48]	; (800d858 <prvHeapInit+0xb4>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	4a0a      	ldr	r2, [pc, #40]	; (800d85c <prvHeapInit+0xb8>)
 800d832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	4a09      	ldr	r2, [pc, #36]	; (800d860 <prvHeapInit+0xbc>)
 800d83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <prvHeapInit+0xc0>)
 800d83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d842:	601a      	str	r2, [r3, #0]
}
 800d844:	bf00      	nop
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	20001a54 	.word	0x20001a54
 800d854:	20005654 	.word	0x20005654
 800d858:	2000565c 	.word	0x2000565c
 800d85c:	20005664 	.word	0x20005664
 800d860:	20005660 	.word	0x20005660
 800d864:	20005668 	.word	0x20005668

0800d868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d870:	4b28      	ldr	r3, [pc, #160]	; (800d914 <prvInsertBlockIntoFreeList+0xac>)
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	e002      	b.n	800d87c <prvInsertBlockIntoFreeList+0x14>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	60fb      	str	r3, [r7, #12]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	429a      	cmp	r2, r3
 800d884:	d8f7      	bhi.n	800d876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	4413      	add	r3, r2
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d108      	bne.n	800d8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	441a      	add	r2, r3
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d118      	bne.n	800d8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <prvInsertBlockIntoFreeList+0xb0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d00d      	beq.n	800d8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	441a      	add	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	e008      	b.n	800d8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	; (800d918 <prvInsertBlockIntoFreeList+0xb0>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e003      	b.n	800d8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d002      	beq.n	800d906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d906:	bf00      	nop
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	20005654 	.word	0x20005654
 800d918:	2000565c 	.word	0x2000565c

0800d91c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d920:	2200      	movs	r2, #0
 800d922:	4912      	ldr	r1, [pc, #72]	; (800d96c <MX_USB_DEVICE_Init+0x50>)
 800d924:	4812      	ldr	r0, [pc, #72]	; (800d970 <MX_USB_DEVICE_Init+0x54>)
 800d926:	f7fb fca9 	bl	800927c <USBD_Init>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d930:	f7f3 fb06 	bl	8000f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d934:	490f      	ldr	r1, [pc, #60]	; (800d974 <MX_USB_DEVICE_Init+0x58>)
 800d936:	480e      	ldr	r0, [pc, #56]	; (800d970 <MX_USB_DEVICE_Init+0x54>)
 800d938:	f7fb fcd0 	bl	80092dc <USBD_RegisterClass>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d942:	f7f3 fafd 	bl	8000f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d946:	490c      	ldr	r1, [pc, #48]	; (800d978 <MX_USB_DEVICE_Init+0x5c>)
 800d948:	4809      	ldr	r0, [pc, #36]	; (800d970 <MX_USB_DEVICE_Init+0x54>)
 800d94a:	f7fb fbc7 	bl	80090dc <USBD_CDC_RegisterInterface>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d954:	f7f3 faf4 	bl	8000f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d958:	4805      	ldr	r0, [pc, #20]	; (800d970 <MX_USB_DEVICE_Init+0x54>)
 800d95a:	f7fb fcf5 	bl	8009348 <USBD_Start>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d001      	beq.n	800d968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d964:	f7f3 faec 	bl	8000f40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d968:	bf00      	nop
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	200000b0 	.word	0x200000b0
 800d970:	2000566c 	.word	0x2000566c
 800d974:	20000018 	.word	0x20000018
 800d978:	2000009c 	.word	0x2000009c

0800d97c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d980:	2200      	movs	r2, #0
 800d982:	4905      	ldr	r1, [pc, #20]	; (800d998 <CDC_Init_FS+0x1c>)
 800d984:	4805      	ldr	r0, [pc, #20]	; (800d99c <CDC_Init_FS+0x20>)
 800d986:	f7fb fbc3 	bl	8009110 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d98a:	4905      	ldr	r1, [pc, #20]	; (800d9a0 <CDC_Init_FS+0x24>)
 800d98c:	4803      	ldr	r0, [pc, #12]	; (800d99c <CDC_Init_FS+0x20>)
 800d98e:	f7fb fbe1 	bl	8009154 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d994:	4618      	mov	r0, r3
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20006148 	.word	0x20006148
 800d99c:	2000566c 	.word	0x2000566c
 800d9a0:	20005948 	.word	0x20005948

0800d9a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6039      	str	r1, [r7, #0]
 800d9be:	71fb      	strb	r3, [r7, #7]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	2b23      	cmp	r3, #35	; 0x23
 800d9c8:	d84a      	bhi.n	800da60 <CDC_Control_FS+0xac>
 800d9ca:	a201      	add	r2, pc, #4	; (adr r2, 800d9d0 <CDC_Control_FS+0x1c>)
 800d9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d0:	0800da61 	.word	0x0800da61
 800d9d4:	0800da61 	.word	0x0800da61
 800d9d8:	0800da61 	.word	0x0800da61
 800d9dc:	0800da61 	.word	0x0800da61
 800d9e0:	0800da61 	.word	0x0800da61
 800d9e4:	0800da61 	.word	0x0800da61
 800d9e8:	0800da61 	.word	0x0800da61
 800d9ec:	0800da61 	.word	0x0800da61
 800d9f0:	0800da61 	.word	0x0800da61
 800d9f4:	0800da61 	.word	0x0800da61
 800d9f8:	0800da61 	.word	0x0800da61
 800d9fc:	0800da61 	.word	0x0800da61
 800da00:	0800da61 	.word	0x0800da61
 800da04:	0800da61 	.word	0x0800da61
 800da08:	0800da61 	.word	0x0800da61
 800da0c:	0800da61 	.word	0x0800da61
 800da10:	0800da61 	.word	0x0800da61
 800da14:	0800da61 	.word	0x0800da61
 800da18:	0800da61 	.word	0x0800da61
 800da1c:	0800da61 	.word	0x0800da61
 800da20:	0800da61 	.word	0x0800da61
 800da24:	0800da61 	.word	0x0800da61
 800da28:	0800da61 	.word	0x0800da61
 800da2c:	0800da61 	.word	0x0800da61
 800da30:	0800da61 	.word	0x0800da61
 800da34:	0800da61 	.word	0x0800da61
 800da38:	0800da61 	.word	0x0800da61
 800da3c:	0800da61 	.word	0x0800da61
 800da40:	0800da61 	.word	0x0800da61
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da61 	.word	0x0800da61
 800da4c:	0800da61 	.word	0x0800da61
 800da50:	0800da61 	.word	0x0800da61
 800da54:	0800da61 	.word	0x0800da61
 800da58:	0800da61 	.word	0x0800da61
 800da5c:	0800da61 	.word	0x0800da61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da60:	bf00      	nop
  }

  return (USBD_OK);
 800da62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	4813      	ldr	r0, [pc, #76]	; (800dacc <CDC_Receive_FS+0x5c>)
 800da7e:	f7fb fb69 	bl	8009154 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da82:	4812      	ldr	r0, [pc, #72]	; (800dacc <CDC_Receive_FS+0x5c>)
 800da84:	f7fb fbc4 	bl	8009210 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 800da8e:	4b10      	ldr	r3, [pc, #64]	; (800dad0 <CDC_Receive_FS+0x60>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d015      	beq.n	800dac2 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', 4);						//Clear msg-obj
 800da96:	f107 0308 	add.w	r3, r7, #8
 800da9a:	2204      	movs	r2, #4
 800da9c:	2100      	movs	r1, #0
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fd2a 	bl	800e4f8 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 800daa4:	7bfa      	ldrb	r2, [r7, #15]
 800daa6:	f107 0308 	add.w	r3, r7, #8
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 fd15 	bl	800e4dc <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 800dab2:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <CDC_Receive_FS+0x60>)
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	f107 0108 	add.w	r1, r7, #8
 800daba:	2300      	movs	r3, #0
 800dabc:	2200      	movs	r2, #0
 800dabe:	f7fd f8c5 	bl	800ac4c <osMessageQueuePut>
  	}

  return (USBD_OK);
 800dac2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	2000566c 	.word	0x2000566c
 800dad0:	200005f8 	.word	0x200005f8

0800dad4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dae4:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <CDC_Transmit_FS+0x48>)
 800dae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e00b      	b.n	800db12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dafa:	887b      	ldrh	r3, [r7, #2]
 800dafc:	461a      	mov	r2, r3
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4806      	ldr	r0, [pc, #24]	; (800db1c <CDC_Transmit_FS+0x48>)
 800db02:	f7fb fb05 	bl	8009110 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db06:	4805      	ldr	r0, [pc, #20]	; (800db1c <CDC_Transmit_FS+0x48>)
 800db08:	f7fb fb42 	bl	8009190 <USBD_CDC_TransmitPacket>
 800db0c:	4603      	mov	r3, r0
 800db0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db10:	7bfb      	ldrb	r3, [r7, #15]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	2000566c 	.word	0x2000566c

0800db20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db20:	b480      	push	{r7}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db36:	4618      	mov	r0, r3
 800db38:	371c      	adds	r7, #28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
	...

0800db44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	6039      	str	r1, [r7, #0]
 800db4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2212      	movs	r2, #18
 800db54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db56:	4b03      	ldr	r3, [pc, #12]	; (800db64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800db58:	4618      	mov	r0, r3
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	200000d0 	.word	0x200000d0

0800db68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	6039      	str	r1, [r7, #0]
 800db72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2204      	movs	r2, #4
 800db78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db7a:	4b03      	ldr	r3, [pc, #12]	; (800db88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	200000f0 	.word	0x200000f0

0800db8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	6039      	str	r1, [r7, #0]
 800db96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db98:	79fb      	ldrb	r3, [r7, #7]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	4907      	ldr	r1, [pc, #28]	; (800dbc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800dba2:	4808      	ldr	r0, [pc, #32]	; (800dbc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800dba4:	f7fc fda6 	bl	800a6f4 <USBD_GetString>
 800dba8:	e004      	b.n	800dbb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	4904      	ldr	r1, [pc, #16]	; (800dbc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbae:	4805      	ldr	r0, [pc, #20]	; (800dbc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800dbb0:	f7fc fda0 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbb4:	4b02      	ldr	r3, [pc, #8]	; (800dbc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20006948 	.word	0x20006948
 800dbc4:	0800e84c 	.word	0x0800e84c

0800dbc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	4603      	mov	r3, r0
 800dbd0:	6039      	str	r1, [r7, #0]
 800dbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbd4:	683a      	ldr	r2, [r7, #0]
 800dbd6:	4904      	ldr	r1, [pc, #16]	; (800dbe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbd8:	4804      	ldr	r0, [pc, #16]	; (800dbec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbda:	f7fc fd8b 	bl	800a6f4 <USBD_GetString>
  return USBD_StrDesc;
 800dbde:	4b02      	ldr	r3, [pc, #8]	; (800dbe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20006948 	.word	0x20006948
 800dbec:	0800e860 	.word	0x0800e860

0800dbf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	6039      	str	r1, [r7, #0]
 800dbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	221a      	movs	r2, #26
 800dc00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc02:	f000 f855 	bl	800dcb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc06:	4b02      	ldr	r3, [pc, #8]	; (800dc10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	200000f4 	.word	0x200000f4

0800dc14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	6039      	str	r1, [r7, #0]
 800dc1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d105      	bne.n	800dc32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	4907      	ldr	r1, [pc, #28]	; (800dc48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc2a:	4808      	ldr	r0, [pc, #32]	; (800dc4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc2c:	f7fc fd62 	bl	800a6f4 <USBD_GetString>
 800dc30:	e004      	b.n	800dc3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	4904      	ldr	r1, [pc, #16]	; (800dc48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc36:	4805      	ldr	r0, [pc, #20]	; (800dc4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc38:	f7fc fd5c 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc3c:	4b02      	ldr	r3, [pc, #8]	; (800dc48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	20006948 	.word	0x20006948
 800dc4c:	0800e874 	.word	0x0800e874

0800dc50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	6039      	str	r1, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d105      	bne.n	800dc6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	4907      	ldr	r1, [pc, #28]	; (800dc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc66:	4808      	ldr	r0, [pc, #32]	; (800dc88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc68:	f7fc fd44 	bl	800a6f4 <USBD_GetString>
 800dc6c:	e004      	b.n	800dc78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	4904      	ldr	r1, [pc, #16]	; (800dc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc72:	4805      	ldr	r0, [pc, #20]	; (800dc88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc74:	f7fc fd3e 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc78:	4b02      	ldr	r3, [pc, #8]	; (800dc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20006948 	.word	0x20006948
 800dc88:	0800e880 	.word	0x0800e880

0800dc8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	6039      	str	r1, [r7, #0]
 800dc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	220c      	movs	r2, #12
 800dc9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dc9e:	4b03      	ldr	r3, [pc, #12]	; (800dcac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	200000e4 	.word	0x200000e4

0800dcb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcb6:	4b0f      	ldr	r3, [pc, #60]	; (800dcf4 <Get_SerialNum+0x44>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcbc:	4b0e      	ldr	r3, [pc, #56]	; (800dcf8 <Get_SerialNum+0x48>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcc2:	4b0e      	ldr	r3, [pc, #56]	; (800dcfc <Get_SerialNum+0x4c>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4413      	add	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d009      	beq.n	800dcea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcd6:	2208      	movs	r2, #8
 800dcd8:	4909      	ldr	r1, [pc, #36]	; (800dd00 <Get_SerialNum+0x50>)
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f000 f814 	bl	800dd08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dce0:	2204      	movs	r2, #4
 800dce2:	4908      	ldr	r1, [pc, #32]	; (800dd04 <Get_SerialNum+0x54>)
 800dce4:	68b8      	ldr	r0, [r7, #8]
 800dce6:	f000 f80f 	bl	800dd08 <IntToUnicode>
  }
}
 800dcea:	bf00      	nop
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	1ff0f420 	.word	0x1ff0f420
 800dcf8:	1ff0f424 	.word	0x1ff0f424
 800dcfc:	1ff0f428 	.word	0x1ff0f428
 800dd00:	200000f6 	.word	0x200000f6
 800dd04:	20000106 	.word	0x20000106

0800dd08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	4613      	mov	r3, r2
 800dd14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]
 800dd1e:	e027      	b.n	800dd70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	0f1b      	lsrs	r3, r3, #28
 800dd24:	2b09      	cmp	r3, #9
 800dd26:	d80b      	bhi.n	800dd40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	0f1b      	lsrs	r3, r3, #28
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	4619      	mov	r1, r3
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	440b      	add	r3, r1
 800dd38:	3230      	adds	r2, #48	; 0x30
 800dd3a:	b2d2      	uxtb	r2, r2
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	e00a      	b.n	800dd56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	0f1b      	lsrs	r3, r3, #28
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	440b      	add	r3, r1
 800dd50:	3237      	adds	r2, #55	; 0x37
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	011b      	lsls	r3, r3, #4
 800dd5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	3301      	adds	r3, #1
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	4413      	add	r3, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd6a:	7dfb      	ldrb	r3, [r7, #23]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	75fb      	strb	r3, [r7, #23]
 800dd70:	7dfa      	ldrb	r2, [r7, #23]
 800dd72:	79fb      	ldrb	r3, [r7, #7]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d3d3      	bcc.n	800dd20 <IntToUnicode+0x18>
  }
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
	...

0800dd88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b0ae      	sub	sp, #184	; 0xb8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	605a      	str	r2, [r3, #4]
 800dd9a:	609a      	str	r2, [r3, #8]
 800dd9c:	60da      	str	r2, [r3, #12]
 800dd9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dda0:	f107 0314 	add.w	r3, r7, #20
 800dda4:	2290      	movs	r2, #144	; 0x90
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fba5 	bl	800e4f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ddb6:	d151      	bne.n	800de5c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ddb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ddbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ddc4:	f107 0314 	add.w	r3, r7, #20
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7f6 fec7 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ddd4:	f7f3 f8b4 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddd8:	4b22      	ldr	r3, [pc, #136]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800ddda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dddc:	4a21      	ldr	r2, [pc, #132]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800ddde:	f043 0301 	orr.w	r3, r3, #1
 800dde2:	6313      	str	r3, [r2, #48]	; 0x30
 800dde4:	4b1f      	ldr	r3, [pc, #124]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800dde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	613b      	str	r3, [r7, #16]
 800ddee:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de04:	2303      	movs	r3, #3
 800de06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de0a:	230a      	movs	r3, #10
 800de0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800de14:	4619      	mov	r1, r3
 800de16:	4814      	ldr	r0, [pc, #80]	; (800de68 <HAL_PCD_MspInit+0xe0>)
 800de18:	f7f4 fb8c 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de1c:	4b11      	ldr	r3, [pc, #68]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de20:	4a10      	ldr	r2, [pc, #64]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de26:	6353      	str	r3, [r2, #52]	; 0x34
 800de28:	4b0e      	ldr	r3, [pc, #56]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de38:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de3e:	6453      	str	r3, [r2, #68]	; 0x44
 800de40:	4b08      	ldr	r3, [pc, #32]	; (800de64 <HAL_PCD_MspInit+0xdc>)
 800de42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de48:	60bb      	str	r3, [r7, #8]
 800de4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800de4c:	2200      	movs	r2, #0
 800de4e:	2105      	movs	r1, #5
 800de50:	2043      	movs	r0, #67	; 0x43
 800de52:	f7f3 fec9 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de56:	2043      	movs	r0, #67	; 0x43
 800de58:	f7f3 fee2 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de5c:	bf00      	nop
 800de5e:	37b8      	adds	r7, #184	; 0xb8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	40023800 	.word	0x40023800
 800de68:	40020000 	.word	0x40020000

0800de6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fb faad 	bl	80093e2 <USBD_LL_SetupStage>
}
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800dea2:	78fa      	ldrb	r2, [r7, #3]
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	4613      	mov	r3, r2
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	440b      	add	r3, r1
 800deb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	78fb      	ldrb	r3, [r7, #3]
 800deb8:	4619      	mov	r1, r3
 800deba:	f7fb fae7 	bl	800948c <USBD_LL_DataOutStage>
}
 800debe:	bf00      	nop
 800dec0:	3708      	adds	r7, #8
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b082      	sub	sp, #8
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	460b      	mov	r3, r1
 800ded0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ded8:	78fa      	ldrb	r2, [r7, #3]
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	4613      	mov	r3, r2
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	440b      	add	r3, r1
 800dee6:	334c      	adds	r3, #76	; 0x4c
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	78fb      	ldrb	r3, [r7, #3]
 800deec:	4619      	mov	r1, r3
 800deee:	f7fb fb80 	bl	80095f2 <USBD_LL_DataInStage>
}
 800def2:	bf00      	nop
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b082      	sub	sp, #8
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fb fcb4 	bl	8009876 <USBD_LL_SOF>
}
 800df0e:	bf00      	nop
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800df1e:	2301      	movs	r3, #1
 800df20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d102      	bne.n	800df30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800df2a:	2300      	movs	r3, #0
 800df2c:	73fb      	strb	r3, [r7, #15]
 800df2e:	e008      	b.n	800df42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d102      	bne.n	800df3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800df38:	2301      	movs	r3, #1
 800df3a:	73fb      	strb	r3, [r7, #15]
 800df3c:	e001      	b.n	800df42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800df3e:	f7f2 ffff 	bl	8000f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df48:	7bfa      	ldrb	r2, [r7, #15]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fb fc54 	bl	80097fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fb fbfc 	bl	8009756 <USBD_LL_Reset>
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df76:	4618      	mov	r0, r3
 800df78:	f7fb fc4f 	bl	800981a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	6812      	ldr	r2, [r2, #0]
 800df8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df8e:	f043 0301 	orr.w	r3, r3, #1
 800df92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df9c:	4b04      	ldr	r3, [pc, #16]	; (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	4a03      	ldr	r2, [pc, #12]	; (800dfb0 <HAL_PCD_SuspendCallback+0x48>)
 800dfa2:	f043 0306 	orr.w	r3, r3, #6
 800dfa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	e000ed00 	.word	0xe000ed00

0800dfb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fb fc3f 	bl	8009846 <USBD_LL_Resume>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dfe2:	78fa      	ldrb	r2, [r7, #3]
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fb fc97 	bl	800991a <USBD_LL_IsoOUTIncomplete>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e006:	78fa      	ldrb	r2, [r7, #3]
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fb fc53 	bl	80098b6 <USBD_LL_IsoINIncomplete>
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e026:	4618      	mov	r0, r3
 800e028:	f7fb fca9 	bl	800997e <USBD_LL_DevConnected>
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e042:	4618      	mov	r0, r3
 800e044:	f7fb fca6 	bl	8009994 <USBD_LL_DevDisconnected>
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d13c      	bne.n	800e0da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e060:	4a20      	ldr	r2, [pc, #128]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a1e      	ldr	r2, [pc, #120]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e06c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e070:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e072:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e078:	4b1a      	ldr	r3, [pc, #104]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e07a:	2206      	movs	r2, #6
 800e07c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e07e:	4b19      	ldr	r3, [pc, #100]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e080:	2202      	movs	r2, #2
 800e082:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e084:	4b17      	ldr	r3, [pc, #92]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e086:	2200      	movs	r2, #0
 800e088:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e08a:	4b16      	ldr	r3, [pc, #88]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e08c:	2202      	movs	r2, #2
 800e08e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e090:	4b14      	ldr	r3, [pc, #80]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e092:	2200      	movs	r2, #0
 800e094:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e096:	4b13      	ldr	r3, [pc, #76]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e098:	2200      	movs	r2, #0
 800e09a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e0a2:	4b10      	ldr	r3, [pc, #64]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0ae:	480d      	ldr	r0, [pc, #52]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0b0:	f7f4 fd45 	bl	8002b3e <HAL_PCD_Init>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e0ba:	f7f2 ff41 	bl	8000f40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e0be:	2180      	movs	r1, #128	; 0x80
 800e0c0:	4808      	ldr	r0, [pc, #32]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0c2:	f7f5 ffc0 	bl	8004046 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e0c6:	2240      	movs	r2, #64	; 0x40
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4806      	ldr	r0, [pc, #24]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0cc:	f7f5 ff74 	bl	8003fb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0d0:	2280      	movs	r2, #128	; 0x80
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	4803      	ldr	r0, [pc, #12]	; (800e0e4 <USBD_LL_Init+0x94>)
 800e0d6:	f7f5 ff6f 	bl	8003fb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20006b48 	.word	0x20006b48

0800e0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f4 fe41 	bl	8002d86 <HAL_PCD_Start>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f97e 	bl	800e40c <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	70fb      	strb	r3, [r7, #3]
 800e130:	460b      	mov	r3, r1
 800e132:	70bb      	strb	r3, [r7, #2]
 800e134:	4613      	mov	r3, r2
 800e136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e146:	78bb      	ldrb	r3, [r7, #2]
 800e148:	883a      	ldrh	r2, [r7, #0]
 800e14a:	78f9      	ldrb	r1, [r7, #3]
 800e14c:	f7f5 fb2e 	bl	80037ac <HAL_PCD_EP_Open>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f958 	bl	800e40c <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f5 fb77 	bl	800387c <HAL_PCD_EP_Close>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f939 	bl	800e40c <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f5 fc4f 	bl	8003a6a <HAL_PCD_EP_SetStall>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f91a 	bl	800e40c <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f5 fc94 	bl	8003b32 <HAL_PCD_EP_ClrStall>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8fb 	bl	800e40c <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da0b      	bge.n	800e258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	00db      	lsls	r3, r3, #3
 800e24c:	4413      	add	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	440b      	add	r3, r1
 800e252:	333e      	adds	r3, #62	; 0x3e
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	e00b      	b.n	800e270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f5 fa61 	bl	8003762 <HAL_PCD_SetAddress>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f8b0 	bl	800e40c <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b086      	sub	sp, #24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f7f5 fb7a 	bl	80039d6 <HAL_PCD_EP_Transmit>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f88f 	bl	800e40c <USBD_Get_USB_Status>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	607a      	str	r2, [r7, #4]
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e31a:	7af9      	ldrb	r1, [r7, #11]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f7f5 faf6 	bl	8003910 <HAL_PCD_EP_Receive>
 800e324:	4603      	mov	r3, r0
 800e326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f86e 	bl	800e40c <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e334:	7dbb      	ldrb	r3, [r7, #22]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7f5 fb26 	bl	80039a6 <HAL_PCD_EP_GetRxCount>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <HAL_PCDEx_LPM_Callback+0x18>
 800e376:	2b01      	cmp	r3, #1
 800e378:	d01f      	beq.n	800e3ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e37a:	e03b      	b.n	800e3f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a1b      	ldr	r3, [r3, #32]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d007      	beq.n	800e394 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e384:	f000 f83c 	bl	800e400 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e388:	4b1c      	ldr	r3, [pc, #112]	; (800e3fc <HAL_PCDEx_LPM_Callback+0x98>)
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	4a1b      	ldr	r2, [pc, #108]	; (800e3fc <HAL_PCDEx_LPM_Callback+0x98>)
 800e38e:	f023 0306 	bic.w	r3, r3, #6
 800e392:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	6812      	ldr	r2, [r2, #0]
 800e3a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3a6:	f023 0301 	bic.w	r3, r3, #1
 800e3aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fb fa47 	bl	8009846 <USBD_LL_Resume>
    break;
 800e3b8:	e01c      	b.n	800e3f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3cc:	f043 0301 	orr.w	r3, r3, #1
 800e3d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fb fa1e 	bl	800981a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d005      	beq.n	800e3f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3e6:	4b05      	ldr	r3, [pc, #20]	; (800e3fc <HAL_PCDEx_LPM_Callback+0x98>)
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	4a04      	ldr	r2, [pc, #16]	; (800e3fc <HAL_PCDEx_LPM_Callback+0x98>)
 800e3ec:	f043 0306 	orr.w	r3, r3, #6
 800e3f0:	6113      	str	r3, [r2, #16]
    break;
 800e3f2:	bf00      	nop
}
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	e000ed00 	.word	0xe000ed00

0800e400 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e404:	f7f2 f978 	bl	80006f8 <SystemClock_Config>
}
 800e408:	bf00      	nop
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d817      	bhi.n	800e450 <USBD_Get_USB_Status+0x44>
 800e420:	a201      	add	r2, pc, #4	; (adr r2, 800e428 <USBD_Get_USB_Status+0x1c>)
 800e422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e426:	bf00      	nop
 800e428:	0800e439 	.word	0x0800e439
 800e42c:	0800e43f 	.word	0x0800e43f
 800e430:	0800e445 	.word	0x0800e445
 800e434:	0800e44b 	.word	0x0800e44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	73fb      	strb	r3, [r7, #15]
    break;
 800e43c:	e00b      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e43e:	2303      	movs	r3, #3
 800e440:	73fb      	strb	r3, [r7, #15]
    break;
 800e442:	e008      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e444:	2301      	movs	r3, #1
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	e005      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e44a:	2303      	movs	r3, #3
 800e44c:	73fb      	strb	r3, [r7, #15]
    break;
 800e44e:	e002      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e450:	2303      	movs	r3, #3
 800e452:	73fb      	strb	r3, [r7, #15]
    break;
 800e454:	bf00      	nop
  }
  return usb_status;
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <__errno>:
 800e464:	4b01      	ldr	r3, [pc, #4]	; (800e46c <__errno+0x8>)
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	20000110 	.word	0x20000110

0800e470 <__libc_init_array>:
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	4d0d      	ldr	r5, [pc, #52]	; (800e4a8 <__libc_init_array+0x38>)
 800e474:	4c0d      	ldr	r4, [pc, #52]	; (800e4ac <__libc_init_array+0x3c>)
 800e476:	1b64      	subs	r4, r4, r5
 800e478:	10a4      	asrs	r4, r4, #2
 800e47a:	2600      	movs	r6, #0
 800e47c:	42a6      	cmp	r6, r4
 800e47e:	d109      	bne.n	800e494 <__libc_init_array+0x24>
 800e480:	4d0b      	ldr	r5, [pc, #44]	; (800e4b0 <__libc_init_array+0x40>)
 800e482:	4c0c      	ldr	r4, [pc, #48]	; (800e4b4 <__libc_init_array+0x44>)
 800e484:	f000 f9a6 	bl	800e7d4 <_init>
 800e488:	1b64      	subs	r4, r4, r5
 800e48a:	10a4      	asrs	r4, r4, #2
 800e48c:	2600      	movs	r6, #0
 800e48e:	42a6      	cmp	r6, r4
 800e490:	d105      	bne.n	800e49e <__libc_init_array+0x2e>
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	f855 3b04 	ldr.w	r3, [r5], #4
 800e498:	4798      	blx	r3
 800e49a:	3601      	adds	r6, #1
 800e49c:	e7ee      	b.n	800e47c <__libc_init_array+0xc>
 800e49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4a2:	4798      	blx	r3
 800e4a4:	3601      	adds	r6, #1
 800e4a6:	e7f2      	b.n	800e48e <__libc_init_array+0x1e>
 800e4a8:	0800e9c4 	.word	0x0800e9c4
 800e4ac:	0800e9c4 	.word	0x0800e9c4
 800e4b0:	0800e9c4 	.word	0x0800e9c4
 800e4b4:	0800e9c8 	.word	0x0800e9c8

0800e4b8 <__retarget_lock_acquire_recursive>:
 800e4b8:	4770      	bx	lr

0800e4ba <__retarget_lock_release_recursive>:
 800e4ba:	4770      	bx	lr

0800e4bc <malloc>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <malloc+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f000 b88d 	b.w	800e5e0 <_malloc_r>
 800e4c6:	bf00      	nop
 800e4c8:	20000110 	.word	0x20000110

0800e4cc <free>:
 800e4cc:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <free+0xc>)
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	6818      	ldr	r0, [r3, #0]
 800e4d2:	f000 b819 	b.w	800e508 <_free_r>
 800e4d6:	bf00      	nop
 800e4d8:	20000110 	.word	0x20000110

0800e4dc <memcpy>:
 800e4dc:	440a      	add	r2, r1
 800e4de:	4291      	cmp	r1, r2
 800e4e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e4e4:	d100      	bne.n	800e4e8 <memcpy+0xc>
 800e4e6:	4770      	bx	lr
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4f2:	4291      	cmp	r1, r2
 800e4f4:	d1f9      	bne.n	800e4ea <memcpy+0xe>
 800e4f6:	bd10      	pop	{r4, pc}

0800e4f8 <memset>:
 800e4f8:	4402      	add	r2, r0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d100      	bne.n	800e502 <memset+0xa>
 800e500:	4770      	bx	lr
 800e502:	f803 1b01 	strb.w	r1, [r3], #1
 800e506:	e7f9      	b.n	800e4fc <memset+0x4>

0800e508 <_free_r>:
 800e508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e50a:	2900      	cmp	r1, #0
 800e50c:	d044      	beq.n	800e598 <_free_r+0x90>
 800e50e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e512:	9001      	str	r0, [sp, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f1a1 0404 	sub.w	r4, r1, #4
 800e51a:	bfb8      	it	lt
 800e51c:	18e4      	addlt	r4, r4, r3
 800e51e:	f000 f94d 	bl	800e7bc <__malloc_lock>
 800e522:	4a1e      	ldr	r2, [pc, #120]	; (800e59c <_free_r+0x94>)
 800e524:	9801      	ldr	r0, [sp, #4]
 800e526:	6813      	ldr	r3, [r2, #0]
 800e528:	b933      	cbnz	r3, 800e538 <_free_r+0x30>
 800e52a:	6063      	str	r3, [r4, #4]
 800e52c:	6014      	str	r4, [r2, #0]
 800e52e:	b003      	add	sp, #12
 800e530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e534:	f000 b948 	b.w	800e7c8 <__malloc_unlock>
 800e538:	42a3      	cmp	r3, r4
 800e53a:	d908      	bls.n	800e54e <_free_r+0x46>
 800e53c:	6825      	ldr	r5, [r4, #0]
 800e53e:	1961      	adds	r1, r4, r5
 800e540:	428b      	cmp	r3, r1
 800e542:	bf01      	itttt	eq
 800e544:	6819      	ldreq	r1, [r3, #0]
 800e546:	685b      	ldreq	r3, [r3, #4]
 800e548:	1949      	addeq	r1, r1, r5
 800e54a:	6021      	streq	r1, [r4, #0]
 800e54c:	e7ed      	b.n	800e52a <_free_r+0x22>
 800e54e:	461a      	mov	r2, r3
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	b10b      	cbz	r3, 800e558 <_free_r+0x50>
 800e554:	42a3      	cmp	r3, r4
 800e556:	d9fa      	bls.n	800e54e <_free_r+0x46>
 800e558:	6811      	ldr	r1, [r2, #0]
 800e55a:	1855      	adds	r5, r2, r1
 800e55c:	42a5      	cmp	r5, r4
 800e55e:	d10b      	bne.n	800e578 <_free_r+0x70>
 800e560:	6824      	ldr	r4, [r4, #0]
 800e562:	4421      	add	r1, r4
 800e564:	1854      	adds	r4, r2, r1
 800e566:	42a3      	cmp	r3, r4
 800e568:	6011      	str	r1, [r2, #0]
 800e56a:	d1e0      	bne.n	800e52e <_free_r+0x26>
 800e56c:	681c      	ldr	r4, [r3, #0]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	6053      	str	r3, [r2, #4]
 800e572:	4421      	add	r1, r4
 800e574:	6011      	str	r1, [r2, #0]
 800e576:	e7da      	b.n	800e52e <_free_r+0x26>
 800e578:	d902      	bls.n	800e580 <_free_r+0x78>
 800e57a:	230c      	movs	r3, #12
 800e57c:	6003      	str	r3, [r0, #0]
 800e57e:	e7d6      	b.n	800e52e <_free_r+0x26>
 800e580:	6825      	ldr	r5, [r4, #0]
 800e582:	1961      	adds	r1, r4, r5
 800e584:	428b      	cmp	r3, r1
 800e586:	bf04      	itt	eq
 800e588:	6819      	ldreq	r1, [r3, #0]
 800e58a:	685b      	ldreq	r3, [r3, #4]
 800e58c:	6063      	str	r3, [r4, #4]
 800e58e:	bf04      	itt	eq
 800e590:	1949      	addeq	r1, r1, r5
 800e592:	6021      	streq	r1, [r4, #0]
 800e594:	6054      	str	r4, [r2, #4]
 800e596:	e7ca      	b.n	800e52e <_free_r+0x26>
 800e598:	b003      	add	sp, #12
 800e59a:	bd30      	pop	{r4, r5, pc}
 800e59c:	20007054 	.word	0x20007054

0800e5a0 <sbrk_aligned>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	4e0e      	ldr	r6, [pc, #56]	; (800e5dc <sbrk_aligned+0x3c>)
 800e5a4:	460c      	mov	r4, r1
 800e5a6:	6831      	ldr	r1, [r6, #0]
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	b911      	cbnz	r1, 800e5b2 <sbrk_aligned+0x12>
 800e5ac:	f000 f8f6 	bl	800e79c <_sbrk_r>
 800e5b0:	6030      	str	r0, [r6, #0]
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	f000 f8f1 	bl	800e79c <_sbrk_r>
 800e5ba:	1c43      	adds	r3, r0, #1
 800e5bc:	d00a      	beq.n	800e5d4 <sbrk_aligned+0x34>
 800e5be:	1cc4      	adds	r4, r0, #3
 800e5c0:	f024 0403 	bic.w	r4, r4, #3
 800e5c4:	42a0      	cmp	r0, r4
 800e5c6:	d007      	beq.n	800e5d8 <sbrk_aligned+0x38>
 800e5c8:	1a21      	subs	r1, r4, r0
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f000 f8e6 	bl	800e79c <_sbrk_r>
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	d101      	bne.n	800e5d8 <sbrk_aligned+0x38>
 800e5d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e5d8:	4620      	mov	r0, r4
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	20007058 	.word	0x20007058

0800e5e0 <_malloc_r>:
 800e5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	1ccd      	adds	r5, r1, #3
 800e5e6:	f025 0503 	bic.w	r5, r5, #3
 800e5ea:	3508      	adds	r5, #8
 800e5ec:	2d0c      	cmp	r5, #12
 800e5ee:	bf38      	it	cc
 800e5f0:	250c      	movcc	r5, #12
 800e5f2:	2d00      	cmp	r5, #0
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	db01      	blt.n	800e5fc <_malloc_r+0x1c>
 800e5f8:	42a9      	cmp	r1, r5
 800e5fa:	d905      	bls.n	800e608 <_malloc_r+0x28>
 800e5fc:	230c      	movs	r3, #12
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	2600      	movs	r6, #0
 800e602:	4630      	mov	r0, r6
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	4e2e      	ldr	r6, [pc, #184]	; (800e6c4 <_malloc_r+0xe4>)
 800e60a:	f000 f8d7 	bl	800e7bc <__malloc_lock>
 800e60e:	6833      	ldr	r3, [r6, #0]
 800e610:	461c      	mov	r4, r3
 800e612:	bb34      	cbnz	r4, 800e662 <_malloc_r+0x82>
 800e614:	4629      	mov	r1, r5
 800e616:	4638      	mov	r0, r7
 800e618:	f7ff ffc2 	bl	800e5a0 <sbrk_aligned>
 800e61c:	1c43      	adds	r3, r0, #1
 800e61e:	4604      	mov	r4, r0
 800e620:	d14d      	bne.n	800e6be <_malloc_r+0xde>
 800e622:	6834      	ldr	r4, [r6, #0]
 800e624:	4626      	mov	r6, r4
 800e626:	2e00      	cmp	r6, #0
 800e628:	d140      	bne.n	800e6ac <_malloc_r+0xcc>
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	4631      	mov	r1, r6
 800e62e:	4638      	mov	r0, r7
 800e630:	eb04 0803 	add.w	r8, r4, r3
 800e634:	f000 f8b2 	bl	800e79c <_sbrk_r>
 800e638:	4580      	cmp	r8, r0
 800e63a:	d13a      	bne.n	800e6b2 <_malloc_r+0xd2>
 800e63c:	6821      	ldr	r1, [r4, #0]
 800e63e:	3503      	adds	r5, #3
 800e640:	1a6d      	subs	r5, r5, r1
 800e642:	f025 0503 	bic.w	r5, r5, #3
 800e646:	3508      	adds	r5, #8
 800e648:	2d0c      	cmp	r5, #12
 800e64a:	bf38      	it	cc
 800e64c:	250c      	movcc	r5, #12
 800e64e:	4629      	mov	r1, r5
 800e650:	4638      	mov	r0, r7
 800e652:	f7ff ffa5 	bl	800e5a0 <sbrk_aligned>
 800e656:	3001      	adds	r0, #1
 800e658:	d02b      	beq.n	800e6b2 <_malloc_r+0xd2>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	442b      	add	r3, r5
 800e65e:	6023      	str	r3, [r4, #0]
 800e660:	e00e      	b.n	800e680 <_malloc_r+0xa0>
 800e662:	6822      	ldr	r2, [r4, #0]
 800e664:	1b52      	subs	r2, r2, r5
 800e666:	d41e      	bmi.n	800e6a6 <_malloc_r+0xc6>
 800e668:	2a0b      	cmp	r2, #11
 800e66a:	d916      	bls.n	800e69a <_malloc_r+0xba>
 800e66c:	1961      	adds	r1, r4, r5
 800e66e:	42a3      	cmp	r3, r4
 800e670:	6025      	str	r5, [r4, #0]
 800e672:	bf18      	it	ne
 800e674:	6059      	strne	r1, [r3, #4]
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	bf08      	it	eq
 800e67a:	6031      	streq	r1, [r6, #0]
 800e67c:	5162      	str	r2, [r4, r5]
 800e67e:	604b      	str	r3, [r1, #4]
 800e680:	4638      	mov	r0, r7
 800e682:	f104 060b 	add.w	r6, r4, #11
 800e686:	f000 f89f 	bl	800e7c8 <__malloc_unlock>
 800e68a:	f026 0607 	bic.w	r6, r6, #7
 800e68e:	1d23      	adds	r3, r4, #4
 800e690:	1af2      	subs	r2, r6, r3
 800e692:	d0b6      	beq.n	800e602 <_malloc_r+0x22>
 800e694:	1b9b      	subs	r3, r3, r6
 800e696:	50a3      	str	r3, [r4, r2]
 800e698:	e7b3      	b.n	800e602 <_malloc_r+0x22>
 800e69a:	6862      	ldr	r2, [r4, #4]
 800e69c:	42a3      	cmp	r3, r4
 800e69e:	bf0c      	ite	eq
 800e6a0:	6032      	streq	r2, [r6, #0]
 800e6a2:	605a      	strne	r2, [r3, #4]
 800e6a4:	e7ec      	b.n	800e680 <_malloc_r+0xa0>
 800e6a6:	4623      	mov	r3, r4
 800e6a8:	6864      	ldr	r4, [r4, #4]
 800e6aa:	e7b2      	b.n	800e612 <_malloc_r+0x32>
 800e6ac:	4634      	mov	r4, r6
 800e6ae:	6876      	ldr	r6, [r6, #4]
 800e6b0:	e7b9      	b.n	800e626 <_malloc_r+0x46>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	603b      	str	r3, [r7, #0]
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	f000 f886 	bl	800e7c8 <__malloc_unlock>
 800e6bc:	e7a1      	b.n	800e602 <_malloc_r+0x22>
 800e6be:	6025      	str	r5, [r4, #0]
 800e6c0:	e7de      	b.n	800e680 <_malloc_r+0xa0>
 800e6c2:	bf00      	nop
 800e6c4:	20007054 	.word	0x20007054

0800e6c8 <cleanup_glue>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	6809      	ldr	r1, [r1, #0]
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	b109      	cbz	r1, 800e6d6 <cleanup_glue+0xe>
 800e6d2:	f7ff fff9 	bl	800e6c8 <cleanup_glue>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6de:	f7ff bf13 	b.w	800e508 <_free_r>
	...

0800e6e4 <_reclaim_reent>:
 800e6e4:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <_reclaim_reent+0xb4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4283      	cmp	r3, r0
 800e6ea:	b570      	push	{r4, r5, r6, lr}
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	d051      	beq.n	800e794 <_reclaim_reent+0xb0>
 800e6f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e6f2:	b143      	cbz	r3, 800e706 <_reclaim_reent+0x22>
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d14a      	bne.n	800e790 <_reclaim_reent+0xac>
 800e6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6fc:	6819      	ldr	r1, [r3, #0]
 800e6fe:	b111      	cbz	r1, 800e706 <_reclaim_reent+0x22>
 800e700:	4620      	mov	r0, r4
 800e702:	f7ff ff01 	bl	800e508 <_free_r>
 800e706:	6961      	ldr	r1, [r4, #20]
 800e708:	b111      	cbz	r1, 800e710 <_reclaim_reent+0x2c>
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff fefc 	bl	800e508 <_free_r>
 800e710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e712:	b111      	cbz	r1, 800e71a <_reclaim_reent+0x36>
 800e714:	4620      	mov	r0, r4
 800e716:	f7ff fef7 	bl	800e508 <_free_r>
 800e71a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e71c:	b111      	cbz	r1, 800e724 <_reclaim_reent+0x40>
 800e71e:	4620      	mov	r0, r4
 800e720:	f7ff fef2 	bl	800e508 <_free_r>
 800e724:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e726:	b111      	cbz	r1, 800e72e <_reclaim_reent+0x4a>
 800e728:	4620      	mov	r0, r4
 800e72a:	f7ff feed 	bl	800e508 <_free_r>
 800e72e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e730:	b111      	cbz	r1, 800e738 <_reclaim_reent+0x54>
 800e732:	4620      	mov	r0, r4
 800e734:	f7ff fee8 	bl	800e508 <_free_r>
 800e738:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e73a:	b111      	cbz	r1, 800e742 <_reclaim_reent+0x5e>
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7ff fee3 	bl	800e508 <_free_r>
 800e742:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e744:	b111      	cbz	r1, 800e74c <_reclaim_reent+0x68>
 800e746:	4620      	mov	r0, r4
 800e748:	f7ff fede 	bl	800e508 <_free_r>
 800e74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e74e:	b111      	cbz	r1, 800e756 <_reclaim_reent+0x72>
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff fed9 	bl	800e508 <_free_r>
 800e756:	69a3      	ldr	r3, [r4, #24]
 800e758:	b1e3      	cbz	r3, 800e794 <_reclaim_reent+0xb0>
 800e75a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e75c:	4620      	mov	r0, r4
 800e75e:	4798      	blx	r3
 800e760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e762:	b1b9      	cbz	r1, 800e794 <_reclaim_reent+0xb0>
 800e764:	4620      	mov	r0, r4
 800e766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e76a:	f7ff bfad 	b.w	800e6c8 <cleanup_glue>
 800e76e:	5949      	ldr	r1, [r1, r5]
 800e770:	b941      	cbnz	r1, 800e784 <_reclaim_reent+0xa0>
 800e772:	3504      	adds	r5, #4
 800e774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e776:	2d80      	cmp	r5, #128	; 0x80
 800e778:	68d9      	ldr	r1, [r3, #12]
 800e77a:	d1f8      	bne.n	800e76e <_reclaim_reent+0x8a>
 800e77c:	4620      	mov	r0, r4
 800e77e:	f7ff fec3 	bl	800e508 <_free_r>
 800e782:	e7ba      	b.n	800e6fa <_reclaim_reent+0x16>
 800e784:	680e      	ldr	r6, [r1, #0]
 800e786:	4620      	mov	r0, r4
 800e788:	f7ff febe 	bl	800e508 <_free_r>
 800e78c:	4631      	mov	r1, r6
 800e78e:	e7ef      	b.n	800e770 <_reclaim_reent+0x8c>
 800e790:	2500      	movs	r5, #0
 800e792:	e7ef      	b.n	800e774 <_reclaim_reent+0x90>
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	bf00      	nop
 800e798:	20000110 	.word	0x20000110

0800e79c <_sbrk_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d06      	ldr	r5, [pc, #24]	; (800e7b8 <_sbrk_r+0x1c>)
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	602b      	str	r3, [r5, #0]
 800e7a8:	f7f2 ff9e 	bl	80016e8 <_sbrk>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	d102      	bne.n	800e7b6 <_sbrk_r+0x1a>
 800e7b0:	682b      	ldr	r3, [r5, #0]
 800e7b2:	b103      	cbz	r3, 800e7b6 <_sbrk_r+0x1a>
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	2000705c 	.word	0x2000705c

0800e7bc <__malloc_lock>:
 800e7bc:	4801      	ldr	r0, [pc, #4]	; (800e7c4 <__malloc_lock+0x8>)
 800e7be:	f7ff be7b 	b.w	800e4b8 <__retarget_lock_acquire_recursive>
 800e7c2:	bf00      	nop
 800e7c4:	20007050 	.word	0x20007050

0800e7c8 <__malloc_unlock>:
 800e7c8:	4801      	ldr	r0, [pc, #4]	; (800e7d0 <__malloc_unlock+0x8>)
 800e7ca:	f7ff be76 	b.w	800e4ba <__retarget_lock_release_recursive>
 800e7ce:	bf00      	nop
 800e7d0:	20007050 	.word	0x20007050

0800e7d4 <_init>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr

0800e7e0 <_fini>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	bf00      	nop
 800e7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e6:	bc08      	pop	{r3}
 800e7e8:	469e      	mov	lr, r3
 800e7ea:	4770      	bx	lr

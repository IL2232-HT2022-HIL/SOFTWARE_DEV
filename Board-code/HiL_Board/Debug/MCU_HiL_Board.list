
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b74  08008b74  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b7c  08008b7c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08008bf8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08008c98  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052a8  200001b4  08008d38  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000545c  08008d38  0002545c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b78d  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a15  00000000  00000000  0004b96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002120  00000000  00000000  00050388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001f58  00000000  00000000  000524a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005329  00000000  00000000  00054400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026c6e  00000000  00000000  00059729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001153bd  00000000  00000000  00080397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00195754  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009254  00000000  00000000  001957a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a68 	.word	0x08008a68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08008a68 	.word	0x08008a68

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f001 f8b3 	bl	80016b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f836 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fad8 	bl	8000b04 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000554:	f000 f8a2 	bl	800069c <MX_CAN1_Init>
  MX_DAC_Init();
 8000558:	f000 f8d4 	bl	8000704 <MX_DAC_Init>
  MX_ETH_Init();
 800055c:	f000 f8fc 	bl	8000758 <MX_ETH_Init>
  MX_I2C1_Init();
 8000560:	f000 f948 	bl	80007f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000564:	f000 f986 	bl	8000874 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000568:	f000 f9be 	bl	80008e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 800056c:	f000 f9f6 	bl	800095c <MX_TIM1_Init>
  MX_UART7_Init();
 8000570:	f000 fa6a 	bl	8000a48 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000574:	f000 fa98 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000578:	f005 fb80 	bl	8005c7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <main+0x60>)
 800057e:	2100      	movs	r1, #0
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x64>)
 8000582:	f005 fbe5 	bl	8005d50 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <main+0x68>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of ShiftRegLightOn */
  ShiftRegLightOnHandle = osThreadNew(StartShiftRegLightOn, NULL, &ShiftRegLightOn_attributes);
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0x6c>)
 800058e:	2100      	movs	r1, #0
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x70>)
 8000592:	f005 fbdd 	bl	8005d50 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0x74>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f005 fba2 	bl	8005ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x5c>
 80005a2:	bf00      	nop
 80005a4:	08008ab4 	.word	0x08008ab4
 80005a8:	08000d91 	.word	0x08000d91
 80005ac:	200009ec 	.word	0x200009ec
 80005b0:	08008ad8 	.word	0x08008ad8
 80005b4:	08000da1 	.word	0x08000da1
 80005b8:	200009f0 	.word	0x200009f0

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f008 f982 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xd8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xd8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xdc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <SystemClock_Config+0xdc>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f002 faf1 	bl	8002c28 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 fbc2 	bl	8000dd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f002 fa9a 	bl	8002b88 <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800065a:	f000 fbbb 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2103      	movs	r1, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fd82 	bl	8003184 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000686:	f000 fba5 	bl	8000dd4 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_CAN1_Init+0x60>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_CAN1_Init+0x64>)
 80006a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_CAN1_Init+0x60>)
 80006a8:	2210      	movs	r2, #16
 80006aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_CAN1_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_CAN1_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_CAN1_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_CAN1_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_CAN1_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_CAN1_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_CAN1_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_CAN1_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_CAN1_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_CAN1_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_CAN1_Init+0x60>)
 80006ea:	f001 f833 	bl	8001754 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 fb6e 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000208 	.word	0x20000208
 8000700:	40006400 	.word	0x40006400

08000704 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_DAC_Init+0x4c>)
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_DAC_Init+0x50>)
 8000716:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_DAC_Init+0x4c>)
 800071a:	f001 f9f9 	bl	8001b10 <HAL_DAC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000724:	f000 fb56 	bl	8000dd4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_DAC_Init+0x4c>)
 8000738:	f001 fa70 	bl	8001c1c <HAL_DAC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000742:	f000 fb47 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000230 	.word	0x20000230
 8000754:	40007400 	.word	0x40007400

08000758 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ETH_Init+0x84>)
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_ETH_Init+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ETH_Init+0x8c>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000770:	22e1      	movs	r2, #225	; 0xe1
 8000772:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ETH_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_ETH_Init+0x84>)
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_ETH_Init+0x8c>)
 800078a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ETH_Init+0x84>)
 800078e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000792:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ETH_Init+0x84>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_ETH_Init+0x90>)
 8000798:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_ETH_Init+0x84>)
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_ETH_Init+0x94>)
 800079e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_ETH_Init+0x84>)
 80007a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x84>)
 80007aa:	f001 fa91 	bl	8001cd0 <HAL_ETH_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fb0e 	bl	8000dd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b8:	2238      	movs	r2, #56	; 0x38
 80007ba:	2100      	movs	r1, #0
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_ETH_Init+0x98>)
 80007be:	f008 f889 	bl	80088d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_ETH_Init+0x98>)
 80007c4:	2221      	movs	r2, #33	; 0x21
 80007c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_ETH_Init+0x98>)
 80007ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_ETH_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000244 	.word	0x20000244
 80007e0:	40028000 	.word	0x40028000
 80007e4:	200009f4 	.word	0x200009f4
 80007e8:	20000114 	.word	0x20000114
 80007ec:	20000074 	.word	0x20000074
 80007f0:	200001d0 	.word	0x200001d0

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C1_Init+0x74>)
 8000830:	f001 ff3a 	bl	80026a8 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 facb 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C1_Init+0x74>)
 8000842:	f001 ffc1 	bl	80027c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fac2 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C1_Init+0x74>)
 8000854:	f002 f803 	bl	800285e <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fab9 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002f4 	.word	0x200002f4
 800086c:	40005400 	.word	0x40005400
 8000870:	20303e5d 	.word	0x20303e5d

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_SPI1_Init+0x6c>)
 800087a:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <MX_SPI1_Init+0x70>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_SPI1_Init+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI1_Init+0x6c>)
 8000886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI1_Init+0x6c>)
 800088e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI1_Init+0x6c>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI1_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008bc:	2207      	movs	r2, #7
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI1_Init+0x6c>)
 80008ce:	f003 fad9 	bl	8003e84 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 80008d8:	f000 fa7c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000348 	.word	0x20000348
 80008e4:	40013000 	.word	0x40013000

080008e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_SPI3_Init+0x70>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000902:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000906:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI3_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_SPI3_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI3_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000930:	2207      	movs	r2, #7
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI3_Init+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000942:	f003 fa9f 	bl	8003e84 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 fa42 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200003ac 	.word	0x200003ac
 8000958:	40003c00 	.word	0x40003c00

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_TIM1_Init+0xe4>)
 800098a:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <MX_TIM1_Init+0xe8>)
 800098c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_TIM1_Init+0xe4>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_TIM1_Init+0xe4>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_TIM1_Init+0xe4>)
 800099c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b4:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009b6:	f003 fb10 	bl	8003fda <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 fa08 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4619      	mov	r1, r3
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009d2:	f003 fded 	bl	80045b0 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80009dc:	f000 f9fa 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <MX_TIM1_Init+0xe4>)
 80009e2:	f003 fbc9 	bl	8004178 <HAL_TIM_IC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009ec:	f000 f9f2 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_TIM1_Init+0xe4>)
 8000a04:	f004 f92a 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a0e:	f000 f9e1 	bl	8000dd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM1_Init+0xe4>)
 8000a2a:	f003 fd25 	bl	8004478 <HAL_TIM_IC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a34:	f000 f9ce 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000410 	.word	0x20000410
 8000a44:	40010000 	.word	0x40010000

08000a48 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_UART7_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_UART7_Init+0x58>)
 8000a8c:	f004 f992 	bl	8004db4 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f99d 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000045c 	.word	0x2000045c
 8000aa4:	40007800 	.word	0x40007800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f001 ff03 	bl	80028f6 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f96d 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200004e4 	.word	0x200004e4

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b95      	ldr	r3, [pc, #596]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a94      	ldr	r2, [pc, #592]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	623b      	str	r3, [r7, #32]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a8e      	ldr	r2, [pc, #568]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b8c      	ldr	r3, [pc, #560]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a88      	ldr	r2, [pc, #544]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b86      	ldr	r3, [pc, #536]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4b83      	ldr	r3, [pc, #524]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a82      	ldr	r2, [pc, #520]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b80      	ldr	r3, [pc, #512]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b7d      	ldr	r3, [pc, #500]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a7c      	ldr	r2, [pc, #496]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b7a      	ldr	r3, [pc, #488]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b77      	ldr	r3, [pc, #476]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a76      	ldr	r2, [pc, #472]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b74      	ldr	r3, [pc, #464]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a70      	ldr	r2, [pc, #448]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b6e      	ldr	r3, [pc, #440]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a6a      	ldr	r2, [pc, #424]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <MX_GPIO_Init+0x26c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	4865      	ldr	r0, [pc, #404]	; (8000d74 <MX_GPIO_Init+0x270>)
 8000be0:	f001 fd48 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000be4:	2200      	movs	r2, #0
 8000be6:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000bea:	4863      	ldr	r0, [pc, #396]	; (8000d78 <MX_GPIO_Init+0x274>)
 8000bec:	f001 fd42 	bl	8002674 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	4861      	ldr	r0, [pc, #388]	; (8000d7c <MX_GPIO_Init+0x278>)
 8000bf6:	f001 fd3d 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <MX_GPIO_Init+0x27c>)
 8000c02:	f001 fd37 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0c:	485d      	ldr	r0, [pc, #372]	; (8000d84 <MX_GPIO_Init+0x280>)
 8000c0e:	f001 fd31 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2174      	movs	r1, #116	; 0x74
 8000c16:	485c      	ldr	r0, [pc, #368]	; (8000d88 <MX_GPIO_Init+0x284>)
 8000c18:	f001 fd2c 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000c1c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4856      	ldr	r0, [pc, #344]	; (8000d8c <MX_GPIO_Init+0x288>)
 8000c32:	f001 fb73 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000c36:	f248 0305 	movw	r3, #32773	; 0x8005
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	484e      	ldr	r0, [pc, #312]	; (8000d84 <MX_GPIO_Init+0x280>)
 8000c4c:	f001 fb66 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4843      	ldr	r0, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x270>)
 8000c68:	f001 fb58 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4840      	ldr	r0, [pc, #256]	; (8000d80 <MX_GPIO_Init+0x27c>)
 8000c80:	f001 fb4c 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000c84:	2301      	movs	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4838      	ldr	r0, [pc, #224]	; (8000d78 <MX_GPIO_Init+0x274>)
 8000c98:	f001 fb40 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000c9c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca2:	2311      	movs	r3, #17
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4830      	ldr	r0, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x274>)
 8000cb6:	f001 fb31 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cbe:	2311      	movs	r3, #17
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482a      	ldr	r0, [pc, #168]	; (8000d7c <MX_GPIO_Init+0x278>)
 8000cd2:	f001 fb23 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000cd6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4824      	ldr	r0, [pc, #144]	; (8000d80 <MX_GPIO_Init+0x27c>)
 8000cf0:	f001 fb14 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481d      	ldr	r0, [pc, #116]	; (8000d84 <MX_GPIO_Init+0x280>)
 8000d0e:	f001 fb05 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000d12:	2304      	movs	r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4817      	ldr	r0, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x284>)
 8000d2a:	f001 faf7 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000d2e:	2370      	movs	r3, #112	; 0x70
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d32:	2311      	movs	r3, #17
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4810      	ldr	r0, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x284>)
 8000d46:	f001 fae9 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_GPIO_Init+0x274>)
 8000d62:	f001 fadb 	bl	800231c <HAL_GPIO_Init>

}
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40021400 	.word	0x40021400
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40021000 	.word	0x40021000

08000d90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f005 f87f 	bl	8005e9c <osDelay>
 8000d9e:	e7fb      	b.n	8000d98 <StartDefaultTask+0x8>

08000da0 <StartShiftRegLightOn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShiftRegLightOn */
void StartShiftRegLightOn(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShiftRegLightOn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f005 f877 	bl	8005e9c <osDelay>
 8000dae:	e7fb      	b.n	8000da8 <StartShiftRegLightOn+0x8>

08000db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dc2:	f000 fc83 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40001000 	.word	0x40001000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	210f      	movs	r1, #15
 8000e1a:	f06f 0001 	mvn.w	r0, #1
 8000e1e:	f000 fe4d 	bl	8001abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_CAN_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_CAN_MspInit+0x80>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000e82:	2303      	movs	r3, #3
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e92:	2309      	movs	r3, #9
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_CAN_MspInit+0x84>)
 8000e9e:	f001 fa3d 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40006400 	.word	0x40006400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_DAC_MspInit+0x84>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12b      	bne.n	8000f32 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_DAC_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <HAL_DAC_MspInit+0x8c>)
 8000f1e:	f001 f9fd 	bl	800231c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	2036      	movs	r0, #54	; 0x36
 8000f28:	f000 fdc8 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f000 fde1 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40007400 	.word	0x40007400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_ETH_MspInit+0x158>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 8096 	bne.w	8001098 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001014:	2332      	movs	r3, #50	; 0x32
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001024:	230b      	movs	r3, #11
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481e      	ldr	r0, [pc, #120]	; (80010a8 <HAL_ETH_MspInit+0x160>)
 8001030:	f001 f974 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001034:	2386      	movs	r3, #134	; 0x86
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001044:	230b      	movs	r3, #11
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <HAL_ETH_MspInit+0x164>)
 8001050:	f001 f964 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <HAL_ETH_MspInit+0x168>)
 8001072:	f001 f953 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001076:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_ETH_MspInit+0x16c>)
 8001094:	f001 f942 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40028000 	.word	0x40028000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40021800 	.word	0x40021800

080010b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ae      	sub	sp, #184	; 0xb8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2290      	movs	r2, #144	; 0x90
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 fbfb 	bl	80088d4 <memset>
  if(hi2c->Instance==I2C1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_I2C_MspInit+0xb4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fa9c 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fe67 	bl	8000dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 800111e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <HAL_I2C_MspInit+0xbc>)
 8001146:	f001 f8e9 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_I2C_MspInit+0xb8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	37b8      	adds	r7, #184	; 0xb8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_SPI_MspInit+0x148>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d144      	bne.n	8001224 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119a:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4832      	ldr	r0, [pc, #200]	; (80012c8 <HAL_SPI_MspInit+0x150>)
 80011fe:	f001 f88d 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001202:	2308      	movs	r3, #8
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001212:	2305      	movs	r3, #5
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	482b      	ldr	r0, [pc, #172]	; (80012cc <HAL_SPI_MspInit+0x154>)
 800121e:	f001 f87d 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001222:	e049      	b.n	80012b8 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <HAL_SPI_MspInit+0x158>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d144      	bne.n	80012b8 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_SPI_MspInit+0x14c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001286:	2307      	movs	r3, #7
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <HAL_SPI_MspInit+0x154>)
 8001292:	f001 f843 	bl	800231c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a8:	2306      	movs	r3, #6
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_SPI_MspInit+0x15c>)
 80012b4:	f001 f832 	bl	800231c <HAL_GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	; 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40003c00 	.word	0x40003c00
 80012d4:	40020800 	.word	0x40020800

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_Base_MspInit+0x80>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800133c:	2301      	movs	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_TIM_Base_MspInit+0x84>)
 8001348:	f000 ffe8 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010000 	.word	0x40010000
 8001358:	40023800 	.word	0x40023800
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ae      	sub	sp, #184	; 0xb8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2290      	movs	r2, #144	; 0x90
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f007 faa7 	bl	80088d4 <memset>
  if(huart->Instance==UART7)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_UART_MspInit+0xb4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d13c      	bne.n	800140a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001396:	2300      	movs	r3, #0
 8001398:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f948 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013aa:	f7ff fd13 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_UART_MspInit+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80013de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80013f8:	2308      	movs	r3, #8
 80013fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_UART_MspInit+0xbc>)
 8001406:	f000 ff89 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	37b8      	adds	r7, #184	; 0xb8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40007800 	.word	0x40007800
 8001418:	40023800 	.word	0x40023800
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ae      	sub	sp, #184	; 0xb8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2290      	movs	r2, #144	; 0x90
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f007 fa47 	bl	80088d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144e:	d149      	bne.n	80014e4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001454:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f002 f8e7 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800146c:	f7ff fcb2 	bl	8000dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001488:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a2:	230a      	movs	r3, #10
 80014a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <HAL_PCD_MspInit+0xd0>)
 80014b0:	f000 ff34 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014be:	6353      	str	r3, [r2, #52]	; 0x34
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6453      	str	r3, [r2, #68]	; 0x44
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_PCD_MspInit+0xcc>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	37b8      	adds	r7, #184	; 0xb8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <HAL_InitTick+0xe0>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	4a32      	ldr	r2, [pc, #200]	; (80015d4 <HAL_InitTick+0xe0>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6413      	str	r3, [r2, #64]	; 0x40
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_InitTick+0xe0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800151c:	f107 0210 	add.w	r2, r7, #16
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f852 	bl	80035d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001536:	f002 f823 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 800153a:	6378      	str	r0, [r7, #52]	; 0x34
 800153c:	e004      	b.n	8001548 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800153e:	f002 f81f 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <HAL_InitTick+0xe4>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	0c9b      	lsrs	r3, r3, #18
 8001552:	3b01      	subs	r3, #1
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_InitTick+0xe8>)
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <HAL_InitTick+0xec>)
 800155a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_InitTick+0xe8>)
 800155e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001562:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_InitTick+0xe8>)
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_InitTick+0xe8>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_InitTick+0xe8>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_InitTick+0xe8>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <HAL_InitTick+0xe8>)
 800157e:	f002 fd2c 	bl	8003fda <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001588:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001590:	4812      	ldr	r0, [pc, #72]	; (80015dc <HAL_InitTick+0xe8>)
 8001592:	f002 fd79 	bl	8004088 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800159c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a4:	2036      	movs	r0, #54	; 0x36
 80015a6:	f000 faa5 	bl	8001af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d808      	bhi.n	80015c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	2036      	movs	r0, #54	; 0x36
 80015b6:	f000 fa81 	bl	8001abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_InitTick+0xf0>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e002      	b.n	80015c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	200009fc 	.word	0x200009fc
 80015e0:	40001000 	.word	0x40001000
 80015e4:	20000004 	.word	0x20000004

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <TIM6_DAC_IRQHandler+0x20>)
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <TIM6_DAC_IRQHandler+0x20>)
 8001624:	f000 fa96 	bl	8001b54 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <TIM6_DAC_IRQHandler+0x24>)
 800162a:	f002 fe06 	bl	800423a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000230 	.word	0x20000230
 8001638:	200009fc 	.word	0x200009fc

0800163c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f007 f8ed 	bl	800886c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7fe ff57 	bl	8000544 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016a4:	08008b84 	.word	0x08008b84
  ldr r2, =_sbss
 80016a8:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80016ac:	2000545c 	.word	0x2000545c

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>

080016b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f000 f9f5 	bl	8001aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff ff19 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fb8d 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000a48 	.word	0x20000a48

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000a48 	.word	0x20000a48

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0ed      	b.n	8001942 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fb5c 	bl	8000e30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001788:	f7ff ffb4 	bl	80016f4 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800178e:	e012      	b.n	80017b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001790:	f7ff ffb0 	bl	80016f4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d90b      	bls.n	80017b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2205      	movs	r2, #5
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0c5      	b.n	8001942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0e5      	beq.n	8001790 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0202 	bic.w	r2, r2, #2
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d4:	f7ff ff8e 	bl	80016f4 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017da:	e012      	b.n	8001802 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017dc:	f7ff ff8a 	bl	80016f4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b0a      	cmp	r3, #10
 80017e8:	d90b      	bls.n	8001802 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2205      	movs	r2, #5
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e09f      	b.n	8001942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e5      	bne.n	80017dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e007      	b.n	800183a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7e5b      	ldrb	r3, [r3, #25]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e007      	b.n	8001864 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001862:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e9b      	ldrb	r3, [r3, #26]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0220 	bic.w	r2, r2, #32
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7edb      	ldrb	r3, [r3, #27]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0210 	bic.w	r2, r2, #16
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0210 	orr.w	r2, r2, #16
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7f1b      	ldrb	r3, [r3, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0208 	orr.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0208 	bic.w	r2, r2, #8
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7f5b      	ldrb	r3, [r3, #29]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0204 	orr.w	r2, r2, #4
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	ea42 0103 	orr.w	r1, r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	4313      	orrs	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	05fa0000 	.word	0x05fa0000

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff4c 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ace:	f7ff ff61 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	f7ff ffb1 	bl	8001a40 <NVIC_EncodePriority>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff80 	bl	80019ec <__NVIC_SetPriority>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff54 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e014      	b.n	8001b4c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	791b      	ldrb	r3, [r3, #4]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f9c0 	bl	8000eb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b6a:	d120      	bne.n	8001bae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	d118      	bne.n	8001bae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f82d 	bl	8001c08 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bbc:	d120      	bne.n	8001c00 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bcc:	d118      	bne.n	8001c00 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f043 0202 	orr.w	r2, r3, #2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f85d 	bl	8001cba <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	795b      	ldrb	r3, [r3, #5]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_DAC_ConfigChannel+0x18>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e03c      	b.n	8001cae <HAL_DAC_ConfigChannel+0x92>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	22c0      	movs	r2, #192	; 0xc0
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06a      	b.n	8001db8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2223      	movs	r2, #35	; 0x23
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff f927 	bl	8000f48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_ETH_Init+0xf0>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a30      	ldr	r2, [pc, #192]	; (8001dc0 <HAL_ETH_Init+0xf0>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_ETH_Init+0xf0>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d1c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4927      	ldr	r1, [pc, #156]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fcd4 	bl	80016f4 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d4e:	e011      	b.n	8001d74 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d50:	f7ff fcd0 	bl	80016f4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d5e:	d909      	bls.n	8001d74 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2204      	movs	r2, #4
 8001d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	22e0      	movs	r2, #224	; 0xe0
 8001d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e021      	b.n	8001db8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e4      	bne.n	8001d50 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f958 	bl	800203c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f9ff 	bl	8002190 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa55 	bl	8002242 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f9bd 	bl	8002120 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2210      	movs	r2, #16
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800

08001dc8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <ETH_SetMACConfig+0x15c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7c1b      	ldrb	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <ETH_SetMACConfig+0x28>
 8001dea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dee:	e000      	b.n	8001df2 <ETH_SetMACConfig+0x2a>
 8001df0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	7c5b      	ldrb	r3, [r3, #17]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <ETH_SetMACConfig+0x38>
 8001dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dfe:	e000      	b.n	8001e02 <ETH_SetMACConfig+0x3a>
 8001e00:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7fdb      	ldrb	r3, [r3, #31]
 8001e0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	7f92      	ldrb	r2, [r2, #30]
 8001e1c:	2a00      	cmp	r2, #0
 8001e1e:	d102      	bne.n	8001e26 <ETH_SetMACConfig+0x5e>
 8001e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e24:	e000      	b.n	8001e28 <ETH_SetMACConfig+0x60>
 8001e26:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d102      	bne.n	8001e50 <ETH_SetMACConfig+0x88>
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	e000      	b.n	8001e52 <ETH_SetMACConfig+0x8a>
 8001e50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	7bdb      	ldrb	r3, [r3, #15]
 8001e58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff fc42 	bl	800170c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d101      	bne.n	8001eb6 <ETH_SetMACConfig+0xee>
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	e000      	b.n	8001eb8 <ETH_SetMACConfig+0xf0>
 8001eb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eb8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001ec6:	2a01      	cmp	r2, #1
 8001ec8:	d101      	bne.n	8001ece <ETH_SetMACConfig+0x106>
 8001eca:	2208      	movs	r2, #8
 8001ecc:	e000      	b.n	8001ed0 <ETH_SetMACConfig+0x108>
 8001ece:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ed0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ed8:	2a01      	cmp	r2, #1
 8001eda:	d101      	bne.n	8001ee0 <ETH_SetMACConfig+0x118>
 8001edc:	2204      	movs	r2, #4
 8001ede:	e000      	b.n	8001ee2 <ETH_SetMACConfig+0x11a>
 8001ee0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ee2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001eea:	2a01      	cmp	r2, #1
 8001eec:	d101      	bne.n	8001ef2 <ETH_SetMACConfig+0x12a>
 8001eee:	2202      	movs	r2, #2
 8001ef0:	e000      	b.n	8001ef4 <ETH_SetMACConfig+0x12c>
 8001ef2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fbfd 	bl	800170c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	ff20810f 	.word	0xff20810f

08001f28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <ETH_SetDMAConfig+0x110>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7b1b      	ldrb	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <ETH_SetDMAConfig+0x2c>
 8001f4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f52:	e000      	b.n	8001f56 <ETH_SetDMAConfig+0x2e>
 8001f54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	7b5b      	ldrb	r3, [r3, #13]
 8001f5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	7f52      	ldrb	r2, [r2, #29]
 8001f62:	2a00      	cmp	r2, #0
 8001f64:	d102      	bne.n	8001f6c <ETH_SetDMAConfig+0x44>
 8001f66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f6a:	e000      	b.n	8001f6e <ETH_SetDMAConfig+0x46>
 8001f6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	7b9b      	ldrb	r3, [r3, #14]
 8001f74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	7f1b      	ldrb	r3, [r3, #28]
 8001f82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7f9b      	ldrb	r3, [r3, #30]
 8001f8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	461a      	mov	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fba4 	bl	800170c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fdc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001fe2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fe8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ff2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ffa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002000:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800200e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fb75 	bl	800170c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	f8de3f23 	.word	0xf8de3f23

0800203c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0a6      	sub	sp, #152	; 0x98
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002050:	2300      	movs	r3, #0
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002078:	2300      	movs	r3, #0
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002082:	2300      	movs	r3, #0
 8002084:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800209e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b4:	4619      	mov	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fe86 	bl	8001dc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff08 	bl	8001f28 <ETH_SetDMAConfig>
}
 8002118:	bf00      	nop
 800211a:	3798      	adds	r7, #152	; 0x98
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3305      	adds	r3, #5
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	3204      	adds	r2, #4
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <ETH_MACAddressConfig+0x68>)
 8002142:	4413      	add	r3, r2
 8002144:	461a      	mov	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3303      	adds	r3, #3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	061a      	lsls	r2, r3, #24
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3302      	adds	r3, #2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	4313      	orrs	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <ETH_MACAddressConfig+0x6c>)
 8002172:	4413      	add	r3, r2
 8002174:	461a      	mov	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40028040 	.word	0x40028040
 800218c:	40028044 	.word	0x40028044

08002190 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e03e      	b.n	800221c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	3206      	adds	r2, #6
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d80c      	bhi.n	8002200 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	e004      	b.n	800220a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3301      	adds	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d9bd      	bls.n	800219e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	611a      	str	r2, [r3, #16]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e046      	b.n	80022de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2200      	movs	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800228c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002294:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	3212      	adds	r2, #18
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d80c      	bhi.n	80022ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6919      	ldr	r1, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	e004      	b.n	80022d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d9b5      	bls.n	8002250 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e175      	b.n	8002628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8164 	bne.w	8002622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d005      	beq.n	8002372 <HAL_GPIO_Init+0x56>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d130      	bne.n	80023d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80be 	beq.w	8002622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b66      	ldr	r3, [pc, #408]	; (8002640 <HAL_GPIO_Init+0x324>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_GPIO_Init+0x324>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <HAL_GPIO_Init+0x324>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024be:	4a61      	ldr	r2, [pc, #388]	; (8002644 <HAL_GPIO_Init+0x328>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_GPIO_Init+0x32c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d037      	beq.n	800255a <HAL_GPIO_Init+0x23e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a57      	ldr	r2, [pc, #348]	; (800264c <HAL_GPIO_Init+0x330>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d031      	beq.n	8002556 <HAL_GPIO_Init+0x23a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a56      	ldr	r2, [pc, #344]	; (8002650 <HAL_GPIO_Init+0x334>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02b      	beq.n	8002552 <HAL_GPIO_Init+0x236>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a55      	ldr	r2, [pc, #340]	; (8002654 <HAL_GPIO_Init+0x338>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d025      	beq.n	800254e <HAL_GPIO_Init+0x232>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a54      	ldr	r2, [pc, #336]	; (8002658 <HAL_GPIO_Init+0x33c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <HAL_GPIO_Init+0x22e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a53      	ldr	r2, [pc, #332]	; (800265c <HAL_GPIO_Init+0x340>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x22a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_GPIO_Init+0x344>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_GPIO_Init+0x348>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_GPIO_Init+0x34c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4f      	ldr	r2, [pc, #316]	; (800266c <HAL_GPIO_Init+0x350>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x21a>
 8002532:	2309      	movs	r3, #9
 8002534:	e012      	b.n	800255c <HAL_GPIO_Init+0x240>
 8002536:	230a      	movs	r3, #10
 8002538:	e010      	b.n	800255c <HAL_GPIO_Init+0x240>
 800253a:	2308      	movs	r3, #8
 800253c:	e00e      	b.n	800255c <HAL_GPIO_Init+0x240>
 800253e:	2307      	movs	r3, #7
 8002540:	e00c      	b.n	800255c <HAL_GPIO_Init+0x240>
 8002542:	2306      	movs	r3, #6
 8002544:	e00a      	b.n	800255c <HAL_GPIO_Init+0x240>
 8002546:	2305      	movs	r3, #5
 8002548:	e008      	b.n	800255c <HAL_GPIO_Init+0x240>
 800254a:	2304      	movs	r3, #4
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x240>
 800254e:	2303      	movs	r3, #3
 8002550:	e004      	b.n	800255c <HAL_GPIO_Init+0x240>
 8002552:	2302      	movs	r3, #2
 8002554:	e002      	b.n	800255c <HAL_GPIO_Init+0x240>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x240>
 800255a:	2300      	movs	r3, #0
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f002 0203 	and.w	r2, r2, #3
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4093      	lsls	r3, r2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800256c:	4935      	ldr	r1, [pc, #212]	; (8002644 <HAL_GPIO_Init+0x328>)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3302      	adds	r3, #2
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_GPIO_Init+0x354>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ce:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_GPIO_Init+0x354>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <HAL_GPIO_Init+0x354>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	f67f ae86 	bls.w	800233c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021400 	.word	0x40021400
 8002660:	40021800 	.word	0x40021800
 8002664:	40021c00 	.word	0x40021c00
 8002668:	40022000 	.word	0x40022000
 800266c:	40022400 	.word	0x40022400
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fcf2 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e006      	b.n	8002730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800272e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d104      	bne.n	8002742 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002740:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_I2C_Init+0x11c>)
 800274e:	430b      	orrs	r3, r1
 8002750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	02008000 	.word	0x02008000

080027c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d138      	bne.n	8002850 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e032      	b.n	8002852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	; 0x24
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800281a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b20      	cmp	r3, #32
 8002872:	d139      	bne.n	80028e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800287e:	2302      	movs	r3, #2
 8002880:	e033      	b.n	80028ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2224      	movs	r2, #36	; 0x24
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f8:	b08f      	sub	sp, #60	; 0x3c
 80028fa:	af0a      	add	r7, sp, #40	; 0x28
 80028fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e116      	b.n	8002b36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fd7c 	bl	8001420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2203      	movs	r2, #3
 800292c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fef4 	bl	8005734 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	687e      	ldr	r6, [r7, #4]
 8002954:	466d      	mov	r5, sp
 8002956:	f106 0410 	add.w	r4, r6, #16
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002966:	e885 0003 	stmia.w	r5, {r0, r1}
 800296a:	1d33      	adds	r3, r6, #4
 800296c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f002 fe88 	bl	8005684 <USB_CoreInit>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0d7      	b.n	8002b36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fee2 	bl	8005756 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e04a      	b.n	8002a2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333d      	adds	r3, #61	; 0x3d
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	333c      	adds	r3, #60	; 0x3c
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	b298      	uxth	r0, r3
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3344      	adds	r3, #68	; 0x44
 80029d4:	4602      	mov	r2, r0
 80029d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3340      	adds	r3, #64	; 0x40
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3348      	adds	r3, #72	; 0x48
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334c      	adds	r3, #76	; 0x4c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3354      	adds	r3, #84	; 0x54
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3af      	bcc.n	8002998 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e044      	b.n	8002ac8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d3b5      	bcc.n	8002a3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	687e      	ldr	r6, [r7, #4]
 8002ada:	466d      	mov	r5, sp
 8002adc:	f106 0410 	add.w	r4, r6, #16
 8002ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af0:	1d33      	adds	r3, r6, #4
 8002af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af4:	6838      	ldr	r0, [r7, #0]
 8002af6:	f002 fe7b 	bl	80057f0 <USB_DevInit>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e014      	b.n	8002b36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f80b 	bl	8002b40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 f839 	bl	8005ba6 <USB_DevDisconnect>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	10000003 	.word	0x10000003

08002b88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fd9d 	bl	80016f4 <HAL_GetTick>
 8002bba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bbc:	e009      	b.n	8002bd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bbe:	f7fe fd99 	bl	80016f4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bcc:	d901      	bls.n	8002bd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e022      	b.n	8002c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d1ee      	bne.n	8002bbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7fe fd82 	bl	80016f4 <HAL_GetTick>
 8002bf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf2:	e009      	b.n	8002c08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf4:	f7fe fd7e 	bl	80016f4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c02:	d901      	bls.n	8002c08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e007      	b.n	8002c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40007000 	.word	0x40007000

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e29b      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4c:	4b96      	ldr	r3, [pc, #600]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d00c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c58:	4b93      	ldr	r3, [pc, #588]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d112      	bne.n	8002c8a <HAL_RCC_OscConfig+0x62>
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d06c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x130>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d168      	bne.n	8002d58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e275      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7a>
 8002c94:	4b84      	ldr	r3, [pc, #528]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a83      	ldr	r2, [pc, #524]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e02e      	b.n	8002d00 <HAL_RCC_OscConfig+0xd8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x9c>
 8002caa:	4b7f      	ldr	r3, [pc, #508]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7e      	ldr	r2, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7b      	ldr	r2, [pc, #492]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xd8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xc0>
 8002cce:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b73      	ldr	r3, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a72      	ldr	r2, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xd8>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b6c      	ldr	r3, [pc, #432]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6b      	ldr	r2, [pc, #428]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fcf4 	bl	80016f4 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fcf0 	bl	80016f4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e229      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xe8>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fce0 	bl	80016f4 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe fcdc 	bl	80016f4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e215      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x110>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d069      	beq.n	8002e3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d66:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d11c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x190>
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1e9      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	493d      	ldr	r1, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	e040      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fc92 	bl	80016f4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fc8e 	bl	80016f4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1c7      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4929      	ldr	r1, [pc, #164]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
 8002e06:	e018      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fc6e 	bl	80016f4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fc6a 	bl	80016f4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1a3      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d038      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d019      	beq.n	8002e82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fc4b 	bl	80016f4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fc47 	bl	80016f4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e180      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x23a>
 8002e80:	e01a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fc31 	bl	80016f4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7fe fc2d 	bl	80016f4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d903      	bls.n	8002eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e166      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
 8002ea8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b92      	ldr	r3, [pc, #584]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a4 	beq.w	800300e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b8c      	ldr	r3, [pc, #560]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a88      	ldr	r2, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	4b83      	ldr	r3, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x4d4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7f      	ldr	r2, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0x4d4>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fbf5 	bl	80016f4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fe fbf1 	bl	80016f4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e12a      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f20:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x4d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x31a>
 8002f34:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a6f      	ldr	r2, [pc, #444]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e02d      	b.n	8002f9e <HAL_RCC_OscConfig+0x376>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x33c>
 8002f4a:	4b6b      	ldr	r3, [pc, #428]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a67      	ldr	r2, [pc, #412]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	e01c      	b.n	8002f9e <HAL_RCC_OscConfig+0x376>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCC_OscConfig+0x35e>
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a5e      	ldr	r2, [pc, #376]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e00b      	b.n	8002f9e <HAL_RCC_OscConfig+0x376>
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d015      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fba5 	bl	80016f4 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fba1 	bl	80016f4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0d8      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ee      	beq.n	8002fae <HAL_RCC_OscConfig+0x386>
 8002fd0:	e014      	b.n	8002ffc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fb8f 	bl	80016f4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7fe fb8b 	bl	80016f4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0c2      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ee      	bne.n	8002fda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a3c      	ldr	r2, [pc, #240]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80ae 	beq.w	8003174 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d06d      	beq.n	8003100 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d14b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe fb5c 	bl	80016f4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fb58 	bl	80016f4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e091      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	491b      	ldr	r1, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fb2a 	bl	80016f4 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fb26 	bl	80016f4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e05f      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x47c>
 80030c2:	e057      	b.n	8003174 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fb10 	bl	80016f4 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fb0c 	bl	80016f4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e045      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <HAL_RCC_OscConfig+0x4d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4b0>
 80030f6:	e03d      	b.n	8003174 <HAL_RCC_OscConfig+0x54c>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_RCC_OscConfig+0x558>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d030      	beq.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d129      	bne.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d122      	bne.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003136:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003138:	4293      	cmp	r3, r2
 800313a:	d119      	bne.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	3b01      	subs	r3, #1
 800314a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d10f      	bne.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0d0      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 020f 	bic.w	r2, r3, #15
 80031b2:	4965      	ldr	r1, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d040      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d115      	bne.n	8003266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e073      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06b      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4936      	ldr	r1, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003278:	f7fe fa3c 	bl	80016f4 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe fa38 	bl	80016f4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e053      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d210      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 020f 	bic.w	r2, r3, #15
 80032be:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1cc>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1d0>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1d4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe f8dc 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023c00 	.word	0x40023c00
 800334c:	40023800 	.word	0x40023800
 8003350:	08008afc 	.word	0x08008afc
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b094      	sub	sp, #80	; 0x50
 8003362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
 8003368:	2300      	movs	r3, #0
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	2300      	movs	r3, #0
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d00d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x40>
 8003380:	2b08      	cmp	r3, #8
 8003382:	f200 80e1 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x3a>
 800338e:	e0db      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 8003392:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003394:	e0db      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x208>)
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339a:	e0d8      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80033bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	0159      	lsls	r1, r3, #5
 80033dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e0:	0150      	lsls	r0, r2, #5
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4621      	mov	r1, r4
 80033e8:	1a51      	subs	r1, r2, r1
 80033ea:	6139      	str	r1, [r7, #16]
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb63 0301 	sbc.w	r3, r3, r1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003400:	4659      	mov	r1, fp
 8003402:	018b      	lsls	r3, r1, #6
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340a:	4651      	mov	r1, sl
 800340c:	018a      	lsls	r2, r1, #6
 800340e:	4651      	mov	r1, sl
 8003410:	ebb2 0801 	subs.w	r8, r2, r1
 8003414:	4659      	mov	r1, fp
 8003416:	eb63 0901 	sbc.w	r9, r3, r1
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342e:	4690      	mov	r8, r2
 8003430:	4699      	mov	r9, r3
 8003432:	4623      	mov	r3, r4
 8003434:	eb18 0303 	adds.w	r3, r8, r3
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	462b      	mov	r3, r5
 800343c:	eb49 0303 	adc.w	r3, r9, r3
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344e:	4629      	mov	r1, r5
 8003450:	024b      	lsls	r3, r1, #9
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003458:	4621      	mov	r1, r4
 800345a:	024a      	lsls	r2, r1, #9
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800346c:	f7fc fee8 	bl	8000240 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e058      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	4618      	mov	r0, r3
 8003484:	4611      	mov	r1, r2
 8003486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	0159      	lsls	r1, r3, #5
 80034a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a6:	0150      	lsls	r0, r2, #5
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4641      	mov	r1, r8
 80034ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034cc:	ebb2 040a 	subs.w	r4, r2, sl
 80034d0:	eb63 050b 	sbc.w	r5, r3, fp
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	00eb      	lsls	r3, r5, #3
 80034de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	18e3      	adds	r3, r4, r3
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	464b      	mov	r3, r9
 80034f0:	eb45 0303 	adc.w	r3, r5, r3
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003502:	4629      	mov	r1, r5
 8003504:	028b      	lsls	r3, r1, #10
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800350c:	4621      	mov	r1, r4
 800350e:	028a      	lsls	r2, r1, #10
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	61fa      	str	r2, [r7, #28]
 800351c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003520:	f7fc fe8e 	bl	8000240 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800353c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003550:	4618      	mov	r0, r3
 8003552:	3750      	adds	r7, #80	; 0x50
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08008b0c 	.word	0x08008b0c

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08008b0c 	.word	0x08008b0c

080035d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	220f      	movs	r2, #15
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCC_GetClockConfig+0x60>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40023c00 	.word	0x40023c00

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003666:	6093      	str	r3, [r2, #8]
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	4964      	ldr	r1, [pc, #400]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368e:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	4959      	ldr	r1, [pc, #356]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ca:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	494a      	ldr	r1, [pc, #296]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 808b 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003730:	4b35      	ldr	r3, [pc, #212]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd ffda 	bl	80016f4 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fd ffd6 	bl	80016f4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e38f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003756:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d035      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d02e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a1a      	ldr	r2, [pc, #104]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d114      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd ff9e 	bl	80016f4 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd ff9a 	bl	80016f4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e351      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d111      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	4901      	ldr	r1, [pc, #4]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
 8003802:	e00b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	0ffffcff 	.word	0x0ffffcff
 8003810:	4bac      	ldr	r3, [pc, #688]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4aab      	ldr	r2, [pc, #684]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	4ba9      	ldr	r3, [pc, #676]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	49a6      	ldr	r1, [pc, #664]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382a:	4313      	orrs	r3, r2
 800382c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800383a:	4ba2      	ldr	r3, [pc, #648]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003840:	4aa0      	ldr	r2, [pc, #640]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003846:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800384a:	4b9e      	ldr	r3, [pc, #632]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	499b      	ldr	r1, [pc, #620]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b96      	ldr	r3, [pc, #600]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003876:	4993      	ldr	r1, [pc, #588]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388a:	4b8e      	ldr	r3, [pc, #568]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	498a      	ldr	r1, [pc, #552]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ac:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	4982      	ldr	r1, [pc, #520]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4979      	ldr	r1, [pc, #484]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f0:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4971      	ldr	r1, [pc, #452]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f023 020c 	bic.w	r2, r3, #12
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	4968      	ldr	r1, [pc, #416]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003934:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	4960      	ldr	r1, [pc, #384]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	4957      	ldr	r1, [pc, #348]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003978:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	494f      	ldr	r1, [pc, #316]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	4946      	ldr	r1, [pc, #280]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	493e      	ldr	r1, [pc, #248]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0e:	492d      	ldr	r1, [pc, #180]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a30:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a94:	490b      	ldr	r1, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00f      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	4902      	ldr	r1, [pc, #8]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	4986      	ldr	r1, [pc, #536]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003af8:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b08:	497d      	ldr	r1, [pc, #500]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d006      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80d6 	beq.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b24:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a75      	ldr	r2, [pc, #468]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd fde0 	bl	80016f4 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b38:	f7fd fddc 	bl	80016f4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e195      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d021      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11d      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	0e1b      	lsrs	r3, r3, #24
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	4958      	ldr	r1, [pc, #352]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02e      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd0:	d129      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003be0:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be6:	0f1b      	lsrs	r3, r3, #28
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	019a      	lsls	r2, r3, #6
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	071b      	lsls	r3, r3, #28
 8003c06:	493e      	ldr	r1, [pc, #248]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f023 021f 	bic.w	r2, r3, #31
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	4938      	ldr	r1, [pc, #224]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01d      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c32:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	0f1b      	lsrs	r3, r3, #28
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4926      	ldr	r1, [pc, #152]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	491a      	ldr	r1, [pc, #104]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd fd23 	bl	80016f4 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cb2:	f7fd fd1f 	bl	80016f4 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b64      	cmp	r3, #100	; 0x64
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0d8      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f040 80ce 	bne.w	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fd06 	bl	80016f4 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cea:	e00b      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cec:	f7fd fd02 	bl	80016f4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d904      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0bb      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d10:	d0ec      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02e      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d12a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d3a:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d48:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	4944      	ldr	r1, [pc, #272]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	493d      	ldr	r1, [pc, #244]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da4:	d11d      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	0e1b      	lsrs	r3, r3, #24
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	0f1b      	lsrs	r3, r3, #28
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	019a      	lsls	r2, r3, #6
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	071b      	lsls	r3, r3, #28
 8003dda:	4929      	ldr	r1, [pc, #164]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d028      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4917      	ldr	r1, [pc, #92]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4911      	ldr	r1, [pc, #68]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4c:	f7fd fc52 	bl	80016f4 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e54:	f7fd fc4e 	bl	80016f4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e007      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e72:	d1ef      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e09d      	b.n	8003fd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d108      	bne.n	8003eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea6:	d009      	beq.n	8003ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	e005      	b.n	8003ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f94e 	bl	8001178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003efc:	d902      	bls.n	8003f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e002      	b.n	8003f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f12:	d007      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 0204 	and.w	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e049      	b.n	8004080 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fd f969 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fbbb 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d001      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e054      	b.n	800414a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_TIM_Base_Start_IT+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d022      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d01d      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a22      	ldr	r2, [pc, #136]	; (800415c <HAL_TIM_Base_Start_IT+0xd4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d018      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a21      	ldr	r2, [pc, #132]	; (8004160 <HAL_TIM_Base_Start_IT+0xd8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <HAL_TIM_Base_Start_IT+0xdc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <HAL_TIM_Base_Start_IT+0xe0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_TIM_Base_Start_IT+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x80>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <HAL_TIM_Base_Start_IT+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d115      	bne.n	8004134 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_TIM_Base_Start_IT+0xec>)
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d015      	beq.n	8004146 <HAL_TIM_Base_Start_IT+0xbe>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d011      	beq.n	8004146 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004132:	e008      	b.n	8004146 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e000      	b.n	8004148 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40010000 	.word	0x40010000
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40010400 	.word	0x40010400
 800416c:	40014000 	.word	0x40014000
 8004170:	40001800 	.word	0x40001800
 8004174:	00010007 	.word	0x00010007

08004178 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e049      	b.n	800421e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f841 	bl	8004226 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 faec 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	d122      	bne.n	8004296 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d11b      	bne.n	8004296 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0202 	mvn.w	r2, #2
 8004266:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa6b 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 8004282:	e005      	b.n	8004290 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa5d 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa6e 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d122      	bne.n	80042ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d11b      	bne.n	80042ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0204 	mvn.w	r2, #4
 80042ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fa41 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 80042d6:	e005      	b.n	80042e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa33 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa44 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d122      	bne.n	800433e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11b      	bne.n	800433e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0208 	mvn.w	r2, #8
 800430e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2204      	movs	r2, #4
 8004314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fa17 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 800432a:	e005      	b.n	8004338 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa09 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa1a 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d122      	bne.n	8004392 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b10      	cmp	r3, #16
 8004358:	d11b      	bne.n	8004392 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0210 	mvn.w	r2, #16
 8004362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2208      	movs	r2, #8
 8004368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f9ed 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 800437e:	e005      	b.n	800438c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9df 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9f0 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10e      	bne.n	80043be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0201 	mvn.w	r2, #1
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fc fcf9 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d10e      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fcd1 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fcc4 	bl	8004da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f99e 	bl	8004780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0220 	mvn.w	r2, #32
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fc84 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004492:	2302      	movs	r3, #2
 8004494:	e088      	b.n	80045a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f000 fa0e 	bl	80048d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 020c 	bic.w	r2, r2, #12
 80044c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
 80044da:	e060      	b.n	800459e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d11c      	bne.n	800451c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f000 fa92 	bl	8004a1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004504:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6999      	ldr	r1, [r3, #24]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
 800451a:	e040      	b.n	800459e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d11b      	bne.n	800455a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f000 fadf 	bl	8004af4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 020c 	bic.w	r2, r2, #12
 8004544:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69d9      	ldr	r1, [r3, #28]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
 8004558:	e021      	b.n	800459e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d11c      	bne.n	800459a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f000 fafc 	bl	8004b6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004582:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69d9      	ldr	r1, [r3, #28]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
 8004598:	e001      	b.n	800459e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIM_ConfigClockSource+0x1c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0b4      	b.n	8004736 <HAL_TIM_ConfigClockSource+0x186>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_TIM_ConfigClockSource+0x190>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d03e      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0xd4>
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460a:	f200 8087 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	f000 8086 	beq.w	8004722 <HAL_TIM_ConfigClockSource+0x172>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d87f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b70      	cmp	r3, #112	; 0x70
 800461e:	d01a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xa6>
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d87b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d050      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x11a>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d877      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b50      	cmp	r3, #80	; 0x50
 800462e:	d03c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xfa>
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d873      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d058      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x13a>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d86f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b30      	cmp	r3, #48	; 0x30
 800463e:	d064      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	2b30      	cmp	r3, #48	; 0x30
 8004642:	d86b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d060      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d867      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004650:	2b10      	cmp	r3, #16
 8004652:	d05a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	e062      	b.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f000 fad9 	bl	8004c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
      break;
 8004682:	e04f      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6899      	ldr	r1, [r3, #8]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f000 fac2 	bl	8004c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a6:	609a      	str	r2, [r3, #8]
      break;
 80046a8:	e03c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 f980 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2150      	movs	r1, #80	; 0x50
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa8f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 80046c8:	e02c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 f9dc 	bl	8004a94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2160      	movs	r1, #96	; 0x60
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa7f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 80046e8:	e01c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 f960 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa6f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 8004708:	e00c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 fa66 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 800471a:	e003      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e000      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	fffeff88 	.word	0xfffeff88

08004744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3c      	ldr	r2, [pc, #240]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d027      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d023      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2b      	ldr	r2, [pc, #172]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01f      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d017      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <TIM_Base_SetConfig+0x128>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00f      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a25      	ldr	r2, [pc, #148]	; (80048c8 <TIM_Base_SetConfig+0x134>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a24      	ldr	r2, [pc, #144]	; (80048cc <TIM_Base_SetConfig+0x138>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a23      	ldr	r2, [pc, #140]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40010400 	.word	0x40010400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	40001800 	.word	0x40001800
 80048cc:	40001c00 	.word	0x40001c00
 80048d0:	40002000 	.word	0x40002000

080048d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <TIM_TI1_SetConfig+0xcc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01b      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d017      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <TIM_TI1_SetConfig+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <TIM_TI1_SetConfig+0xd4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <TIM_TI1_SetConfig+0xd8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <TIM_TI1_SetConfig+0xdc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <TIM_TI1_SetConfig+0xe0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <TIM_TI1_SetConfig+0xe4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <TIM_TI1_SetConfig+0x6a>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <TIM_TI1_SetConfig+0x6c>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e003      	b.n	800495e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	b2db      	uxtb	r3, r3
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f023 030a 	bic.w	r3, r3, #10
 8004978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 030a 	and.w	r3, r3, #10
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40001800 	.word	0x40001800

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f023 0210 	bic.w	r2, r3, #16
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f023 0210 	bic.w	r2, r3, #16
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	031b      	lsls	r3, r3, #12
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004baa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	031b      	lsls	r3, r3, #12
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	031b      	lsls	r3, r3, #12
 8004bc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f043 0307 	orr.w	r3, r3, #7
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e06d      	b.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1a      	ldr	r2, [pc, #104]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e040      	b.n	8004e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fac2 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f82c 	bl	8004e50 <UART_SetConfig>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e022      	b.n	8004e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa84 	bl	8005318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb0b 	bl	800545c <UART_CheckIdleState>
 8004e46:	4603      	mov	r3, r0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4ba6      	ldr	r3, [pc, #664]	; (8005114 <UART_SetConfig+0x2c4>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a94      	ldr	r2, [pc, #592]	; (8005118 <UART_SetConfig+0x2c8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d120      	bne.n	8004f0e <UART_SetConfig+0xbe>
 8004ecc:	4b93      	ldr	r3, [pc, #588]	; (800511c <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d816      	bhi.n	8004f08 <UART_SetConfig+0xb8>
 8004eda:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x90>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004efd 	.word	0x08004efd
 8004ee8:	08004ef7 	.word	0x08004ef7
 8004eec:	08004f03 	.word	0x08004f03
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e150      	b.n	8005198 <UART_SetConfig+0x348>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e14d      	b.n	8005198 <UART_SetConfig+0x348>
 8004efc:	2304      	movs	r3, #4
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e14a      	b.n	8005198 <UART_SetConfig+0x348>
 8004f02:	2308      	movs	r3, #8
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e147      	b.n	8005198 <UART_SetConfig+0x348>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e144      	b.n	8005198 <UART_SetConfig+0x348>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a83      	ldr	r2, [pc, #524]	; (8005120 <UART_SetConfig+0x2d0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d132      	bne.n	8004f7e <UART_SetConfig+0x12e>
 8004f18:	4b80      	ldr	r3, [pc, #512]	; (800511c <UART_SetConfig+0x2cc>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d828      	bhi.n	8004f78 <UART_SetConfig+0x128>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0xdc>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f79 	.word	0x08004f79
 8004f34:	08004f79 	.word	0x08004f79
 8004f38:	08004f79 	.word	0x08004f79
 8004f3c:	08004f6d 	.word	0x08004f6d
 8004f40:	08004f79 	.word	0x08004f79
 8004f44:	08004f79 	.word	0x08004f79
 8004f48:	08004f79 	.word	0x08004f79
 8004f4c:	08004f67 	.word	0x08004f67
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f79 	.word	0x08004f79
 8004f5c:	08004f73 	.word	0x08004f73
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e118      	b.n	8005198 <UART_SetConfig+0x348>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e115      	b.n	8005198 <UART_SetConfig+0x348>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e112      	b.n	8005198 <UART_SetConfig+0x348>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e10f      	b.n	8005198 <UART_SetConfig+0x348>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e10c      	b.n	8005198 <UART_SetConfig+0x348>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a68      	ldr	r2, [pc, #416]	; (8005124 <UART_SetConfig+0x2d4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d120      	bne.n	8004fca <UART_SetConfig+0x17a>
 8004f88:	4b64      	ldr	r3, [pc, #400]	; (800511c <UART_SetConfig+0x2cc>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f92:	2b30      	cmp	r3, #48	; 0x30
 8004f94:	d013      	beq.n	8004fbe <UART_SetConfig+0x16e>
 8004f96:	2b30      	cmp	r3, #48	; 0x30
 8004f98:	d814      	bhi.n	8004fc4 <UART_SetConfig+0x174>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d009      	beq.n	8004fb2 <UART_SetConfig+0x162>
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d810      	bhi.n	8004fc4 <UART_SetConfig+0x174>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <UART_SetConfig+0x15c>
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d006      	beq.n	8004fb8 <UART_SetConfig+0x168>
 8004faa:	e00b      	b.n	8004fc4 <UART_SetConfig+0x174>
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e0f2      	b.n	8005198 <UART_SetConfig+0x348>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e0ef      	b.n	8005198 <UART_SetConfig+0x348>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e0ec      	b.n	8005198 <UART_SetConfig+0x348>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e0e9      	b.n	8005198 <UART_SetConfig+0x348>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e0e6      	b.n	8005198 <UART_SetConfig+0x348>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a56      	ldr	r2, [pc, #344]	; (8005128 <UART_SetConfig+0x2d8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d120      	bne.n	8005016 <UART_SetConfig+0x1c6>
 8004fd4:	4b51      	ldr	r3, [pc, #324]	; (800511c <UART_SetConfig+0x2cc>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fde:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe0:	d013      	beq.n	800500a <UART_SetConfig+0x1ba>
 8004fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe4:	d814      	bhi.n	8005010 <UART_SetConfig+0x1c0>
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d009      	beq.n	8004ffe <UART_SetConfig+0x1ae>
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d810      	bhi.n	8005010 <UART_SetConfig+0x1c0>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <UART_SetConfig+0x1a8>
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d006      	beq.n	8005004 <UART_SetConfig+0x1b4>
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x1c0>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e0cc      	b.n	8005198 <UART_SetConfig+0x348>
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e0c9      	b.n	8005198 <UART_SetConfig+0x348>
 8005004:	2304      	movs	r3, #4
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0c6      	b.n	8005198 <UART_SetConfig+0x348>
 800500a:	2308      	movs	r3, #8
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0c3      	b.n	8005198 <UART_SetConfig+0x348>
 8005010:	2310      	movs	r3, #16
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e0c0      	b.n	8005198 <UART_SetConfig+0x348>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a44      	ldr	r2, [pc, #272]	; (800512c <UART_SetConfig+0x2dc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d125      	bne.n	800506c <UART_SetConfig+0x21c>
 8005020:	4b3e      	ldr	r3, [pc, #248]	; (800511c <UART_SetConfig+0x2cc>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502e:	d017      	beq.n	8005060 <UART_SetConfig+0x210>
 8005030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005034:	d817      	bhi.n	8005066 <UART_SetConfig+0x216>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503a:	d00b      	beq.n	8005054 <UART_SetConfig+0x204>
 800503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005040:	d811      	bhi.n	8005066 <UART_SetConfig+0x216>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <UART_SetConfig+0x1fe>
 8005046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800504a:	d006      	beq.n	800505a <UART_SetConfig+0x20a>
 800504c:	e00b      	b.n	8005066 <UART_SetConfig+0x216>
 800504e:	2300      	movs	r3, #0
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e0a1      	b.n	8005198 <UART_SetConfig+0x348>
 8005054:	2302      	movs	r3, #2
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e09e      	b.n	8005198 <UART_SetConfig+0x348>
 800505a:	2304      	movs	r3, #4
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e09b      	b.n	8005198 <UART_SetConfig+0x348>
 8005060:	2308      	movs	r3, #8
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e098      	b.n	8005198 <UART_SetConfig+0x348>
 8005066:	2310      	movs	r3, #16
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e095      	b.n	8005198 <UART_SetConfig+0x348>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2f      	ldr	r2, [pc, #188]	; (8005130 <UART_SetConfig+0x2e0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d125      	bne.n	80050c2 <UART_SetConfig+0x272>
 8005076:	4b29      	ldr	r3, [pc, #164]	; (800511c <UART_SetConfig+0x2cc>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005084:	d017      	beq.n	80050b6 <UART_SetConfig+0x266>
 8005086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508a:	d817      	bhi.n	80050bc <UART_SetConfig+0x26c>
 800508c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005090:	d00b      	beq.n	80050aa <UART_SetConfig+0x25a>
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d811      	bhi.n	80050bc <UART_SetConfig+0x26c>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <UART_SetConfig+0x254>
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a0:	d006      	beq.n	80050b0 <UART_SetConfig+0x260>
 80050a2:	e00b      	b.n	80050bc <UART_SetConfig+0x26c>
 80050a4:	2301      	movs	r3, #1
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e076      	b.n	8005198 <UART_SetConfig+0x348>
 80050aa:	2302      	movs	r3, #2
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e073      	b.n	8005198 <UART_SetConfig+0x348>
 80050b0:	2304      	movs	r3, #4
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e070      	b.n	8005198 <UART_SetConfig+0x348>
 80050b6:	2308      	movs	r3, #8
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e06d      	b.n	8005198 <UART_SetConfig+0x348>
 80050bc:	2310      	movs	r3, #16
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e06a      	b.n	8005198 <UART_SetConfig+0x348>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <UART_SetConfig+0x2e4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d138      	bne.n	800513e <UART_SetConfig+0x2ee>
 80050cc:	4b13      	ldr	r3, [pc, #76]	; (800511c <UART_SetConfig+0x2cc>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050da:	d017      	beq.n	800510c <UART_SetConfig+0x2bc>
 80050dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050e0:	d82a      	bhi.n	8005138 <UART_SetConfig+0x2e8>
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	d00b      	beq.n	8005100 <UART_SetConfig+0x2b0>
 80050e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ec:	d824      	bhi.n	8005138 <UART_SetConfig+0x2e8>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <UART_SetConfig+0x2aa>
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d006      	beq.n	8005106 <UART_SetConfig+0x2b6>
 80050f8:	e01e      	b.n	8005138 <UART_SetConfig+0x2e8>
 80050fa:	2300      	movs	r3, #0
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e04b      	b.n	8005198 <UART_SetConfig+0x348>
 8005100:	2302      	movs	r3, #2
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e048      	b.n	8005198 <UART_SetConfig+0x348>
 8005106:	2304      	movs	r3, #4
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e045      	b.n	8005198 <UART_SetConfig+0x348>
 800510c:	2308      	movs	r3, #8
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e042      	b.n	8005198 <UART_SetConfig+0x348>
 8005112:	bf00      	nop
 8005114:	efff69f3 	.word	0xefff69f3
 8005118:	40011000 	.word	0x40011000
 800511c:	40023800 	.word	0x40023800
 8005120:	40004400 	.word	0x40004400
 8005124:	40004800 	.word	0x40004800
 8005128:	40004c00 	.word	0x40004c00
 800512c:	40005000 	.word	0x40005000
 8005130:	40011400 	.word	0x40011400
 8005134:	40007800 	.word	0x40007800
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e02c      	b.n	8005198 <UART_SetConfig+0x348>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a72      	ldr	r2, [pc, #456]	; (800530c <UART_SetConfig+0x4bc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d125      	bne.n	8005194 <UART_SetConfig+0x344>
 8005148:	4b71      	ldr	r3, [pc, #452]	; (8005310 <UART_SetConfig+0x4c0>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005156:	d017      	beq.n	8005188 <UART_SetConfig+0x338>
 8005158:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800515c:	d817      	bhi.n	800518e <UART_SetConfig+0x33e>
 800515e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005162:	d00b      	beq.n	800517c <UART_SetConfig+0x32c>
 8005164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005168:	d811      	bhi.n	800518e <UART_SetConfig+0x33e>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <UART_SetConfig+0x326>
 800516e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005172:	d006      	beq.n	8005182 <UART_SetConfig+0x332>
 8005174:	e00b      	b.n	800518e <UART_SetConfig+0x33e>
 8005176:	2300      	movs	r3, #0
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e00d      	b.n	8005198 <UART_SetConfig+0x348>
 800517c:	2302      	movs	r3, #2
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e00a      	b.n	8005198 <UART_SetConfig+0x348>
 8005182:	2304      	movs	r3, #4
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e007      	b.n	8005198 <UART_SetConfig+0x348>
 8005188:	2308      	movs	r3, #8
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e004      	b.n	8005198 <UART_SetConfig+0x348>
 800518e:	2310      	movs	r3, #16
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e001      	b.n	8005198 <UART_SetConfig+0x348>
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	d15b      	bne.n	800525a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d828      	bhi.n	80051fa <UART_SetConfig+0x3aa>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x360>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080051fb 	.word	0x080051fb
 80051c0:	080051eb 	.word	0x080051eb
 80051c4:	080051fb 	.word	0x080051fb
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	080051fb 	.word	0x080051fb
 80051d0:	080051f3 	.word	0x080051f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fe f9d4 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 80051d8:	61b8      	str	r0, [r7, #24]
        break;
 80051da:	e013      	b.n	8005204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051dc:	f7fe f9e4 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 80051e0:	61b8      	str	r0, [r7, #24]
        break;
 80051e2:	e00f      	b.n	8005204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e4:	4b4b      	ldr	r3, [pc, #300]	; (8005314 <UART_SetConfig+0x4c4>)
 80051e6:	61bb      	str	r3, [r7, #24]
        break;
 80051e8:	e00c      	b.n	8005204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ea:	f7fe f8b7 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80051ee:	61b8      	str	r0, [r7, #24]
        break;
 80051f0:	e008      	b.n	8005204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	61bb      	str	r3, [r7, #24]
        break;
 80051f8:	e004      	b.n	8005204 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	77bb      	strb	r3, [r7, #30]
        break;
 8005202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d074      	beq.n	80052f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	005a      	lsls	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d916      	bls.n	8005254 <UART_SetConfig+0x404>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d212      	bcs.n	8005254 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f023 030f 	bic.w	r3, r3, #15
 8005236:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	b29a      	uxth	r2, r3
 8005244:	89fb      	ldrh	r3, [r7, #14]
 8005246:	4313      	orrs	r3, r2
 8005248:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	89fa      	ldrh	r2, [r7, #14]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e04f      	b.n	80052f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	77bb      	strb	r3, [r7, #30]
 8005258:	e04c      	b.n	80052f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d828      	bhi.n	80052b2 <UART_SetConfig+0x462>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x418>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052b3 	.word	0x080052b3
 8005278:	080052a3 	.word	0x080052a3
 800527c:	080052b3 	.word	0x080052b3
 8005280:	080052b3 	.word	0x080052b3
 8005284:	080052b3 	.word	0x080052b3
 8005288:	080052ab 	.word	0x080052ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528c:	f7fe f978 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8005290:	61b8      	str	r0, [r7, #24]
        break;
 8005292:	e013      	b.n	80052bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe f988 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8005298:	61b8      	str	r0, [r7, #24]
        break;
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800529c:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <UART_SetConfig+0x4c4>)
 800529e:	61bb      	str	r3, [r7, #24]
        break;
 80052a0:	e00c      	b.n	80052bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a2:	f7fe f85b 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80052a6:	61b8      	str	r0, [r7, #24]
        break;
 80052a8:	e008      	b.n	80052bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e004      	b.n	80052bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ba:	bf00      	nop
    }

    if (pclk != 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085a      	lsrs	r2, r3, #1
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	441a      	add	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d909      	bls.n	80052f0 <UART_SetConfig+0x4a0>
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d205      	bcs.n	80052f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	e001      	b.n	80052f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005300:	7fbb      	ldrb	r3, [r7, #30]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40007c00 	.word	0x40007c00
 8005310:	40023800 	.word	0x40023800
 8005314:	00f42400 	.word	0x00f42400

08005318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01a      	beq.n	800542e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d10a      	bne.n	800542e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800546c:	f7fc f942 	bl	80016f4 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d10e      	bne.n	800549e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f831 	bl	80054f6 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e027      	b.n	80054ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d10e      	bne.n	80054ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f81b 	bl	80054f6 <UART_WaitOnFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e011      	b.n	80054ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b09c      	sub	sp, #112	; 0x70
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005506:	e0a7      	b.n	8005658 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550e:	f000 80a3 	beq.w	8005658 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fc f8ef 	bl	80016f4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <UART_WaitOnFlagUntilTimeout+0x32>
 8005522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13f      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800553c:	667b      	str	r3, [r7, #100]	; 0x64
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005548:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800554c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e6      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	663b      	str	r3, [r7, #96]	; 0x60
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800557a:	64ba      	str	r2, [r7, #72]	; 0x48
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e068      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d050      	beq.n	8005658 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	d148      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
 80055f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e6      	bne.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	613b      	str	r3, [r7, #16]
   return(result);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3308      	adds	r3, #8
 8005620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005622:	623a      	str	r2, [r7, #32]
 8005624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	69f9      	ldr	r1, [r7, #28]
 8005628:	6a3a      	ldr	r2, [r7, #32]
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e010      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69da      	ldr	r2, [r3, #28]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	429a      	cmp	r2, r3
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	429a      	cmp	r2, r3
 8005674:	f43f af48 	beq.w	8005508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3770      	adds	r7, #112	; 0x70
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005684:	b084      	sub	sp, #16
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	f107 001c 	add.w	r0, r7, #28
 8005692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	d120      	bne.n	80056de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <USB_CoreInit+0xac>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d105      	bne.n	80056d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa96 	bl	8005c04 <USB_CoreReset>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e010      	b.n	8005700 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa8a 	bl	8005c04 <USB_CoreReset>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10b      	bne.n	800571e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f043 0206 	orr.w	r2, r3, #6
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800572a:	b004      	add	sp, #16
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	ffbdffbf 	.word	0xffbdffbf

08005734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 0201 	bic.w	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d115      	bne.n	80057a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005784:	2001      	movs	r0, #1
 8005786:	f7fb ffc1 	bl	800170c <HAL_Delay>
      ms++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa29 	bl	8005be8 <USB_GetMode>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d01e      	beq.n	80057da <USB_SetCurrentMode+0x84>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b31      	cmp	r3, #49	; 0x31
 80057a0:	d9f0      	bls.n	8005784 <USB_SetCurrentMode+0x2e>
 80057a2:	e01a      	b.n	80057da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d115      	bne.n	80057d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057b6:	2001      	movs	r0, #1
 80057b8:	f7fb ffa8 	bl	800170c <HAL_Delay>
      ms++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa10 	bl	8005be8 <USB_GetMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <USB_SetCurrentMode+0x84>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b31      	cmp	r3, #49	; 0x31
 80057d2:	d9f0      	bls.n	80057b6 <USB_SetCurrentMode+0x60>
 80057d4:	e001      	b.n	80057da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e005      	b.n	80057e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b32      	cmp	r3, #50	; 0x32
 80057de:	d101      	bne.n	80057e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	e009      	b.n	8005824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3340      	adds	r3, #64	; 0x40
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	2200      	movs	r2, #0
 800581c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	3301      	adds	r3, #1
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b0e      	cmp	r3, #14
 8005828:	d9f2      	bls.n	8005810 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d11c      	bne.n	800586a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583e:	f043 0302 	orr.w	r3, r3, #2
 8005842:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e005      	b.n	8005876 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587c:	461a      	mov	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	4619      	mov	r1, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	461a      	mov	r2, r3
 8005892:	680b      	ldr	r3, [r1, #0]
 8005894:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10c      	bne.n	80058b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058a2:	2100      	movs	r1, #0
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f965 	bl	8005b74 <USB_SetDevSpeed>
 80058aa:	e008      	b.n	80058be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f960 	bl	8005b74 <USB_SetDevSpeed>
 80058b4:	e003      	b.n	80058be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058b6:	2103      	movs	r1, #3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f95b 	bl	8005b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058be:	2110      	movs	r1, #16
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8f3 	bl	8005aac <USB_FlushTxFifo>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f91f 	bl	8005b14 <USB_FlushRxFifo>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	461a      	mov	r2, r3
 80058e8:	2300      	movs	r3, #0
 80058ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	461a      	mov	r2, r3
 80058f4:	2300      	movs	r3, #0
 80058f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	461a      	mov	r2, r3
 8005900:	2300      	movs	r3, #0
 8005902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e043      	b.n	8005992 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800591c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005920:	d118      	bne.n	8005954 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e013      	b.n	8005966 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	461a      	mov	r2, r3
 800594c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e008      	b.n	8005966 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	461a      	mov	r2, r3
 8005986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800598a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3301      	adds	r3, #1
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d3b7      	bcc.n	800590a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e043      	b.n	8005a28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	d118      	bne.n	80059ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e013      	b.n	80059fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e008      	b.n	80059fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3b7      	bcc.n	80059a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f043 0210 	orr.w	r2, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <USB_DevInit+0x2b4>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f043 0208 	orr.w	r2, r3, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <USB_DevInit+0x2b8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa0:	b004      	add	sp, #16
 8005aa2:	4770      	bx	lr
 8005aa4:	803c3800 	.word	0x803c3800
 8005aa8:	40000004 	.word	0x40000004

08005aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <USB_FlushTxFifo+0x64>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e01b      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	daf2      	bge.n	8005aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <USB_FlushTxFifo+0x64>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	00030d40 	.word	0x00030d40

08005b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <USB_FlushRxFifo+0x5c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e018      	b.n	8005b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	daf2      	bge.n	8005b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2210      	movs	r2, #16
 8005b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <USB_FlushRxFifo+0x5c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e006      	b.n	8005b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d0f0      	beq.n	8005b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	00030d40 	.word	0x00030d40

08005b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b94:	4313      	orrs	r3, r2
 8005b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bc0:	f023 0303 	bic.w	r3, r3, #3
 8005bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <USB_CoreReset+0x64>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e01b      	b.n	8005c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	daf2      	bge.n	8005c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <USB_CoreReset+0x64>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e006      	b.n	8005c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d0f0      	beq.n	8005c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	00030d40 	.word	0x00030d40

08005c6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c70:	bf00      	nop
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c82:	f3ef 8305 	mrs	r3, IPSR
 8005c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c92:	607b      	str	r3, [r7, #4]
  return(result);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <osKernelInitialize+0x3a>
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <osKernelInitialize+0x64>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d103      	bne.n	8005cb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cae:	f06f 0305 	mvn.w	r3, #5
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e00c      	b.n	8005cd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <osKernelInitialize+0x64>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cbe:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <osKernelInitialize+0x64>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e002      	b.n	8005cd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000a4c 	.word	0x20000a4c

08005ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cea:	f3ef 8305 	mrs	r3, IPSR
 8005cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d02:	f3ef 8311 	mrs	r3, BASEPRI
 8005d06:	603b      	str	r3, [r7, #0]
  return(result);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <osKernelStart+0x3a>
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <osKernelStart+0x68>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d16:	f06f 0305 	mvn.w	r3, #5
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e010      	b.n	8005d40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <osKernelStart+0x68>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d109      	bne.n	8005d3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d26:	f7ff ffa1 	bl	8005c6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <osKernelStart+0x68>)
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d30:	f001 f8ca 	bl	8006ec8 <vTaskStartScheduler>
      stat = osOK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e002      	b.n	8005d40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000a4c 	.word	0x20000a4c

08005d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b090      	sub	sp, #64	; 0x40
 8005d54:	af04      	add	r7, sp, #16
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d60:	f3ef 8305 	mrs	r3, IPSR
 8005d64:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f040 808f 	bne.w	8005e8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <osThreadNew+0x3e>
 8005d86:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <osThreadNew+0x148>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d07e      	beq.n	8005e8c <osThreadNew+0x13c>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d07b      	beq.n	8005e8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005d98:	2318      	movs	r3, #24
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d045      	beq.n	8005e38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <osThreadNew+0x6a>
        name = attr->name;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <osThreadNew+0x90>
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b38      	cmp	r3, #56	; 0x38
 8005dd2:	d805      	bhi.n	8005de0 <osThreadNew+0x90>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <osThreadNew+0x94>
        return (NULL);
 8005de0:	2300      	movs	r3, #0
 8005de2:	e054      	b.n	8005e8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	089b      	lsrs	r3, r3, #2
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <osThreadNew+0xca>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2bbb      	cmp	r3, #187	; 0xbb
 8005e02:	d90a      	bls.n	8005e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d006      	beq.n	8005e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <osThreadNew+0xca>
        mem = 1;
 8005e14:	2301      	movs	r3, #1
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	e010      	b.n	8005e3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <osThreadNew+0xec>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <osThreadNew+0xec>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <osThreadNew+0xec>
          mem = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	e001      	b.n	8005e3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d110      	bne.n	8005e64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e4a:	9202      	str	r2, [sp, #8]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fe3f 	bl	8006adc <xTaskCreateStatic>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e013      	b.n	8005e8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d110      	bne.n	8005e8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fe90 	bl	8006ba2 <xTaskCreate>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <osThreadNew+0x13c>
          hTask = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e8c:	693b      	ldr	r3, [r7, #16]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3730      	adds	r7, #48	; 0x30
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000a4c 	.word	0x20000a4c

08005e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea4:	f3ef 8305 	mrs	r3, IPSR
 8005ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10f      	bne.n	8005ed0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <osDelay+0x3c>
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <osDelay+0x58>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d103      	bne.n	8005ed8 <osDelay+0x3c>
    stat = osErrorISR;
 8005ed0:	f06f 0305 	mvn.w	r3, #5
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e007      	b.n	8005ee8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 ffba 	bl	8006e5c <vTaskDelay>
    }
  }

  return (stat);
 8005ee8:	697b      	ldr	r3, [r7, #20]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000a4c 	.word	0x20000a4c

08005ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <vApplicationGetIdleTaskMemory+0x30>)
 8005f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2280      	movs	r2, #128	; 0x80
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000a50 	.word	0x20000a50
 8005f28:	20000b0c 	.word	0x20000b0c

08005f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a07      	ldr	r2, [pc, #28]	; (8005f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4a06      	ldr	r2, [pc, #24]	; (8005f5c <vApplicationGetTimerTaskMemory+0x30>)
 8005f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f4a:	601a      	str	r2, [r3, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000d0c 	.word	0x20000d0c
 8005f5c:	20000dc8 	.word	0x20000dc8

08005f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f103 0208 	add.w	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f103 0208 	add.w	r2, r3, #8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f103 0208 	add.w	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006018:	d103      	bne.n	8006022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e00c      	b.n	800603c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3308      	adds	r3, #8
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e002      	b.n	8006030 <vListInsert+0x2e>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	d2f6      	bcs.n	800602a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6892      	ldr	r2, [r2, #8]
 800608a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6852      	ldr	r2, [r2, #4]
 8006094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d103      	bne.n	80060a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	1e5a      	subs	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10c      	bne.n	80060f6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	b672      	cpsid	i
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	b662      	cpsie	i
 80060f0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80060f6:	f002 f8a9 	bl	800824c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	3b01      	subs	r3, #1
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	441a      	add	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22ff      	movs	r2, #255	; 0xff
 8006142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d114      	bne.n	8006176 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01a      	beq.n	800618a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3310      	adds	r3, #16
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f95d 	bl	8007418 <xTaskRemoveFromEventList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d012      	beq.n	800618a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <xQueueGenericReset+0xd0>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	e009      	b.n	800618a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3310      	adds	r3, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fef0 	bl	8005f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff feeb 	bl	8005f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800618a:	f002 f893 	bl	80082b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800618e:	2301      	movs	r3, #1
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	b672      	cpsid	i
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	b662      	cpsie	i
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10c      	bne.n	80061ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	b672      	cpsid	i
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	b662      	cpsie	i
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <xQueueGenericCreateStatic+0x5a>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <xQueueGenericCreateStatic+0x5e>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <xQueueGenericCreateStatic+0x60>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10c      	bne.n	800621a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	b672      	cpsid	i
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	b662      	cpsie	i
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xQueueGenericCreateStatic+0x8a>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <xQueueGenericCreateStatic+0x8e>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueGenericCreateStatic+0x90>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	b672      	cpsid	i
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	b662      	cpsie	i
 8006244:	61fb      	str	r3, [r7, #28]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800624a:	2350      	movs	r3, #80	; 0x50
 800624c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b50      	cmp	r3, #80	; 0x50
 8006252:	d00c      	beq.n	800626e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	b672      	cpsid	i
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	b662      	cpsie	i
 8006268:	61bb      	str	r3, [r7, #24]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800626e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00d      	beq.n	8006296 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f805 	bl	80062a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006298:	4618      	mov	r0, r3
 800629a:	3730      	adds	r7, #48	; 0x30
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062ce:	2101      	movs	r1, #1
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f7ff fef9 	bl	80060c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062f6:	2300      	movs	r3, #0
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <xQueueGenericSend+0x36>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <xQueueGenericSend+0x44>
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <xQueueGenericSend+0x48>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <xQueueGenericSend+0x4a>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <xQueueGenericSend+0x68>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	b672      	cpsid	i
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	b662      	cpsie	i
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d103      	bne.n	800635e <xQueueGenericSend+0x76>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <xQueueGenericSend+0x7a>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <xQueueGenericSend+0x7c>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <xQueueGenericSend+0x9a>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	623b      	str	r3, [r7, #32]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006382:	f001 fa13 	bl	80077ac <xTaskGetSchedulerState>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xQueueGenericSend+0xaa>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueGenericSend+0xae>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueGenericSend+0xb0>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10c      	bne.n	80063b6 <xQueueGenericSend+0xce>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	b672      	cpsid	i
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	b662      	cpsie	i
 80063b0:	61fb      	str	r3, [r7, #28]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b6:	f001 ff49 	bl	800824c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <xQueueGenericSend+0xe4>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d129      	bne.n	8006420 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d2:	f000 fa15 	bl	8006800 <prvCopyDataToQueue>
 80063d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d010      	beq.n	8006402 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f817 	bl	8007418 <xTaskRemoveFromEventList>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d013      	beq.n	8006418 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063f0:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <xQueueGenericSend+0x208>)
 80063f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	e00a      	b.n	8006418 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006408:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <xQueueGenericSend+0x208>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006418:	f001 ff4c 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	e063      	b.n	80064e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006426:	f001 ff45 	bl	80082b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800642a:	2300      	movs	r3, #0
 800642c:	e05c      	b.n	80064e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	4618      	mov	r0, r3
 800643a:	f001 f853 	bl	80074e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643e:	2301      	movs	r3, #1
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006442:	f001 ff37 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006446:	f000 fdb3 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800644a:	f001 feff 	bl	800824c <vPortEnterCritical>
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006454:	b25b      	sxtb	r3, r3
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800645a:	d103      	bne.n	8006464 <xQueueGenericSend+0x17c>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006470:	d103      	bne.n	800647a <xQueueGenericSend+0x192>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800647a:	f001 ff1b 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647e:	1d3a      	adds	r2, r7, #4
 8006480:	f107 0314 	add.w	r3, r7, #20
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f842 	bl	8007510 <xTaskCheckForTimeOut>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d124      	bne.n	80064dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006494:	f000 faac 	bl	80069f0 <prvIsQueueFull>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d018      	beq.n	80064d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	3310      	adds	r3, #16
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ff62 	bl	8007370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ae:	f000 fa37 	bl	8006920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064b2:	f000 fd8b 	bl	8006fcc <xTaskResumeAll>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f af7c 	bne.w	80063b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <xQueueGenericSend+0x208>)
 80064c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	e772      	b.n	80063b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d2:	f000 fa25 	bl	8006920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d6:	f000 fd79 	bl	8006fcc <xTaskResumeAll>
 80064da:	e76c      	b.n	80063b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064de:	f000 fa1f 	bl	8006920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e2:	f000 fd73 	bl	8006fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3738      	adds	r7, #56	; 0x38
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08e      	sub	sp, #56	; 0x38
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	b672      	cpsid	i
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	b662      	cpsie	i
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <xQueueGenericSendFromISR+0x40>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <xQueueGenericSendFromISR+0x44>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <xQueueGenericSendFromISR+0x46>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	b672      	cpsid	i
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	b662      	cpsie	i
 8006552:	623b      	str	r3, [r7, #32]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d103      	bne.n	8006566 <xQueueGenericSendFromISR+0x72>
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <xQueueGenericSendFromISR+0x76>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueGenericSendFromISR+0x78>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	b672      	cpsid	i
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	b662      	cpsie	i
 8006584:	61fb      	str	r3, [r7, #28]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800658a:	f001 ff47 	bl	800841c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800658e:	f3ef 8211 	mrs	r2, BASEPRI
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	b672      	cpsid	i
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	b662      	cpsie	i
 80065a6:	61ba      	str	r2, [r7, #24]
 80065a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <xQueueGenericSendFromISR+0xcc>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d12c      	bne.n	800661a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d0:	f000 f916 	bl	8006800 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065dc:	d112      	bne.n	8006604 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	3324      	adds	r3, #36	; 0x24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 ff14 	bl	8007418 <xTaskRemoveFromEventList>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	e007      	b.n	8006614 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006608:	3301      	adds	r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	b25a      	sxtb	r2, r3
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006618:	e001      	b.n	800661e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800661a:	2300      	movs	r3, #0
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800662c:	4618      	mov	r0, r3
 800662e:	3738      	adds	r7, #56	; 0x38
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <xQueueReceive+0x34>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	b672      	cpsid	i
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	b662      	cpsie	i
 8006662:	623b      	str	r3, [r7, #32]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <xQueueReceive+0x42>
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <xQueueReceive+0x46>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <xQueueReceive+0x48>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <xQueueReceive+0x66>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	61fb      	str	r3, [r7, #28]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800669a:	f001 f887 	bl	80077ac <xTaskGetSchedulerState>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d102      	bne.n	80066aa <xQueueReceive+0x76>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <xQueueReceive+0x7a>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueReceive+0x7c>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <xQueueReceive+0x9a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	b672      	cpsid	i
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	b662      	cpsie	i
 80066c8:	61bb      	str	r3, [r7, #24]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ce:	f001 fdbd 	bl	800824c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01f      	beq.n	800671e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e2:	f000 f8f7 	bl	80068d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	3310      	adds	r3, #16
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fe8c 	bl	8007418 <xTaskRemoveFromEventList>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006706:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <xQueueReceive+0x1c8>)
 8006708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006716:	f001 fdcd 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 800671a:	2301      	movs	r3, #1
 800671c:	e069      	b.n	80067f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006724:	f001 fdc6 	bl	80082b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006728:	2300      	movs	r3, #0
 800672a:	e062      	b.n	80067f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fed4 	bl	80074e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006740:	f001 fdb8 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006744:	f000 fc34 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006748:	f001 fd80 	bl	800824c <vPortEnterCritical>
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006752:	b25b      	sxtb	r3, r3
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006758:	d103      	bne.n	8006762 <xQueueReceive+0x12e>
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006768:	b25b      	sxtb	r3, r3
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d103      	bne.n	8006778 <xQueueReceive+0x144>
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006778:	f001 fd9c 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800677c:	1d3a      	adds	r2, r7, #4
 800677e:	f107 0310 	add.w	r3, r7, #16
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fec3 	bl	8007510 <xTaskCheckForTimeOut>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d123      	bne.n	80067d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006792:	f000 f917 	bl	80069c4 <prvIsQueueEmpty>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d017      	beq.n	80067cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	3324      	adds	r3, #36	; 0x24
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fde3 	bl	8007370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ac:	f000 f8b8 	bl	8006920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067b0:	f000 fc0c 	bl	8006fcc <xTaskResumeAll>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d189      	bne.n	80066ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <xQueueReceive+0x1c8>)
 80067bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	e780      	b.n	80066ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ce:	f000 f8a7 	bl	8006920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067d2:	f000 fbfb 	bl	8006fcc <xTaskResumeAll>
 80067d6:	e77a      	b.n	80066ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067da:	f000 f8a1 	bl	8006920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067de:	f000 fbf5 	bl	8006fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e4:	f000 f8ee 	bl	80069c4 <prvIsQueueEmpty>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f43f af6f 	beq.w	80066ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d14d      	bne.n	80068c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 ffdc 	bl	80077e8 <xTaskPriorityDisinherit>
 8006830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	e043      	b.n	80068c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d119      	bne.n	8006874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6858      	ldr	r0, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	461a      	mov	r2, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	f002 f834 	bl	80088b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d32b      	bcc.n	80068c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]
 8006872:	e026      	b.n	80068c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68d8      	ldr	r0, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	461a      	mov	r2, r3
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	f002 f81a 	bl	80088b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	425b      	negs	r3, r3
 800688e:	441a      	add	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d207      	bcs.n	80068b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	425b      	negs	r3, r3
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d105      	bne.n	80068c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3b01      	subs	r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068ca:	697b      	ldr	r3, [r7, #20]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d018      	beq.n	8006918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	441a      	add	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d303      	bcc.n	8006908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68d9      	ldr	r1, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	461a      	mov	r2, r3
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f001 ffd0 	bl	80088b8 <memcpy>
	}
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006928:	f001 fc90 	bl	800824c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006934:	e011      	b.n	800695a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3324      	adds	r3, #36	; 0x24
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fd68 	bl	8007418 <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800694e:	f000 fe45 	bl	80075dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	3b01      	subs	r3, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	dce9      	bgt.n	8006936 <prvUnlockQueue+0x16>
 8006962:	e000      	b.n	8006966 <prvUnlockQueue+0x46>
					break;
 8006964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	22ff      	movs	r2, #255	; 0xff
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800696e:	f001 fca1 	bl	80082b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006972:	f001 fc6b 	bl	800824c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800697e:	e011      	b.n	80069a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3310      	adds	r3, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fd43 	bl	8007418 <xTaskRemoveFromEventList>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006998:	f000 fe20 	bl	80075dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	3b01      	subs	r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dce9      	bgt.n	8006980 <prvUnlockQueue+0x60>
 80069ac:	e000      	b.n	80069b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	22ff      	movs	r2, #255	; 0xff
 80069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069b8:	f001 fc7c 	bl	80082b4 <vPortExitCritical>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069cc:	f001 fc3e 	bl	800824c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e001      	b.n	80069e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069e2:	f001 fc67 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f001 fc28 	bl	800824c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d102      	bne.n	8006a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e001      	b.n	8006a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a12:	f001 fc4f 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006a16:	68fb      	ldr	r3, [r7, #12]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e014      	b.n	8006a5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a3c:	490c      	ldr	r1, [pc, #48]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a52:	e006      	b.n	8006a62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b07      	cmp	r3, #7
 8006a5e:	d9e7      	bls.n	8006a30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	200011c8 	.word	0x200011c8

08006a74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a84:	f001 fbe2 	bl	800824c <vPortEnterCritical>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a94:	d103      	bne.n	8006a9e <vQueueWaitForMessageRestricted+0x2a>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aaa:	d103      	bne.n	8006ab4 <vQueueWaitForMessageRestricted+0x40>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	f001 fbfe 	bl	80082b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fc77 	bl	80073bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff ff26 	bl	8006920 <prvUnlockQueue>
	}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10c      	bne.n	8006b0a <xTaskCreateStatic+0x2e>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	b672      	cpsid	i
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	b662      	cpsie	i
 8006b04:	623b      	str	r3, [r7, #32]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <xTaskCreateStatic+0x4e>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	b672      	cpsid	i
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	b662      	cpsie	i
 8006b24:	61fb      	str	r3, [r7, #28]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b2a:	23bc      	movs	r3, #188	; 0xbc
 8006b2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2bbc      	cmp	r3, #188	; 0xbc
 8006b32:	d00c      	beq.n	8006b4e <xTaskCreateStatic+0x72>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	61bb      	str	r3, [r7, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01e      	beq.n	8006b94 <xTaskCreateStatic+0xb8>
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f850 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b8e:	f000 f8f5 	bl	8006d7c <prvAddNewTaskToReadyList>
 8006b92:	e001      	b.n	8006b98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b98:	697b      	ldr	r3, [r7, #20]
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3728      	adds	r7, #40	; 0x28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b08c      	sub	sp, #48	; 0x30
 8006ba6:	af04      	add	r7, sp, #16
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fc74 	bl	80084a4 <pvPortMalloc>
 8006bbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bc4:	20bc      	movs	r0, #188	; 0xbc
 8006bc6:	f001 fc6d 	bl	80084a4 <pvPortMalloc>
 8006bca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	e005      	b.n	8006be6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f001 fd2c 	bl	8008638 <vPortFree>
 8006be0:	e001      	b.n	8006be6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d017      	beq.n	8006c1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f80e 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c10:	69f8      	ldr	r0, [r7, #28]
 8006c12:	f000 f8b3 	bl	8006d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c16:	2301      	movs	r3, #1
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e002      	b.n	8006c22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c22:	69bb      	ldr	r3, [r7, #24]
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	461a      	mov	r2, r3
 8006c44:	21a5      	movs	r1, #165	; 0xa5
 8006c46:	f001 fe45 	bl	80088d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c54:	440b      	add	r3, r1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f023 0307 	bic.w	r3, r3, #7
 8006c62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	b672      	cpsid	i
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	b662      	cpsie	i
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01f      	beq.n	8006cce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e012      	b.n	8006cba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	7819      	ldrb	r1, [r3, #0]
 8006c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3334      	adds	r3, #52	; 0x34
 8006ca4:	460a      	mov	r2, r1
 8006ca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d9e9      	bls.n	8006c94 <prvInitialiseNewTask+0x68>
 8006cc0:	e000      	b.n	8006cc4 <prvInitialiseNewTask+0x98>
			{
				break;
 8006cc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ccc:	e003      	b.n	8006cd6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b37      	cmp	r3, #55	; 0x37
 8006cda:	d901      	bls.n	8006ce0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cdc:	2337      	movs	r3, #55	; 0x37
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	2200      	movs	r2, #0
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff f952 	bl	8005fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	3318      	adds	r3, #24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff f94d 	bl	8005fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	3354      	adds	r3, #84	; 0x54
 8006d30:	2260      	movs	r2, #96	; 0x60
 8006d32:	2100      	movs	r1, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 fdcd 	bl	80088d4 <memset>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <prvInitialiseNewTask+0x144>)
 8006d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <prvInitialiseNewTask+0x148>)
 8006d44:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <prvInitialiseNewTask+0x14c>)
 8006d4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	69b8      	ldr	r0, [r7, #24]
 8006d52:	f001 f96b 	bl	800802c <pxPortInitialiseStack>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d68:	bf00      	nop
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08008b34 	.word	0x08008b34
 8006d74:	08008b54 	.word	0x08008b54
 8006d78:	08008b14 	.word	0x08008b14

08006d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d84:	f001 fa62 	bl	800824c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <prvAddNewTaskToReadyList+0xc4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <prvAddNewTaskToReadyList+0xc4>)
 8006d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d92:	4b2c      	ldr	r3, [pc, #176]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d9a:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <prvAddNewTaskToReadyList+0xc4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d110      	bne.n	8006dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da8:	f000 fc3c 	bl	8007624 <prvInitialiseTaskLists>
 8006dac:	e00d      	b.n	8006dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dae:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <prvAddNewTaskToReadyList+0xcc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006db6:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d802      	bhi.n	8006dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc4:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dca:	4b20      	ldr	r3, [pc, #128]	; (8006e4c <prvAddNewTaskToReadyList+0xd0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <prvAddNewTaskToReadyList+0xd0>)
 8006dd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <prvAddNewTaskToReadyList+0xd0>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <prvAddNewTaskToReadyList+0xd4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <prvAddNewTaskToReadyList+0x74>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <prvAddNewTaskToReadyList+0xd4>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <prvAddNewTaskToReadyList+0xd8>)
 8006dfe:	441a      	add	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7ff f8d7 	bl	8005fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e0c:	f001 fa52 	bl	80082b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <prvAddNewTaskToReadyList+0xcc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d207      	bcs.n	8006e36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvAddNewTaskToReadyList+0xdc>)
 8006e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200016dc 	.word	0x200016dc
 8006e44:	20001208 	.word	0x20001208
 8006e48:	200016e8 	.word	0x200016e8
 8006e4c:	200016f8 	.word	0x200016f8
 8006e50:	200016e4 	.word	0x200016e4
 8006e54:	2000120c 	.word	0x2000120c
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d019      	beq.n	8006ea2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <vTaskDelay+0x64>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <vTaskDelay+0x34>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	60bb      	str	r3, [r7, #8]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006e90:	f000 f88e 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fd18 	bl	80078cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e9c:	f000 f896 	bl	8006fcc <xTaskResumeAll>
 8006ea0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <vTaskDelay+0x68>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20001704 	.word	0x20001704
 8006ec4:	e000ed04 	.word	0xe000ed04

08006ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	1d39      	adds	r1, r7, #4
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff f80a 	bl	8005ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	9202      	str	r2, [sp, #8]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	4926      	ldr	r1, [pc, #152]	; (8006f90 <vTaskStartScheduler+0xc8>)
 8006ef8:	4826      	ldr	r0, [pc, #152]	; (8006f94 <vTaskStartScheduler+0xcc>)
 8006efa:	f7ff fdef 	bl	8006adc <xTaskCreateStatic>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4a25      	ldr	r2, [pc, #148]	; (8006f98 <vTaskStartScheduler+0xd0>)
 8006f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <vTaskStartScheduler+0xd0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e001      	b.n	8006f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d102      	bne.n	8006f22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f1c:	f000 fd2a 	bl	8007974 <xTimerCreateTimerTask>
 8006f20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d11d      	bne.n	8006f64 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	b672      	cpsid	i
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	b662      	cpsie	i
 8006f3c:	613b      	str	r3, [r7, #16]
}
 8006f3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <vTaskStartScheduler+0xd4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3354      	adds	r3, #84	; 0x54
 8006f46:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <vTaskStartScheduler+0xd8>)
 8006f48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4a:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <vTaskStartScheduler+0xdc>)
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <vTaskStartScheduler+0xe0>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f58:	4b14      	ldr	r3, [pc, #80]	; (8006fac <vTaskStartScheduler+0xe4>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f5e:	f001 f8f7 	bl	8008150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f62:	e010      	b.n	8006f86 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6a:	d10c      	bne.n	8006f86 <vTaskStartScheduler+0xbe>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	b672      	cpsid	i
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	b662      	cpsie	i
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vTaskStartScheduler+0xbc>
}
 8006f86:	bf00      	nop
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	08008a9c 	.word	0x08008a9c
 8006f94:	080075f5 	.word	0x080075f5
 8006f98:	20001700 	.word	0x20001700
 8006f9c:	20001208 	.word	0x20001208
 8006fa0:	20000010 	.word	0x20000010
 8006fa4:	200016fc 	.word	0x200016fc
 8006fa8:	200016e8 	.word	0x200016e8
 8006fac:	200016e0 	.word	0x200016e0

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20001704 	.word	0x20001704

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b43      	ldr	r3, [pc, #268]	; (80070e8 <xTaskResumeAll+0x11c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10c      	bne.n	8006ffc <xTaskResumeAll+0x30>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	b672      	cpsid	i
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	b662      	cpsie	i
 8006ff6:	603b      	str	r3, [r7, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ffc:	f001 f926 	bl	800824c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007000:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3b01      	subs	r3, #1
 8007006:	4a38      	ldr	r2, [pc, #224]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <xTaskResumeAll+0x11c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d162      	bne.n	80070d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007012:	4b36      	ldr	r3, [pc, #216]	; (80070ec <xTaskResumeAll+0x120>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d05e      	beq.n	80070d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800701a:	e02f      	b.n	800707c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	4b34      	ldr	r3, [pc, #208]	; (80070f0 <xTaskResumeAll+0x124>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3318      	adds	r3, #24
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff f823 	bl	8006074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff f81e 	bl	8006074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <xTaskResumeAll+0x128>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <xTaskResumeAll+0x80>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <xTaskResumeAll+0x128>)
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <xTaskResumeAll+0x12c>)
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3304      	adds	r3, #4
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe ffa9 	bl	8005fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <xTaskResumeAll+0x130>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <xTaskResumeAll+0x134>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <xTaskResumeAll+0x124>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1cb      	bne.n	800701c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800708a:	f000 fb6f 	bl	800776c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <xTaskResumeAll+0x138>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800709a:	f000 f847 	bl	800712c <xTaskIncrementTick>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80070a4:	4b16      	ldr	r3, [pc, #88]	; (8007100 <xTaskResumeAll+0x134>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f1      	bne.n	800709a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <xTaskResumeAll+0x138>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070bc:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xTaskResumeAll+0x134>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c8:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <xTaskResumeAll+0x13c>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d8:	f001 f8ec 	bl	80082b4 <vPortExitCritical>

	return xAlreadyYielded;
 80070dc:	68bb      	ldr	r3, [r7, #8]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20001704 	.word	0x20001704
 80070ec:	200016dc 	.word	0x200016dc
 80070f0:	2000169c 	.word	0x2000169c
 80070f4:	200016e4 	.word	0x200016e4
 80070f8:	2000120c 	.word	0x2000120c
 80070fc:	20001208 	.word	0x20001208
 8007100:	200016f0 	.word	0x200016f0
 8007104:	200016ec 	.word	0x200016ec
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <xTaskGetTickCount+0x1c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007118:	687b      	ldr	r3, [r7, #4]
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	200016e0 	.word	0x200016e0

0800712c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b50      	ldr	r3, [pc, #320]	; (8007278 <xTaskIncrementTick+0x14c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 808b 	bne.w	8007256 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007140:	4b4e      	ldr	r3, [pc, #312]	; (800727c <xTaskIncrementTick+0x150>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007148:	4a4c      	ldr	r2, [pc, #304]	; (800727c <xTaskIncrementTick+0x150>)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d122      	bne.n	800719a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007154:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <xTaskIncrementTick+0x154>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <xTaskIncrementTick+0x4c>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	b672      	cpsid	i
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	b662      	cpsie	i
 8007172:	603b      	str	r3, [r7, #0]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xTaskIncrementTick+0x4a>
 8007178:	4b41      	ldr	r3, [pc, #260]	; (8007280 <xTaskIncrementTick+0x154>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	4b41      	ldr	r3, [pc, #260]	; (8007284 <xTaskIncrementTick+0x158>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3f      	ldr	r2, [pc, #252]	; (8007280 <xTaskIncrementTick+0x154>)
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4a3f      	ldr	r2, [pc, #252]	; (8007284 <xTaskIncrementTick+0x158>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4b3e      	ldr	r3, [pc, #248]	; (8007288 <xTaskIncrementTick+0x15c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	4a3d      	ldr	r2, [pc, #244]	; (8007288 <xTaskIncrementTick+0x15c>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f000 fae9 	bl	800776c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800719a:	4b3c      	ldr	r3, [pc, #240]	; (800728c <xTaskIncrementTick+0x160>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d349      	bcc.n	8007238 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <xTaskIncrementTick+0x154>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ae:	4b37      	ldr	r3, [pc, #220]	; (800728c <xTaskIncrementTick+0x160>)
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b4:	601a      	str	r2, [r3, #0]
					break;
 80071b6:	e03f      	b.n	8007238 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b8:	4b31      	ldr	r3, [pc, #196]	; (8007280 <xTaskIncrementTick+0x154>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d203      	bcs.n	80071d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071d0:	4a2e      	ldr	r2, [pc, #184]	; (800728c <xTaskIncrementTick+0x160>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071d6:	e02f      	b.n	8007238 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3304      	adds	r3, #4
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe ff49 	bl	8006074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3318      	adds	r3, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe ff40 	bl	8006074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f8:	4b25      	ldr	r3, [pc, #148]	; (8007290 <xTaskIncrementTick+0x164>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d903      	bls.n	8007208 <xTaskIncrementTick+0xdc>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <xTaskIncrementTick+0x164>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <xTaskIncrementTick+0x168>)
 8007216:	441a      	add	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7fe fecb 	bl	8005fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <xTaskIncrementTick+0x16c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	429a      	cmp	r2, r3
 8007230:	d3b8      	bcc.n	80071a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007236:	e7b5      	b.n	80071a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007238:	4b17      	ldr	r3, [pc, #92]	; (8007298 <xTaskIncrementTick+0x16c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4915      	ldr	r1, [pc, #84]	; (8007294 <xTaskIncrementTick+0x168>)
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d907      	bls.n	8007260 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e004      	b.n	8007260 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007256:	4b11      	ldr	r3, [pc, #68]	; (800729c <xTaskIncrementTick+0x170>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	4a0f      	ldr	r2, [pc, #60]	; (800729c <xTaskIncrementTick+0x170>)
 800725e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <xTaskIncrementTick+0x174>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800726c:	697b      	ldr	r3, [r7, #20]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20001704 	.word	0x20001704
 800727c:	200016e0 	.word	0x200016e0
 8007280:	20001694 	.word	0x20001694
 8007284:	20001698 	.word	0x20001698
 8007288:	200016f4 	.word	0x200016f4
 800728c:	200016fc 	.word	0x200016fc
 8007290:	200016e4 	.word	0x200016e4
 8007294:	2000120c 	.word	0x2000120c
 8007298:	20001208 	.word	0x20001208
 800729c:	200016ec 	.word	0x200016ec
 80072a0:	200016f0 	.word	0x200016f0

080072a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <vTaskSwitchContext+0xb4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072b2:	4b2a      	ldr	r3, [pc, #168]	; (800735c <vTaskSwitchContext+0xb8>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b8:	e048      	b.n	800734c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80072ba:	4b28      	ldr	r3, [pc, #160]	; (800735c <vTaskSwitchContext+0xb8>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	4b27      	ldr	r3, [pc, #156]	; (8007360 <vTaskSwitchContext+0xbc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	e012      	b.n	80072ee <vTaskSwitchContext+0x4a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10c      	bne.n	80072e8 <vTaskSwitchContext+0x44>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	b672      	cpsid	i
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	b662      	cpsie	i
 80072e2:	607b      	str	r3, [r7, #4]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <vTaskSwitchContext+0x42>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	491d      	ldr	r1, [pc, #116]	; (8007364 <vTaskSwitchContext+0xc0>)
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0e2      	beq.n	80072c8 <vTaskSwitchContext+0x24>
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <vTaskSwitchContext+0xc0>)
 800730e:	4413      	add	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3308      	adds	r3, #8
 8007324:	429a      	cmp	r2, r3
 8007326:	d104      	bne.n	8007332 <vTaskSwitchContext+0x8e>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <vTaskSwitchContext+0xc4>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <vTaskSwitchContext+0xbc>)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <vTaskSwitchContext+0xc4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3354      	adds	r3, #84	; 0x54
 8007348:	4a08      	ldr	r2, [pc, #32]	; (800736c <vTaskSwitchContext+0xc8>)
 800734a:	6013      	str	r3, [r2, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20001704 	.word	0x20001704
 800735c:	200016f0 	.word	0x200016f0
 8007360:	200016e4 	.word	0x200016e4
 8007364:	2000120c 	.word	0x2000120c
 8007368:	20001208 	.word	0x20001208
 800736c:	20000010 	.word	0x20000010

08007370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10c      	bne.n	800739a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	b672      	cpsid	i
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	b662      	cpsie	i
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <vTaskPlaceOnEventList+0x48>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3318      	adds	r3, #24
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fe fe2d 	bl	8006002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073a8:	2101      	movs	r1, #1
 80073aa:	6838      	ldr	r0, [r7, #0]
 80073ac:	f000 fa8e 	bl	80078cc <prvAddCurrentTaskToDelayedList>
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20001208 	.word	0x20001208

080073bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	617b      	str	r3, [r7, #20]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <vTaskPlaceOnEventListRestricted+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3318      	adds	r3, #24
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7fe fde2 	bl	8005fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007400:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	68b8      	ldr	r0, [r7, #8]
 8007406:	f000 fa61 	bl	80078cc <prvAddCurrentTaskToDelayedList>
	}
 800740a:	bf00      	nop
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20001208 	.word	0x20001208

08007418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	60fb      	str	r3, [r7, #12]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3318      	adds	r3, #24
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fe11 	bl	8006074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007452:	4b1e      	ldr	r3, [pc, #120]	; (80074cc <xTaskRemoveFromEventList+0xb4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11d      	bne.n	8007496 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fe08 	bl	8006074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <xTaskRemoveFromEventList+0xb8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d903      	bls.n	8007478 <xTaskRemoveFromEventList+0x60>
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4a16      	ldr	r2, [pc, #88]	; (80074d0 <xTaskRemoveFromEventList+0xb8>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a13      	ldr	r2, [pc, #76]	; (80074d4 <xTaskRemoveFromEventList+0xbc>)
 8007486:	441a      	add	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe fd93 	bl	8005fba <vListInsertEnd>
 8007494:	e005      	b.n	80074a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3318      	adds	r3, #24
 800749a:	4619      	mov	r1, r3
 800749c:	480e      	ldr	r0, [pc, #56]	; (80074d8 <xTaskRemoveFromEventList+0xc0>)
 800749e:	f7fe fd8c 	bl	8005fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <xTaskRemoveFromEventList+0xc4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d905      	bls.n	80074bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <xTaskRemoveFromEventList+0xc8>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e001      	b.n	80074c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074c0:	697b      	ldr	r3, [r7, #20]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20001704 	.word	0x20001704
 80074d0:	200016e4 	.word	0x200016e4
 80074d4:	2000120c 	.word	0x2000120c
 80074d8:	2000169c 	.word	0x2000169c
 80074dc:	20001208 	.word	0x20001208
 80074e0:	200016f0 	.word	0x200016f0

080074e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <vTaskInternalSetTimeOutState+0x24>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <vTaskInternalSetTimeOutState+0x28>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	200016f4 	.word	0x200016f4
 800750c:	200016e0 	.word	0x200016e0

08007510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10c      	bne.n	800753a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	b672      	cpsid	i
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	b662      	cpsie	i
 8007534:	613b      	str	r3, [r7, #16]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800755a:	f000 fe77 	bl	800824c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800755e:	4b1d      	ldr	r3, [pc, #116]	; (80075d4 <xTaskCheckForTimeOut+0xc4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007576:	d102      	bne.n	800757e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007578:	2300      	movs	r3, #0
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	e023      	b.n	80075c6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <xTaskCheckForTimeOut+0xc8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d007      	beq.n	800759a <xTaskCheckForTimeOut+0x8a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	429a      	cmp	r2, r3
 8007592:	d302      	bcc.n	800759a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e015      	b.n	80075c6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d20b      	bcs.n	80075bc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ff97 	bl	80074e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e004      	b.n	80075c6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075c2:	2301      	movs	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075c6:	f000 fe75 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 80075ca:	69fb      	ldr	r3, [r7, #28]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	200016e0 	.word	0x200016e0
 80075d8:	200016f4 	.word	0x200016f4

080075dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <vTaskMissedYield+0x14>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	200016f0 	.word	0x200016f0

080075f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075fc:	f000 f852 	bl	80076a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007600:	4b06      	ldr	r3, [pc, #24]	; (800761c <prvIdleTask+0x28>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d9f9      	bls.n	80075fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <prvIdleTask+0x2c>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007618:	e7f0      	b.n	80075fc <prvIdleTask+0x8>
 800761a:	bf00      	nop
 800761c:	2000120c 	.word	0x2000120c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800762a:	2300      	movs	r3, #0
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	e00c      	b.n	800764a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4a12      	ldr	r2, [pc, #72]	; (8007684 <prvInitialiseTaskLists+0x60>)
 800763c:	4413      	add	r3, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fc8e 	bl	8005f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3301      	adds	r3, #1
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b37      	cmp	r3, #55	; 0x37
 800764e:	d9ef      	bls.n	8007630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007650:	480d      	ldr	r0, [pc, #52]	; (8007688 <prvInitialiseTaskLists+0x64>)
 8007652:	f7fe fc85 	bl	8005f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007656:	480d      	ldr	r0, [pc, #52]	; (800768c <prvInitialiseTaskLists+0x68>)
 8007658:	f7fe fc82 	bl	8005f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800765c:	480c      	ldr	r0, [pc, #48]	; (8007690 <prvInitialiseTaskLists+0x6c>)
 800765e:	f7fe fc7f 	bl	8005f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007662:	480c      	ldr	r0, [pc, #48]	; (8007694 <prvInitialiseTaskLists+0x70>)
 8007664:	f7fe fc7c 	bl	8005f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007668:	480b      	ldr	r0, [pc, #44]	; (8007698 <prvInitialiseTaskLists+0x74>)
 800766a:	f7fe fc79 	bl	8005f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800766e:	4b0b      	ldr	r3, [pc, #44]	; (800769c <prvInitialiseTaskLists+0x78>)
 8007670:	4a05      	ldr	r2, [pc, #20]	; (8007688 <prvInitialiseTaskLists+0x64>)
 8007672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <prvInitialiseTaskLists+0x7c>)
 8007676:	4a05      	ldr	r2, [pc, #20]	; (800768c <prvInitialiseTaskLists+0x68>)
 8007678:	601a      	str	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	2000120c 	.word	0x2000120c
 8007688:	2000166c 	.word	0x2000166c
 800768c:	20001680 	.word	0x20001680
 8007690:	2000169c 	.word	0x2000169c
 8007694:	200016b0 	.word	0x200016b0
 8007698:	200016c8 	.word	0x200016c8
 800769c:	20001694 	.word	0x20001694
 80076a0:	20001698 	.word	0x20001698

080076a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076aa:	e019      	b.n	80076e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076ac:	f000 fdce 	bl	800824c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b0:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <prvCheckTasksWaitingTermination+0x50>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe fcd9 	bl	8006074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <prvCheckTasksWaitingTermination+0x54>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	4a0b      	ldr	r2, [pc, #44]	; (80076f8 <prvCheckTasksWaitingTermination+0x54>)
 80076ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <prvCheckTasksWaitingTermination+0x58>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvCheckTasksWaitingTermination+0x58>)
 80076d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076d6:	f000 fded 	bl	80082b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f810 	bl	8007700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <prvCheckTasksWaitingTermination+0x58>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e1      	bne.n	80076ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200016b0 	.word	0x200016b0
 80076f8:	200016dc 	.word	0x200016dc
 80076fc:	200016c4 	.word	0x200016c4

08007700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3354      	adds	r3, #84	; 0x54
 800770c:	4618      	mov	r0, r3
 800770e:	f001 f8f7 	bl	8008900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007718:	2b00      	cmp	r3, #0
 800771a:	d108      	bne.n	800772e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	4618      	mov	r0, r3
 8007722:	f000 ff89 	bl	8008638 <vPortFree>
				vPortFree( pxTCB );
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 ff86 	bl	8008638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800772c:	e01a      	b.n	8007764 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007734:	2b01      	cmp	r3, #1
 8007736:	d103      	bne.n	8007740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ff7d 	bl	8008638 <vPortFree>
	}
 800773e:	e011      	b.n	8007764 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007746:	2b02      	cmp	r3, #2
 8007748:	d00c      	beq.n	8007764 <prvDeleteTCB+0x64>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	b672      	cpsid	i
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	b662      	cpsie	i
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <prvDeleteTCB+0x62>
	}
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <prvResetNextTaskUnblockTime+0x38>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <prvResetNextTaskUnblockTime+0x3c>)
 800777e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007782:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007784:	e008      	b.n	8007798 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <prvResetNextTaskUnblockTime+0x38>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007796:	6013      	str	r3, [r2, #0]
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	20001694 	.word	0x20001694
 80077a8:	200016fc 	.word	0x200016fc

080077ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <xTaskGetSchedulerState+0x34>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077ba:	2301      	movs	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e008      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <xTaskGetSchedulerState+0x38>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077c8:	2302      	movs	r3, #2
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e001      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077d2:	687b      	ldr	r3, [r7, #4]
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	200016e8 	.word	0x200016e8
 80077e4:	20001704 	.word	0x20001704

080077e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d05a      	beq.n	80078b4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077fe:	4b30      	ldr	r3, [pc, #192]	; (80078c0 <xTaskPriorityDisinherit+0xd8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	429a      	cmp	r2, r3
 8007806:	d00c      	beq.n	8007822 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	b672      	cpsid	i
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	b662      	cpsie	i
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10c      	bne.n	8007844 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	b672      	cpsid	i
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	b662      	cpsie	i
 800783e:	60bb      	str	r3, [r7, #8]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	1e5a      	subs	r2, r3, #1
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	429a      	cmp	r2, r3
 8007858:	d02c      	beq.n	80078b4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	d128      	bne.n	80078b4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fc04 	bl	8006074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <xTaskPriorityDisinherit+0xdc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d903      	bls.n	8007894 <xTaskPriorityDisinherit+0xac>
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	4a0c      	ldr	r2, [pc, #48]	; (80078c4 <xTaskPriorityDisinherit+0xdc>)
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <xTaskPriorityDisinherit+0xe0>)
 80078a2:	441a      	add	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fe fb85 	bl	8005fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078b4:	697b      	ldr	r3, [r7, #20]
	}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20001208 	.word	0x20001208
 80078c4:	200016e4 	.word	0x200016e4
 80078c8:	2000120c 	.word	0x2000120c

080078cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078d6:	4b21      	ldr	r3, [pc, #132]	; (800795c <prvAddCurrentTaskToDelayedList+0x90>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078dc:	4b20      	ldr	r3, [pc, #128]	; (8007960 <prvAddCurrentTaskToDelayedList+0x94>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fbc6 	bl	8006074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ee:	d10a      	bne.n	8007906 <prvAddCurrentTaskToDelayedList+0x3a>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4819      	ldr	r0, [pc, #100]	; (8007964 <prvAddCurrentTaskToDelayedList+0x98>)
 8007900:	f7fe fb5b 	bl	8005fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007904:	e026      	b.n	8007954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800790e:	4b14      	ldr	r3, [pc, #80]	; (8007960 <prvAddCurrentTaskToDelayedList+0x94>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	429a      	cmp	r2, r3
 800791c:	d209      	bcs.n	8007932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <prvAddCurrentTaskToDelayedList+0x94>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7fe fb69 	bl	8006002 <vListInsert>
}
 8007930:	e010      	b.n	8007954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <prvAddCurrentTaskToDelayedList+0x94>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7fe fb5f 	bl	8006002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	d202      	bcs.n	8007954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800794e:	4a08      	ldr	r2, [pc, #32]	; (8007970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6013      	str	r3, [r2, #0]
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	200016e0 	.word	0x200016e0
 8007960:	20001208 	.word	0x20001208
 8007964:	200016c8 	.word	0x200016c8
 8007968:	20001698 	.word	0x20001698
 800796c:	20001694 	.word	0x20001694
 8007970:	200016fc 	.word	0x200016fc

08007974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800797e:	f000 fb15 	bl	8007fac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007982:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <xTimerCreateTimerTask+0x84>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d021      	beq.n	80079ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007992:	1d3a      	adds	r2, r7, #4
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	f107 030c 	add.w	r3, r7, #12
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fac5 	bl	8005f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	9202      	str	r2, [sp, #8]
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	2302      	movs	r3, #2
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	460a      	mov	r2, r1
 80079b4:	4911      	ldr	r1, [pc, #68]	; (80079fc <xTimerCreateTimerTask+0x88>)
 80079b6:	4812      	ldr	r0, [pc, #72]	; (8007a00 <xTimerCreateTimerTask+0x8c>)
 80079b8:	f7ff f890 	bl	8006adc <xTaskCreateStatic>
 80079bc:	4603      	mov	r3, r0
 80079be:	4a11      	ldr	r2, [pc, #68]	; (8007a04 <xTimerCreateTimerTask+0x90>)
 80079c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <xTimerCreateTimerTask+0x90>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079ca:	2301      	movs	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	b672      	cpsid	i
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	b662      	cpsie	i
 80079e8:	613b      	str	r3, [r7, #16]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 80079ee:	697b      	ldr	r3, [r7, #20]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20001738 	.word	0x20001738
 80079fc:	08008aa4 	.word	0x08008aa4
 8007a00:	08007b45 	.word	0x08007b45
 8007a04:	2000173c 	.word	0x2000173c

08007a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10c      	bne.n	8007a3a <xTimerGenericCommand+0x32>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	b672      	cpsid	i
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	b662      	cpsie	i
 8007a34:	623b      	str	r3, [r7, #32]
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a3a:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <xTimerGenericCommand+0x9c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02a      	beq.n	8007a98 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	dc18      	bgt.n	8007a86 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a54:	f7ff feaa 	bl	80077ac <xTaskGetSchedulerState>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d109      	bne.n	8007a72 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <xTimerGenericCommand+0x9c>)
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	f107 0110 	add.w	r1, r7, #16
 8007a66:	2300      	movs	r3, #0
 8007a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6a:	f7fe fc3d 	bl	80062e8 <xQueueGenericSend>
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a70:	e012      	b.n	8007a98 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a72:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <xTimerGenericCommand+0x9c>)
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	f107 0110 	add.w	r1, r7, #16
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f7fe fc33 	bl	80062e8 <xQueueGenericSend>
 8007a82:	6278      	str	r0, [r7, #36]	; 0x24
 8007a84:	e008      	b.n	8007a98 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <xTimerGenericCommand+0x9c>)
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	f107 0110 	add.w	r1, r7, #16
 8007a8e:	2300      	movs	r3, #0
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	f7fe fd2f 	bl	80064f4 <xQueueGenericSendFromISR>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20001738 	.word	0x20001738

08007aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b23      	ldr	r3, [pc, #140]	; (8007b40 <prvProcessExpiredTimer+0x98>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fad7 	bl	8006074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d024      	beq.n	8007b1e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	18d1      	adds	r1, r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	6978      	ldr	r0, [r7, #20]
 8007ae2:	f000 f8d3 	bl	8007c8c <prvInsertTimerInActiveList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d021      	beq.n	8007b30 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aec:	2300      	movs	r3, #0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2300      	movs	r3, #0
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	2100      	movs	r1, #0
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7ff ff86 	bl	8007a08 <xTimerGenericCommand>
 8007afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d115      	bne.n	8007b30 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	b672      	cpsid	i
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	b662      	cpsie	i
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	6978      	ldr	r0, [r7, #20]
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20001730 	.word	0x20001730

08007b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f857 	bl	8007c04 <prvGetNextExpireTime>
 8007b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f803 	bl	8007b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b62:	f000 f8d5 	bl	8007d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b66:	e7f1      	b.n	8007b4c <prvTimerTask+0x8>

08007b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b72:	f7ff fa1d 	bl	8006fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f866 	bl	8007c4c <prvSampleTimeNow>
 8007b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d130      	bne.n	8007bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d806      	bhi.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b96:	f7ff fa19 	bl	8006fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff ff83 	bl	8007aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ba2:	e024      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <prvProcessTimerOrBlockTask+0x90>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <prvProcessTimerOrBlockTask+0x50>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <prvProcessTimerOrBlockTask+0x52>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <prvProcessTimerOrBlockTask+0x94>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f7fe ff53 	bl	8006a74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f7ff f9fd 	bl	8006fcc <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bd8:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <prvProcessTimerOrBlockTask+0x98>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
}
 8007be8:	e001      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bea:	f7ff f9ef 	bl	8006fcc <xTaskResumeAll>
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20001734 	.word	0x20001734
 8007bfc:	20001738 	.word	0x20001738
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <prvGetNextExpireTime+0x16>
 8007c16:	2201      	movs	r2, #1
 8007c18:	e000      	b.n	8007c1c <prvGetNextExpireTime+0x18>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d105      	bne.n	8007c34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e001      	b.n	8007c38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20001730 	.word	0x20001730

08007c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c54:	f7ff fa5a 	bl	800710c <xTaskGetTickCount>
 8007c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d205      	bcs.n	8007c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c64:	f000 f93c 	bl	8007ee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20001740 	.word	0x20001740

08007c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d812      	bhi.n	8007cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e01b      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <prvInsertTimerInActiveList+0x7c>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe f996 	bl	8006002 <vListInsert>
 8007cd6:	e012      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d206      	bcs.n	8007cee <prvInsertTimerInActiveList+0x62>
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d302      	bcc.n	8007cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e007      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <prvInsertTimerInActiveList+0x80>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fe f982 	bl	8006002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cfe:	697b      	ldr	r3, [r7, #20]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20001734 	.word	0x20001734
 8007d0c:	20001730 	.word	0x20001730

08007d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d16:	e0d0      	b.n	8007eba <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da1a      	bge.n	8007d54 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	3304      	adds	r3, #4
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	b672      	cpsid	i
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	b662      	cpsie	i
 8007d3e:	61fb      	str	r3, [r7, #28]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4a:	6850      	ldr	r0, [r2, #4]
 8007d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4e:	6892      	ldr	r2, [r2, #8]
 8007d50:	4611      	mov	r1, r2
 8007d52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f2c0 80ae 	blt.w	8007eb8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe f981 	bl	8006074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d72:	463b      	mov	r3, r7
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff ff69 	bl	8007c4c <prvSampleTimeNow>
 8007d7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	f200 809b 	bhi.w	8007eba <prvProcessReceivedCommands+0x1aa>
 8007d84:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <prvProcessReceivedCommands+0x7c>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007e2d 	.word	0x08007e2d
 8007d9c:	08007e41 	.word	0x08007e41
 8007da0:	08007e8f 	.word	0x08007e8f
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007db5 	.word	0x08007db5
 8007dac:	08007e2d 	.word	0x08007e2d
 8007db0:	08007e41 	.word	0x08007e41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	18d1      	adds	r1, r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd4:	f7ff ff5a 	bl	8007c8c <prvInsertTimerInActiveList>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d06d      	beq.n	8007eba <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d062      	beq.n	8007eba <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e06:	f7ff fdff 	bl	8007a08 <xTimerGenericCommand>
 8007e0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d153      	bne.n	8007eba <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	61bb      	str	r3, [r7, #24]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e3e:	e03c      	b.n	8007eba <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	b672      	cpsid	i
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	b662      	cpsie	i
 8007e74:	617b      	str	r3, [r7, #20]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	18d1      	adds	r1, r2, r3
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e88:	f7ff ff00 	bl	8007c8c <prvInsertTimerInActiveList>
					break;
 8007e8c:	e015      	b.n	8007eba <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9e:	f000 fbcb 	bl	8008638 <vPortFree>
 8007ea2:	e00a      	b.n	8007eba <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eaa:	f023 0301 	bic.w	r3, r3, #1
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007eb6:	e000      	b.n	8007eba <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007eb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eba:	4b08      	ldr	r3, [pc, #32]	; (8007edc <prvProcessReceivedCommands+0x1cc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	1d39      	adds	r1, r7, #4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fbb6 	bl	8006634 <xQueueReceive>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f47f af24 	bne.w	8007d18 <prvProcessReceivedCommands+0x8>
	}
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	3730      	adds	r7, #48	; 0x30
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20001738 	.word	0x20001738

08007ee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ee6:	e04a      	b.n	8007f7e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ee8:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b2c      	ldr	r3, [pc, #176]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe f8b7 	bl	8006074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d030      	beq.n	8007f7e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d90e      	bls.n	8007f4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe f85c 	bl	8006002 <vListInsert>
 8007f4a:	e018      	b.n	8007f7e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fd56 	bl	8007a08 <xTimerGenericCommand>
 8007f5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	603b      	str	r3, [r7, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1af      	bne.n	8007ee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <prvSwitchTimerLists+0xc8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f96:	4a04      	ldr	r2, [pc, #16]	; (8007fa8 <prvSwitchTimerLists+0xc8>)
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	6013      	str	r3, [r2, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20001730 	.word	0x20001730
 8007fa8:	20001734 	.word	0x20001734

08007fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fb2:	f000 f94b 	bl	800824c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d120      	bne.n	8008000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fbe:	4814      	ldr	r0, [pc, #80]	; (8008010 <prvCheckForValidListAndQueue+0x64>)
 8007fc0:	f7fd ffce 	bl	8005f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fc4:	4813      	ldr	r0, [pc, #76]	; (8008014 <prvCheckForValidListAndQueue+0x68>)
 8007fc6:	f7fd ffcb 	bl	8005f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <prvCheckForValidListAndQueue+0x6c>)
 8007fcc:	4a10      	ldr	r2, [pc, #64]	; (8008010 <prvCheckForValidListAndQueue+0x64>)
 8007fce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fd0:	4b12      	ldr	r3, [pc, #72]	; (800801c <prvCheckForValidListAndQueue+0x70>)
 8007fd2:	4a10      	ldr	r2, [pc, #64]	; (8008014 <prvCheckForValidListAndQueue+0x68>)
 8007fd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	4b11      	ldr	r3, [pc, #68]	; (8008020 <prvCheckForValidListAndQueue+0x74>)
 8007fdc:	4a11      	ldr	r2, [pc, #68]	; (8008024 <prvCheckForValidListAndQueue+0x78>)
 8007fde:	2110      	movs	r1, #16
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	f7fe f8db 	bl	800619c <xQueueGenericCreateStatic>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4a08      	ldr	r2, [pc, #32]	; (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <prvCheckForValidListAndQueue+0x60>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	490b      	ldr	r1, [pc, #44]	; (8008028 <prvCheckForValidListAndQueue+0x7c>)
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fd10 	bl	8006a20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008000:	f000 f958 	bl	80082b4 <vPortExitCritical>
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20001738 	.word	0x20001738
 8008010:	20001708 	.word	0x20001708
 8008014:	2000171c 	.word	0x2000171c
 8008018:	20001730 	.word	0x20001730
 800801c:	20001734 	.word	0x20001734
 8008020:	200017e4 	.word	0x200017e4
 8008024:	20001744 	.word	0x20001744
 8008028:	08008aac 	.word	0x08008aac

0800802c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3b04      	subs	r3, #4
 800803c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3b04      	subs	r3, #4
 800804a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3b04      	subs	r3, #4
 800805a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800805c:	4a0c      	ldr	r2, [pc, #48]	; (8008090 <pxPortInitialiseStack+0x64>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3b14      	subs	r3, #20
 8008066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3b04      	subs	r3, #4
 8008072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f06f 0202 	mvn.w	r2, #2
 800807a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3b20      	subs	r3, #32
 8008080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008082:	68fb      	ldr	r3, [r7, #12]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	08008095 	.word	0x08008095

08008094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <prvTaskExitError+0x5c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080a6:	d00c      	beq.n	80080c2 <prvTaskExitError+0x2e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	b672      	cpsid	i
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	b662      	cpsie	i
 80080bc:	60fb      	str	r3, [r7, #12]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <prvTaskExitError+0x2c>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080da:	bf00      	nop
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0fc      	beq.n	80080dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	2000000c 	.word	0x2000000c
	...

08008100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <pxCurrentTCBConst2>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	f380 8809 	msr	PSP, r0
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8811 	msr	BASEPRI, r0
 800811a:	4770      	bx	lr
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst2>:
 8008120:	20001208 	.word	0x20001208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <prvPortStartFirstTask+0x24>)
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f380 8808 	msr	MSP, r0
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8814 	msr	CONTROL, r0
 800813a:	b662      	cpsie	i
 800813c:	b661      	cpsie	f
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	df00      	svc	0
 8008148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800814a:	bf00      	nop
 800814c:	e000ed08 	.word	0xe000ed08

08008150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008156:	4b37      	ldr	r3, [pc, #220]	; (8008234 <xPortStartScheduler+0xe4>)
 8008158:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008178:	b2da      	uxtb	r2, r3
 800817a:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <xPortStartScheduler+0xe8>)
 800817c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800817e:	4b2f      	ldr	r3, [pc, #188]	; (800823c <xPortStartScheduler+0xec>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008184:	e009      	b.n	800819a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008186:	4b2d      	ldr	r3, [pc, #180]	; (800823c <xPortStartScheduler+0xec>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a2b      	ldr	r2, [pc, #172]	; (800823c <xPortStartScheduler+0xec>)
 800818e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b2db      	uxtb	r3, r3
 8008198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d0ef      	beq.n	8008186 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081a6:	4b25      	ldr	r3, [pc, #148]	; (800823c <xPortStartScheduler+0xec>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1c3 0307 	rsb	r3, r3, #7
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d00c      	beq.n	80081cc <xPortStartScheduler+0x7c>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	b672      	cpsid	i
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	b662      	cpsie	i
 80081c6:	60bb      	str	r3, [r7, #8]
}
 80081c8:	bf00      	nop
 80081ca:	e7fe      	b.n	80081ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081cc:	4b1b      	ldr	r3, [pc, #108]	; (800823c <xPortStartScheduler+0xec>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	4a1a      	ldr	r2, [pc, #104]	; (800823c <xPortStartScheduler+0xec>)
 80081d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081d6:	4b19      	ldr	r3, [pc, #100]	; (800823c <xPortStartScheduler+0xec>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081de:	4a17      	ldr	r2, [pc, #92]	; (800823c <xPortStartScheduler+0xec>)
 80081e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <xPortStartScheduler+0xf0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a14      	ldr	r2, [pc, #80]	; (8008240 <xPortStartScheduler+0xf0>)
 80081f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081f6:	4b12      	ldr	r3, [pc, #72]	; (8008240 <xPortStartScheduler+0xf0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a11      	ldr	r2, [pc, #68]	; (8008240 <xPortStartScheduler+0xf0>)
 80081fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008200:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008202:	f000 f8dd 	bl	80083c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <xPortStartScheduler+0xf4>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800820c:	f000 f8fc 	bl	8008408 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <xPortStartScheduler+0xf8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <xPortStartScheduler+0xf8>)
 8008216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800821a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800821c:	f7ff ff84 	bl	8008128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008220:	f7ff f840 	bl	80072a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008224:	f7ff ff36 	bl	8008094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	e000e400 	.word	0xe000e400
 8008238:	20001834 	.word	0x20001834
 800823c:	20001838 	.word	0x20001838
 8008240:	e000ed20 	.word	0xe000ed20
 8008244:	2000000c 	.word	0x2000000c
 8008248:	e000ef34 	.word	0xe000ef34

0800824c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	b672      	cpsid	i
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	b662      	cpsie	i
 8008266:	607b      	str	r3, [r7, #4]
}
 8008268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800826a:	4b10      	ldr	r3, [pc, #64]	; (80082ac <vPortEnterCritical+0x60>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <vPortEnterCritical+0x60>)
 8008272:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008274:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <vPortEnterCritical+0x60>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d111      	bne.n	80082a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <vPortEnterCritical+0x64>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00c      	beq.n	80082a0 <vPortEnterCritical+0x54>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vPortEnterCritical+0x52>
	}
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000000c 	.word	0x2000000c
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <vPortExitCritical+0x54>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <vPortExitCritical+0x28>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	b672      	cpsid	i
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	b662      	cpsie	i
 80082d6:	607b      	str	r3, [r7, #4]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <vPortExitCritical+0x54>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4a09      	ldr	r2, [pc, #36]	; (8008308 <vPortExitCritical+0x54>)
 80082e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <vPortExitCritical+0x54>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <vPortExitCritical+0x46>
 80082ee:	2300      	movs	r3, #0
 80082f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f383 8811 	msr	BASEPRI, r3
}
 80082f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	2000000c 	.word	0x2000000c
 800830c:	00000000 	.word	0x00000000

08008310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008310:	f3ef 8009 	mrs	r0, PSP
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <pxCurrentTCBConst>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f01e 0f10 	tst.w	lr, #16
 8008320:	bf08      	it	eq
 8008322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008334:	b672      	cpsid	i
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	b662      	cpsie	i
 8008344:	f7fe ffae 	bl	80072a4 <vTaskSwitchContext>
 8008348:	f04f 0000 	mov.w	r0, #0
 800834c:	f380 8811 	msr	BASEPRI, r0
 8008350:	bc09      	pop	{r0, r3}
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	6808      	ldr	r0, [r1, #0]
 8008356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	f01e 0f10 	tst.w	lr, #16
 800835e:	bf08      	it	eq
 8008360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008364:	f380 8809 	msr	PSP, r0
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <pxCurrentTCBConst>:
 8008370:	20001208 	.word	0x20001208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	b672      	cpsid	i
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	b662      	cpsie	i
 8008392:	607b      	str	r3, [r7, #4]
}
 8008394:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008396:	f7fe fec9 	bl	800712c <xTaskIncrementTick>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <SysTick_Handler+0x44>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f383 8811 	msr	BASEPRI, r3
}
 80083b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083c4:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortSetupTimerInterrupt+0x34>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <vPortSetupTimerInterrupt+0x38>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <vPortSetupTimerInterrupt+0x3c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a0a      	ldr	r2, [pc, #40]	; (8008400 <vPortSetupTimerInterrupt+0x40>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	099b      	lsrs	r3, r3, #6
 80083dc:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vPortSetupTimerInterrupt+0x44>)
 80083de:	3b01      	subs	r3, #1
 80083e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083e2:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <vPortSetupTimerInterrupt+0x34>)
 80083e4:	2207      	movs	r2, #7
 80083e6:	601a      	str	r2, [r3, #0]
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	e000e010 	.word	0xe000e010
 80083f8:	e000e018 	.word	0xe000e018
 80083fc:	20000000 	.word	0x20000000
 8008400:	10624dd3 	.word	0x10624dd3
 8008404:	e000e014 	.word	0xe000e014

08008408 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008408:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008418 <vPortEnableVFP+0x10>
 800840c:	6801      	ldr	r1, [r0, #0]
 800840e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008412:	6001      	str	r1, [r0, #0]
 8008414:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008416:	bf00      	nop
 8008418:	e000ed88 	.word	0xe000ed88

0800841c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008422:	f3ef 8305 	mrs	r3, IPSR
 8008426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b0f      	cmp	r3, #15
 800842c:	d916      	bls.n	800845c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800842e:	4a19      	ldr	r2, [pc, #100]	; (8008494 <vPortValidateInterruptPriority+0x78>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <vPortValidateInterruptPriority+0x7c>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	7afa      	ldrb	r2, [r7, #11]
 800843e:	429a      	cmp	r2, r3
 8008440:	d20c      	bcs.n	800845c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	b672      	cpsid	i
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	b662      	cpsie	i
 8008456:	607b      	str	r3, [r7, #4]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <vPortValidateInterruptPriority+0x80>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <vPortValidateInterruptPriority+0x84>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d90c      	bls.n	8008486 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	603b      	str	r3, [r7, #0]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <vPortValidateInterruptPriority+0x68>
	}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	e000e3f0 	.word	0xe000e3f0
 8008498:	20001834 	.word	0x20001834
 800849c:	e000ed0c 	.word	0xe000ed0c
 80084a0:	20001838 	.word	0x20001838

080084a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	; 0x28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b0:	f7fe fd7e 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b4:	4b5b      	ldr	r3, [pc, #364]	; (8008624 <pvPortMalloc+0x180>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084bc:	f000 f91a 	bl	80086f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c0:	4b59      	ldr	r3, [pc, #356]	; (8008628 <pvPortMalloc+0x184>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f040 8092 	bne.w	80085f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01f      	beq.n	8008514 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80084d4:	2208      	movs	r2, #8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4413      	add	r3, r2
 80084da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d016      	beq.n	8008514 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f023 0307 	bic.w	r3, r3, #7
 80084ec:	3308      	adds	r3, #8
 80084ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <pvPortMalloc+0x70>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	b672      	cpsid	i
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	b662      	cpsie	i
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06b      	beq.n	80085f2 <pvPortMalloc+0x14e>
 800851a:	4b44      	ldr	r3, [pc, #272]	; (800862c <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d866      	bhi.n	80085f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b42      	ldr	r3, [pc, #264]	; (8008630 <pvPortMalloc+0x18c>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b41      	ldr	r3, [pc, #260]	; (8008630 <pvPortMalloc+0x18c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa8>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b35      	ldr	r3, [pc, #212]	; (8008624 <pvPortMalloc+0x180>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d04d      	beq.n	80085f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d921      	bls.n	80085bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00c      	beq.n	80085a4 <pvPortMalloc+0x100>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	b672      	cpsid	i
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	b662      	cpsie	i
 800859e:	613b      	str	r3, [r7, #16]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b6:	69b8      	ldr	r0, [r7, #24]
 80085b8:	f000 f8fe 	bl	80087b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085bc:	4b1b      	ldr	r3, [pc, #108]	; (800862c <pvPortMalloc+0x188>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	4a19      	ldr	r2, [pc, #100]	; (800862c <pvPortMalloc+0x188>)
 80085c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <pvPortMalloc+0x188>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4b19      	ldr	r3, [pc, #100]	; (8008634 <pvPortMalloc+0x190>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d203      	bcs.n	80085de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <pvPortMalloc+0x188>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a16      	ldr	r2, [pc, #88]	; (8008634 <pvPortMalloc+0x190>)
 80085dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	4b11      	ldr	r3, [pc, #68]	; (8008628 <pvPortMalloc+0x184>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f2:	f7fe fceb 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <pvPortMalloc+0x176>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	b672      	cpsid	i
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	b662      	cpsie	i
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <pvPortMalloc+0x174>
	return pvReturn;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3728      	adds	r7, #40	; 0x28
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20005444 	.word	0x20005444
 8008628:	20005450 	.word	0x20005450
 800862c:	20005448 	.word	0x20005448
 8008630:	2000543c 	.word	0x2000543c
 8008634:	2000544c 	.word	0x2000544c

08008638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d04c      	beq.n	80086e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800864a:	2308      	movs	r3, #8
 800864c:	425b      	negs	r3, r3
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	4b23      	ldr	r3, [pc, #140]	; (80086ec <vPortFree+0xb4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4013      	ands	r3, r2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10c      	bne.n	8008680 <vPortFree+0x48>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	b672      	cpsid	i
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	b662      	cpsie	i
 800867a:	60fb      	str	r3, [r7, #12]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <vPortFree+0x6a>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	b672      	cpsid	i
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	b662      	cpsie	i
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b11      	ldr	r3, [pc, #68]	; (80086ec <vPortFree+0xb4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d019      	beq.n	80086e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d115      	bne.n	80086e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <vPortFree+0xb4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c8:	f7fe fc72 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <vPortFree+0xb8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a06      	ldr	r2, [pc, #24]	; (80086f0 <vPortFree+0xb8>)
 80086d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f86c 	bl	80087b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086e0:	f7fe fc74 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086e4:	bf00      	nop
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20005450 	.word	0x20005450
 80086f0:	20005448 	.word	0x20005448

080086f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008700:	4b27      	ldr	r3, [pc, #156]	; (80087a0 <prvHeapInit+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3307      	adds	r3, #7
 8008712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	4a1f      	ldr	r2, [pc, #124]	; (80087a0 <prvHeapInit+0xac>)
 8008724:	4413      	add	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800872c:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <prvHeapInit+0xb0>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <prvHeapInit+0xb0>)
 8008734:	2200      	movs	r2, #0
 8008736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008740:	2208      	movs	r2, #8
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <prvHeapInit+0xb4>)
 8008754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <prvHeapInit+0xb4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800875e:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <prvHeapInit+0xb4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvHeapInit+0xb4>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <prvHeapInit+0xb8>)
 8008782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <prvHeapInit+0xbc>)
 800878a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800878c:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <prvHeapInit+0xc0>)
 800878e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	2000183c 	.word	0x2000183c
 80087a4:	2000543c 	.word	0x2000543c
 80087a8:	20005444 	.word	0x20005444
 80087ac:	2000544c 	.word	0x2000544c
 80087b0:	20005448 	.word	0x20005448
 80087b4:	20005450 	.word	0x20005450

080087b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087c0:	4b28      	ldr	r3, [pc, #160]	; (8008864 <prvInsertBlockIntoFreeList+0xac>)
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	e002      	b.n	80087cc <prvInsertBlockIntoFreeList+0x14>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d8f7      	bhi.n	80087c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d108      	bne.n	80087fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	441a      	add	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d118      	bne.n	8008840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d00d      	beq.n	8008836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	441a      	add	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e008      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008836:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e003      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d002      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000543c 	.word	0x2000543c
 8008868:	20005444 	.word	0x20005444

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4d0d      	ldr	r5, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2600      	movs	r6, #0
 8008878:	42a6      	cmp	r6, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4d0b      	ldr	r5, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f000 f8f2 	bl	8008a68 <_init>
 8008884:	1b64      	subs	r4, r4, r5
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2600      	movs	r6, #0
 800888a:	42a6      	cmp	r6, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f855 3b04 	ldr.w	r3, [r5], #4
 8008894:	4798      	blx	r3
 8008896:	3601      	adds	r6, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f855 3b04 	ldr.w	r3, [r5], #4
 800889e:	4798      	blx	r3
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	08008b7c 	.word	0x08008b7c
 80088a8:	08008b7c 	.word	0x08008b7c
 80088ac:	08008b7c 	.word	0x08008b7c
 80088b0:	08008b80 	.word	0x08008b80

080088b4 <__retarget_lock_acquire_recursive>:
 80088b4:	4770      	bx	lr

080088b6 <__retarget_lock_release_recursive>:
 80088b6:	4770      	bx	lr

080088b8 <memcpy>:
 80088b8:	440a      	add	r2, r1
 80088ba:	4291      	cmp	r1, r2
 80088bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088c0:	d100      	bne.n	80088c4 <memcpy+0xc>
 80088c2:	4770      	bx	lr
 80088c4:	b510      	push	{r4, lr}
 80088c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ce:	4291      	cmp	r1, r2
 80088d0:	d1f9      	bne.n	80088c6 <memcpy+0xe>
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <memset>:
 80088d4:	4402      	add	r2, r0
 80088d6:	4603      	mov	r3, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <cleanup_glue>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	6809      	ldr	r1, [r1, #0]
 80088ea:	4605      	mov	r5, r0
 80088ec:	b109      	cbz	r1, 80088f2 <cleanup_glue+0xe>
 80088ee:	f7ff fff9 	bl	80088e4 <cleanup_glue>
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088fa:	f000 b869 	b.w	80089d0 <_free_r>
	...

08008900 <_reclaim_reent>:
 8008900:	4b2c      	ldr	r3, [pc, #176]	; (80089b4 <_reclaim_reent+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4283      	cmp	r3, r0
 8008906:	b570      	push	{r4, r5, r6, lr}
 8008908:	4604      	mov	r4, r0
 800890a:	d051      	beq.n	80089b0 <_reclaim_reent+0xb0>
 800890c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800890e:	b143      	cbz	r3, 8008922 <_reclaim_reent+0x22>
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d14a      	bne.n	80089ac <_reclaim_reent+0xac>
 8008916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	b111      	cbz	r1, 8008922 <_reclaim_reent+0x22>
 800891c:	4620      	mov	r0, r4
 800891e:	f000 f857 	bl	80089d0 <_free_r>
 8008922:	6961      	ldr	r1, [r4, #20]
 8008924:	b111      	cbz	r1, 800892c <_reclaim_reent+0x2c>
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f852 	bl	80089d0 <_free_r>
 800892c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800892e:	b111      	cbz	r1, 8008936 <_reclaim_reent+0x36>
 8008930:	4620      	mov	r0, r4
 8008932:	f000 f84d 	bl	80089d0 <_free_r>
 8008936:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008938:	b111      	cbz	r1, 8008940 <_reclaim_reent+0x40>
 800893a:	4620      	mov	r0, r4
 800893c:	f000 f848 	bl	80089d0 <_free_r>
 8008940:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008942:	b111      	cbz	r1, 800894a <_reclaim_reent+0x4a>
 8008944:	4620      	mov	r0, r4
 8008946:	f000 f843 	bl	80089d0 <_free_r>
 800894a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800894c:	b111      	cbz	r1, 8008954 <_reclaim_reent+0x54>
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f83e 	bl	80089d0 <_free_r>
 8008954:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008956:	b111      	cbz	r1, 800895e <_reclaim_reent+0x5e>
 8008958:	4620      	mov	r0, r4
 800895a:	f000 f839 	bl	80089d0 <_free_r>
 800895e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008960:	b111      	cbz	r1, 8008968 <_reclaim_reent+0x68>
 8008962:	4620      	mov	r0, r4
 8008964:	f000 f834 	bl	80089d0 <_free_r>
 8008968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896a:	b111      	cbz	r1, 8008972 <_reclaim_reent+0x72>
 800896c:	4620      	mov	r0, r4
 800896e:	f000 f82f 	bl	80089d0 <_free_r>
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	b1e3      	cbz	r3, 80089b0 <_reclaim_reent+0xb0>
 8008976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008978:	4620      	mov	r0, r4
 800897a:	4798      	blx	r3
 800897c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800897e:	b1b9      	cbz	r1, 80089b0 <_reclaim_reent+0xb0>
 8008980:	4620      	mov	r0, r4
 8008982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008986:	f7ff bfad 	b.w	80088e4 <cleanup_glue>
 800898a:	5949      	ldr	r1, [r1, r5]
 800898c:	b941      	cbnz	r1, 80089a0 <_reclaim_reent+0xa0>
 800898e:	3504      	adds	r5, #4
 8008990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008992:	2d80      	cmp	r5, #128	; 0x80
 8008994:	68d9      	ldr	r1, [r3, #12]
 8008996:	d1f8      	bne.n	800898a <_reclaim_reent+0x8a>
 8008998:	4620      	mov	r0, r4
 800899a:	f000 f819 	bl	80089d0 <_free_r>
 800899e:	e7ba      	b.n	8008916 <_reclaim_reent+0x16>
 80089a0:	680e      	ldr	r6, [r1, #0]
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f814 	bl	80089d0 <_free_r>
 80089a8:	4631      	mov	r1, r6
 80089aa:	e7ef      	b.n	800898c <_reclaim_reent+0x8c>
 80089ac:	2500      	movs	r5, #0
 80089ae:	e7ef      	b.n	8008990 <_reclaim_reent+0x90>
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	bf00      	nop
 80089b4:	20000010 	.word	0x20000010

080089b8 <__malloc_lock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	; (80089c0 <__malloc_lock+0x8>)
 80089ba:	f7ff bf7b 	b.w	80088b4 <__retarget_lock_acquire_recursive>
 80089be:	bf00      	nop
 80089c0:	20005454 	.word	0x20005454

080089c4 <__malloc_unlock>:
 80089c4:	4801      	ldr	r0, [pc, #4]	; (80089cc <__malloc_unlock+0x8>)
 80089c6:	f7ff bf76 	b.w	80088b6 <__retarget_lock_release_recursive>
 80089ca:	bf00      	nop
 80089cc:	20005454 	.word	0x20005454

080089d0 <_free_r>:
 80089d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089d2:	2900      	cmp	r1, #0
 80089d4:	d044      	beq.n	8008a60 <_free_r+0x90>
 80089d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089da:	9001      	str	r0, [sp, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f1a1 0404 	sub.w	r4, r1, #4
 80089e2:	bfb8      	it	lt
 80089e4:	18e4      	addlt	r4, r4, r3
 80089e6:	f7ff ffe7 	bl	80089b8 <__malloc_lock>
 80089ea:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <_free_r+0x94>)
 80089ec:	9801      	ldr	r0, [sp, #4]
 80089ee:	6813      	ldr	r3, [r2, #0]
 80089f0:	b933      	cbnz	r3, 8008a00 <_free_r+0x30>
 80089f2:	6063      	str	r3, [r4, #4]
 80089f4:	6014      	str	r4, [r2, #0]
 80089f6:	b003      	add	sp, #12
 80089f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089fc:	f7ff bfe2 	b.w	80089c4 <__malloc_unlock>
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d908      	bls.n	8008a16 <_free_r+0x46>
 8008a04:	6825      	ldr	r5, [r4, #0]
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	428b      	cmp	r3, r1
 8008a0a:	bf01      	itttt	eq
 8008a0c:	6819      	ldreq	r1, [r3, #0]
 8008a0e:	685b      	ldreq	r3, [r3, #4]
 8008a10:	1949      	addeq	r1, r1, r5
 8008a12:	6021      	streq	r1, [r4, #0]
 8008a14:	e7ed      	b.n	80089f2 <_free_r+0x22>
 8008a16:	461a      	mov	r2, r3
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	b10b      	cbz	r3, 8008a20 <_free_r+0x50>
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	d9fa      	bls.n	8008a16 <_free_r+0x46>
 8008a20:	6811      	ldr	r1, [r2, #0]
 8008a22:	1855      	adds	r5, r2, r1
 8008a24:	42a5      	cmp	r5, r4
 8008a26:	d10b      	bne.n	8008a40 <_free_r+0x70>
 8008a28:	6824      	ldr	r4, [r4, #0]
 8008a2a:	4421      	add	r1, r4
 8008a2c:	1854      	adds	r4, r2, r1
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	d1e0      	bne.n	80089f6 <_free_r+0x26>
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	6053      	str	r3, [r2, #4]
 8008a3a:	4421      	add	r1, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	e7da      	b.n	80089f6 <_free_r+0x26>
 8008a40:	d902      	bls.n	8008a48 <_free_r+0x78>
 8008a42:	230c      	movs	r3, #12
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	e7d6      	b.n	80089f6 <_free_r+0x26>
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf04      	itt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	bf04      	itt	eq
 8008a58:	1949      	addeq	r1, r1, r5
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	6054      	str	r4, [r2, #4]
 8008a5e:	e7ca      	b.n	80089f6 <_free_r+0x26>
 8008a60:	b003      	add	sp, #12
 8008a62:	bd30      	pop	{r4, r5, pc}
 8008a64:	20005458 	.word	0x20005458

08008a68 <_init>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr

08008a74 <_fini>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800dc54  0800dc54  0001dc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de24  0800de24  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de24  0800de24  0001de24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de2c  0800de2c  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de2c  0800de2c  0001de2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800de34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800dfa8  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800e048  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006da0  200002b4  0800e0e8  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007054  0800e0e8  00027054  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000328bf  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005d15  00000000  00000000  00052ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002580  00000000  00000000  000588b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002328  00000000  00000000  0005ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008884  00000000  00000000  0005d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002de2a  00000000  00000000  000659e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011853a  00000000  00000000  0009380e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001abd48  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a37c  00000000  00000000  001abd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800dc3c 	.word	0x0800dc3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800dc3c 	.word	0x0800dc3c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f89e 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f85e 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fad2 	bl	8000bd4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000630:	f000 f8ca 	bl	80007c8 <MX_CAN1_Init>
  MX_DAC_Init();
 8000634:	f000 f8fc 	bl	8000830 <MX_DAC_Init>
  MX_ETH_Init();
 8000638:	f000 f924 	bl	8000884 <MX_ETH_Init>
  MX_I2C1_Init();
 800063c:	f000 f970 	bl	8000920 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000640:	f000 f9ae 	bl	80009a0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000644:	f000 f9e6 	bl	8000a14 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000648:	f000 fa1e 	bl	8000a88 <MX_TIM1_Init>
  MX_UART7_Init();
 800064c:	f000 fa92 	bl	8000b74 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000650:	f009 fdea 	bl	800a228 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <main+0x94>)
 8000656:	2100      	movs	r1, #0
 8000658:	4815      	ldr	r0, [pc, #84]	; (80006b0 <main+0x98>)
 800065a:	f009 fe4f 	bl	800a2fc <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <main+0x9c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <main+0xa0>)
 8000666:	2100      	movs	r1, #0
 8000668:	4814      	ldr	r0, [pc, #80]	; (80006bc <main+0xa4>)
 800066a:	f009 fe47 	bl	800a2fc <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <main+0xa8>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <main+0xac>)
 8000676:	2100      	movs	r1, #0
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <main+0xb0>)
 800067a:	f009 fe3f 	bl	800a2fc <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <main+0xb4>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0xb8>)
 8000686:	2100      	movs	r1, #0
 8000688:	4812      	ldr	r0, [pc, #72]	; (80006d4 <main+0xbc>)
 800068a:	f009 fe37 	bl	800a2fc <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <main+0xc0>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <main+0xc4>)
 8000696:	2100      	movs	r1, #0
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <main+0xc8>)
 800069a:	f009 fe2f 	bl	800a2fc <osThreadNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <main+0xcc>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a4:	f009 fdf4 	bl	800a290 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x90>
 80006aa:	bf00      	nop
 80006ac:	0800dcf8 	.word	0x0800dcf8
 80006b0:	08000e61 	.word	0x08000e61
 80006b4:	200005e4 	.word	0x200005e4
 80006b8:	0800dd1c 	.word	0x0800dd1c
 80006bc:	08000e75 	.word	0x08000e75
 80006c0:	200005e8 	.word	0x200005e8
 80006c4:	0800dd40 	.word	0x0800dd40
 80006c8:	08000e85 	.word	0x08000e85
 80006cc:	200005ec 	.word	0x200005ec
 80006d0:	0800dd64 	.word	0x0800dd64
 80006d4:	08000e95 	.word	0x08000e95
 80006d8:	200005f0 	.word	0x200005f0
 80006dc:	0800dd88 	.word	0x0800dd88
 80006e0:	08000ea5 	.word	0x08000ea5
 80006e4:	200005f4 	.word	0x200005f4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00d f932 	bl	800d960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <SystemClock_Config+0xd8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <SystemClock_Config+0xd8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xdc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800072c:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <SystemClock_Config+0xdc>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fc2d 	bl	8003fcc <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 fbae 	bl	8000ed8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f003 fbd6 	bl	8003f2c <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000786:	f000 fba7 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 febe 	bl	8004528 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007b2:	f000 fb91 	bl	8000ed8 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_CAN1_Init+0x60>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_CAN1_Init+0x64>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_CAN1_Init+0x60>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_CAN1_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_CAN1_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_CAN1_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_CAN1_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_CAN1_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_CAN1_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_CAN1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_CAN1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_CAN1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_CAN1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_CAN1_Init+0x60>)
 8000816:	f000 ffff 	bl	8001818 <HAL_CAN_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 fb5a 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000308 	.word	0x20000308
 800082c:	40006400 	.word	0x40006400

08000830 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DAC_Init+0x4c>)
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_DAC_Init+0x50>)
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_DAC_Init+0x4c>)
 8000846:	f001 f9c5 	bl	8001bd4 <HAL_DAC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000850:	f000 fb42 	bl	8000ed8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_DAC_Init+0x4c>)
 8000864:	f001 fa3c 	bl	8001ce0 <HAL_DAC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800086e:	f000 fb33 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000330 	.word	0x20000330
 8000880:	40007400 	.word	0x40007400

08000884 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ETH_Init+0x84>)
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <MX_ETH_Init+0x88>)
 800088c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_ETH_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_ETH_Init+0x8c>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_ETH_Init+0x8c>)
 800089c:	22e1      	movs	r2, #225	; 0xe1
 800089e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_ETH_Init+0x8c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_ETH_Init+0x8c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_ETH_Init+0x8c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ETH_Init+0x84>)
 80008b4:	4a16      	ldr	r2, [pc, #88]	; (8000910 <MX_ETH_Init+0x8c>)
 80008b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_ETH_Init+0x84>)
 80008ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008be:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_ETH_Init+0x84>)
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_ETH_Init+0x90>)
 80008c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_ETH_Init+0x84>)
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_ETH_Init+0x94>)
 80008ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_ETH_Init+0x84>)
 80008ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_ETH_Init+0x84>)
 80008d6:	f001 fa5d 	bl	8001d94 <HAL_ETH_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fafa 	bl	8000ed8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e4:	2238      	movs	r2, #56	; 0x38
 80008e6:	2100      	movs	r1, #0
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x98>)
 80008ea:	f00d f839 	bl	800d960 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_ETH_Init+0x98>)
 80008f0:	2221      	movs	r2, #33	; 0x21
 80008f2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_ETH_Init+0x98>)
 80008f6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008fa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_ETH_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000344 	.word	0x20000344
 800090c:	40028000 	.word	0x40028000
 8000910:	200005f8 	.word	0x200005f8
 8000914:	20000214 	.word	0x20000214
 8000918:	20000174 	.word	0x20000174
 800091c:	200002d0 	.word	0x200002d0

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_I2C1_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_I2C1_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_I2C1_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_I2C1_Init+0x74>)
 800095c:	f001 ff06 	bl	800276c <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 fab7 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_I2C1_Init+0x74>)
 800096e:	f001 ff8d 	bl	800288c <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 faae 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_I2C1_Init+0x74>)
 8000980:	f001 ffcf 	bl	8002922 <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 faa5 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200003f4 	.word	0x200003f4
 8000998:	40005400 	.word	0x40005400
 800099c:	20303e5d 	.word	0x20303e5d

080009a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <MX_SPI1_Init+0x70>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009fa:	f004 fc15 	bl	8005228 <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a04:	f000 fa68 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000448 	.word	0x20000448
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a1a:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <MX_SPI3_Init+0x70>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a32:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI3_Init+0x6c>)
 8000a6e:	f004 fbdb 	bl	8005228 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a78:	f000 fa2e 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200004ac 	.word	0x200004ac
 8000a84:	40003c00 	.word	0x40003c00

08000a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <MX_TIM1_Init+0xe8>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000ae2:	f004 fc4c 	bl	800537e <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000aec:	f000 f9f4 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4619      	mov	r1, r3
 8000afc:	481b      	ldr	r0, [pc, #108]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000afe:	f004 ff29 	bl	8005954 <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b08:	f000 f9e6 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000b0e:	f004 fd05 	bl	800551c <HAL_TIM_IC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b18:	f000 f9de 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000b30:	f005 fa66 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b3a:	f000 f9cd 	bl	8000ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM1_Init+0xe4>)
 8000b56:	f004 fe61 	bl	800581c <HAL_TIM_IC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b60:	f000 f9ba 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000510 	.word	0x20000510
 8000b70:	40010000 	.word	0x40010000

08000b74 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <MX_UART7_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_UART7_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_UART7_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_UART7_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_UART7_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_UART7_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_UART7_Init+0x58>)
 8000bb8:	f005 face 	bl	8006158 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f000 f989 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000055c 	.word	0x2000055c
 8000bd0:	40007800 	.word	0x40007800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	4b95      	ldr	r3, [pc, #596]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a94      	ldr	r2, [pc, #592]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b92      	ldr	r3, [pc, #584]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b8f      	ldr	r3, [pc, #572]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a8e      	ldr	r2, [pc, #568]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b8c      	ldr	r3, [pc, #560]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a88      	ldr	r2, [pc, #544]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b86      	ldr	r3, [pc, #536]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	4b83      	ldr	r3, [pc, #524]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a82      	ldr	r2, [pc, #520]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b7d      	ldr	r3, [pc, #500]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a7c      	ldr	r2, [pc, #496]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b7a      	ldr	r3, [pc, #488]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a76      	ldr	r2, [pc, #472]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b74      	ldr	r3, [pc, #464]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7a:	4b71      	ldr	r3, [pc, #452]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a70      	ldr	r2, [pc, #448]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b6e      	ldr	r3, [pc, #440]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a6a      	ldr	r2, [pc, #424]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <MX_GPIO_Init+0x26c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4865      	ldr	r0, [pc, #404]	; (8000e44 <MX_GPIO_Init+0x270>)
 8000cb0:	f001 fd42 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000cba:	4863      	ldr	r0, [pc, #396]	; (8000e48 <MX_GPIO_Init+0x274>)
 8000cbc:	f001 fd3c 	bl	8002738 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	210c      	movs	r1, #12
 8000cc4:	4861      	ldr	r0, [pc, #388]	; (8000e4c <MX_GPIO_Init+0x278>)
 8000cc6:	f001 fd37 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000cd0:	485f      	ldr	r0, [pc, #380]	; (8000e50 <MX_GPIO_Init+0x27c>)
 8000cd2:	f001 fd31 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	485d      	ldr	r0, [pc, #372]	; (8000e54 <MX_GPIO_Init+0x280>)
 8000cde:	f001 fd2b 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2174      	movs	r1, #116	; 0x74
 8000ce6:	485c      	ldr	r0, [pc, #368]	; (8000e58 <MX_GPIO_Init+0x284>)
 8000ce8:	f001 fd26 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000cec:	f241 0308 	movw	r3, #4104	; 0x1008
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4856      	ldr	r0, [pc, #344]	; (8000e5c <MX_GPIO_Init+0x288>)
 8000d02:	f001 fb6d 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000d06:	f248 0305 	movw	r3, #32773	; 0x8005
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	484e      	ldr	r0, [pc, #312]	; (8000e54 <MX_GPIO_Init+0x280>)
 8000d1c:	f001 fb60 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4843      	ldr	r0, [pc, #268]	; (8000e44 <MX_GPIO_Init+0x270>)
 8000d38:	f001 fb52 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4840      	ldr	r0, [pc, #256]	; (8000e50 <MX_GPIO_Init+0x27c>)
 8000d50:	f001 fb46 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4838      	ldr	r0, [pc, #224]	; (8000e48 <MX_GPIO_Init+0x274>)
 8000d68:	f001 fb3a 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000d6c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d72:	2311      	movs	r3, #17
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4830      	ldr	r0, [pc, #192]	; (8000e48 <MX_GPIO_Init+0x274>)
 8000d86:	f001 fb2b 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482a      	ldr	r0, [pc, #168]	; (8000e4c <MX_GPIO_Init+0x278>)
 8000da2:	f001 fb1d 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000da6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_GPIO_Init+0x27c>)
 8000dc0:	f001 fb0e 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481d      	ldr	r0, [pc, #116]	; (8000e54 <MX_GPIO_Init+0x280>)
 8000dde:	f001 faff 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000de2:	2304      	movs	r3, #4
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <MX_GPIO_Init+0x284>)
 8000dfa:	f001 faf1 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000dfe:	2370      	movs	r3, #112	; 0x70
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e02:	2311      	movs	r3, #17
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <MX_GPIO_Init+0x284>)
 8000e16:	f001 fae3 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_GPIO_Init+0x274>)
 8000e32:	f001 fad5 	bl	80023e0 <HAL_GPIO_Init>

}
 8000e36:	bf00      	nop
 8000e38:	3738      	adds	r7, #56	; 0x38
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021400 	.word	0x40021400
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021000 	.word	0x40021000

08000e60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e68:	f00b ffd0 	bl	800ce0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f009 faeb 	bl	800a448 <osDelay>
 8000e72:	e7fb      	b.n	8000e6c <StartDefaultTask+0xc>

08000e74 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f009 fae3 	bl	800a448 <osDelay>
 8000e82:	e7fb      	b.n	8000e7c <StartTask_gateway+0x8>

08000e84 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_controller */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f009 fadb 	bl	800a448 <osDelay>
 8000e92:	e7fb      	b.n	8000e8c <StartTask_controller+0x8>

08000e94 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f009 fad3 	bl	800a448 <osDelay>
 8000ea2:	e7fb      	b.n	8000e9c <StartTask_SHT20+0x8>

08000ea4 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f009 facb 	bl	800a448 <osDelay>
 8000eb2:	e7fb      	b.n	8000eac <StartTask_74HC595D+0x8>

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec6:	f000 fc63 	bl	8001790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40001000 	.word	0x40001000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f000 fe2d 	bl	8001b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_CAN_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d127      	bne.n	8000fa6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_CAN_MspInit+0x80>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f96:	2309      	movs	r3, #9
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_CAN_MspInit+0x84>)
 8000fa2:	f001 fa1d 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40006400 	.word	0x40006400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020c00 	.word	0x40020c00

08000fbc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_DAC_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8000fe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_DAC_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <HAL_DAC_MspInit+0x8c>)
 8001022:	f001 f9dd 	bl	80023e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	210f      	movs	r1, #15
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f000 fda8 	bl	8001b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f000 fdc1 	bl	8001bb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40007400 	.word	0x40007400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_ETH_MspInit+0x158>)
 800106a:	4293      	cmp	r3, r2
 800106c:	f040 8096 	bne.w	800119c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 8001076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001084:	623b      	str	r3, [r7, #32]
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 800108e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 8001106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_ETH_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001118:	2332      	movs	r3, #50	; 0x32
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001128:	230b      	movs	r3, #11
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	481e      	ldr	r0, [pc, #120]	; (80011ac <HAL_ETH_MspInit+0x160>)
 8001134:	f001 f954 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001138:	2386      	movs	r3, #134	; 0x86
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001148:	230b      	movs	r3, #11
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <HAL_ETH_MspInit+0x164>)
 8001154:	f001 f944 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <HAL_ETH_MspInit+0x168>)
 8001176:	f001 f933 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800117a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <HAL_ETH_MspInit+0x16c>)
 8001198:	f001 f922 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40028000 	.word	0x40028000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40021800 	.word	0x40021800

080011bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ae      	sub	sp, #184	; 0xb8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2290      	movs	r2, #144	; 0x90
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00c fbbf 	bl	800d960 <memset>
  if(hi2c->Instance==I2C1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <HAL_I2C_MspInit+0xb4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d13c      	bne.n	8001266 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fbec 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff fe67 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a19      	ldr	r2, [pc, #100]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 8001222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123c:	2304      	movs	r3, #4
 800123e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <HAL_I2C_MspInit+0xbc>)
 800124a:	f001 f8c9 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 8001254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_I2C_MspInit+0xb8>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	37b8      	adds	r7, #184	; 0xb8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40005400 	.word	0x40005400
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <HAL_SPI_MspInit+0x148>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d144      	bne.n	8001328 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a49      	ldr	r2, [pc, #292]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f6:	2305      	movs	r3, #5
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4832      	ldr	r0, [pc, #200]	; (80013cc <HAL_SPI_MspInit+0x150>)
 8001302:	f001 f86d 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001306:	2308      	movs	r3, #8
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	482b      	ldr	r0, [pc, #172]	; (80013d0 <HAL_SPI_MspInit+0x154>)
 8001322:	f001 f85d 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001326:	e049      	b.n	80013bc <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_SPI_MspInit+0x158>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d144      	bne.n	80013bc <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_SPI_MspInit+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800137a:	2304      	movs	r3, #4
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800138a:	2307      	movs	r3, #7
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <HAL_SPI_MspInit+0x154>)
 8001396:	f001 f823 	bl	80023e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 800139a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ac:	2306      	movs	r3, #6
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <HAL_SPI_MspInit+0x15c>)
 80013b8:	f001 f812 	bl	80023e0 <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	; 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40013000 	.word	0x40013000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40003c00 	.word	0x40003c00
 80013d8:	40020800 	.word	0x40020800

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_TIM_Base_MspInit+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800142e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_TIM_Base_MspInit+0x84>)
 800144c:	f000 ffc8 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010000 	.word	0x40010000
 800145c:	40023800 	.word	0x40023800
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0ae      	sub	sp, #184	; 0xb8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2290      	movs	r2, #144	; 0x90
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f00c fa6b 	bl	800d960 <memset>
  if(huart->Instance==UART7)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_UART_MspInit+0xb4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d13c      	bne.n	800150e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800149a:	2300      	movs	r3, #0
 800149c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fa98 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014ae:	f7ff fd13 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_UART_MspInit+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80014e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80014fc:	2308      	movs	r3, #8
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <HAL_UART_MspInit+0xbc>)
 800150a:	f000 ff69 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	37b8      	adds	r7, #184	; 0xb8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40007800 	.word	0x40007800
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_InitTick+0xe0>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a32      	ldr	r2, [pc, #200]	; (8001604 <HAL_InitTick+0xe0>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_InitTick+0xe0>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800154c:	f107 0210 	add.w	r2, r7, #16
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fa0c 	bl	8004974 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001566:	f003 f9dd 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 800156a:	6378      	str	r0, [r7, #52]	; 0x34
 800156c:	e004      	b.n	8001578 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156e:	f003 f9d9 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8001572:	4603      	mov	r3, r0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <HAL_InitTick+0xe4>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	3b01      	subs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_InitTick+0xe8>)
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_InitTick+0xec>)
 800158a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_InitTick+0xe8>)
 800158e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_InitTick+0xe8>)
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_InitTick+0xe8>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_InitTick+0xe8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_InitTick+0xe8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <HAL_InitTick+0xe8>)
 80015ae:	f003 fee6 	bl	800537e <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11b      	bne.n	80015f8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <HAL_InitTick+0xe8>)
 80015c2:	f003 ff33 	bl	800542c <HAL_TIM_Base_Start_IT>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d111      	bne.n	80015f8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d4:	2036      	movs	r0, #54	; 0x36
 80015d6:	f000 faef 	bl	8001bb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d808      	bhi.n	80015f2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2036      	movs	r0, #54	; 0x36
 80015e6:	f000 facb 	bl	8001b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_InitTick+0xf0>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e002      	b.n	80015f8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3738      	adds	r7, #56	; 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	431bde83 	.word	0x431bde83
 800160c:	20000600 	.word	0x20000600
 8001610:	40001000 	.word	0x40001000
 8001614:	20000004 	.word	0x20000004

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <TIM6_DAC_IRQHandler+0x20>)
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <TIM6_DAC_IRQHandler+0x20>)
 8001654:	f000 fae0 	bl	8001c18 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <TIM6_DAC_IRQHandler+0x24>)
 800165a:	f003 ffc0 	bl	80055de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000330 	.word	0x20000330
 8001668:	20000600 	.word	0x20000600

0800166c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <OTG_FS_IRQHandler+0x10>)
 8001672:	f001 fae8 	bl	8002c46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20006b3c 	.word	0x20006b3c

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f00c f90c 	bl	800d8cc <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20080000 	.word	0x20080000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	2000064c 	.word	0x2000064c
 80016e8:	20007058 	.word	0x20007058

080016ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopFillZerobss+0x26>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173a:	f7ff ffd7 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f00c f8cb 	bl	800d8d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7fe ff69 	bl	8000618 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001754:	0800de34 	.word	0x0800de34
  ldr r2, =_sbss
 8001758:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 800175c:	20007054 	.word	0x20007054

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x28>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f9f8 	bl	8001b6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f7ff fed2 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fbb0 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000650 	.word	0x20000650

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000650 	.word	0x20000650

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0ed      	b.n	8001a06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fb7c 	bl	8000f34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff ffb4 	bl	80017b8 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001852:	e012      	b.n	800187a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001854:	f7ff ffb0 	bl	80017b8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b0a      	cmp	r3, #10
 8001860:	d90b      	bls.n	800187a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0c5      	b.n	8001a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0e5      	beq.n	8001854 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0202 	bic.w	r2, r2, #2
 8001896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001898:	f7ff ff8e 	bl	80017b8 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800189e:	e012      	b.n	80018c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a0:	f7ff ff8a 	bl	80017b8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d90b      	bls.n	80018c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2205      	movs	r2, #5
 80018be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e09f      	b.n	8001a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e5      	bne.n	80018a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7e1b      	ldrb	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7e5b      	ldrb	r3, [r3, #25]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e007      	b.n	8001928 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e9b      	ldrb	r3, [r3, #26]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d108      	bne.n	8001942 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e007      	b.n	8001952 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0220 	bic.w	r2, r2, #32
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7edb      	ldrb	r3, [r3, #27]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d108      	bne.n	800196c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e007      	b.n	800197c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0210 	orr.w	r2, r2, #16
 800197a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7f1b      	ldrb	r3, [r3, #28]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d108      	bne.n	8001996 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e007      	b.n	80019a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0208 	bic.w	r2, r2, #8
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7f5b      	ldrb	r3, [r3, #29]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0204 	orr.w	r2, r2, #4
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e007      	b.n	80019d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	ea42 0103 	orr.w	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	1e5a      	subs	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <__NVIC_SetPriorityGrouping>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	05fa0000 	.word	0x05fa0000

08001a58 <__NVIC_GetPriorityGrouping>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff4c 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b92:	f7ff ff61 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001b96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	6978      	ldr	r0, [r7, #20]
 8001b9e:	f7ff ffb1 	bl	8001b04 <NVIC_EncodePriority>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff80 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff54 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e014      	b.n	8001c10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff f9e0 	bl	8000fbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2e:	d120      	bne.n	8001c72 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3e:	d118      	bne.n	8001c72 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2204      	movs	r2, #4
 8001c44:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f82d 	bl	8001ccc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c80:	d120      	bne.n	8001cc4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c90:	d118      	bne.n	8001cc4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f85d 	bl	8001d7e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	795b      	ldrb	r3, [r3, #5]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DAC_ConfigChannel+0x18>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e03c      	b.n	8001d72 <HAL_DAC_ConfigChannel+0x92>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2202      	movs	r2, #2
 8001d02:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	22c0      	movs	r2, #192	; 0xc0
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06a      	b.n	8001e7c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2223      	movs	r2, #35	; 0x23
 8001db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff f947 	bl	800104c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_ETH_Init+0xf0>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <HAL_ETH_Init+0xf0>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_ETH_Init+0xf0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_ETH_Init+0xf4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_ETH_Init+0xf4>)
 8001ddc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001de0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_ETH_Init+0xf4>)
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_ETH_Init+0xf4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_ETH_Init+0xf4>)
 8001df2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff fcd4 	bl	80017b8 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e12:	e011      	b.n	8001e38 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e14:	f7ff fcd0 	bl	80017b8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e22:	d909      	bls.n	8001e38 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2204      	movs	r2, #4
 8001e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	22e0      	movs	r2, #224	; 0xe0
 8001e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e021      	b.n	8001e7c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e4      	bne.n	8001e14 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f958 	bl	8002100 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f9ff 	bl	8002254 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa55 	bl	8002306 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	461a      	mov	r2, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f9bd 	bl	80021e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2210      	movs	r2, #16
 8001e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800

08001e8c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <ETH_SetMACConfig+0x15c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7c1b      	ldrb	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <ETH_SetMACConfig+0x28>
 8001eae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eb2:	e000      	b.n	8001eb6 <ETH_SetMACConfig+0x2a>
 8001eb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	7c5b      	ldrb	r3, [r3, #17]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <ETH_SetMACConfig+0x38>
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	e000      	b.n	8001ec6 <ETH_SetMACConfig+0x3a>
 8001ec4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ec6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7fdb      	ldrb	r3, [r3, #31]
 8001ed2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	7f92      	ldrb	r2, [r2, #30]
 8001ee0:	2a00      	cmp	r2, #0
 8001ee2:	d102      	bne.n	8001eea <ETH_SetMACConfig+0x5e>
 8001ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee8:	e000      	b.n	8001eec <ETH_SetMACConfig+0x60>
 8001eea:	2200      	movs	r2, #0
                        macconf->Speed |
 8001eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7f1b      	ldrb	r3, [r3, #28]
 8001ef2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d102      	bne.n	8001f14 <ETH_SetMACConfig+0x88>
 8001f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f12:	e000      	b.n	8001f16 <ETH_SetMACConfig+0x8a>
 8001f14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7bdb      	ldrb	r3, [r3, #15]
 8001f1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff fc42 	bl	80017d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f72:	2a00      	cmp	r2, #0
 8001f74:	d101      	bne.n	8001f7a <ETH_SetMACConfig+0xee>
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	e000      	b.n	8001f7c <ETH_SetMACConfig+0xf0>
 8001f7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f8a:	2a01      	cmp	r2, #1
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0x106>
 8001f8e:	2208      	movs	r2, #8
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0x108>
 8001f92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f9c:	2a01      	cmp	r2, #1
 8001f9e:	d101      	bne.n	8001fa4 <ETH_SetMACConfig+0x118>
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	e000      	b.n	8001fa6 <ETH_SetMACConfig+0x11a>
 8001fa4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fae:	2a01      	cmp	r2, #1
 8001fb0:	d101      	bne.n	8001fb6 <ETH_SetMACConfig+0x12a>
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	e000      	b.n	8001fb8 <ETH_SetMACConfig+0x12c>
 8001fb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff fbfd 	bl	80017d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	ff20810f 	.word	0xff20810f

08001fec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <ETH_SetDMAConfig+0x110>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7b1b      	ldrb	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <ETH_SetDMAConfig+0x2c>
 8002012:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002016:	e000      	b.n	800201a <ETH_SetDMAConfig+0x2e>
 8002018:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7b5b      	ldrb	r3, [r3, #13]
 800201e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002020:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	7f52      	ldrb	r2, [r2, #29]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetDMAConfig+0x44>
 800202a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800202e:	e000      	b.n	8002032 <ETH_SetDMAConfig+0x46>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7b9b      	ldrb	r3, [r3, #14]
 8002038:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7f1b      	ldrb	r3, [r3, #28]
 8002046:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002048:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	7f9b      	ldrb	r3, [r3, #30]
 800204e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002050:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002056:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002060:	4313      	orrs	r3, r2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	461a      	mov	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002082:	2001      	movs	r0, #1
 8002084:	f7ff fba4 	bl	80017d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	791b      	ldrb	r3, [r3, #4]
 800209a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff fb75 	bl	80017d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f8de3f23 	.word	0xf8de3f23

08002100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0a6      	sub	sp, #152	; 0x98
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002108:	2301      	movs	r3, #1
 800210a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800210e:	2301      	movs	r3, #1
 8002110:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002114:	2300      	movs	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800213c:	2300      	movs	r3, #0
 800213e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002146:	2300      	movs	r3, #0
 8002148:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe86 	bl	8001e8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002180:	2301      	movs	r3, #1
 8002182:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff08 	bl	8001fec <ETH_SetDMAConfig>
}
 80021dc:	bf00      	nop
 80021de:	3798      	adds	r7, #152	; 0x98
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3305      	adds	r3, #5
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	3204      	adds	r2, #4
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <ETH_MACAddressConfig+0x68>)
 8002206:	4413      	add	r3, r2
 8002208:	461a      	mov	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3303      	adds	r3, #3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	061a      	lsls	r2, r3, #24
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3302      	adds	r3, #2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	4313      	orrs	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <ETH_MACAddressConfig+0x6c>)
 8002236:	4413      	add	r3, r2
 8002238:	461a      	mov	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6013      	str	r3, [r2, #0]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40028040 	.word	0x40028040
 8002250:	40028044 	.word	0x40028044

08002254 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e03e      	b.n	80022e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	3206      	adds	r2, #6
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d80c      	bhi.n	80022c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	e004      	b.n	80022ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9bd      	bls.n	8002262 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e046      	b.n	80023a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002350:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002358:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	3212      	adds	r2, #18
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d80c      	bhi.n	8002392 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6919      	ldr	r1, [r3, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	e004      	b.n	800239c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3301      	adds	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d9b5      	bls.n	8002314 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e175      	b.n	80026ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8164 	bne.w	80026e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x56>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80be 	beq.w	80026e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_GPIO_Init+0x324>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002582:	4a61      	ldr	r2, [pc, #388]	; (8002708 <HAL_GPIO_Init+0x328>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_GPIO_Init+0x32c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d037      	beq.n	800261e <HAL_GPIO_Init+0x23e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a57      	ldr	r2, [pc, #348]	; (8002710 <HAL_GPIO_Init+0x330>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_GPIO_Init+0x23a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_GPIO_Init+0x334>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_Init+0x236>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a55      	ldr	r2, [pc, #340]	; (8002718 <HAL_GPIO_Init+0x338>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x232>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a54      	ldr	r2, [pc, #336]	; (800271c <HAL_GPIO_Init+0x33c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x22e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a53      	ldr	r2, [pc, #332]	; (8002720 <HAL_GPIO_Init+0x340>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x22a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_GPIO_Init+0x344>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x226>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a51      	ldr	r2, [pc, #324]	; (8002728 <HAL_GPIO_Init+0x348>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x222>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a50      	ldr	r2, [pc, #320]	; (800272c <HAL_GPIO_Init+0x34c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x21e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_GPIO_Init+0x350>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x21a>
 80025f6:	2309      	movs	r3, #9
 80025f8:	e012      	b.n	8002620 <HAL_GPIO_Init+0x240>
 80025fa:	230a      	movs	r3, #10
 80025fc:	e010      	b.n	8002620 <HAL_GPIO_Init+0x240>
 80025fe:	2308      	movs	r3, #8
 8002600:	e00e      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002602:	2307      	movs	r3, #7
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002606:	2306      	movs	r3, #6
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x328>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_GPIO_Init+0x354>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_GPIO_Init+0x354>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae86 	bls.w	8002400 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40021c00 	.word	0x40021c00
 800272c:	40022000 	.word	0x40022000
 8002730:	40022400 	.word	0x40022400
 8002734:	40013c00 	.word	0x40013c00

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002754:	e003      	b.n	800275e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	041a      	lsls	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fd12 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	e006      	b.n	80027f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d104      	bne.n	8002806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_I2C_Init+0x11c>)
 8002812:	430b      	orrs	r3, r1
 8002814:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	02008000 	.word	0x02008000

0800288c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d138      	bne.n	8002914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e032      	b.n	8002916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	d139      	bne.n	80029ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002942:	2302      	movs	r3, #2
 8002944:	e033      	b.n	80029ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2224      	movs	r2, #36	; 0x24
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b08f      	sub	sp, #60	; 0x3c
 80029be:	af0a      	add	r7, sp, #40	; 0x28
 80029c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e116      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f00a fc02 	bl	800d1f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2203      	movs	r2, #3
 80029f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f917 	bl	8006c3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	687e      	ldr	r6, [r7, #4]
 8002a18:	466d      	mov	r5, sp
 8002a1a:	f106 0410 	add.w	r4, r6, #16
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a2e:	1d33      	adds	r3, r6, #4
 8002a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f003 fff8 	bl	8006a28 <USB_CoreInit>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0d7      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f905 	bl	8006c60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e04a      	b.n	8002af2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	333c      	adds	r3, #60	; 0x3c
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	b298      	uxth	r0, r3
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3344      	adds	r3, #68	; 0x44
 8002a98:	4602      	mov	r2, r0
 8002a9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3340      	adds	r3, #64	; 0x40
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3348      	adds	r3, #72	; 0x48
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334c      	adds	r3, #76	; 0x4c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3354      	adds	r3, #84	; 0x54
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3af      	bcc.n	8002a5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e044      	b.n	8002b8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3b5      	bcc.n	8002b02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	687e      	ldr	r6, [r7, #4]
 8002b9e:	466d      	mov	r5, sp
 8002ba0:	f106 0410 	add.w	r4, r6, #16
 8002ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bb4:	1d33      	adds	r3, r6, #4
 8002bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f004 f89d 	bl	8006cf8 <USB_DevInit>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e014      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f97b 	bl	8003ee4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 f9eb 	bl	8007fce <USB_DevDisconnect>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_Start+0x16>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e012      	b.n	8002c3e <HAL_PCD_Start+0x3c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fff9 	bl	8006c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f005 f9ac 	bl	8007f8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c46:	b590      	push	{r4, r7, lr}
 8002c48:	b08d      	sub	sp, #52	; 0x34
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fa6a 	bl	8008136 <USB_GetMode>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 84b7 	bne.w	80035d8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 f9ce 	bl	8008010 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 84ad 	beq.w	80035d6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f9bb 	bl	8008010 <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 0202 	and.w	r2, r2, #2
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 f9a9 	bl	8008010 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d161      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0210 	bic.w	r2, r2, #16
 8002cd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	0c5b      	lsrs	r3, r3, #17
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d124      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d035      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a38      	ldr	r0, [r7, #32]
 8002d24:	f004 ffe0 	bl	8007ce8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d34:	441a      	add	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d46:	441a      	add	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e016      	b.n	8002d7c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d110      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d60:	2208      	movs	r2, #8
 8002d62:	4619      	mov	r1, r3
 8002d64:	6a38      	ldr	r0, [r7, #32]
 8002d66:	f004 ffbf 	bl	8007ce8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d76:	441a      	add	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0210 	orr.w	r2, r2, #16
 8002d8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 f93d 	bl	8008010 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da0:	f040 80a7 	bne.w	8002ef2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 f942 	bl	8008036 <USB_ReadDevAllOutEpInterrupt>
 8002db2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002db4:	e099      	b.n	8002eea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 808e 	beq.w	8002ede <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 f966 	bl	800809e <USB_ReadDevOutEPInterrupt>
 8002dd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fef0 	bl	8003bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2308      	movs	r3, #8
 8002e12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ffc6 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	2310      	movs	r3, #16
 8002e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d030      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d109      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f00a fad3 	bl	800d438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002edc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af62 	bne.w	8002db6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 f88a 	bl	8008010 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f06:	f040 80db 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 f8ab 	bl	800806a <USB_ReadDevAllInEpInterrupt>
 8002f14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f1a:	e0cd      	b.n	80030b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80c2 	beq.w	80030ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 f8d1 	bl	80080da <USB_ReadDevInEPInterrupt>
 8002f38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d057      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69f9      	ldr	r1, [r7, #28]
 8002f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f64:	4013      	ands	r3, r2
 8002f66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f74:	461a      	mov	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d132      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334c      	adds	r3, #76	; 0x4c
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3348      	adds	r3, #72	; 0x48
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4419      	add	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	334c      	adds	r3, #76	; 0x4c
 8002fb8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f005 f8da 	bl	800819c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f00a f99d 	bl	800d32e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2308      	movs	r3, #8
 800300e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2310      	movs	r3, #16
 800302a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2340      	movs	r3, #64	; 0x40
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d023      	beq.n	800309a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003054:	6a38      	ldr	r0, [r7, #32]
 8003056:	f003 ffad 	bl	8006fb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3338      	adds	r3, #56	; 0x38
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f00a f9ea 	bl	800d45c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fd08 	bl	8003abc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	3301      	adds	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f47f af2e 	bne.w	8002f1c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 ffa3 	bl	8008010 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d4:	d122      	bne.n	800311c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f00a fb64 	bl	800d7cc <HAL_PCDEx_LPM_Callback>
 8003104:	e002      	b.n	800310c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f00a f988 	bl	800d41c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800311a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f004 ff75 	bl	8008010 <USB_ReadInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003130:	d112      	bne.n	8003158 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f00a f944 	bl	800d3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003156:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 ff57 	bl	8008010 <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316c:	d121      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800317c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031a2:	2101      	movs	r1, #1
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f00a fb11 	bl	800d7cc <HAL_PCDEx_LPM_Callback>
 80031aa:	e002      	b.n	80031b2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f00a f90f 	bl	800d3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 ff2a 	bl	8008010 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	f040 80b7 	bne.w	8003338 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2110      	movs	r1, #16
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 fee5 	bl	8006fb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	e046      	b.n	800327e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	461a      	mov	r2, r3
 80031fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003202:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	0151      	lsls	r1, r2, #5
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	440a      	add	r2, r1
 800321a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800321e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003236:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	440a      	add	r2, r1
 800324e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003256:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	440a      	add	r2, r1
 800326e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003276:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	3301      	adds	r3, #1
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d3b3      	bcc.n	80031f0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800329a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b4:	f043 030b 	orr.w	r3, r3, #11
 80032b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ca:	f043 030b 	orr.w	r3, r3, #11
 80032ce:	6453      	str	r3, [r2, #68]	; 0x44
 80032d0:	e015      	b.n	80032fe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	4619      	mov	r1, r3
 80032e2:	f242 032b 	movw	r3, #8235	; 0x202b
 80032e6:	4313      	orrs	r3, r2
 80032e8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f8:	f043 030b 	orr.w	r3, r3, #11
 80032fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003310:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003322:	461a      	mov	r2, r3
 8003324:	f004 ff3a 	bl	800819c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f004 fe67 	bl	8008010 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d124      	bne.n	8003398 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fefe 	bl	8008154 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fea6 	bl	80070ae <USB_GetDevSpeed>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	f001 facd 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8003372:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f003 fbab 	bl	8006ad8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f009 fffb 	bl	800d37e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f004 fe37 	bl	8008010 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d10a      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f009 ffd8 	bl	800d362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 0208 	and.w	r2, r2, #8
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fe22 	bl	8008010 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d122      	bne.n	800341c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e2:	2301      	movs	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e014      	b.n	8003412 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fb27 	bl	8003a5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3301      	adds	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	429a      	cmp	r2, r3
 800341a:	d3e5      	bcc.n	80033e8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fdf5 	bl	8008010 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003430:	d13b      	bne.n	80034aa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003432:	2301      	movs	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e02b      	b.n	8003490 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3340      	adds	r3, #64	; 0x40
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d115      	bne.n	800348a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800345e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	da12      	bge.n	800348a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	333f      	adds	r3, #63	; 0x3f
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fae8 	bl	8003a5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3301      	adds	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	429a      	cmp	r2, r3
 8003498:	d3ce      	bcc.n	8003438 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fdae 	bl	8008010 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034be:	d155      	bne.n	800356c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	e045      	b.n	8003552 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d12e      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da2b      	bge.n	800354c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003500:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003504:	429a      	cmp	r2, r3
 8003506:	d121      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003548:	6053      	str	r3, [r2, #4]
            break;
 800354a:	e007      	b.n	800355c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	3301      	adds	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	429a      	cmp	r2, r3
 800355a:	d3b4      	bcc.n	80034c6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800356a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f004 fd4d 	bl	8008010 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d10a      	bne.n	8003598 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f009 ff7c 	bl	800d480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 fd37 	bl	8008010 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d115      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f009 ff6c 	bl	800d49c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e000      	b.n	80035d8 <HAL_PCD_IRQHandler+0x992>
      return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3734      	adds	r7, #52	; 0x34
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_PCD_SetAddress+0x1a>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e013      	b.n	8003620 <HAL_PCD_SetAddress+0x42>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f004 fc95 	bl	8007f40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	70fb      	strb	r3, [r7, #3]
 800363a:	460b      	mov	r3, r1
 800363c:	803b      	strh	r3, [r7, #0]
 800363e:	4613      	mov	r3, r2
 8003640:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da0f      	bge.n	800366e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	3338      	adds	r3, #56	; 0x38
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	705a      	strb	r2, [r3, #1]
 800366c:	e00f      	b.n	800368e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800369a:	883a      	ldrh	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	78ba      	ldrb	r2, [r7, #2]
 80036a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036b8:	78bb      	ldrb	r3, [r7, #2]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_EP_Open+0xaa>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e00e      	b.n	80036f0 <HAL_PCD_EP_Open+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fd09 	bl	80070f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0f      	bge.n	800372c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3338      	adds	r3, #56	; 0x38
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	705a      	strb	r2, [r3, #1]
 800372a:	e00f      	b.n	800374c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	3304      	adds	r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_EP_Close+0x6e>
 8003762:	2302      	movs	r3, #2
 8003764:	e00e      	b.n	8003784 <HAL_PCD_EP_Close+0x8c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fd47 	bl	8007208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	460b      	mov	r3, r1
 800379a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	f004 f82e 	bl	8007860 <USB_EP0StartXfer>
 8003804:	e008      	b.n	8003818 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f003 fdd4 	bl	80073c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003844:	681b      	ldr	r3, [r3, #0]
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	460b      	mov	r3, r1
 8003860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2201      	movs	r2, #1
 8003890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	f003 ffcc 	bl	8007860 <USB_EP0StartXfer>
 80038c8:	e008      	b.n	80038dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	f003 fd72 	bl	80073c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d901      	bls.n	8003904 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e050      	b.n	80039a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	da0f      	bge.n	800392c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	705a      	strb	r2, [r3, #1]
 800392a:	e00d      	b.n	8003948 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_SetStall+0x82>
 8003964:	2302      	movs	r3, #2
 8003966:	e01e      	b.n	80039a6 <HAL_PCD_EP_SetStall+0xc0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fa0e 	bl	8007d98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2d9      	uxtb	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003996:	461a      	mov	r2, r3
 8003998:	f004 fc00 	bl	800819c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d901      	bls.n	80039cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e042      	b.n	8003a52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0f      	bge.n	80039f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	3338      	adds	r3, #56	; 0x38
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00f      	b.n	8003a14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_EP_ClrStall+0x86>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e00e      	b.n	8003a52 <HAL_PCD_EP_ClrStall+0xa4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fa16 	bl	8007e74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0c      	bge.n	8003a88 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3338      	adds	r3, #56	; 0x38
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e00c      	b.n	8003aa2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f004 f835 	bl	8007b18 <USB_EPStopXfer>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3338      	adds	r3, #56	; 0x38
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d901      	bls.n	8003af4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e06c      	b.n	8003bce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d902      	bls.n	8003b10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3303      	adds	r3, #3
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b18:	e02b      	b.n	8003b72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3303      	adds	r3, #3
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6919      	ldr	r1, [r3, #16]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4603      	mov	r3, r0
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f004 f889 	bl	8007c6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1a      	ldr	r2, [r3, #32]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d809      	bhi.n	8003b9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1a      	ldr	r2, [r3, #32]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d203      	bcs.n	8003b9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1be      	bne.n	8003b1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d811      	bhi.n	8003bcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc8:	4013      	ands	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	333c      	adds	r3, #60	; 0x3c
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d17b      	bne.n	8003d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f240 80b9 	bls.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80b3 	beq.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e0a7      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e098      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8093 	bne.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90f      	bls.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e07e      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f004 fa5a 	bl	800819c <USB_EP0_OutStart>
 8003ce8:	e006      	b.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f009 fafa 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
 8003d04:	e046      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e032      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f009 fad1 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
 8003d56:	e01d      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d80:	461a      	mov	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f004 fa0a 	bl	800819c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f009 fab2 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	; 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f009 fa69 	bl	800d2d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f004 f9bc 	bl	800819c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	; 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	10000003 	.word	0x10000003

08003f2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5a:	f7fd fc2d 	bl	80017b8 <HAL_GetTick>
 8003f5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f60:	e009      	b.n	8003f76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f62:	f7fd fc29 	bl	80017b8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f70:	d901      	bls.n	8003f76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e022      	b.n	8003fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d1ee      	bne.n	8003f62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f84:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f90:	f7fd fc12 	bl	80017b8 <HAL_GetTick>
 8003f94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f96:	e009      	b.n	8003fac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f98:	f7fd fc0e 	bl	80017b8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa6:	d901      	bls.n	8003fac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e007      	b.n	8003fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb8:	d1ee      	bne.n	8003f98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e29b      	b.n	800451a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8087 	beq.w	80040fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff0:	4b96      	ldr	r3, [pc, #600]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d00c      	beq.n	8004016 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffc:	4b93      	ldr	r3, [pc, #588]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d112      	bne.n	800402e <HAL_RCC_OscConfig+0x62>
 8004008:	4b90      	ldr	r3, [pc, #576]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004014:	d10b      	bne.n	800402e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004016:	4b8d      	ldr	r3, [pc, #564]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d06c      	beq.n	80040fc <HAL_RCC_OscConfig+0x130>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d168      	bne.n	80040fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e275      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x7a>
 8004038:	4b84      	ldr	r3, [pc, #528]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a83      	ldr	r2, [pc, #524]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800403e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e02e      	b.n	80040a4 <HAL_RCC_OscConfig+0xd8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x9c>
 800404e:	4b7f      	ldr	r3, [pc, #508]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7e      	ldr	r2, [pc, #504]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b7c      	ldr	r3, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7b      	ldr	r2, [pc, #492]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0xd8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0xc0>
 8004072:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a75      	ldr	r2, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b73      	ldr	r3, [pc, #460]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a72      	ldr	r2, [pc, #456]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0xd8>
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6e      	ldr	r2, [pc, #440]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b6c      	ldr	r3, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6b      	ldr	r2, [pc, #428]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fb84 	bl	80017b8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fd fb80 	bl	80017b8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e229      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b61      	ldr	r3, [pc, #388]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fb70 	bl	80017b8 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd fb6c 	bl	80017b8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e215      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	4b57      	ldr	r3, [pc, #348]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x110>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d069      	beq.n	80041de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410a:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x190>
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RCC_OscConfig+0x17a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1e9      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	493d      	ldr	r1, [pc, #244]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	e040      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d023      	beq.n	80041ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fb22 	bl	80017b8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7fd fb1e 	bl	80017b8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1c7      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4929      	ldr	r1, [pc, #164]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
 80041aa:	e018      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd fafe 	bl	80017b8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fd fafa 	bl	80017b8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1a3      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d038      	beq.n	800425c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_RCC_OscConfig+0x280>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fadb 	bl	80017b8 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7fd fad7 	bl	80017b8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e180      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800421a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x23a>
 8004224:	e01a      	b.n	800425c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_OscConfig+0x280>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fd fac1 	bl	80017b8 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	e00a      	b.n	8004250 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423a:	f7fd fabd 	bl	80017b8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d903      	bls.n	8004250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e166      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
 800424c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b92      	ldr	r3, [pc, #584]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ee      	bne.n	800423a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80a4 	beq.w	80043b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a88      	ldr	r2, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b86      	ldr	r3, [pc, #536]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004292:	4b83      	ldr	r3, [pc, #524]	; (80044a0 <HAL_RCC_OscConfig+0x4d4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d118      	bne.n	80042d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800429e:	4b80      	ldr	r3, [pc, #512]	; (80044a0 <HAL_RCC_OscConfig+0x4d4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7f      	ldr	r2, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x4d4>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042aa:	f7fd fa85 	bl	80017b8 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fd fa81 	bl	80017b8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e12a      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c4:	4b76      	ldr	r3, [pc, #472]	; (80044a0 <HAL_RCC_OscConfig+0x4d4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x31a>
 80042d8:	4b70      	ldr	r3, [pc, #448]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a6f      	ldr	r2, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e02d      	b.n	8004342 <HAL_RCC_OscConfig+0x376>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x33c>
 80042ee:	4b6b      	ldr	r3, [pc, #428]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a6a      	ldr	r2, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
 80042fa:	4b68      	ldr	r3, [pc, #416]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a67      	ldr	r2, [pc, #412]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
 8004306:	e01c      	b.n	8004342 <HAL_RCC_OscConfig+0x376>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b05      	cmp	r3, #5
 800430e:	d10c      	bne.n	800432a <HAL_RCC_OscConfig+0x35e>
 8004310:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a61      	ldr	r2, [pc, #388]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4a5e      	ldr	r2, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
 8004328:	e00b      	b.n	8004342 <HAL_RCC_OscConfig+0x376>
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	4b59      	ldr	r3, [pc, #356]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a58      	ldr	r2, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800433c:	f023 0304 	bic.w	r3, r3, #4
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d015      	beq.n	8004376 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fd fa35 	bl	80017b8 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	e00a      	b.n	8004368 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fd fa31 	bl	80017b8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e0d8      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	4b4c      	ldr	r3, [pc, #304]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ee      	beq.n	8004352 <HAL_RCC_OscConfig+0x386>
 8004374:	e014      	b.n	80043a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fd fa1f 	bl	80017b8 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fa1b 	bl	80017b8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0c2      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ee      	bne.n	800437e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a3c      	ldr	r2, [pc, #240]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80ae 	beq.w	8004518 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043bc:	4b37      	ldr	r3, [pc, #220]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d06d      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d14b      	bne.n	8004468 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a31      	ldr	r2, [pc, #196]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd f9ec 	bl	80017b8 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd f9e8 	bl	80017b8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e091      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	3b01      	subs	r3, #1
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	061b      	lsls	r3, r3, #24
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	491b      	ldr	r1, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd f9ba 	bl	80017b8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd f9b6 	bl	80017b8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e05f      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x47c>
 8004466:	e057      	b.n	8004518 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd f9a0 	bl	80017b8 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fd f99c 	bl	80017b8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e045      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x4d0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x4b0>
 800449a:	e03d      	b.n	8004518 <HAL_RCC_OscConfig+0x54c>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_OscConfig+0x558>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d030      	beq.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d129      	bne.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d122      	bne.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044dc:	4293      	cmp	r3, r2
 80044de:	d119      	bne.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	3b01      	subs	r3, #1
 80044ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d10f      	bne.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0d0      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4965      	ldr	r1, [pc, #404]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800458e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d040      	beq.n	800464c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d115      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e073      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06b      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4936      	ldr	r1, [pc, #216]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fd f8cc 	bl	80017b8 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd f8c8 	bl	80017b8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e053      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d210      	bcs.n	800467c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	4922      	ldr	r1, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1cc>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1d0>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1d4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc ff22 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800ddac 	.word	0x0800ddac
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000004 	.word	0x20000004

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b094      	sub	sp, #80	; 0x50
 8004706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	647b      	str	r3, [r7, #68]	; 0x44
 800470c:	2300      	movs	r3, #0
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	2300      	movs	r3, #0
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d00d      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x40>
 8004724:	2b08      	cmp	r3, #8
 8004726:	f200 80e1 	bhi.w	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x3a>
 8004732:	e0db      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004738:	e0db      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_GetSysClockFreq+0x208>)
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473e:	e0d8      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4621      	mov	r1, r4
 800478c:	1a51      	subs	r1, r2, r1
 800478e:	6139      	str	r1, [r7, #16]
 8004790:	4629      	mov	r1, r5
 8004792:	eb63 0301 	sbc.w	r3, r3, r1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a4:	4659      	mov	r1, fp
 80047a6:	018b      	lsls	r3, r1, #6
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ae:	4651      	mov	r1, sl
 80047b0:	018a      	lsls	r2, r1, #6
 80047b2:	4651      	mov	r1, sl
 80047b4:	ebb2 0801 	subs.w	r8, r2, r1
 80047b8:	4659      	mov	r1, fp
 80047ba:	eb63 0901 	sbc.w	r9, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb18 0303 	adds.w	r3, r8, r3
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	462b      	mov	r3, r5
 80047e0:	eb49 0303 	adc.w	r3, r9, r3
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f2:	4629      	mov	r1, r5
 80047f4:	024b      	lsls	r3, r1, #9
 80047f6:	4621      	mov	r1, r4
 80047f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047fc:	4621      	mov	r1, r4
 80047fe:	024a      	lsls	r2, r1, #9
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	2200      	movs	r2, #0
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
 800480a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800480c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004810:	f7fb fd16 	bl	8000240 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	e058      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	2200      	movs	r2, #0
 8004826:	4618      	mov	r0, r3
 8004828:	4611      	mov	r1, r2
 800482a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
 8004834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	0159      	lsls	r1, r3, #5
 8004846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484a:	0150      	lsls	r0, r2, #5
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4641      	mov	r1, r8
 8004852:	ebb2 0a01 	subs.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb63 0b01 	sbc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800486c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004870:	ebb2 040a 	subs.w	r4, r2, sl
 8004874:	eb63 050b 	sbc.w	r5, r3, fp
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	61fa      	str	r2, [r7, #28]
 80048c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c4:	f7fb fcbc 	bl	8000240 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80048e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3750      	adds	r7, #80	; 0x50
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	0800ddbc 	.word	0x0800ddbc

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffdc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	0800ddbc 	.word	0x0800ddbc

08004974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	220f      	movs	r2, #15
 8004982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCC_GetClockConfig+0x60>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 020f 	and.w	r2, r3, #15
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	601a      	str	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40023c00 	.word	0x40023c00

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d012      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a00:	4b69      	ldr	r3, [pc, #420]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a68      	ldr	r2, [pc, #416]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a0a:	6093      	str	r3, [r2, #8]
 8004a0c:	4b66      	ldr	r3, [pc, #408]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a14:	4964      	ldr	r1, [pc, #400]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d017      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a32:	4b5d      	ldr	r3, [pc, #372]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	4959      	ldr	r1, [pc, #356]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d017      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	494a      	ldr	r1, [pc, #296]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 808b 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004abc:	4b3a      	ldr	r3, [pc, #232]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	4a39      	ldr	r2, [pc, #228]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac8:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a34      	ldr	r2, [pc, #208]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fe6a 	bl	80017b8 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fc fe66 	bl	80017b8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e38f      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b06:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d035      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d02e      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d114      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fc fe2e 	bl	80017b8 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fc fe2a 	bl	80017b8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e351      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ee      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b9e:	400b      	ands	r3, r1
 8004ba0:	4901      	ldr	r1, [pc, #4]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	0ffffcff 	.word	0x0ffffcff
 8004bb4:	4bac      	ldr	r3, [pc, #688]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4aab      	ldr	r2, [pc, #684]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bbe:	6093      	str	r3, [r2, #8]
 8004bc0:	4ba9      	ldr	r3, [pc, #676]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	49a6      	ldr	r1, [pc, #664]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bde:	4ba2      	ldr	r3, [pc, #648]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be4:	4aa0      	ldr	r2, [pc, #640]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bee:	4b9e      	ldr	r3, [pc, #632]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	499b      	ldr	r1, [pc, #620]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c0c:	4b96      	ldr	r3, [pc, #600]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1a:	4993      	ldr	r1, [pc, #588]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c2e:	4b8e      	ldr	r3, [pc, #568]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c3c:	498a      	ldr	r1, [pc, #552]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c50:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	4982      	ldr	r1, [pc, #520]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c72:	4b7d      	ldr	r3, [pc, #500]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4979      	ldr	r1, [pc, #484]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c94:	4b74      	ldr	r3, [pc, #464]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f023 0203 	bic.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	4971      	ldr	r1, [pc, #452]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb6:	4b6c      	ldr	r3, [pc, #432]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f023 020c 	bic.w	r2, r3, #12
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc4:	4968      	ldr	r1, [pc, #416]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cd8:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	4960      	ldr	r1, [pc, #384]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	4957      	ldr	r1, [pc, #348]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d1c:	4b52      	ldr	r3, [pc, #328]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	494f      	ldr	r1, [pc, #316]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	4946      	ldr	r1, [pc, #280]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d60:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	493e      	ldr	r1, [pc, #248]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d82:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d90:	4935      	ldr	r1, [pc, #212]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db2:	492d      	ldr	r1, [pc, #180]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d011      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	4924      	ldr	r1, [pc, #144]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de4:	d101      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	4914      	ldr	r1, [pc, #80]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e38:	490b      	ldr	r1, [pc, #44]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00f      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	4902      	ldr	r1, [pc, #8]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	4986      	ldr	r1, [pc, #536]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e9c:	4b81      	ldr	r3, [pc, #516]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	497d      	ldr	r1, [pc, #500]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d006      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 80d6 	beq.w	8005074 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ec8:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a75      	ldr	r2, [pc, #468]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fc fc70 	bl	80017b8 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004edc:	f7fc fc6c 	bl	80017b8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e195      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eee:	4b6d      	ldr	r3, [pc, #436]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d021      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11d      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f0e:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f1c:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	0e1b      	lsrs	r3, r3, #24
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4958      	ldr	r1, [pc, #352]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02e      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d129      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f76:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f84:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	0f1b      	lsrs	r3, r3, #28
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	019a      	lsls	r2, r3, #6
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	061b      	lsls	r3, r3, #24
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	493e      	ldr	r1, [pc, #248]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fb2:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	f023 021f 	bic.w	r2, r3, #31
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	4938      	ldr	r1, [pc, #224]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fd6:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fdc:	0e1b      	lsrs	r3, r3, #24
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	0f1b      	lsrs	r3, r3, #28
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	019a      	lsls	r2, r3, #6
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d011      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	491a      	ldr	r1, [pc, #104]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc fbb3 	bl	80017b8 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005056:	f7fc fbaf 	bl	80017b8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b64      	cmp	r3, #100	; 0x64
 8005062:	d901      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e0d8      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	f040 80ce 	bne.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fc fb96 	bl	80017b8 <HAL_GetTick>
 800508c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800508e:	e00b      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005090:	f7fc fb92 	bl	80017b8 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	; 0x64
 800509c:	d904      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e0bb      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050a8:	4b5e      	ldr	r3, [pc, #376]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b4:	d0ec      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02e      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d12a      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050de:	4b51      	ldr	r3, [pc, #324]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050ec:	4b4d      	ldr	r3, [pc, #308]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	0f1b      	lsrs	r3, r3, #28
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	019a      	lsls	r2, r3, #6
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	071b      	lsls	r3, r3, #28
 8005112:	4944      	ldr	r1, [pc, #272]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800511a:	4b42      	ldr	r3, [pc, #264]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	493d      	ldr	r1, [pc, #244]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d022      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005148:	d11d      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	0e1b      	lsrs	r3, r3, #24
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	0f1b      	lsrs	r3, r3, #28
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	019a      	lsls	r2, r3, #6
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	431a      	orrs	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	071b      	lsls	r3, r3, #28
 800517e:	4929      	ldr	r1, [pc, #164]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d028      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	0e1b      	lsrs	r3, r3, #24
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051a0:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4917      	ldr	r1, [pc, #92]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4911      	ldr	r1, [pc, #68]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fc fae2 	bl	80017b8 <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051f8:	f7fc fade 	bl	80017b8 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e007      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005216:	d1ef      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800

08005228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e09d      	b.n	8005376 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524a:	d009      	beq.n	8005260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	61da      	str	r2, [r3, #28]
 8005252:	e005      	b.n	8005260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb fffe 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a0:	d902      	bls.n	80052a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e002      	b.n	80052ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_Init+0xa0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	ea42 0103 	orr.w	r1, r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f003 0204 	and.w	r2, r3, #4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005344:	ea42 0103 	orr.w	r1, r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005364:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e049      	b.n	8005424 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fc f819 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f000 fbbb 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e054      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d01d      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_TIM_Base_Start_IT+0xd4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a21      	ldr	r2, [pc, #132]	; (8005504 <HAL_TIM_Base_Start_IT+0xd8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <HAL_TIM_Base_Start_IT+0xdc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	; (800550c <HAL_TIM_Base_Start_IT+0xe0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_TIM_Base_Start_IT+0xe4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_TIM_Base_Start_IT+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d115      	bne.n	80054d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_TIM_Base_Start_IT+0xec>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d015      	beq.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d011      	beq.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e008      	b.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e000      	b.n	80054ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40010400 	.word	0x40010400
 8005510:	40014000 	.word	0x40014000
 8005514:	40001800 	.word	0x40001800
 8005518:	00010007 	.word	0x00010007

0800551c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e049      	b.n	80055c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f841 	bl	80055ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f000 faec 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d122      	bne.n	800563a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d11b      	bne.n	800563a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f06f 0202 	mvn.w	r2, #2
 800560a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fa6b 	bl	8005afc <HAL_TIM_IC_CaptureCallback>
 8005626:	e005      	b.n	8005634 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa5d 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa6e 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d122      	bne.n	800568e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d11b      	bne.n	800568e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0204 	mvn.w	r2, #4
 800565e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fa41 	bl	8005afc <HAL_TIM_IC_CaptureCallback>
 800567a:	e005      	b.n	8005688 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa33 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa44 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b08      	cmp	r3, #8
 800569a:	d122      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d11b      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f06f 0208 	mvn.w	r2, #8
 80056b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2204      	movs	r2, #4
 80056b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa17 	bl	8005afc <HAL_TIM_IC_CaptureCallback>
 80056ce:	e005      	b.n	80056dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa09 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa1a 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d122      	bne.n	8005736 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d11b      	bne.n	8005736 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f06f 0210 	mvn.w	r2, #16
 8005706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2208      	movs	r2, #8
 800570c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f9ed 	bl	8005afc <HAL_TIM_IC_CaptureCallback>
 8005722:	e005      	b.n	8005730 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f9df 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9f0 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10e      	bne.n	8005762 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0201 	mvn.w	r2, #1
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fb fba9 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d10e      	bne.n	800578e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fcd1 	bl	8006130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fcc4 	bl	8006144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f99e 	bl	8005b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d10e      	bne.n	8005814 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b20      	cmp	r3, #32
 8005802:	d107      	bne.n	8005814 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0220 	mvn.w	r2, #32
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fc84 	bl	800611c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005836:	2302      	movs	r3, #2
 8005838:	e088      	b.n	800594c <HAL_TIM_IC_ConfigChannel+0x130>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f000 fa0e 	bl	8005c78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 020c 	bic.w	r2, r2, #12
 800586a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
 800587e:	e060      	b.n	8005942 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d11c      	bne.n	80058c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f000 fa92 	bl	8005dbe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6999      	ldr	r1, [r3, #24]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	021a      	lsls	r2, r3, #8
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	619a      	str	r2, [r3, #24]
 80058be:	e040      	b.n	8005942 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d11b      	bne.n	80058fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f000 fadf 	bl	8005e98 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 020c 	bic.w	r2, r2, #12
 80058e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	61da      	str	r2, [r3, #28]
 80058fc:	e021      	b.n	8005942 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d11c      	bne.n	800593e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6819      	ldr	r1, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f000 fafc 	bl	8005f10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005926:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69d9      	ldr	r1, [r3, #28]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	61da      	str	r2, [r3, #28]
 800593c:	e001      	b.n	8005942 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIM_ConfigClockSource+0x1c>
 800596c:	2302      	movs	r3, #2
 800596e:	e0b4      	b.n	8005ada <HAL_TIM_ConfigClockSource+0x186>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <HAL_TIM_ConfigClockSource+0x190>)
 800598c:	4013      	ands	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a8:	d03e      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0xd4>
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	f200 8087 	bhi.w	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b6:	f000 8086 	beq.w	8005ac6 <HAL_TIM_ConfigClockSource+0x172>
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d87f      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b70      	cmp	r3, #112	; 0x70
 80059c2:	d01a      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0xa6>
 80059c4:	2b70      	cmp	r3, #112	; 0x70
 80059c6:	d87b      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b60      	cmp	r3, #96	; 0x60
 80059ca:	d050      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x11a>
 80059cc:	2b60      	cmp	r3, #96	; 0x60
 80059ce:	d877      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b50      	cmp	r3, #80	; 0x50
 80059d2:	d03c      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0xfa>
 80059d4:	2b50      	cmp	r3, #80	; 0x50
 80059d6:	d873      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d058      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x13a>
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d86f      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d064      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x15a>
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d86b      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d060      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x15a>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d867      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d05c      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d05a      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	e062      	b.n	8005ac0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6899      	ldr	r1, [r3, #8]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f000 fad9 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	609a      	str	r2, [r3, #8]
      break;
 8005a26:	e04f      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6899      	ldr	r1, [r3, #8]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f000 fac2 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a4a:	609a      	str	r2, [r3, #8]
      break;
 8005a4c:	e03c      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f000 f980 	bl	8005d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2150      	movs	r1, #80	; 0x50
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa8f 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e02c      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 f9dc 	bl	8005e38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2160      	movs	r1, #96	; 0x60
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fa7f 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e01c      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f000 f960 	bl	8005d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fa6f 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005aac:	e00c      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f000 fa66 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005abe:	e003      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	e000      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	fffeff88 	.word	0xfffeff88

08005ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d00f      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3d      	ldr	r2, [pc, #244]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3b      	ldr	r2, [pc, #236]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2f      	ldr	r2, [pc, #188]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d027      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d023      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d017      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <TIM_Base_SetConfig+0x128>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <TIM_Base_SetConfig+0x12c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <TIM_Base_SetConfig+0x130>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <TIM_Base_SetConfig+0x134>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <TIM_Base_SetConfig+0x138>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <TIM_Base_SetConfig+0x13c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0xf8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40000c00 	.word	0x40000c00
 8005c5c:	40010400 	.word	0x40010400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	40001800 	.word	0x40001800
 8005c70:	40001c00 	.word	0x40001c00
 8005c74:	40002000 	.word	0x40002000

08005c78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	; (8005d44 <TIM_TI1_SetConfig+0xcc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01b      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d017      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <TIM_TI1_SetConfig+0xd0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <TIM_TI1_SetConfig+0xd4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <TIM_TI1_SetConfig+0xd8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <TIM_TI1_SetConfig+0xdc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a21      	ldr	r2, [pc, #132]	; (8005d58 <TIM_TI1_SetConfig+0xe0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_TI1_SetConfig+0x66>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <TIM_TI1_SetConfig+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <TIM_TI1_SetConfig+0x6a>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <TIM_TI1_SetConfig+0x6c>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e003      	b.n	8005d02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 030a 	and.w	r3, r3, #10
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40000800 	.word	0x40000800
 8005d50:	40000c00 	.word	0x40000c00
 8005d54:	40010400 	.word	0x40010400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40001800 	.word	0x40001800

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f023 0210 	bic.w	r2, r3, #16
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	621a      	str	r2, [r3, #32]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f023 0210 	bic.w	r2, r3, #16
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	031b      	lsls	r3, r3, #12
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	621a      	str	r2, [r3, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 0303 	bic.w	r3, r3, #3
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	031b      	lsls	r3, r3, #12
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e06d      	b.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a30      	ldr	r2, [pc, #192]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a20      	ldr	r2, [pc, #128]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d01d      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a16      	ldr	r2, [pc, #88]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10c      	bne.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40010000 	.word	0x40010000
 8006104:	40010400 	.word	0x40010400
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40014000 	.word	0x40014000
 8006118:	40001800 	.word	0x40001800

0800611c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e040      	b.n	80061ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb f972 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f82c 	bl	80061f4 <UART_SetConfig>
 800619c:	4603      	mov	r3, r0
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e022      	b.n	80061ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa84 	bl	80066bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb0b 	bl	8006800 <UART_CheckIdleState>
 80061ea:	4603      	mov	r3, r0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4ba6      	ldr	r3, [pc, #664]	; (80064b8 <UART_SetConfig+0x2c4>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	430b      	orrs	r3, r1
 800622a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a94      	ldr	r2, [pc, #592]	; (80064bc <UART_SetConfig+0x2c8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d120      	bne.n	80062b2 <UART_SetConfig+0xbe>
 8006270:	4b93      	ldr	r3, [pc, #588]	; (80064c0 <UART_SetConfig+0x2cc>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d816      	bhi.n	80062ac <UART_SetConfig+0xb8>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x90>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	080062a1 	.word	0x080062a1
 800628c:	0800629b 	.word	0x0800629b
 8006290:	080062a7 	.word	0x080062a7
 8006294:	2301      	movs	r3, #1
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e150      	b.n	800653c <UART_SetConfig+0x348>
 800629a:	2302      	movs	r3, #2
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e14d      	b.n	800653c <UART_SetConfig+0x348>
 80062a0:	2304      	movs	r3, #4
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e14a      	b.n	800653c <UART_SetConfig+0x348>
 80062a6:	2308      	movs	r3, #8
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e147      	b.n	800653c <UART_SetConfig+0x348>
 80062ac:	2310      	movs	r3, #16
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e144      	b.n	800653c <UART_SetConfig+0x348>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a83      	ldr	r2, [pc, #524]	; (80064c4 <UART_SetConfig+0x2d0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d132      	bne.n	8006322 <UART_SetConfig+0x12e>
 80062bc:	4b80      	ldr	r3, [pc, #512]	; (80064c0 <UART_SetConfig+0x2cc>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b0c      	cmp	r3, #12
 80062c8:	d828      	bhi.n	800631c <UART_SetConfig+0x128>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0xdc>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006305 	.word	0x08006305
 80062d4:	0800631d 	.word	0x0800631d
 80062d8:	0800631d 	.word	0x0800631d
 80062dc:	0800631d 	.word	0x0800631d
 80062e0:	08006311 	.word	0x08006311
 80062e4:	0800631d 	.word	0x0800631d
 80062e8:	0800631d 	.word	0x0800631d
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	0800630b 	.word	0x0800630b
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006317 	.word	0x08006317
 8006304:	2300      	movs	r3, #0
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e118      	b.n	800653c <UART_SetConfig+0x348>
 800630a:	2302      	movs	r3, #2
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e115      	b.n	800653c <UART_SetConfig+0x348>
 8006310:	2304      	movs	r3, #4
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e112      	b.n	800653c <UART_SetConfig+0x348>
 8006316:	2308      	movs	r3, #8
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e10f      	b.n	800653c <UART_SetConfig+0x348>
 800631c:	2310      	movs	r3, #16
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e10c      	b.n	800653c <UART_SetConfig+0x348>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a68      	ldr	r2, [pc, #416]	; (80064c8 <UART_SetConfig+0x2d4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d120      	bne.n	800636e <UART_SetConfig+0x17a>
 800632c:	4b64      	ldr	r3, [pc, #400]	; (80064c0 <UART_SetConfig+0x2cc>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006336:	2b30      	cmp	r3, #48	; 0x30
 8006338:	d013      	beq.n	8006362 <UART_SetConfig+0x16e>
 800633a:	2b30      	cmp	r3, #48	; 0x30
 800633c:	d814      	bhi.n	8006368 <UART_SetConfig+0x174>
 800633e:	2b20      	cmp	r3, #32
 8006340:	d009      	beq.n	8006356 <UART_SetConfig+0x162>
 8006342:	2b20      	cmp	r3, #32
 8006344:	d810      	bhi.n	8006368 <UART_SetConfig+0x174>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <UART_SetConfig+0x15c>
 800634a:	2b10      	cmp	r3, #16
 800634c:	d006      	beq.n	800635c <UART_SetConfig+0x168>
 800634e:	e00b      	b.n	8006368 <UART_SetConfig+0x174>
 8006350:	2300      	movs	r3, #0
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e0f2      	b.n	800653c <UART_SetConfig+0x348>
 8006356:	2302      	movs	r3, #2
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e0ef      	b.n	800653c <UART_SetConfig+0x348>
 800635c:	2304      	movs	r3, #4
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e0ec      	b.n	800653c <UART_SetConfig+0x348>
 8006362:	2308      	movs	r3, #8
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e0e9      	b.n	800653c <UART_SetConfig+0x348>
 8006368:	2310      	movs	r3, #16
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e0e6      	b.n	800653c <UART_SetConfig+0x348>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a56      	ldr	r2, [pc, #344]	; (80064cc <UART_SetConfig+0x2d8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d120      	bne.n	80063ba <UART_SetConfig+0x1c6>
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <UART_SetConfig+0x2cc>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006382:	2bc0      	cmp	r3, #192	; 0xc0
 8006384:	d013      	beq.n	80063ae <UART_SetConfig+0x1ba>
 8006386:	2bc0      	cmp	r3, #192	; 0xc0
 8006388:	d814      	bhi.n	80063b4 <UART_SetConfig+0x1c0>
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d009      	beq.n	80063a2 <UART_SetConfig+0x1ae>
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d810      	bhi.n	80063b4 <UART_SetConfig+0x1c0>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x1a8>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d006      	beq.n	80063a8 <UART_SetConfig+0x1b4>
 800639a:	e00b      	b.n	80063b4 <UART_SetConfig+0x1c0>
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e0cc      	b.n	800653c <UART_SetConfig+0x348>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e0c9      	b.n	800653c <UART_SetConfig+0x348>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e0c6      	b.n	800653c <UART_SetConfig+0x348>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0c3      	b.n	800653c <UART_SetConfig+0x348>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e0c0      	b.n	800653c <UART_SetConfig+0x348>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a44      	ldr	r2, [pc, #272]	; (80064d0 <UART_SetConfig+0x2dc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d125      	bne.n	8006410 <UART_SetConfig+0x21c>
 80063c4:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <UART_SetConfig+0x2cc>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d2:	d017      	beq.n	8006404 <UART_SetConfig+0x210>
 80063d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d8:	d817      	bhi.n	800640a <UART_SetConfig+0x216>
 80063da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063de:	d00b      	beq.n	80063f8 <UART_SetConfig+0x204>
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e4:	d811      	bhi.n	800640a <UART_SetConfig+0x216>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <UART_SetConfig+0x1fe>
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	d006      	beq.n	80063fe <UART_SetConfig+0x20a>
 80063f0:	e00b      	b.n	800640a <UART_SetConfig+0x216>
 80063f2:	2300      	movs	r3, #0
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e0a1      	b.n	800653c <UART_SetConfig+0x348>
 80063f8:	2302      	movs	r3, #2
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e09e      	b.n	800653c <UART_SetConfig+0x348>
 80063fe:	2304      	movs	r3, #4
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e09b      	b.n	800653c <UART_SetConfig+0x348>
 8006404:	2308      	movs	r3, #8
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e098      	b.n	800653c <UART_SetConfig+0x348>
 800640a:	2310      	movs	r3, #16
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e095      	b.n	800653c <UART_SetConfig+0x348>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2f      	ldr	r2, [pc, #188]	; (80064d4 <UART_SetConfig+0x2e0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d125      	bne.n	8006466 <UART_SetConfig+0x272>
 800641a:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <UART_SetConfig+0x2cc>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006428:	d017      	beq.n	800645a <UART_SetConfig+0x266>
 800642a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800642e:	d817      	bhi.n	8006460 <UART_SetConfig+0x26c>
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006434:	d00b      	beq.n	800644e <UART_SetConfig+0x25a>
 8006436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643a:	d811      	bhi.n	8006460 <UART_SetConfig+0x26c>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <UART_SetConfig+0x254>
 8006440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006444:	d006      	beq.n	8006454 <UART_SetConfig+0x260>
 8006446:	e00b      	b.n	8006460 <UART_SetConfig+0x26c>
 8006448:	2301      	movs	r3, #1
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e076      	b.n	800653c <UART_SetConfig+0x348>
 800644e:	2302      	movs	r3, #2
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e073      	b.n	800653c <UART_SetConfig+0x348>
 8006454:	2304      	movs	r3, #4
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e070      	b.n	800653c <UART_SetConfig+0x348>
 800645a:	2308      	movs	r3, #8
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e06d      	b.n	800653c <UART_SetConfig+0x348>
 8006460:	2310      	movs	r3, #16
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e06a      	b.n	800653c <UART_SetConfig+0x348>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <UART_SetConfig+0x2e4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d138      	bne.n	80064e2 <UART_SetConfig+0x2ee>
 8006470:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <UART_SetConfig+0x2cc>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800647a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800647e:	d017      	beq.n	80064b0 <UART_SetConfig+0x2bc>
 8006480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006484:	d82a      	bhi.n	80064dc <UART_SetConfig+0x2e8>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648a:	d00b      	beq.n	80064a4 <UART_SetConfig+0x2b0>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d824      	bhi.n	80064dc <UART_SetConfig+0x2e8>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <UART_SetConfig+0x2aa>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d006      	beq.n	80064aa <UART_SetConfig+0x2b6>
 800649c:	e01e      	b.n	80064dc <UART_SetConfig+0x2e8>
 800649e:	2300      	movs	r3, #0
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e04b      	b.n	800653c <UART_SetConfig+0x348>
 80064a4:	2302      	movs	r3, #2
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e048      	b.n	800653c <UART_SetConfig+0x348>
 80064aa:	2304      	movs	r3, #4
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e045      	b.n	800653c <UART_SetConfig+0x348>
 80064b0:	2308      	movs	r3, #8
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e042      	b.n	800653c <UART_SetConfig+0x348>
 80064b6:	bf00      	nop
 80064b8:	efff69f3 	.word	0xefff69f3
 80064bc:	40011000 	.word	0x40011000
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40004400 	.word	0x40004400
 80064c8:	40004800 	.word	0x40004800
 80064cc:	40004c00 	.word	0x40004c00
 80064d0:	40005000 	.word	0x40005000
 80064d4:	40011400 	.word	0x40011400
 80064d8:	40007800 	.word	0x40007800
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e02c      	b.n	800653c <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a72      	ldr	r2, [pc, #456]	; (80066b0 <UART_SetConfig+0x4bc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0x344>
 80064ec:	4b71      	ldr	r3, [pc, #452]	; (80066b4 <UART_SetConfig+0x4c0>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064fa:	d017      	beq.n	800652c <UART_SetConfig+0x338>
 80064fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006500:	d817      	bhi.n	8006532 <UART_SetConfig+0x33e>
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d00b      	beq.n	8006520 <UART_SetConfig+0x32c>
 8006508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650c:	d811      	bhi.n	8006532 <UART_SetConfig+0x33e>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <UART_SetConfig+0x326>
 8006512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006516:	d006      	beq.n	8006526 <UART_SetConfig+0x332>
 8006518:	e00b      	b.n	8006532 <UART_SetConfig+0x33e>
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e00d      	b.n	800653c <UART_SetConfig+0x348>
 8006520:	2302      	movs	r3, #2
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e00a      	b.n	800653c <UART_SetConfig+0x348>
 8006526:	2304      	movs	r3, #4
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e007      	b.n	800653c <UART_SetConfig+0x348>
 800652c:	2308      	movs	r3, #8
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e004      	b.n	800653c <UART_SetConfig+0x348>
 8006532:	2310      	movs	r3, #16
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e001      	b.n	800653c <UART_SetConfig+0x348>
 8006538:	2310      	movs	r3, #16
 800653a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006544:	d15b      	bne.n	80065fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d828      	bhi.n	800659e <UART_SetConfig+0x3aa>
 800654c:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <UART_SetConfig+0x360>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	0800659f 	.word	0x0800659f
 8006564:	0800658f 	.word	0x0800658f
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800659f 	.word	0x0800659f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006578:	f7fe f9d4 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 800657c:	61b8      	str	r0, [r7, #24]
        break;
 800657e:	e013      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fe f9e4 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <UART_SetConfig+0x4c4>)
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e00c      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7fe f8b7 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8006592:	61b8      	str	r0, [r7, #24]
        break;
 8006594:	e008      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e004      	b.n	80065a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	77bb      	strb	r3, [r7, #30]
        break;
 80065a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d074      	beq.n	8006698 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	005a      	lsls	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	441a      	add	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d916      	bls.n	80065f8 <UART_SetConfig+0x404>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d212      	bcs.n	80065f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f023 030f 	bic.w	r3, r3, #15
 80065da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	89fa      	ldrh	r2, [r7, #14]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e04f      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	77bb      	strb	r3, [r7, #30]
 80065fc:	e04c      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d828      	bhi.n	8006656 <UART_SetConfig+0x462>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x418>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006631 	.word	0x08006631
 8006610:	08006639 	.word	0x08006639
 8006614:	08006641 	.word	0x08006641
 8006618:	08006657 	.word	0x08006657
 800661c:	08006647 	.word	0x08006647
 8006620:	08006657 	.word	0x08006657
 8006624:	08006657 	.word	0x08006657
 8006628:	08006657 	.word	0x08006657
 800662c:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fe f978 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8006634:	61b8      	str	r0, [r7, #24]
        break;
 8006636:	e013      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fe f988 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <UART_SetConfig+0x4c4>)
 8006642:	61bb      	str	r3, [r7, #24]
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe f85b 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 800664a:	61b8      	str	r0, [r7, #24]
        break;
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77bb      	strb	r3, [r7, #30]
        break;
 800665e:	bf00      	nop
    }

    if (pclk != 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	085a      	lsrs	r2, r3, #1
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	441a      	add	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d909      	bls.n	8006694 <UART_SetConfig+0x4a0>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d205      	bcs.n	8006694 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e001      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40007c00 	.word	0x40007c00
 80066b4:	40023800 	.word	0x40023800
 80066b8:	00f42400 	.word	0x00f42400

080066bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01a      	beq.n	80067d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ba:	d10a      	bne.n	80067d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	605a      	str	r2, [r3, #4]
  }
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af02      	add	r7, sp, #8
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006810:	f7fa ffd2 	bl	80017b8 <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10e      	bne.n	8006842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f831 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e027      	b.n	8006892 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d10e      	bne.n	800686e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f81b 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e011      	b.n	8006892 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b09c      	sub	sp, #112	; 0x70
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068aa:	e0a7      	b.n	80069fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	f000 80a3 	beq.w	80069fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b6:	f7fa ff7f 	bl	80017b8 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <UART_WaitOnFlagUntilTimeout+0x32>
 80068c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13f      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e0:	667b      	str	r3, [r7, #100]	; 0x64
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e6      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	663b      	str	r3, [r7, #96]	; 0x60
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800691e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800692c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e068      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d050      	beq.n	80069fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006968:	d148      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	637b      	str	r3, [r7, #52]	; 0x34
 8006994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	613b      	str	r3, [r7, #16]
   return(result);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069c6:	623a      	str	r2, [r7, #32]
 80069c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e010      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69da      	ldr	r2, [r3, #28]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2301      	moveq	r3, #1
 8006a0e:	2300      	movne	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	f43f af48 	beq.w	80068ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3770      	adds	r7, #112	; 0x70
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a28:	b084      	sub	sp, #16
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	f107 001c 	add.w	r0, r7, #28
 8006a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d120      	bne.n	8006a82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <USB_CoreInit+0xac>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d105      	bne.n	8006a76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fbee 	bl	8008258 <USB_CoreReset>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
 8006a80:	e010      	b.n	8006aa4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fbe2 	bl	8008258 <USB_CoreReset>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10b      	bne.n	8006ac2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f043 0206 	orr.w	r2, r3, #6
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ace:	b004      	add	sp, #16
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	ffbdffbf 	.word	0xffbdffbf

08006ad8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d165      	bne.n	8006bb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a41      	ldr	r2, [pc, #260]	; (8006bf4 <USB_SetTurnaroundTime+0x11c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d906      	bls.n	8006b02 <USB_SetTurnaroundTime+0x2a>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <USB_SetTurnaroundTime+0x120>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d202      	bcs.n	8006b02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006afc:	230f      	movs	r3, #15
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e062      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a3c      	ldr	r2, [pc, #240]	; (8006bf8 <USB_SetTurnaroundTime+0x120>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d306      	bcc.n	8006b18 <USB_SetTurnaroundTime+0x40>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a3b      	ldr	r2, [pc, #236]	; (8006bfc <USB_SetTurnaroundTime+0x124>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d202      	bcs.n	8006b18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b12:	230e      	movs	r3, #14
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e057      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a38      	ldr	r2, [pc, #224]	; (8006bfc <USB_SetTurnaroundTime+0x124>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d306      	bcc.n	8006b2e <USB_SetTurnaroundTime+0x56>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a37      	ldr	r2, [pc, #220]	; (8006c00 <USB_SetTurnaroundTime+0x128>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d202      	bcs.n	8006b2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b28:	230d      	movs	r3, #13
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e04c      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <USB_SetTurnaroundTime+0x128>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d306      	bcc.n	8006b44 <USB_SetTurnaroundTime+0x6c>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a32      	ldr	r2, [pc, #200]	; (8006c04 <USB_SetTurnaroundTime+0x12c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b3e:	230c      	movs	r3, #12
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e041      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <USB_SetTurnaroundTime+0x12c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d906      	bls.n	8006b5a <USB_SetTurnaroundTime+0x82>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a2e      	ldr	r2, [pc, #184]	; (8006c08 <USB_SetTurnaroundTime+0x130>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d802      	bhi.n	8006b5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b54:	230b      	movs	r3, #11
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e036      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <USB_SetTurnaroundTime+0x130>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d906      	bls.n	8006b70 <USB_SetTurnaroundTime+0x98>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <USB_SetTurnaroundTime+0x134>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d802      	bhi.n	8006b70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b6a:	230a      	movs	r3, #10
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e02b      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4a26      	ldr	r2, [pc, #152]	; (8006c0c <USB_SetTurnaroundTime+0x134>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d906      	bls.n	8006b86 <USB_SetTurnaroundTime+0xae>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <USB_SetTurnaroundTime+0x138>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d202      	bcs.n	8006b86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b80:	2309      	movs	r3, #9
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e020      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <USB_SetTurnaroundTime+0x138>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d306      	bcc.n	8006b9c <USB_SetTurnaroundTime+0xc4>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <USB_SetTurnaroundTime+0x13c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d802      	bhi.n	8006b9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b96:	2308      	movs	r3, #8
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e015      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <USB_SetTurnaroundTime+0x13c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d906      	bls.n	8006bb2 <USB_SetTurnaroundTime+0xda>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <USB_SetTurnaroundTime+0x140>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d202      	bcs.n	8006bb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bac:	2307      	movs	r3, #7
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e00a      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bb2:	2306      	movs	r3, #6
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e007      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bbe:	2309      	movs	r3, #9
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e001      	b.n	8006bc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bc4:	2309      	movs	r3, #9
 8006bc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	029b      	lsls	r3, r3, #10
 8006bdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	00d8acbf 	.word	0x00d8acbf
 8006bf8:	00e4e1c0 	.word	0x00e4e1c0
 8006bfc:	00f42400 	.word	0x00f42400
 8006c00:	01067380 	.word	0x01067380
 8006c04:	011a499f 	.word	0x011a499f
 8006c08:	01312cff 	.word	0x01312cff
 8006c0c:	014ca43f 	.word	0x014ca43f
 8006c10:	016e3600 	.word	0x016e3600
 8006c14:	01a6ab1f 	.word	0x01a6ab1f
 8006c18:	01e84800 	.word	0x01e84800

08006c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f043 0201 	orr.w	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0201 	bic.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d115      	bne.n	8006cae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f7fa fd9e 	bl	80017d0 <HAL_Delay>
      ms++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fa4b 	bl	8008136 <USB_GetMode>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d01e      	beq.n	8006ce4 <USB_SetCurrentMode+0x84>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b31      	cmp	r3, #49	; 0x31
 8006caa:	d9f0      	bls.n	8006c8e <USB_SetCurrentMode+0x2e>
 8006cac:	e01a      	b.n	8006ce4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d115      	bne.n	8006ce0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f7fa fd85 	bl	80017d0 <HAL_Delay>
      ms++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fa32 	bl	8008136 <USB_GetMode>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <USB_SetCurrentMode+0x84>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b31      	cmp	r3, #49	; 0x31
 8006cdc:	d9f0      	bls.n	8006cc0 <USB_SetCurrentMode+0x60>
 8006cde:	e001      	b.n	8006ce4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e005      	b.n	8006cf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b32      	cmp	r3, #50	; 0x32
 8006ce8:	d101      	bne.n	8006cee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e009      	b.n	8006d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3340      	adds	r3, #64	; 0x40
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0e      	cmp	r3, #14
 8006d30:	d9f2      	bls.n	8006d18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d46:	f043 0302 	orr.w	r3, r3, #2
 8006d4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e005      	b.n	8006d7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	4619      	mov	r1, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	461a      	mov	r2, r3
 8006d9a:	680b      	ldr	r3, [r1, #0]
 8006d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d10c      	bne.n	8006dbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f965 	bl	800707c <USB_SetDevSpeed>
 8006db2:	e008      	b.n	8006dc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006db4:	2101      	movs	r1, #1
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f960 	bl	800707c <USB_SetDevSpeed>
 8006dbc:	e003      	b.n	8006dc6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f95b 	bl	800707c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8f3 	bl	8006fb4 <USB_FlushTxFifo>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f91f 	bl	800701c <USB_FlushRxFifo>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	461a      	mov	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e043      	b.n	8006e9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e28:	d118      	bne.n	8006e5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	e013      	b.n	8006e6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	461a      	mov	r2, r3
 8006e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e008      	b.n	8006e6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3301      	adds	r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3b7      	bcc.n	8006e12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	e043      	b.n	8006f30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ebe:	d118      	bne.n	8006ef2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e013      	b.n	8006f04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e008      	b.n	8006f04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	461a      	mov	r2, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d3b7      	bcc.n	8006ea8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f043 0210 	orr.w	r2, r3, #16
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <USB_DevInit+0x2b4>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f043 0208 	orr.w	r2, r3, #8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d105      	bne.n	8006f9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <USB_DevInit+0x2b8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fa8:	b004      	add	sp, #16
 8006faa:	4770      	bx	lr
 8006fac:	803c3800 	.word	0x803c3800
 8006fb0:	40000004 	.word	0x40000004

08006fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a13      	ldr	r2, [pc, #76]	; (8007018 <USB_FlushTxFifo+0x64>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d901      	bls.n	8006fd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e01b      	b.n	800700c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	daf2      	bge.n	8006fc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	019b      	lsls	r3, r3, #6
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a08      	ldr	r2, [pc, #32]	; (8007018 <USB_FlushTxFifo+0x64>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e006      	b.n	800700c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b20      	cmp	r3, #32
 8007008:	d0f0      	beq.n	8006fec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	00030d40 	.word	0x00030d40

0800701c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a11      	ldr	r2, [pc, #68]	; (8007078 <USB_FlushRxFifo+0x5c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e018      	b.n	800706c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	daf2      	bge.n	8007028 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2210      	movs	r2, #16
 800704a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a08      	ldr	r2, [pc, #32]	; (8007078 <USB_FlushRxFifo+0x5c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e006      	b.n	800706c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b10      	cmp	r3, #16
 8007068:	d0f0      	beq.n	800704c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	00030d40 	.word	0x00030d40

0800707c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0306 	and.w	r3, r3, #6
 80070c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
 80070d2:	e00a      	b.n	80070ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d002      	beq.n	80070e0 <USB_GetDevSpeed+0x32>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b06      	cmp	r3, #6
 80070de:	d102      	bne.n	80070e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070e0:	2302      	movs	r3, #2
 80070e2:	75fb      	strb	r3, [r7, #23]
 80070e4:	e001      	b.n	80070ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070e6:	230f      	movs	r3, #15
 80070e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d139      	bne.n	8007188 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	69da      	ldr	r2, [r3, #28]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	b29b      	uxth	r3, r3
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007132:	4313      	orrs	r3, r2
 8007134:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d153      	bne.n	80071f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007168:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	059b      	lsls	r3, r3, #22
 800716e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007170:	431a      	orrs	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	0159      	lsls	r1, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	440b      	add	r3, r1
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	4619      	mov	r1, r3
 8007180:	4b20      	ldr	r3, [pc, #128]	; (8007204 <USB_ActivateEndpoint+0x10c>)
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]
 8007186:	e035      	b.n	80071f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a6:	4313      	orrs	r3, r2
 80071a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d119      	bne.n	80071f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071dc:	430b      	orrs	r3, r1
 80071de:	431a      	orrs	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	0159      	lsls	r1, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	440b      	add	r3, r1
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	4619      	mov	r1, r3
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <USB_ActivateEndpoint+0x10c>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	10008000 	.word	0x10008000

08007208 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d161      	bne.n	80072e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800723a:	d11f      	bne.n	800727c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800725a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800727a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	b29b      	uxth	r3, r3
 8007294:	43db      	mvns	r3, r3
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800729c:	4013      	ands	r3, r2
 800729e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c0:	4013      	ands	r3, r2
 80072c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	0159      	lsls	r1, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	440b      	add	r3, r1
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	4619      	mov	r1, r3
 80072e0:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <USB_DeactivateEndpoint+0x1b0>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]
 80072e6:	e060      	b.n	80073aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072fe:	d11f      	bne.n	8007340 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800731a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800731e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f303 	lsl.w	r3, r1, r3
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	43db      	mvns	r3, r3
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007360:	4013      	ands	r3, r2
 8007362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	2101      	movs	r1, #1
 8007376:	fa01 f303 	lsl.w	r3, r1, r3
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	43db      	mvns	r3, r3
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007384:	4013      	ands	r3, r2
 8007386:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0159      	lsls	r1, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	440b      	add	r3, r1
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	4619      	mov	r1, r3
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <USB_DeactivateEndpoint+0x1b4>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	ec337800 	.word	0xec337800
 80073bc:	eff37800 	.word	0xeff37800

080073c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	; 0x28
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f040 8163 	bne.w	80076a8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d132      	bne.n	8007450 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	0159      	lsls	r1, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	440b      	add	r3, r1
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	4619      	mov	r1, r3
 8007406:	4ba5      	ldr	r3, [pc, #660]	; (800769c <USB_EPStartXfer+0x2dc>)
 8007408:	4013      	ands	r3, r2
 800740a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	691a      	ldr	r2, [r3, #16]
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	0159      	lsls	r1, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	440b      	add	r3, r1
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	4619      	mov	r1, r3
 8007448:	4b95      	ldr	r3, [pc, #596]	; (80076a0 <USB_EPStartXfer+0x2e0>)
 800744a:	4013      	ands	r3, r2
 800744c:	610b      	str	r3, [r1, #16]
 800744e:	e074      	b.n	800753a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	0159      	lsls	r1, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	440b      	add	r3, r1
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	4619      	mov	r1, r3
 800746c:	4b8c      	ldr	r3, [pc, #560]	; (80076a0 <USB_EPStartXfer+0x2e0>)
 800746e:	4013      	ands	r3, r2
 8007470:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	0159      	lsls	r1, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	440b      	add	r3, r1
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	4619      	mov	r1, r3
 800748e:	4b83      	ldr	r3, [pc, #524]	; (800769c <USB_EPStartXfer+0x2dc>)
 8007490:	4013      	ands	r3, r2
 8007492:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6999      	ldr	r1, [r3, #24]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	440b      	add	r3, r1
 80074ac:	1e59      	subs	r1, r3, #1
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074b8:	4b7a      	ldr	r3, [pc, #488]	; (80076a4 <USB_EPStartXfer+0x2e4>)
 80074ba:	400b      	ands	r3, r1
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	0148      	lsls	r0, r1, #5
 80074c0:	69f9      	ldr	r1, [r7, #28]
 80074c2:	4401      	add	r1, r0
 80074c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074c8:	4313      	orrs	r3, r2
 80074ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e2:	69b9      	ldr	r1, [r7, #24]
 80074e4:	0148      	lsls	r0, r1, #5
 80074e6:	69f9      	ldr	r1, [r7, #28]
 80074e8:	4401      	add	r1, r0
 80074ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074ee:	4313      	orrs	r3, r2
 80074f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d11f      	bne.n	800753a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007518:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007538:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d14b      	bne.n	80075d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	461a      	mov	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d128      	bne.n	80075b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d110      	bne.n	8007596 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e00f      	b.n	80075b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e137      	b.n	8007848 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d015      	beq.n	800762c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 811f 	beq.w	8007848 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	2101      	movs	r1, #1
 800761c:	fa01 f303 	lsl.w	r3, r1, r3
 8007620:	69f9      	ldr	r1, [r7, #28]
 8007622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007626:	4313      	orrs	r3, r2
 8007628:	634b      	str	r3, [r1, #52]	; 0x34
 800762a:	e10d      	b.n	8007848 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007638:	2b00      	cmp	r3, #0
 800763a:	d110      	bne.n	800765e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	e00f      	b.n	800767e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6919      	ldr	r1, [r3, #16]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	b298      	uxth	r0, r3
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 faea 	bl	8007c6c <USB_WritePacket>
 8007698:	e0d6      	b.n	8007848 <USB_EPStartXfer+0x488>
 800769a:	bf00      	nop
 800769c:	e007ffff 	.word	0xe007ffff
 80076a0:	fff80000 	.word	0xfff80000
 80076a4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	0159      	lsls	r1, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	440b      	add	r3, r1
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	4619      	mov	r1, r3
 80076c4:	4b63      	ldr	r3, [pc, #396]	; (8007854 <USB_EPStartXfer+0x494>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	0159      	lsls	r1, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	440b      	add	r3, r1
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	4619      	mov	r1, r3
 80076e6:	4b5c      	ldr	r3, [pc, #368]	; (8007858 <USB_EPStartXfer+0x498>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d123      	bne.n	800773c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	0148      	lsls	r0, r1, #5
 800770e:	69f9      	ldr	r1, [r7, #28]
 8007710:	4401      	add	r1, r0
 8007712:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007716:	4313      	orrs	r3, r2
 8007718:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007738:	6113      	str	r3, [r2, #16]
 800773a:	e037      	b.n	80077ac <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	699a      	ldr	r2, [r3, #24]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4413      	add	r3, r2
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	8afa      	ldrh	r2, [r7, #22]
 8007758:	fb03 f202 	mul.w	r2, r3, r2
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	8afb      	ldrh	r3, [r7, #22]
 8007770:	04d9      	lsls	r1, r3, #19
 8007772:	4b3a      	ldr	r3, [pc, #232]	; (800785c <USB_EPStartXfer+0x49c>)
 8007774:	400b      	ands	r3, r1
 8007776:	69b9      	ldr	r1, [r7, #24]
 8007778:	0148      	lsls	r0, r1, #5
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	4401      	add	r1, r0
 800777e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007782:	4313      	orrs	r3, r2
 8007784:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800779c:	69b9      	ldr	r1, [r7, #24]
 800779e:	0148      	lsls	r0, r1, #5
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	4401      	add	r1, r0
 80077a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077a8:	4313      	orrs	r3, r2
 80077aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d10d      	bne.n	80077ce <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d009      	beq.n	80077ce <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6919      	ldr	r1, [r3, #16]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	460a      	mov	r2, r1
 80077cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	791b      	ldrb	r3, [r3, #4]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d128      	bne.n	8007828 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d110      	bne.n	8007808 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	e00f      	b.n	8007828 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007826:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007842:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3720      	adds	r7, #32
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	fff80000 	.word	0xfff80000
 8007858:	e007ffff 	.word	0xe007ffff
 800785c:	1ff80000 	.word	0x1ff80000

08007860 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	f040 80ce 	bne.w	8007a1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	0159      	lsls	r1, r3, #5
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	440b      	add	r3, r1
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	4619      	mov	r1, r3
 80078a6:	4b9a      	ldr	r3, [pc, #616]	; (8007b10 <USB_EP0StartXfer+0x2b0>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	0159      	lsls	r1, r3, #5
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	440b      	add	r3, r1
 80078e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e6:	4619      	mov	r1, r3
 80078e8:	4b8a      	ldr	r3, [pc, #552]	; (8007b14 <USB_EP0StartXfer+0x2b4>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	610b      	str	r3, [r1, #16]
 80078ee:	e04e      	b.n	800798e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	0159      	lsls	r1, r3, #5
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	440b      	add	r3, r1
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	4619      	mov	r1, r3
 800790c:	4b81      	ldr	r3, [pc, #516]	; (8007b14 <USB_EP0StartXfer+0x2b4>)
 800790e:	4013      	ands	r3, r2
 8007910:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	0159      	lsls	r1, r3, #5
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	440b      	add	r3, r1
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	4619      	mov	r1, r3
 800792e:	4b78      	ldr	r3, [pc, #480]	; (8007b10 <USB_EP0StartXfer+0x2b0>)
 8007930:	4013      	ands	r3, r2
 8007932:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	d903      	bls.n	8007948 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797e:	6939      	ldr	r1, [r7, #16]
 8007980:	0148      	lsls	r0, r1, #5
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	4401      	add	r1, r0
 8007986:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d11e      	bne.n	80079d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	461a      	mov	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	e097      	b.n	8007b02 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8083 	beq.w	8007b02 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a12:	6979      	ldr	r1, [r7, #20]
 8007a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	634b      	str	r3, [r1, #52]	; 0x34
 8007a1c:	e071      	b.n	8007b02 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	0159      	lsls	r1, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	440b      	add	r3, r1
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4b36      	ldr	r3, [pc, #216]	; (8007b14 <USB_EP0StartXfer+0x2b4>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	0159      	lsls	r1, r3, #5
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	440b      	add	r3, r1
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4b2c      	ldr	r3, [pc, #176]	; (8007b10 <USB_EP0StartXfer+0x2b0>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	0148      	lsls	r0, r1, #5
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	4401      	add	r1, r0
 8007ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007abc:	4313      	orrs	r3, r2
 8007abe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10d      	bne.n	8007ae2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6919      	ldr	r1, [r3, #16]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ade:	460a      	mov	r2, r1
 8007ae0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	e007ffff 	.word	0xe007ffff
 8007b14:	fff80000 	.word	0xfff80000

08007b18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d14a      	bne.n	8007bcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b4e:	f040 8086 	bne.w	8007c5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	7812      	ldrb	r2, [r2, #0]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d902      	bls.n	8007bb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	75fb      	strb	r3, [r7, #23]
          break;
 8007bae:	e056      	b.n	8007c5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc8:	d0e7      	beq.n	8007b9a <USB_EPStopXfer+0x82>
 8007bca:	e048      	b.n	8007c5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be4:	d13b      	bne.n	8007c5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d902      	bls.n	8007c44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
          break;
 8007c42:	e00c      	b.n	8007c5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c5c:	d0e7      	beq.n	8007c2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	; 0x24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	71fb      	strb	r3, [r7, #7]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d123      	bne.n	8007cda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c92:	88bb      	ldrh	r3, [r7, #4]
 8007c94:	3303      	adds	r3, #3
 8007c96:	089b      	lsrs	r3, r3, #2
 8007c98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e018      	b.n	8007cd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	031a      	lsls	r2, r3, #12
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cac:	461a      	mov	r2, r3
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61bb      	str	r3, [r7, #24]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d3e2      	bcc.n	8007ca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3724      	adds	r7, #36	; 0x24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b08b      	sub	sp, #44	; 0x2c
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	089b      	lsrs	r3, r3, #2
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	623b      	str	r3, [r7, #32]
 8007d12:	e014      	b.n	8007d3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	3301      	adds	r3, #1
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	3301      	adds	r3, #1
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	3301      	adds	r3, #1
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	623b      	str	r3, [r7, #32]
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d3e6      	bcc.n	8007d14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d46:	8bfb      	ldrh	r3, [r7, #30]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01e      	beq.n	8007d8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d56:	461a      	mov	r2, r3
 8007d58:	f107 0310 	add.w	r3, r7, #16
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	701a      	strb	r2, [r3, #0]
      i++;
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	3301      	adds	r3, #1
 8007d76:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d7e:	8bfb      	ldrh	r3, [r7, #30]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d84:	8bfb      	ldrh	r3, [r7, #30]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1ea      	bne.n	8007d60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	372c      	adds	r7, #44	; 0x2c
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d12c      	bne.n	8007e0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	db12      	blt.n	8007dec <USB_EPSetStall+0x54>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00f      	beq.n	8007dec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e02b      	b.n	8007e66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	db12      	blt.n	8007e46 <USB_EPSetStall+0xae>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00f      	beq.n	8007e46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d128      	bne.n	8007ee2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d003      	beq.n	8007ec0 <USB_EPClearStall+0x4c>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d138      	bne.n	8007f32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	e027      	b.n	8007f32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d003      	beq.n	8007f12 <USB_EPClearStall+0x9e>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d10f      	bne.n	8007f32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f74:	68f9      	ldr	r1, [r7, #12]
 8007f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fba:	f023 0302 	bic.w	r3, r3, #2
 8007fbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffc:	f043 0302 	orr.w	r3, r3, #2
 8008000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4013      	ands	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008028:	68fb      	ldr	r3, [r7, #12]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	4013      	ands	r3, r2
 8008058:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	0c1b      	lsrs	r3, r3, #16
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800806a:	b480      	push	{r7}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	b29b      	uxth	r3, r3
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	4013      	ands	r3, r2
 80080ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080cc:	68bb      	ldr	r3, [r7, #8]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	fa22 f303 	lsr.w	r3, r2, r3
 800810a:	01db      	lsls	r3, r3, #7
 800810c:	b2db      	uxtb	r3, r3
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4013      	ands	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008128:	68bb      	ldr	r3, [r7, #8]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f003 0301 	and.w	r3, r3, #1
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	4619      	mov	r1, r3
 8008170:	4b09      	ldr	r3, [pc, #36]	; (8008198 <USB_ActivateSetup+0x44>)
 8008172:	4013      	ands	r3, r2
 8008174:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	fffff800 	.word	0xfffff800

0800819c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	460b      	mov	r3, r1
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	333c      	adds	r3, #60	; 0x3c
 80081b2:	3304      	adds	r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4a26      	ldr	r2, [pc, #152]	; (8008254 <USB_EP0_OutStart+0xb8>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d90a      	bls.n	80081d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d0:	d101      	bne.n	80081d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e037      	b.n	8008246 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	461a      	mov	r2, r3
 80081de:	2300      	movs	r3, #0
 80081e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008204:	f043 0318 	orr.w	r3, r3, #24
 8008208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008218:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800821c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10f      	bne.n	8008244 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	461a      	mov	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	4f54300a 	.word	0x4f54300a

08008258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <USB_CoreReset+0x64>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d901      	bls.n	8008276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e01b      	b.n	80082ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	daf2      	bge.n	8008264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f043 0201 	orr.w	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a09      	ldr	r2, [pc, #36]	; (80082bc <USB_CoreReset+0x64>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d901      	bls.n	80082a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e006      	b.n	80082ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d0f0      	beq.n	800828e <USB_CoreReset+0x36>

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	00030d40 	.word	0x00030d40

080082c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082d0:	f005 fb28 	bl	800d924 <malloc>
 80082d4:	4603      	mov	r3, r0
 80082d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	32b0      	adds	r2, #176	; 0xb0
 80082e8:	2100      	movs	r1, #0
 80082ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082ee:	2302      	movs	r3, #2
 80082f0:	e0d4      	b.n	800849c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082f2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f005 fb31 	bl	800d960 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32b0      	adds	r2, #176	; 0xb0
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	32b0      	adds	r2, #176	; 0xb0
 8008318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d138      	bne.n	800839c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800832a:	4b5e      	ldr	r3, [pc, #376]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800832c:	7819      	ldrb	r1, [r3, #0]
 800832e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008332:	2202      	movs	r2, #2
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f005 f926 	bl	800d586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800833a:	4b5a      	ldr	r3, [pc, #360]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f003 020f 	and.w	r2, r3, #15
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	2201      	movs	r2, #1
 8008352:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008354:	4b54      	ldr	r3, [pc, #336]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008356:	7819      	ldrb	r1, [r3, #0]
 8008358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800835c:	2202      	movs	r2, #2
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f005 f911 	bl	800d586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008364:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 020f 	and.w	r2, r3, #15
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800837c:	2201      	movs	r2, #1
 800837e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008380:	4b4a      	ldr	r3, [pc, #296]	; (80084ac <USBD_CDC_Init+0x1ec>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3326      	adds	r3, #38	; 0x26
 8008396:	2210      	movs	r2, #16
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	e035      	b.n	8008408 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800839c:	4b41      	ldr	r3, [pc, #260]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800839e:	7819      	ldrb	r1, [r3, #0]
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	2202      	movs	r2, #2
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f005 f8ee 	bl	800d586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083aa:	4b3e      	ldr	r3, [pc, #248]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	3324      	adds	r3, #36	; 0x24
 80083c0:	2201      	movs	r2, #1
 80083c2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083c4:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	2202      	movs	r2, #2
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f005 f8da 	bl	800d586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083d2:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	f003 020f 	and.w	r2, r3, #15
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083ea:	2201      	movs	r2, #1
 80083ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083ee:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <USBD_CDC_Init+0x1ec>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 020f 	and.w	r2, r3, #15
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	3326      	adds	r3, #38	; 0x26
 8008404:	2210      	movs	r2, #16
 8008406:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008408:	4b28      	ldr	r3, [pc, #160]	; (80084ac <USBD_CDC_Init+0x1ec>)
 800840a:	7819      	ldrb	r1, [r3, #0]
 800840c:	2308      	movs	r3, #8
 800840e:	2203      	movs	r2, #3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f005 f8b8 	bl	800d586 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008416:	4b25      	ldr	r3, [pc, #148]	; (80084ac <USBD_CDC_Init+0x1ec>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	3324      	adds	r3, #36	; 0x24
 800842c:	2201      	movs	r2, #1
 800842e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	33b0      	adds	r3, #176	; 0xb0
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008466:	2302      	movs	r3, #2
 8008468:	e018      	b.n	800849c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008474:	7819      	ldrb	r1, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800847c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f005 f96f 	bl	800d764 <USBD_LL_PrepareReceive>
 8008486:	e008      	b.n	800849a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 800848a:	7819      	ldrb	r1, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008492:	2340      	movs	r3, #64	; 0x40
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f005 f965 	bl	800d764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000093 	.word	0x20000093
 80084a8:	20000094 	.word	0x20000094
 80084ac:	20000095 	.word	0x20000095

080084b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084bc:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f005 f885 	bl	800d5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084c8:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084e2:	4b32      	ldr	r3, [pc, #200]	; (80085ac <USBD_CDC_DeInit+0xfc>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f005 f872 	bl	800d5d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <USBD_CDC_DeInit+0xfc>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800850a:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f005 f85e 	bl	800d5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	2200      	movs	r2, #0
 800852e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008530:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3326      	adds	r3, #38	; 0x26
 8008546:	2200      	movs	r2, #0
 8008548:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	32b0      	adds	r2, #176	; 0xb0
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01f      	beq.n	800859c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	33b0      	adds	r3, #176	; 0xb0
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	32b0      	adds	r2, #176	; 0xb0
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	4618      	mov	r0, r3
 8008580:	f005 f9d8 	bl	800d934 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32b0      	adds	r2, #176	; 0xb0
 800858e:	2100      	movs	r1, #0
 8008590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000093 	.word	0x20000093
 80085ac:	20000094 	.word	0x20000094
 80085b0:	20000095 	.word	0x20000095

080085b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	32b0      	adds	r2, #176	; 0xb0
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e0bf      	b.n	8008764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d050      	beq.n	8008692 <USBD_CDC_Setup+0xde>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	f040 80af 	bne.w	8008754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d03a      	beq.n	8008674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b25b      	sxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	da1b      	bge.n	8008640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	33b0      	adds	r3, #176	; 0xb0
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800861e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	88d2      	ldrh	r2, [r2, #6]
 8008624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b07      	cmp	r3, #7
 800862c:	bf28      	it	cs
 800862e:	2307      	movcs	r3, #7
 8008630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	89fa      	ldrh	r2, [r7, #14]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fd6d 	bl	800a118 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800863e:	e090      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	785a      	ldrb	r2, [r3, #1]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b3f      	cmp	r3, #63	; 0x3f
 8008650:	d803      	bhi.n	800865a <USBD_CDC_Setup+0xa6>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	e000      	b.n	800865c <USBD_CDC_Setup+0xa8>
 800865a:	2240      	movs	r2, #64	; 0x40
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008662:	6939      	ldr	r1, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800866a:	461a      	mov	r2, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fd7f 	bl	800a170 <USBD_CtlPrepareRx>
      break;
 8008672:	e076      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	33b0      	adds	r3, #176	; 0xb0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	7850      	ldrb	r0, [r2, #1]
 800868a:	2200      	movs	r2, #0
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	4798      	blx	r3
      break;
 8008690:	e067      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b0b      	cmp	r3, #11
 8008698:	d851      	bhi.n	800873e <USBD_CDC_Setup+0x18a>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_CDC_Setup+0xec>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086d1 	.word	0x080086d1
 80086a4:	0800874d 	.word	0x0800874d
 80086a8:	0800873f 	.word	0x0800873f
 80086ac:	0800873f 	.word	0x0800873f
 80086b0:	0800873f 	.word	0x0800873f
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	0800873f 	.word	0x0800873f
 80086bc:	0800873f 	.word	0x0800873f
 80086c0:	0800873f 	.word	0x0800873f
 80086c4:	0800873f 	.word	0x0800873f
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	08008725 	.word	0x08008725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d107      	bne.n	80086ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086dc:	f107 030a 	add.w	r3, r7, #10
 80086e0:	2202      	movs	r2, #2
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fd17 	bl	800a118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ea:	e032      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fca1 	bl	800a036 <USBD_CtlError>
            ret = USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	75fb      	strb	r3, [r7, #23]
          break;
 80086f8:	e02b      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d107      	bne.n	8008716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008706:	f107 030d 	add.w	r3, r7, #13
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fd02 	bl	800a118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008714:	e01d      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fc8c 	bl	800a036 <USBD_CtlError>
            ret = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	75fb      	strb	r3, [r7, #23]
          break;
 8008722:	e016      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b03      	cmp	r3, #3
 800872e:	d00f      	beq.n	8008750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fc7f 	bl	800a036 <USBD_CtlError>
            ret = USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800873c:	e008      	b.n	8008750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fc78 	bl	800a036 <USBD_CtlError>
          ret = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e002      	b.n	8008752 <USBD_CDC_Setup+0x19e>
          break;
 800874c:	bf00      	nop
 800874e:	e008      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          break;
 8008750:	bf00      	nop
      }
      break;
 8008752:	e006      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fc6d 	bl	800a036 <USBD_CtlError>
      ret = USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	bf00      	nop
  }

  return (uint8_t)ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800877e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32b0      	adds	r2, #176	; 0xb0
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	e065      	b.n	8008862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	32b0      	adds	r2, #176	; 0xb0
 80087a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3318      	adds	r3, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02f      	beq.n	8008820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 020f 	and.w	r2, r3, #15
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	3318      	adds	r3, #24
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	f003 010f 	and.w	r1, r3, #15
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	460b      	mov	r3, r1
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4403      	add	r3, r0
 80087e8:	3348      	adds	r3, #72	; 0x48
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d112      	bne.n	8008820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3318      	adds	r3, #24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008812:	78f9      	ldrb	r1, [r7, #3]
 8008814:	2300      	movs	r3, #0
 8008816:	2200      	movs	r2, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f004 ff82 	bl	800d722 <USBD_LL_Transmit>
 800881e:	e01f      	b.n	8008860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	33b0      	adds	r3, #176	; 0xb0
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	33b0      	adds	r3, #176	; 0xb0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	32b0      	adds	r2, #176	; 0xb0
 8008880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	32b0      	adds	r2, #176	; 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	e01a      	b.n	80088d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f004 ff80 	bl	800d7a6 <USBD_LL_GetRxDataSize>
 80088a6:	4602      	mov	r2, r0
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	33b0      	adds	r3, #176	; 0xb0
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088cc:	4611      	mov	r1, r2
 80088ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	32b0      	adds	r2, #176	; 0xb0
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e025      	b.n	8008948 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	33b0      	adds	r3, #176	; 0xb0
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01a      	beq.n	8008946 <USBD_CDC_EP0_RxReady+0x6c>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008916:	2bff      	cmp	r3, #255	; 0xff
 8008918:	d015      	beq.n	8008946 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	33b0      	adds	r3, #176	; 0xb0
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800893a:	b292      	uxth	r2, r2
 800893c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008958:	2182      	movs	r1, #130	; 0x82
 800895a:	4818      	ldr	r0, [pc, #96]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800895c:	f000 fd09 	bl	8009372 <USBD_GetEpDesc>
 8008960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008962:	2101      	movs	r1, #1
 8008964:	4815      	ldr	r0, [pc, #84]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008966:	f000 fd04 	bl	8009372 <USBD_GetEpDesc>
 800896a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800896c:	2181      	movs	r1, #129	; 0x81
 800896e:	4813      	ldr	r0, [pc, #76]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008970:	f000 fcff 	bl	8009372 <USBD_GetEpDesc>
 8008974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2210      	movs	r2, #16
 8008980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2200      	movs	r2, #0
 800898c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008990:	711a      	strb	r2, [r3, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2243      	movs	r2, #67	; 0x43
 80089ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000050 	.word	0x20000050

080089c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089c8:	2182      	movs	r1, #130	; 0x82
 80089ca:	4818      	ldr	r0, [pc, #96]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089cc:	f000 fcd1 	bl	8009372 <USBD_GetEpDesc>
 80089d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089d2:	2101      	movs	r1, #1
 80089d4:	4815      	ldr	r0, [pc, #84]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d6:	f000 fccc 	bl	8009372 <USBD_GetEpDesc>
 80089da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089dc:	2181      	movs	r1, #129	; 0x81
 80089de:	4813      	ldr	r0, [pc, #76]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e0:	f000 fcc7 	bl	8009372 <USBD_GetEpDesc>
 80089e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2210      	movs	r2, #16
 80089f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2200      	movs	r2, #0
 80089fc:	711a      	strb	r2, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f042 0202 	orr.w	r2, r2, #2
 8008a04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	711a      	strb	r2, [r3, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0202 	orr.w	r2, r2, #2
 8008a18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2243      	movs	r2, #67	; 0x43
 8008a1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000050 	.word	0x20000050

08008a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a38:	2182      	movs	r1, #130	; 0x82
 8008a3a:	4818      	ldr	r0, [pc, #96]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a3c:	f000 fc99 	bl	8009372 <USBD_GetEpDesc>
 8008a40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a42:	2101      	movs	r1, #1
 8008a44:	4815      	ldr	r0, [pc, #84]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a46:	f000 fc94 	bl	8009372 <USBD_GetEpDesc>
 8008a4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a4c:	2181      	movs	r1, #129	; 0x81
 8008a4e:	4813      	ldr	r0, [pc, #76]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a50:	f000 fc8f 	bl	8009372 <USBD_GetEpDesc>
 8008a54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2210      	movs	r2, #16
 8008a60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a70:	711a      	strb	r2, [r3, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a84:	711a      	strb	r2, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2243      	movs	r2, #67	; 0x43
 8008a8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a90:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000050 	.word	0x20000050

08008aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220a      	movs	r2, #10
 8008aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	2000000c 	.word	0x2000000c

08008ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e009      	b.n	8008ae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	; 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	32b0      	adds	r2, #176	; 0xb0
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e008      	b.n	8008b2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	32b0      	adds	r2, #176	; 0xb0
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e004      	b.n	8008b66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32b0      	adds	r2, #176	; 0xb0
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32b0      	adds	r2, #176	; 0xb0
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e018      	b.n	8008bd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7c1b      	ldrb	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <USBD_CDC_ReceivePacket+0x68>)
 8008bac:	7819      	ldrb	r1, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f004 fdd3 	bl	800d764 <USBD_LL_PrepareReceive>
 8008bbe:	e008      	b.n	8008bd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <USBD_CDC_ReceivePacket+0x68>)
 8008bc2:	7819      	ldrb	r1, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bca:	2340      	movs	r3, #64	; 0x40
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f004 fdc9 	bl	800d764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000094 	.word	0x20000094

08008be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e01f      	b.n	8008c38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	79fa      	ldrb	r2, [r7, #7]
 8008c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f004 fc43 	bl	800d4b8 <USBD_LL_Init>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e025      	b.n	8008ca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	32ae      	adds	r2, #174	; 0xae
 8008c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00f      	beq.n	8008c94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32ae      	adds	r2, #174	; 0xae
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	f107 020e 	add.w	r2, r7, #14
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f004 fc4b 	bl	800d550 <USBD_LL_Start>
 8008cba:	4603      	mov	r3, r0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 f932 	bl	8009fc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d01a      	beq.n	8008db8 <USBD_LL_SetupStage+0x72>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d822      	bhi.n	8008dcc <USBD_LL_SetupStage+0x86>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <USBD_LL_SetupStage+0x4a>
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d00a      	beq.n	8008da4 <USBD_LL_SetupStage+0x5e>
 8008d8e:	e01d      	b.n	8008dcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb5f 	bl	800945c <USBD_StdDevReq>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	e020      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbc7 	bl	8009540 <USBD_StdItfReq>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	e016      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc29 	bl	8009618 <USBD_StdEPReq>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dca:	e00c      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f004 fc18 	bl	800d610 <USBD_LL_StallEP>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]
      break;
 8008de4:	bf00      	nop
  }

  return ret;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d16e      	bne.n	8008ee6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	f040 8098 	bne.w	8008f4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d913      	bls.n	8008e50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	bf28      	it	cs
 8008e42:	4613      	movcs	r3, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 f9ae 	bl	800a1aa <USBD_CtlContinueRx>
 8008e4e:	e07d      	b.n	8008f4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d014      	beq.n	8008e88 <USBD_LL_DataOutStage+0x98>
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d81d      	bhi.n	8008e9e <USBD_LL_DataOutStage+0xae>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <USBD_LL_DataOutStage+0x7c>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d003      	beq.n	8008e72 <USBD_LL_DataOutStage+0x82>
 8008e6a:	e018      	b.n	8008e9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e70:	e018      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fa5e 	bl	800933e <USBD_CoreFindIF>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75bb      	strb	r3, [r7, #22]
            break;
 8008e86:	e00d      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 fa60 	bl	8009358 <USBD_CoreFindEP>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e9c:	e002      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d119      	bne.n	8008ede <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d113      	bne.n	8008ede <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eb6:	7dba      	ldrb	r2, [r7, #22]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	32ae      	adds	r2, #174	; 0xae
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ec6:	7dba      	ldrb	r2, [r7, #22]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ece:	7dba      	ldrb	r2, [r7, #22]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	32ae      	adds	r2, #174	; 0xae
 8008ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f001 f974 	bl	800a1cc <USBD_CtlSendStatus>
 8008ee4:	e032      	b.n	8008f4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ee6:	7afb      	ldrb	r3, [r7, #11]
 8008ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4619      	mov	r1, r3
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fa31 	bl	8009358 <USBD_CoreFindEP>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008efa:	7dbb      	ldrb	r3, [r7, #22]
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d025      	beq.n	8008f4c <USBD_LL_DataOutStage+0x15c>
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d122      	bne.n	8008f4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d117      	bne.n	8008f42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f12:	7dba      	ldrb	r2, [r7, #22]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	32ae      	adds	r2, #174	; 0xae
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00f      	beq.n	8008f42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f22:	7dba      	ldrb	r2, [r7, #22]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f2a:	7dba      	ldrb	r2, [r7, #22]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	32ae      	adds	r2, #174	; 0xae
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	e000      	b.n	8008f4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d16f      	bne.n	800904a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3314      	adds	r3, #20
 8008f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d15a      	bne.n	8009030 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d914      	bls.n	8008fb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	689a      	ldr	r2, [r3, #8]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 f8d6 	bl	800a14e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f004 fbdb 	bl	800d764 <USBD_LL_PrepareReceive>
 8008fae:	e03f      	b.n	8009030 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d11c      	bne.n	8008ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d316      	bcc.n	8008ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d20f      	bcs.n	8008ff6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f001 f8b7 	bl	800a14e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f004 fbb8 	bl	800d764 <USBD_LL_PrepareReceive>
 8008ff4:	e01c      	b.n	8009030 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d10f      	bne.n	8009022 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009022:	2180      	movs	r1, #128	; 0x80
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f004 faf3 	bl	800d610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f001 f8e1 	bl	800a1f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d03a      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fe42 	bl	8008cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009048:	e032      	b.n	80090b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009050:	b2db      	uxtb	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f97f 	bl	8009358 <USBD_CoreFindEP>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2bff      	cmp	r3, #255	; 0xff
 8009062:	d025      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d122      	bne.n	80090b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b03      	cmp	r3, #3
 8009074:	d11c      	bne.n	80090b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009076:	7dfa      	ldrb	r2, [r7, #23]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	32ae      	adds	r2, #174	; 0xae
 800907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d014      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009086:	7dfa      	ldrb	r2, [r7, #23]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800908e:	7dfa      	ldrb	r2, [r7, #23]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	32ae      	adds	r2, #174	; 0xae
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	7afa      	ldrb	r2, [r7, #11]
 800909c:	4611      	mov	r1, r2
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090a6:	7dbb      	ldrb	r3, [r7, #22]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
 80090ae:	e000      	b.n	80090b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d014      	beq.n	8009120 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6852      	ldr	r2, [r2, #4]
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	4611      	mov	r1, r2
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800911c:	2303      	movs	r3, #3
 800911e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009120:	2340      	movs	r3, #64	; 0x40
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f004 fa2d 	bl	800d586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2240      	movs	r2, #64	; 0x40
 8009138:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	2200      	movs	r2, #0
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f004 fa1f 	bl	800d586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2240      	movs	r2, #64	; 0x40
 8009152:	621a      	str	r2, [r3, #32]

  return ret;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	78fa      	ldrb	r2, [r7, #3]
 800916e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2204      	movs	r2, #4
 8009198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d106      	bne.n	80091cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d110      	bne.n	8009210 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32ae      	adds	r2, #174	; 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	e01c      	b.n	8009276 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d115      	bne.n	8009274 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	; 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32ae      	adds	r2, #174	; 0xae
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	4611      	mov	r1, r2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	; 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e01c      	b.n	80092da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d115      	bne.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32ae      	adds	r2, #174	; 0xae
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	32ae      	adds	r2, #174	; 0xae
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00e      	beq.n	8009334 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6852      	ldr	r2, [r2, #4]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	4611      	mov	r1, r2
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009330:	2303      	movs	r3, #3
 8009332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800934a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009364:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b086      	sub	sp, #24
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	429a      	cmp	r2, r3
 8009398:	d920      	bls.n	80093dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093a2:	e013      	b.n	80093cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093a4:	f107 030a 	add.w	r3, r7, #10
 80093a8:	4619      	mov	r1, r3
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f000 f81b 	bl	80093e6 <USBD_GetNextDesc>
 80093b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	2b05      	cmp	r3, #5
 80093b8:	d108      	bne.n	80093cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	789b      	ldrb	r3, [r3, #2]
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d008      	beq.n	80093da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	885b      	ldrh	r3, [r3, #2]
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	897b      	ldrh	r3, [r7, #10]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d8e5      	bhi.n	80093a4 <USBD_GetEpDesc+0x32>
 80093d8:	e000      	b.n	80093dc <USBD_GetEpDesc+0x6a>
          break;
 80093da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093dc:	693b      	ldr	r3, [r7, #16]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	881a      	ldrh	r2, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4413      	add	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009412:	68fb      	ldr	r3, [r7, #12]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	3301      	adds	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800943e:	8a3b      	ldrh	r3, [r7, #16]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b21a      	sxth	r2, r3
 8009444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009448:	4313      	orrs	r3, r2
 800944a:	b21b      	sxth	r3, r3
 800944c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800944e:	89fb      	ldrh	r3, [r7, #14]
}
 8009450:	4618      	mov	r0, r3
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d005      	beq.n	8009482 <USBD_StdDevReq+0x26>
 8009476:	2b40      	cmp	r3, #64	; 0x40
 8009478:	d857      	bhi.n	800952a <USBD_StdDevReq+0xce>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00f      	beq.n	800949e <USBD_StdDevReq+0x42>
 800947e:	2b20      	cmp	r3, #32
 8009480:	d153      	bne.n	800952a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	32ae      	adds	r2, #174	; 0xae
 800948c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
      break;
 800949c:	e04a      	b.n	8009534 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	d83b      	bhi.n	800951e <USBD_StdDevReq+0xc2>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBD_StdDevReq+0x50>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	08009501 	.word	0x08009501
 80094b0:	08009515 	.word	0x08009515
 80094b4:	0800951f 	.word	0x0800951f
 80094b8:	0800950b 	.word	0x0800950b
 80094bc:	0800951f 	.word	0x0800951f
 80094c0:	080094df 	.word	0x080094df
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	0800951f 	.word	0x0800951f
 80094cc:	080094f7 	.word	0x080094f7
 80094d0:	080094e9 	.word	0x080094e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa3c 	bl	8009954 <USBD_GetDescriptor>
          break;
 80094dc:	e024      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fbcb 	bl	8009c7c <USBD_SetAddress>
          break;
 80094e6:	e01f      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fc0a 	bl	8009d04 <USBD_SetConfig>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
          break;
 80094f4:	e018      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fcad 	bl	8009e58 <USBD_GetConfig>
          break;
 80094fe:	e013      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fcde 	bl	8009ec4 <USBD_GetStatus>
          break;
 8009508:	e00e      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fd0d 	bl	8009f2c <USBD_SetFeature>
          break;
 8009512:	e009      	b.n	8009528 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fd31 	bl	8009f7e <USBD_ClrFeature>
          break;
 800951c:	e004      	b.n	8009528 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fd88 	bl	800a036 <USBD_CtlError>
          break;
 8009526:	bf00      	nop
      }
      break;
 8009528:	e004      	b.n	8009534 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fd82 	bl	800a036 <USBD_CtlError>
      break;
 8009532:	bf00      	nop
  }

  return ret;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop

08009540 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009556:	2b40      	cmp	r3, #64	; 0x40
 8009558:	d005      	beq.n	8009566 <USBD_StdItfReq+0x26>
 800955a:	2b40      	cmp	r3, #64	; 0x40
 800955c:	d852      	bhi.n	8009604 <USBD_StdItfReq+0xc4>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <USBD_StdItfReq+0x26>
 8009562:	2b20      	cmp	r3, #32
 8009564:	d14e      	bne.n	8009604 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b02      	cmp	r3, #2
 8009572:	d840      	bhi.n	80095f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	889b      	ldrh	r3, [r3, #4]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b01      	cmp	r3, #1
 800957c:	d836      	bhi.n	80095ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	889b      	ldrh	r3, [r3, #4]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fed9 	bl	800933e <USBD_CoreFindIF>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2bff      	cmp	r3, #255	; 0xff
 8009594:	d01d      	beq.n	80095d2 <USBD_StdItfReq+0x92>
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d11a      	bne.n	80095d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800959c:	7bba      	ldrb	r2, [r7, #14]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32ae      	adds	r2, #174	; 0xae
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00f      	beq.n	80095cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095ac:	7bba      	ldrb	r2, [r7, #14]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095b4:	7bba      	ldrb	r2, [r7, #14]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	; 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095ca:	e004      	b.n	80095d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095d0:	e001      	b.n	80095d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095d2:	2303      	movs	r3, #3
 80095d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	88db      	ldrh	r3, [r3, #6]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d110      	bne.n	8009600 <USBD_StdItfReq+0xc0>
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10d      	bne.n	8009600 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fdf1 	bl	800a1cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ea:	e009      	b.n	8009600 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fd21 	bl	800a036 <USBD_CtlError>
          break;
 80095f4:	e004      	b.n	8009600 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fd1c 	bl	800a036 <USBD_CtlError>
          break;
 80095fe:	e000      	b.n	8009602 <USBD_StdItfReq+0xc2>
          break;
 8009600:	bf00      	nop
      }
      break;
 8009602:	e004      	b.n	800960e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fd15 	bl	800a036 <USBD_CtlError>
      break;
 800960c:	bf00      	nop
  }

  return ret;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d007      	beq.n	8009648 <USBD_StdEPReq+0x30>
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	f200 817f 	bhi.w	800993c <USBD_StdEPReq+0x324>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d02a      	beq.n	8009698 <USBD_StdEPReq+0x80>
 8009642:	2b20      	cmp	r3, #32
 8009644:	f040 817a 	bne.w	800993c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fe83 	bl	8009358 <USBD_CoreFindEP>
 8009652:	4603      	mov	r3, r0
 8009654:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009656:	7b7b      	ldrb	r3, [r7, #13]
 8009658:	2bff      	cmp	r3, #255	; 0xff
 800965a:	f000 8174 	beq.w	8009946 <USBD_StdEPReq+0x32e>
 800965e:	7b7b      	ldrb	r3, [r7, #13]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f040 8170 	bne.w	8009946 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009666:	7b7a      	ldrb	r2, [r7, #13]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800966e:	7b7a      	ldrb	r2, [r7, #13]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32ae      	adds	r2, #174	; 0xae
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 8163 	beq.w	8009946 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009680:	7b7a      	ldrb	r2, [r7, #13]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32ae      	adds	r2, #174	; 0xae
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
 8009692:	4603      	mov	r3, r0
 8009694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009696:	e156      	b.n	8009946 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b03      	cmp	r3, #3
 800969e:	d008      	beq.n	80096b2 <USBD_StdEPReq+0x9a>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	f300 8145 	bgt.w	8009930 <USBD_StdEPReq+0x318>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 809b 	beq.w	80097e2 <USBD_StdEPReq+0x1ca>
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d03c      	beq.n	800972a <USBD_StdEPReq+0x112>
 80096b0:	e13e      	b.n	8009930 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d002      	beq.n	80096c4 <USBD_StdEPReq+0xac>
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d016      	beq.n	80096f0 <USBD_StdEPReq+0xd8>
 80096c2:	e02c      	b.n	800971e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00d      	beq.n	80096e6 <USBD_StdEPReq+0xce>
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b80      	cmp	r3, #128	; 0x80
 80096ce:	d00a      	beq.n	80096e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f003 ff9b 	bl	800d610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096da:	2180      	movs	r1, #128	; 0x80
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f003 ff97 	bl	800d610 <USBD_LL_StallEP>
 80096e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096e4:	e020      	b.n	8009728 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fca4 	bl	800a036 <USBD_CtlError>
              break;
 80096ee:	e01b      	b.n	8009728 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	885b      	ldrh	r3, [r3, #2]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10e      	bne.n	8009716 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <USBD_StdEPReq+0xfe>
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b80      	cmp	r3, #128	; 0x80
 8009702:	d008      	beq.n	8009716 <USBD_StdEPReq+0xfe>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	88db      	ldrh	r3, [r3, #6]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f003 ff7d 	bl	800d610 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fd58 	bl	800a1cc <USBD_CtlSendStatus>

              break;
 800971c:	e004      	b.n	8009728 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc88 	bl	800a036 <USBD_CtlError>
              break;
 8009726:	bf00      	nop
          }
          break;
 8009728:	e107      	b.n	800993a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d002      	beq.n	800973c <USBD_StdEPReq+0x124>
 8009736:	2b03      	cmp	r3, #3
 8009738:	d016      	beq.n	8009768 <USBD_StdEPReq+0x150>
 800973a:	e04b      	b.n	80097d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00d      	beq.n	800975e <USBD_StdEPReq+0x146>
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b80      	cmp	r3, #128	; 0x80
 8009746:	d00a      	beq.n	800975e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f003 ff5f 	bl	800d610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009752:	2180      	movs	r1, #128	; 0x80
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f003 ff5b 	bl	800d610 <USBD_LL_StallEP>
 800975a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800975c:	e040      	b.n	80097e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fc68 	bl	800a036 <USBD_CtlError>
              break;
 8009766:	e03b      	b.n	80097e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	885b      	ldrh	r3, [r3, #2]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d136      	bne.n	80097de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f003 ff65 	bl	800d64e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fd21 	bl	800a1cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fde2 	bl	8009358 <USBD_CoreFindEP>
 8009794:	4603      	mov	r3, r0
 8009796:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009798:	7b7b      	ldrb	r3, [r7, #13]
 800979a:	2bff      	cmp	r3, #255	; 0xff
 800979c:	d01f      	beq.n	80097de <USBD_StdEPReq+0x1c6>
 800979e:	7b7b      	ldrb	r3, [r7, #13]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11c      	bne.n	80097de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097a4:	7b7a      	ldrb	r2, [r7, #13]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097ac:	7b7a      	ldrb	r2, [r7, #13]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	32ae      	adds	r2, #174	; 0xae
 80097b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d010      	beq.n	80097de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097bc:	7b7a      	ldrb	r2, [r7, #13]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	32ae      	adds	r2, #174	; 0xae
 80097c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097d2:	e004      	b.n	80097de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fc2d 	bl	800a036 <USBD_CtlError>
              break;
 80097dc:	e000      	b.n	80097e0 <USBD_StdEPReq+0x1c8>
              break;
 80097de:	bf00      	nop
          }
          break;
 80097e0:	e0ab      	b.n	800993a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d002      	beq.n	80097f4 <USBD_StdEPReq+0x1dc>
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d032      	beq.n	8009858 <USBD_StdEPReq+0x240>
 80097f2:	e097      	b.n	8009924 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <USBD_StdEPReq+0x1f2>
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b80      	cmp	r3, #128	; 0x80
 80097fe:	d004      	beq.n	800980a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc17 	bl	800a036 <USBD_CtlError>
                break;
 8009808:	e091      	b.n	800992e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800980a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980e:	2b00      	cmp	r3, #0
 8009810:	da0b      	bge.n	800982a <USBD_StdEPReq+0x212>
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	3310      	adds	r3, #16
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	3304      	adds	r3, #4
 8009828:	e00b      	b.n	8009842 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	3304      	adds	r3, #4
 8009842:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2202      	movs	r2, #2
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc61 	bl	800a118 <USBD_CtlSendData>
              break;
 8009856:	e06a      	b.n	800992e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800985c:	2b00      	cmp	r3, #0
 800985e:	da11      	bge.n	8009884 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	f003 020f 	and.w	r2, r3, #15
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	3324      	adds	r3, #36	; 0x24
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d117      	bne.n	80098aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fbda 	bl	800a036 <USBD_CtlError>
                  break;
 8009882:	e054      	b.n	800992e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	f003 020f 	and.w	r2, r3, #15
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fbc7 	bl	800a036 <USBD_CtlError>
                  break;
 80098a8:	e041      	b.n	800992e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da0b      	bge.n	80098ca <USBD_StdEPReq+0x2b2>
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	3310      	adds	r3, #16
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	3304      	adds	r3, #4
 80098c8:	e00b      	b.n	80098e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	3304      	adds	r3, #4
 80098e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <USBD_StdEPReq+0x2d8>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b80      	cmp	r3, #128	; 0x80
 80098ee:	d103      	bne.n	80098f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	e00e      	b.n	8009916 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f003 fec5 	bl	800d68c <USBD_LL_IsStallEP>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e002      	b.n	8009916 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2202      	movs	r2, #2
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fbfb 	bl	800a118 <USBD_CtlSendData>
              break;
 8009922:	e004      	b.n	800992e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fb85 	bl	800a036 <USBD_CtlError>
              break;
 800992c:	bf00      	nop
          }
          break;
 800992e:	e004      	b.n	800993a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fb7f 	bl	800a036 <USBD_CtlError>
          break;
 8009938:	bf00      	nop
      }
      break;
 800993a:	e005      	b.n	8009948 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fb79 	bl	800a036 <USBD_CtlError>
      break;
 8009944:	e000      	b.n	8009948 <USBD_StdEPReq+0x330>
      break;
 8009946:	bf00      	nop
  }

  return ret;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	885b      	ldrh	r3, [r3, #2]
 800996e:	0a1b      	lsrs	r3, r3, #8
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	2b0e      	cmp	r3, #14
 8009976:	f200 8152 	bhi.w	8009c1e <USBD_GetDescriptor+0x2ca>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_GetDescriptor+0x2c>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099f1 	.word	0x080099f1
 8009984:	08009a09 	.word	0x08009a09
 8009988:	08009a49 	.word	0x08009a49
 800998c:	08009c1f 	.word	0x08009c1f
 8009990:	08009c1f 	.word	0x08009c1f
 8009994:	08009bbf 	.word	0x08009bbf
 8009998:	08009beb 	.word	0x08009beb
 800999c:	08009c1f 	.word	0x08009c1f
 80099a0:	08009c1f 	.word	0x08009c1f
 80099a4:	08009c1f 	.word	0x08009c1f
 80099a8:	08009c1f 	.word	0x08009c1f
 80099ac:	08009c1f 	.word	0x08009c1f
 80099b0:	08009c1f 	.word	0x08009c1f
 80099b4:	08009c1f 	.word	0x08009c1f
 80099b8:	080099bd 	.word	0x080099bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7c12      	ldrb	r2, [r2, #16]
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	4610      	mov	r0, r2
 80099da:	4798      	blx	r3
 80099dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099de:	e126      	b.n	8009c2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fb27 	bl	800a036 <USBD_CtlError>
        err++;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	3301      	adds	r3, #1
 80099ec:	72fb      	strb	r3, [r7, #11]
      break;
 80099ee:	e11e      	b.n	8009c2e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
 80099fc:	f107 0108 	add.w	r1, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
      break;
 8009a06:	e112      	b.n	8009c2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7c1b      	ldrb	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10d      	bne.n	8009a2c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	2202      	movs	r2, #2
 8009a28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a2a:	e100      	b.n	8009c2e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	f107 0208 	add.w	r2, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	2202      	movs	r2, #2
 8009a44:	701a      	strb	r2, [r3, #0]
      break;
 8009a46:	e0f2      	b.n	8009c2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	885b      	ldrh	r3, [r3, #2]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	f200 80ac 	bhi.w	8009bac <USBD_GetDescriptor+0x258>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <USBD_GetDescriptor+0x108>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a75 	.word	0x08009a75
 8009a60:	08009aa9 	.word	0x08009aa9
 8009a64:	08009add 	.word	0x08009add
 8009a68:	08009b11 	.word	0x08009b11
 8009a6c:	08009b45 	.word	0x08009b45
 8009a70:	08009b79 	.word	0x08009b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7c12      	ldrb	r2, [r2, #16]
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a96:	e091      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 facb 	bl	800a036 <USBD_CtlError>
            err++;
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa6:	e089      	b.n	8009bbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00b      	beq.n	8009acc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7c12      	ldrb	r2, [r2, #16]
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
 8009ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aca:	e077      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fab1 	bl	800a036 <USBD_CtlError>
            err++;
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ada:	e06f      	b.n	8009bbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	7c12      	ldrb	r2, [r2, #16]
 8009af4:	f107 0108 	add.w	r1, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afe:	e05d      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa97 	bl	800a036 <USBD_CtlError>
            err++;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0e:	e055      	b.n	8009bbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7c12      	ldrb	r2, [r2, #16]
 8009b28:	f107 0108 	add.w	r1, r7, #8
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
 8009b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b32:	e043      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa7d 	bl	800a036 <USBD_CtlError>
            err++;
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	72fb      	strb	r3, [r7, #11]
          break;
 8009b42:	e03b      	b.n	8009bbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	7c12      	ldrb	r2, [r2, #16]
 8009b5c:	f107 0108 	add.w	r1, r7, #8
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b66:	e029      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa63 	bl	800a036 <USBD_CtlError>
            err++;
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	3301      	adds	r3, #1
 8009b74:	72fb      	strb	r3, [r7, #11]
          break;
 8009b76:	e021      	b.n	8009bbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7c12      	ldrb	r2, [r2, #16]
 8009b90:	f107 0108 	add.w	r1, r7, #8
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
 8009b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9a:	e00f      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa49 	bl	800a036 <USBD_CtlError>
            err++;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8009baa:	e007      	b.n	8009bbc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fa41 	bl	800a036 <USBD_CtlError>
          err++;
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009bba:	bf00      	nop
      }
      break;
 8009bbc:	e037      	b.n	8009c2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7c1b      	ldrb	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f107 0208 	add.w	r2, r7, #8
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4798      	blx	r3
 8009bd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bd8:	e029      	b.n	8009c2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa2a 	bl	800a036 <USBD_CtlError>
        err++;
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	3301      	adds	r3, #1
 8009be6:	72fb      	strb	r3, [r7, #11]
      break;
 8009be8:	e021      	b.n	8009c2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7c1b      	ldrb	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10d      	bne.n	8009c0e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
 8009c02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	2207      	movs	r2, #7
 8009c0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c0c:	e00f      	b.n	8009c2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa10 	bl	800a036 <USBD_CtlError>
        err++;
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c1c:	e007      	b.n	8009c2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa08 	bl	800a036 <USBD_CtlError>
      err++;
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c2c:	bf00      	nop
  }

  if (err != 0U)
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11e      	bne.n	8009c72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	88db      	ldrh	r3, [r3, #6]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d016      	beq.n	8009c6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00e      	beq.n	8009c60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	88da      	ldrh	r2, [r3, #6]
 8009c46:	893b      	ldrh	r3, [r7, #8]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bf28      	it	cs
 8009c4c:	4613      	movcs	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c52:	893b      	ldrh	r3, [r7, #8]
 8009c54:	461a      	mov	r2, r3
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fa5d 	bl	800a118 <USBD_CtlSendData>
 8009c5e:	e009      	b.n	8009c74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f9e7 	bl	800a036 <USBD_CtlError>
 8009c68:	e004      	b.n	8009c74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 faae 	bl	800a1cc <USBD_CtlSendStatus>
 8009c70:	e000      	b.n	8009c74 <USBD_GetDescriptor+0x320>
    return;
 8009c72:	bf00      	nop
  }
}
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop

08009c7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	889b      	ldrh	r3, [r3, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d131      	bne.n	8009cf2 <USBD_SetAddress+0x76>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	88db      	ldrh	r3, [r3, #6]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d12d      	bne.n	8009cf2 <USBD_SetAddress+0x76>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c9c:	d829      	bhi.n	8009cf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d104      	bne.n	8009cc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f9bc 	bl	800a036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	e01d      	b.n	8009cfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7bfa      	ldrb	r2, [r7, #15]
 8009cc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f003 fd09 	bl	800d6e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa7a 	bl	800a1cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	e009      	b.n	8009cfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf0:	e004      	b.n	8009cfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f99e 	bl	800a036 <USBD_CtlError>
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	4b4e      	ldr	r3, [pc, #312]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d1c:	4b4d      	ldr	r3, [pc, #308]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d905      	bls.n	8009d30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f985 	bl	800a036 <USBD_CtlError>
    return USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e08c      	b.n	8009e4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d002      	beq.n	8009d42 <USBD_SetConfig+0x3e>
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d029      	beq.n	8009d94 <USBD_SetConfig+0x90>
 8009d40:	e075      	b.n	8009e2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d42:	4b44      	ldr	r3, [pc, #272]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d020      	beq.n	8009d8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d4a:	4b42      	ldr	r3, [pc, #264]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d54:	4b3f      	ldr	r3, [pc, #252]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fe ffbd 	bl	8008cda <USBD_SetClassConfig>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f962 	bl	800a036 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d7a:	e065      	b.n	8009e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fa25 	bl	800a1cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d8a:	e05d      	b.n	8009e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fa1d 	bl	800a1cc <USBD_CtlSendStatus>
      break;
 8009d92:	e059      	b.n	8009e48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d94:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <USBD_SetConfig+0x150>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d112      	bne.n	8009dc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009da4:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <USBD_SetConfig+0x150>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dae:	4b29      	ldr	r3, [pc, #164]	; (8009e54 <USBD_SetConfig+0x150>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7fe ffac 	bl	8008d12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fa06 	bl	800a1cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dc0:	e042      	b.n	8009e48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <USBD_SetConfig+0x150>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d02a      	beq.n	8009e26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7fe ff9a 	bl	8008d12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <USBD_SetConfig+0x150>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009de8:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <USBD_SetConfig+0x150>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7fe ff73 	bl	8008cda <USBD_SetClassConfig>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f918 	bl	800a036 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7fe ff7f 	bl	8008d12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e1c:	e014      	b.n	8009e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f9d4 	bl	800a1cc <USBD_CtlSendStatus>
      break;
 8009e24:	e010      	b.n	8009e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f9d0 	bl	800a1cc <USBD_CtlSendStatus>
      break;
 8009e2c:	e00c      	b.n	8009e48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f900 	bl	800a036 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e36:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <USBD_SetConfig+0x150>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7fe ff68 	bl	8008d12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e42:	2303      	movs	r3, #3
 8009e44:	73fb      	strb	r3, [r7, #15]
      break;
 8009e46:	bf00      	nop
  }

  return ret;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000654 	.word	0x20000654

08009e58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	88db      	ldrh	r3, [r3, #6]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d004      	beq.n	8009e74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8e2 	bl	800a036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e72:	e023      	b.n	8009ebc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	dc02      	bgt.n	8009e86 <USBD_GetConfig+0x2e>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	dc03      	bgt.n	8009e8c <USBD_GetConfig+0x34>
 8009e84:	e015      	b.n	8009eb2 <USBD_GetConfig+0x5a>
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d00b      	beq.n	8009ea2 <USBD_GetConfig+0x4a>
 8009e8a:	e012      	b.n	8009eb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3308      	adds	r3, #8
 8009e96:	2201      	movs	r2, #1
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f93c 	bl	800a118 <USBD_CtlSendData>
        break;
 8009ea0:	e00c      	b.n	8009ebc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f934 	bl	800a118 <USBD_CtlSendData>
        break;
 8009eb0:	e004      	b.n	8009ebc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f8be 	bl	800a036 <USBD_CtlError>
        break;
 8009eba:	bf00      	nop
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d81e      	bhi.n	8009f1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	88db      	ldrh	r3, [r3, #6]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d004      	beq.n	8009eee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f8a5 	bl	800a036 <USBD_CtlError>
        break;
 8009eec:	e01a      	b.n	8009f24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d005      	beq.n	8009f0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f043 0202 	orr.w	r2, r3, #2
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	2202      	movs	r2, #2
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f900 	bl	800a118 <USBD_CtlSendData>
      break;
 8009f18:	e004      	b.n	8009f24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f88a 	bl	800a036 <USBD_CtlError>
      break;
 8009f22:	bf00      	nop
  }
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	885b      	ldrh	r3, [r3, #2]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d107      	bne.n	8009f4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f940 	bl	800a1cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f4c:	e013      	b.n	8009f76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	885b      	ldrh	r3, [r3, #2]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d10b      	bne.n	8009f6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	889b      	ldrh	r3, [r3, #4]
 8009f5a:	0a1b      	lsrs	r3, r3, #8
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f930 	bl	800a1cc <USBD_CtlSendStatus>
}
 8009f6c:	e003      	b.n	8009f76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f860 	bl	800a036 <USBD_CtlError>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d80b      	bhi.n	8009fae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10c      	bne.n	8009fb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f910 	bl	800a1cc <USBD_CtlSendStatus>
      }
      break;
 8009fac:	e004      	b.n	8009fb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f840 	bl	800a036 <USBD_CtlError>
      break;
 8009fb6:	e000      	b.n	8009fba <USBD_ClrFeature+0x3c>
      break;
 8009fb8:	bf00      	nop
  }
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	781a      	ldrb	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	781a      	ldrb	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff fa17 	bl	8009420 <SWAPBYTE>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fa0a 	bl	8009420 <SWAPBYTE>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3301      	adds	r3, #1
 800a01e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff f9fd 	bl	8009420 <SWAPBYTE>
 800a026:	4603      	mov	r3, r0
 800a028:	461a      	mov	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	80da      	strh	r2, [r3, #6]
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a040:	2180      	movs	r1, #128	; 0x80
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f003 fae4 	bl	800d610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a048:	2100      	movs	r1, #0
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f003 fae0 	bl	800d610 <USBD_LL_StallEP>
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d036      	beq.n	800a0dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a072:	6938      	ldr	r0, [r7, #16]
 800a074:	f000 f836 	bl	800a0e4 <USBD_GetLen>
 800a078:	4603      	mov	r3, r0
 800a07a:	3301      	adds	r3, #1
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	4413      	add	r3, r2
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	701a      	strb	r2, [r3, #0]
  idx++;
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	3301      	adds	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	2203      	movs	r2, #3
 800a0a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0a8:	e013      	b.n	800a0d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	7812      	ldrb	r2, [r2, #0]
 800a0b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	613b      	str	r3, [r7, #16]
    idx++;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e7      	bne.n	800a0aa <USBD_GetString+0x52>
 800a0da:	e000      	b.n	800a0de <USBD_GetString+0x86>
    return;
 800a0dc:	bf00      	nop
  }
}
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0f4:	e005      	b.n	800a102 <USBD_GetLen+0x1e>
  {
    len++;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	3301      	adds	r3, #1
 800a100:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f5      	bne.n	800a0f6 <USBD_GetLen+0x12>
  }

  return len;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2202      	movs	r2, #2
 800a128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f003 faef 	bl	800d722 <USBD_LL_Transmit>

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	2100      	movs	r1, #0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f003 fade 	bl	800d722 <USBD_LL_Transmit>

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2203      	movs	r2, #3
 800a180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	2100      	movs	r1, #0
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f003 fae2 	bl	800d764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f003 fad1 	bl	800d764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2204      	movs	r2, #4
 800a1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f003 fa9d 	bl	800d722 <USBD_LL_Transmit>

  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a202:	2300      	movs	r3, #0
 800a204:	2200      	movs	r2, #0
 800a206:	2100      	movs	r1, #0
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f003 faab 	bl	800d764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a21c:	bf00      	nop
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22e:	f3ef 8305 	mrs	r3, IPSR
 800a232:	60bb      	str	r3, [r7, #8]
  return(result);
 800a234:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10f      	bne.n	800a25a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23a:	f3ef 8310 	mrs	r3, PRIMASK
 800a23e:	607b      	str	r3, [r7, #4]
  return(result);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a246:	f3ef 8311 	mrs	r3, BASEPRI
 800a24a:	603b      	str	r3, [r7, #0]
  return(result);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <osKernelInitialize+0x3a>
 800a252:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <osKernelInitialize+0x64>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d103      	bne.n	800a262 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a25a:	f06f 0305 	mvn.w	r3, #5
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e00c      	b.n	800a27c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a262:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <osKernelInitialize+0x64>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a26a:	4b08      	ldr	r3, [pc, #32]	; (800a28c <osKernelInitialize+0x64>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	e002      	b.n	800a27c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000658 	.word	0x20000658

0800a290 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a296:	f3ef 8305 	mrs	r3, IPSR
 800a29a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a29c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10f      	bne.n	800a2c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a6:	607b      	str	r3, [r7, #4]
  return(result);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d105      	bne.n	800a2ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2ae:	f3ef 8311 	mrs	r3, BASEPRI
 800a2b2:	603b      	str	r3, [r7, #0]
  return(result);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <osKernelStart+0x3a>
 800a2ba:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <osKernelStart+0x68>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d103      	bne.n	800a2ca <osKernelStart+0x3a>
    stat = osErrorISR;
 800a2c2:	f06f 0305 	mvn.w	r3, #5
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e010      	b.n	800a2ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <osKernelStart+0x68>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d109      	bne.n	800a2e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2d2:	f7ff ffa1 	bl	800a218 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <osKernelStart+0x68>)
 800a2d8:	2202      	movs	r2, #2
 800a2da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2dc:	f001 f8ca 	bl	800b474 <vTaskStartScheduler>
      stat = osOK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e002      	b.n	800a2ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000658 	.word	0x20000658

0800a2fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b090      	sub	sp, #64	; 0x40
 800a300:	af04      	add	r7, sp, #16
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a30c:	f3ef 8305 	mrs	r3, IPSR
 800a310:	61fb      	str	r3, [r7, #28]
  return(result);
 800a312:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 8090 	bne.w	800a43a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31a:	f3ef 8310 	mrs	r3, PRIMASK
 800a31e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a326:	f3ef 8311 	mrs	r3, BASEPRI
 800a32a:	617b      	str	r3, [r7, #20]
  return(result);
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <osThreadNew+0x3e>
 800a332:	4b44      	ldr	r3, [pc, #272]	; (800a444 <osThreadNew+0x148>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d07f      	beq.n	800a43a <osThreadNew+0x13e>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d07c      	beq.n	800a43a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a344:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a346:	2318      	movs	r3, #24
 800a348:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a34e:	f04f 33ff 	mov.w	r3, #4294967295
 800a352:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d045      	beq.n	800a3e6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <osThreadNew+0x6c>
        name = attr->name;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d008      	beq.n	800a38e <osThreadNew+0x92>
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2b38      	cmp	r3, #56	; 0x38
 800a380:	d805      	bhi.n	800a38e <osThreadNew+0x92>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <osThreadNew+0x96>
        return (NULL);
 800a38e:	2300      	movs	r3, #0
 800a390:	e054      	b.n	800a43c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	089b      	lsrs	r3, r3, #2
 800a3a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00e      	beq.n	800a3c8 <osThreadNew+0xcc>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2bbb      	cmp	r3, #187	; 0xbb
 800a3b0:	d90a      	bls.n	800a3c8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d006      	beq.n	800a3c8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <osThreadNew+0xcc>
        mem = 1;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	623b      	str	r3, [r7, #32]
 800a3c6:	e010      	b.n	800a3ea <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10c      	bne.n	800a3ea <osThreadNew+0xee>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d108      	bne.n	800a3ea <osThreadNew+0xee>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <osThreadNew+0xee>
          mem = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	623b      	str	r3, [r7, #32]
 800a3e4:	e001      	b.n	800a3ea <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d110      	bne.n	800a412 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3f8:	9202      	str	r2, [sp, #8]
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 fe3e 	bl	800b088 <xTaskCreateStatic>
 800a40c:	4603      	mov	r3, r0
 800a40e:	613b      	str	r3, [r7, #16]
 800a410:	e013      	b.n	800a43a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d110      	bne.n	800a43a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f107 0310 	add.w	r3, r7, #16
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 fe8f 	bl	800b14e <xTaskCreate>
 800a430:	4603      	mov	r3, r0
 800a432:	2b01      	cmp	r3, #1
 800a434:	d001      	beq.n	800a43a <osThreadNew+0x13e>
          hTask = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a43a:	693b      	ldr	r3, [r7, #16]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3730      	adds	r7, #48	; 0x30
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	20000658 	.word	0x20000658

0800a448 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a450:	f3ef 8305 	mrs	r3, IPSR
 800a454:	613b      	str	r3, [r7, #16]
  return(result);
 800a456:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10f      	bne.n	800a47c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a45c:	f3ef 8310 	mrs	r3, PRIMASK
 800a460:	60fb      	str	r3, [r7, #12]
  return(result);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d105      	bne.n	800a474 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a468:	f3ef 8311 	mrs	r3, BASEPRI
 800a46c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <osDelay+0x3c>
 800a474:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <osDelay+0x58>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d103      	bne.n	800a484 <osDelay+0x3c>
    stat = osErrorISR;
 800a47c:	f06f 0305 	mvn.w	r3, #5
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e007      	b.n	800a494 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 ffba 	bl	800b408 <vTaskDelay>
    }
  }

  return (stat);
 800a494:	697b      	ldr	r3, [r7, #20]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000658 	.word	0x20000658

0800a4a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a07      	ldr	r2, [pc, #28]	; (800a4d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a4b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4a06      	ldr	r2, [pc, #24]	; (800a4d4 <vApplicationGetIdleTaskMemory+0x30>)
 800a4ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	2000065c 	.word	0x2000065c
 800a4d4:	20000718 	.word	0x20000718

0800a4d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4a07      	ldr	r2, [pc, #28]	; (800a504 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4a06      	ldr	r2, [pc, #24]	; (800a508 <vApplicationGetTimerTaskMemory+0x30>)
 800a4ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4f6:	601a      	str	r2, [r3, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20000b18 	.word	0x20000b18
 800a508:	20000bd4 	.word	0x20000bd4

0800a50c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f103 0208 	add.w	r2, r3, #8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f04f 32ff 	mov.w	r2, #4294967295
 800a524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f103 0208 	add.w	r2, r3, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0208 	add.w	r2, r3, #8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
}
 800a5a2:	bf00      	nop
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d103      	bne.n	800a5ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	e00c      	b.n	800a5e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	e002      	b.n	800a5dc <vListInsert+0x2e>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d2f6      	bcs.n	800a5d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6892      	ldr	r2, [r2, #8]
 800a636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6852      	ldr	r2, [r2, #4]
 800a640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d103      	bne.n	800a654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10c      	bne.n	800a6a2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	b672      	cpsid	i
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	b662      	cpsie	i
 800a69c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a6a2:	f002 f8a3 	bl	800c7ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6b2:	fb01 f303 	mul.w	r3, r1, r3
 800a6b6:	441a      	add	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	68f9      	ldr	r1, [r7, #12]
 800a6d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6d8:	fb01 f303 	mul.w	r3, r1, r3
 800a6dc:	441a      	add	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	22ff      	movs	r2, #255	; 0xff
 800a6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d114      	bne.n	800a722 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01a      	beq.n	800a736 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3310      	adds	r3, #16
 800a704:	4618      	mov	r0, r3
 800a706:	f001 f95d 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d012      	beq.n	800a736 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a710:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <xQueueGenericReset+0xd0>)
 800a712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	e009      	b.n	800a736 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	3310      	adds	r3, #16
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fef0 	bl	800a50c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3324      	adds	r3, #36	; 0x24
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff feeb 	bl	800a50c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a736:	f002 f88d 	bl	800c854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a73a:	2301      	movs	r3, #1
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08e      	sub	sp, #56	; 0x38
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10c      	bne.n	800a776 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	b672      	cpsid	i
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	b662      	cpsie	i
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10c      	bne.n	800a796 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	b672      	cpsid	i
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	b662      	cpsie	i
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <xQueueGenericCreateStatic+0x5a>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <xQueueGenericCreateStatic+0x5e>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <xQueueGenericCreateStatic+0x60>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	623b      	str	r3, [r7, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <xQueueGenericCreateStatic+0x8a>
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <xQueueGenericCreateStatic+0x8e>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <xQueueGenericCreateStatic+0x90>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10c      	bne.n	800a7f6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	b672      	cpsid	i
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	b662      	cpsie	i
 800a7f0:	61fb      	str	r3, [r7, #28]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7f6:	2350      	movs	r3, #80	; 0x50
 800a7f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b50      	cmp	r3, #80	; 0x50
 800a7fe:	d00c      	beq.n	800a81a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	b672      	cpsid	i
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	b662      	cpsie	i
 800a814:	61bb      	str	r3, [r7, #24]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a81a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00d      	beq.n	800a842 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a82e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4613      	mov	r3, r2
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f805 	bl	800a84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a844:	4618      	mov	r0, r3
 800a846:	3730      	adds	r7, #48	; 0x30
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d103      	bne.n	800a868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	e002      	b.n	800a86e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a87a:	2101      	movs	r1, #1
 800a87c:	69b8      	ldr	r0, [r7, #24]
 800a87e:	f7ff fef9 	bl	800a674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08e      	sub	sp, #56	; 0x38
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <xQueueGenericSend+0x36>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	b672      	cpsid	i
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	b662      	cpsie	i
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d103      	bne.n	800a8d8 <xQueueGenericSend+0x44>
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <xQueueGenericSend+0x48>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e000      	b.n	800a8de <xQueueGenericSend+0x4a>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10c      	bne.n	800a8fc <xQueueGenericSend+0x68>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	b672      	cpsid	i
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	b662      	cpsie	i
 800a8f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d103      	bne.n	800a90a <xQueueGenericSend+0x76>
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	2b01      	cmp	r3, #1
 800a908:	d101      	bne.n	800a90e <xQueueGenericSend+0x7a>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <xQueueGenericSend+0x7c>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10c      	bne.n	800a92e <xQueueGenericSend+0x9a>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	b672      	cpsid	i
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	b662      	cpsie	i
 800a928:	623b      	str	r3, [r7, #32]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a92e:	f001 fa13 	bl	800bd58 <xTaskGetSchedulerState>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <xQueueGenericSend+0xaa>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <xQueueGenericSend+0xae>
 800a93e:	2301      	movs	r3, #1
 800a940:	e000      	b.n	800a944 <xQueueGenericSend+0xb0>
 800a942:	2300      	movs	r3, #0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10c      	bne.n	800a962 <xQueueGenericSend+0xce>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	b672      	cpsid	i
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	b662      	cpsie	i
 800a95c:	61fb      	str	r3, [r7, #28]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a962:	f001 ff43 	bl	800c7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96e:	429a      	cmp	r2, r3
 800a970:	d302      	bcc.n	800a978 <xQueueGenericSend+0xe4>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b02      	cmp	r3, #2
 800a976:	d129      	bne.n	800a9cc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a97e:	f000 fa15 	bl	800adac <prvCopyDataToQueue>
 800a982:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d010      	beq.n	800a9ae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	3324      	adds	r3, #36	; 0x24
 800a990:	4618      	mov	r0, r3
 800a992:	f001 f817 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d013      	beq.n	800a9c4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a99c:	4b3f      	ldr	r3, [pc, #252]	; (800aa9c <xQueueGenericSend+0x208>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	e00a      	b.n	800a9c4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9b4:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <xQueueGenericSend+0x208>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9c4:	f001 ff46 	bl	800c854 <vPortExitCritical>
				return pdPASS;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e063      	b.n	800aa94 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9d2:	f001 ff3f 	bl	800c854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e05c      	b.n	800aa94 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 f853 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9ee:	f001 ff31 	bl	800c854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9f2:	f000 fdb3 	bl	800b55c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9f6:	f001 fef9 	bl	800c7ec <vPortEnterCritical>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d103      	bne.n	800aa10 <xQueueGenericSend+0x17c>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1c:	d103      	bne.n	800aa26 <xQueueGenericSend+0x192>
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa26:	f001 ff15 	bl	800c854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa2a:	1d3a      	adds	r2, r7, #4
 800aa2c:	f107 0314 	add.w	r3, r7, #20
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 f842 	bl	800babc <xTaskCheckForTimeOut>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d124      	bne.n	800aa88 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa40:	f000 faac 	bl	800af9c <prvIsQueueFull>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d018      	beq.n	800aa7c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	3310      	adds	r3, #16
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 ff62 	bl	800b91c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa5a:	f000 fa37 	bl	800aecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa5e:	f000 fd8b 	bl	800b578 <xTaskResumeAll>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f47f af7c 	bne.w	800a962 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <xQueueGenericSend+0x208>)
 800aa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	e772      	b.n	800a962 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa7e:	f000 fa25 	bl	800aecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa82:	f000 fd79 	bl	800b578 <xTaskResumeAll>
 800aa86:	e76c      	b.n	800a962 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa8a:	f000 fa1f 	bl	800aecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa8e:	f000 fd73 	bl	800b578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3738      	adds	r7, #56	; 0x38
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08e      	sub	sp, #56	; 0x38
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10c      	bne.n	800aad2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	b672      	cpsid	i
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	b662      	cpsie	i
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <xQueueGenericSendFromISR+0x40>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <xQueueGenericSendFromISR+0x44>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e000      	b.n	800aae6 <xQueueGenericSendFromISR+0x46>
 800aae4:	2300      	movs	r3, #0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10c      	bne.n	800ab04 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	b672      	cpsid	i
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	b662      	cpsie	i
 800aafe:	623b      	str	r3, [r7, #32]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d103      	bne.n	800ab12 <xQueueGenericSendFromISR+0x72>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d101      	bne.n	800ab16 <xQueueGenericSendFromISR+0x76>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <xQueueGenericSendFromISR+0x78>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10c      	bne.n	800ab36 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	b672      	cpsid	i
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	b662      	cpsie	i
 800ab30:	61fb      	str	r3, [r7, #28]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab36:	f001 ff41 	bl	800c9bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	b672      	cpsid	i
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	b662      	cpsie	i
 800ab52:	61ba      	str	r2, [r7, #24]
 800ab54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d302      	bcc.n	800ab6c <xQueueGenericSendFromISR+0xcc>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d12c      	bne.n	800abc6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	68b9      	ldr	r1, [r7, #8]
 800ab7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab7c:	f000 f916 	bl	800adac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab88:	d112      	bne.n	800abb0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d016      	beq.n	800abc0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	3324      	adds	r3, #36	; 0x24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 ff14 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00e      	beq.n	800abc0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	e007      	b.n	800abc0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abb4:	3301      	adds	r3, #1
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	b25a      	sxtb	r2, r3
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abc0:	2301      	movs	r3, #1
 800abc2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800abc4:	e001      	b.n	800abca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3738      	adds	r7, #56	; 0x38
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08c      	sub	sp, #48	; 0x30
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abec:	2300      	movs	r3, #0
 800abee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10c      	bne.n	800ac14 <xQueueReceive+0x34>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	b672      	cpsid	i
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	b662      	cpsie	i
 800ac0e:	623b      	str	r3, [r7, #32]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <xQueueReceive+0x42>
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <xQueueReceive+0x46>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <xQueueReceive+0x48>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10c      	bne.n	800ac46 <xQueueReceive+0x66>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	b672      	cpsid	i
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	b662      	cpsie	i
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac46:	f001 f887 	bl	800bd58 <xTaskGetSchedulerState>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <xQueueReceive+0x76>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <xQueueReceive+0x7a>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <xQueueReceive+0x7c>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10c      	bne.n	800ac7a <xQueueReceive+0x9a>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	b672      	cpsid	i
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	b662      	cpsie	i
 800ac74:	61bb      	str	r3, [r7, #24]
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac7a:	f001 fdb7 	bl	800c7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01f      	beq.n	800acca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8e:	f000 f8f7 	bl	800ae80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	1e5a      	subs	r2, r3, #1
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00f      	beq.n	800acc2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	3310      	adds	r3, #16
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fe8c 	bl	800b9c4 <xTaskRemoveFromEventList>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acb2:	4b3d      	ldr	r3, [pc, #244]	; (800ada8 <xQueueReceive+0x1c8>)
 800acb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acc2:	f001 fdc7 	bl	800c854 <vPortExitCritical>
				return pdPASS;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e069      	b.n	800ad9e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acd0:	f001 fdc0 	bl	800c854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acd4:	2300      	movs	r3, #0
 800acd6:	e062      	b.n	800ad9e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d106      	bne.n	800acec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acde:	f107 0310 	add.w	r3, r7, #16
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fed4 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ace8:	2301      	movs	r3, #1
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acec:	f001 fdb2 	bl	800c854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acf0:	f000 fc34 	bl	800b55c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acf4:	f001 fd7a 	bl	800c7ec <vPortEnterCritical>
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acfe:	b25b      	sxtb	r3, r3
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d103      	bne.n	800ad0e <xQueueReceive+0x12e>
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad14:	b25b      	sxtb	r3, r3
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d103      	bne.n	800ad24 <xQueueReceive+0x144>
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad24:	f001 fd96 	bl	800c854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad28:	1d3a      	adds	r2, r7, #4
 800ad2a:	f107 0310 	add.w	r3, r7, #16
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fec3 	bl	800babc <xTaskCheckForTimeOut>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d123      	bne.n	800ad84 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3e:	f000 f917 	bl	800af70 <prvIsQueueEmpty>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d017      	beq.n	800ad78 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	3324      	adds	r3, #36	; 0x24
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fde3 	bl	800b91c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad58:	f000 f8b8 	bl	800aecc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad5c:	f000 fc0c 	bl	800b578 <xTaskResumeAll>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d189      	bne.n	800ac7a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ad66:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <xQueueReceive+0x1c8>)
 800ad68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	e780      	b.n	800ac7a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad7a:	f000 f8a7 	bl	800aecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad7e:	f000 fbfb 	bl	800b578 <xTaskResumeAll>
 800ad82:	e77a      	b.n	800ac7a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad86:	f000 f8a1 	bl	800aecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad8a:	f000 fbf5 	bl	800b578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad90:	f000 f8ee 	bl	800af70 <prvIsQueueEmpty>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f43f af6f 	beq.w	800ac7a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3730      	adds	r7, #48	; 0x30
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10d      	bne.n	800ade6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d14d      	bne.n	800ae6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 ffdc 	bl	800bd94 <xTaskPriorityDisinherit>
 800addc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	609a      	str	r2, [r3, #8]
 800ade4:	e043      	b.n	800ae6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d119      	bne.n	800ae20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6858      	ldr	r0, [r3, #4]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	461a      	mov	r2, r3
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	f002 fda4 	bl	800d944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	441a      	add	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d32b      	bcc.n	800ae6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	e026      	b.n	800ae6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	68d8      	ldr	r0, [r3, #12]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae28:	461a      	mov	r2, r3
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	f002 fd8a 	bl	800d944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	425b      	negs	r3, r3
 800ae3a:	441a      	add	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d207      	bcs.n	800ae5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	425b      	negs	r3, r3
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d105      	bne.n	800ae6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae76:	697b      	ldr	r3, [r7, #20]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d018      	beq.n	800aec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	441a      	add	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d303      	bcc.n	800aeb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68d9      	ldr	r1, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	6838      	ldr	r0, [r7, #0]
 800aec0:	f002 fd40 	bl	800d944 <memcpy>
	}
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aed4:	f001 fc8a 	bl	800c7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aee0:	e011      	b.n	800af06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d012      	beq.n	800af10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3324      	adds	r3, #36	; 0x24
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 fd68 	bl	800b9c4 <xTaskRemoveFromEventList>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aefa:	f000 fe45 	bl	800bb88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	3b01      	subs	r3, #1
 800af02:	b2db      	uxtb	r3, r3
 800af04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dce9      	bgt.n	800aee2 <prvUnlockQueue+0x16>
 800af0e:	e000      	b.n	800af12 <prvUnlockQueue+0x46>
					break;
 800af10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	22ff      	movs	r2, #255	; 0xff
 800af16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af1a:	f001 fc9b 	bl	800c854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af1e:	f001 fc65 	bl	800c7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af2a:	e011      	b.n	800af50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d012      	beq.n	800af5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3310      	adds	r3, #16
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 fd43 	bl	800b9c4 <xTaskRemoveFromEventList>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af44:	f000 fe20 	bl	800bb88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	dce9      	bgt.n	800af2c <prvUnlockQueue+0x60>
 800af58:	e000      	b.n	800af5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	22ff      	movs	r2, #255	; 0xff
 800af60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af64:	f001 fc76 	bl	800c854 <vPortExitCritical>
}
 800af68:	bf00      	nop
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af78:	f001 fc38 	bl	800c7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	2b00      	cmp	r3, #0
 800af82:	d102      	bne.n	800af8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e001      	b.n	800af8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af8e:	f001 fc61 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800af92:	68fb      	ldr	r3, [r7, #12]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afa4:	f001 fc22 	bl	800c7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d102      	bne.n	800afba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afb4:	2301      	movs	r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	e001      	b.n	800afbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afbe:	f001 fc49 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800afc2:	68fb      	ldr	r3, [r7, #12]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
 800afda:	e014      	b.n	800b006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afdc:	4a0f      	ldr	r2, [pc, #60]	; (800b01c <vQueueAddToRegistry+0x50>)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10b      	bne.n	800b000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afe8:	490c      	ldr	r1, [pc, #48]	; (800b01c <vQueueAddToRegistry+0x50>)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aff2:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <vQueueAddToRegistry+0x50>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4413      	add	r3, r2
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800affe:	e006      	b.n	800b00e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3301      	adds	r3, #1
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b07      	cmp	r3, #7
 800b00a:	d9e7      	bls.n	800afdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	200013d4 	.word	0x200013d4

0800b020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b030:	f001 fbdc 	bl	800c7ec <vPortEnterCritical>
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b03a:	b25b      	sxtb	r3, r3
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b040:	d103      	bne.n	800b04a <vQueueWaitForMessageRestricted+0x2a>
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b050:	b25b      	sxtb	r3, r3
 800b052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b056:	d103      	bne.n	800b060 <vQueueWaitForMessageRestricted+0x40>
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b060:	f001 fbf8 	bl	800c854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	3324      	adds	r3, #36	; 0x24
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fc77 	bl	800b968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b07a:	6978      	ldr	r0, [r7, #20]
 800b07c:	f7ff ff26 	bl	800aecc <prvUnlockQueue>
	}
 800b080:	bf00      	nop
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08e      	sub	sp, #56	; 0x38
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10c      	bne.n	800b0b6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	b672      	cpsid	i
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	b662      	cpsie	i
 800b0b0:	623b      	str	r3, [r7, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10c      	bne.n	800b0d6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	b672      	cpsid	i
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	b662      	cpsie	i
 800b0d0:	61fb      	str	r3, [r7, #28]
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0d6:	23bc      	movs	r3, #188	; 0xbc
 800b0d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2bbc      	cmp	r3, #188	; 0xbc
 800b0de:	d00c      	beq.n	800b0fa <xTaskCreateStatic+0x72>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	b672      	cpsid	i
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	b662      	cpsie	i
 800b0f4:	61bb      	str	r3, [r7, #24]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01e      	beq.n	800b140 <xTaskCreateStatic+0xb8>
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01b      	beq.n	800b140 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b110:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	2202      	movs	r2, #2
 800b116:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b11a:	2300      	movs	r3, #0
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	f107 0314 	add.w	r3, r7, #20
 800b126:	9301      	str	r3, [sp, #4]
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f850 	bl	800b1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b13a:	f000 f8f5 	bl	800b328 <prvAddNewTaskToReadyList>
 800b13e:	e001      	b.n	800b144 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b144:	697b      	ldr	r3, [r7, #20]
	}
 800b146:	4618      	mov	r0, r3
 800b148:	3728      	adds	r7, #40	; 0x28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b08c      	sub	sp, #48	; 0x30
 800b152:	af04      	add	r7, sp, #16
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	603b      	str	r3, [r7, #0]
 800b15a:	4613      	mov	r3, r2
 800b15c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4618      	mov	r0, r3
 800b164:	f001 fc6e 	bl	800ca44 <pvPortMalloc>
 800b168:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b170:	20bc      	movs	r0, #188	; 0xbc
 800b172:	f001 fc67 	bl	800ca44 <pvPortMalloc>
 800b176:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	631a      	str	r2, [r3, #48]	; 0x30
 800b184:	e005      	b.n	800b192 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b186:	6978      	ldr	r0, [r7, #20]
 800b188:	f001 fd26 	bl	800cbd8 <vPortFree>
 800b18c:	e001      	b.n	800b192 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d017      	beq.n	800b1c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1a0:	88fa      	ldrh	r2, [r7, #6]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9303      	str	r3, [sp, #12]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	9302      	str	r3, [sp, #8]
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 f80e 	bl	800b1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1bc:	69f8      	ldr	r0, [r7, #28]
 800b1be:	f000 f8b3 	bl	800b328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	e002      	b.n	800b1ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
	}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3720      	adds	r7, #32
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	21a5      	movs	r1, #165	; 0xa5
 800b1f2:	f002 fbb5 	bl	800d960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b200:	440b      	add	r3, r1
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	f023 0307 	bic.w	r3, r3, #7
 800b20e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00c      	beq.n	800b234 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	b672      	cpsid	i
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	b662      	cpsie	i
 800b22e:	617b      	str	r3, [r7, #20]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d01f      	beq.n	800b27a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
 800b23e:	e012      	b.n	800b266 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	4413      	add	r3, r2
 800b246:	7819      	ldrb	r1, [r3, #0]
 800b248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	3334      	adds	r3, #52	; 0x34
 800b250:	460a      	mov	r2, r1
 800b252:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	4413      	add	r3, r2
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d006      	beq.n	800b26e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	3301      	adds	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	2b0f      	cmp	r3, #15
 800b26a:	d9e9      	bls.n	800b240 <prvInitialiseNewTask+0x68>
 800b26c:	e000      	b.n	800b270 <prvInitialiseNewTask+0x98>
			{
				break;
 800b26e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b278:	e003      	b.n	800b282 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b284:	2b37      	cmp	r3, #55	; 0x37
 800b286:	d901      	bls.n	800b28c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b288:	2337      	movs	r3, #55	; 0x37
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b290:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b296:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	2200      	movs	r2, #0
 800b29c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff f952 	bl	800a54c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	3318      	adds	r3, #24
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff f94d 	bl	800a54c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	3354      	adds	r3, #84	; 0x54
 800b2dc:	2260      	movs	r2, #96	; 0x60
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fb3d 	bl	800d960 <memset>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	4a0c      	ldr	r2, [pc, #48]	; (800b31c <prvInitialiseNewTask+0x144>)
 800b2ea:	659a      	str	r2, [r3, #88]	; 0x58
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	4a0c      	ldr	r2, [pc, #48]	; (800b320 <prvInitialiseNewTask+0x148>)
 800b2f0:	65da      	str	r2, [r3, #92]	; 0x5c
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	4a0b      	ldr	r2, [pc, #44]	; (800b324 <prvInitialiseNewTask+0x14c>)
 800b2f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	69b8      	ldr	r0, [r7, #24]
 800b2fe:	f001 f96b 	bl	800c5d8 <pxPortInitialiseStack>
 800b302:	4602      	mov	r2, r0
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b312:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b314:	bf00      	nop
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	0800dde4 	.word	0x0800dde4
 800b320:	0800de04 	.word	0x0800de04
 800b324:	0800ddc4 	.word	0x0800ddc4

0800b328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b330:	f001 fa5c 	bl	800c7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	4a2c      	ldr	r2, [pc, #176]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b33c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b33e:	4b2c      	ldr	r3, [pc, #176]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d109      	bne.n	800b35a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b346:	4a2a      	ldr	r2, [pc, #168]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b34c:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d110      	bne.n	800b376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b354:	f000 fc3c 	bl	800bbd0 <prvInitialiseTaskLists>
 800b358:	e00d      	b.n	800b376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b35a:	4b26      	ldr	r3, [pc, #152]	; (800b3f4 <prvAddNewTaskToReadyList+0xcc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d109      	bne.n	800b376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b362:	4b23      	ldr	r3, [pc, #140]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d802      	bhi.n	800b376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b370:	4a1f      	ldr	r2, [pc, #124]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b376:	4b20      	ldr	r3, [pc, #128]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	4a1e      	ldr	r2, [pc, #120]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b37e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b380:	4b1d      	ldr	r3, [pc, #116]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <prvAddNewTaskToReadyList+0xd4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d903      	bls.n	800b39c <prvAddNewTaskToReadyList+0x74>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <prvAddNewTaskToReadyList+0xd4>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4a15      	ldr	r2, [pc, #84]	; (800b400 <prvAddNewTaskToReadyList+0xd8>)
 800b3aa:	441a      	add	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	f7ff f8d7 	bl	800a566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3b8:	f001 fa4c 	bl	800c854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <prvAddNewTaskToReadyList+0xcc>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d207      	bcs.n	800b3e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3d2:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <prvAddNewTaskToReadyList+0xdc>)
 800b3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200018e8 	.word	0x200018e8
 800b3f0:	20001414 	.word	0x20001414
 800b3f4:	200018f4 	.word	0x200018f4
 800b3f8:	20001904 	.word	0x20001904
 800b3fc:	200018f0 	.word	0x200018f0
 800b400:	20001418 	.word	0x20001418
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d019      	beq.n	800b44e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b41a:	4b14      	ldr	r3, [pc, #80]	; (800b46c <vTaskDelay+0x64>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00c      	beq.n	800b43c <vTaskDelay+0x34>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	b672      	cpsid	i
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	b662      	cpsie	i
 800b436:	60bb      	str	r3, [r7, #8]
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b43c:	f000 f88e 	bl	800b55c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b440:	2100      	movs	r1, #0
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fd18 	bl	800be78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b448:	f000 f896 	bl	800b578 <xTaskResumeAll>
 800b44c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d107      	bne.n	800b464 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <vTaskDelay+0x68>)
 800b456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b464:	bf00      	nop
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20001910 	.word	0x20001910
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08a      	sub	sp, #40	; 0x28
 800b478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b482:	463a      	mov	r2, r7
 800b484:	1d39      	adds	r1, r7, #4
 800b486:	f107 0308 	add.w	r3, r7, #8
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff f80a 	bl	800a4a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	9202      	str	r2, [sp, #8]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	2300      	movs	r3, #0
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	460a      	mov	r2, r1
 800b4a2:	4926      	ldr	r1, [pc, #152]	; (800b53c <vTaskStartScheduler+0xc8>)
 800b4a4:	4826      	ldr	r0, [pc, #152]	; (800b540 <vTaskStartScheduler+0xcc>)
 800b4a6:	f7ff fdef 	bl	800b088 <xTaskCreateStatic>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4a25      	ldr	r2, [pc, #148]	; (800b544 <vTaskStartScheduler+0xd0>)
 800b4ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4b0:	4b24      	ldr	r3, [pc, #144]	; (800b544 <vTaskStartScheduler+0xd0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	e001      	b.n	800b4c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d102      	bne.n	800b4ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4c8:	f000 fd2a 	bl	800bf20 <xTimerCreateTimerTask>
 800b4cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d11d      	bne.n	800b510 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	b672      	cpsid	i
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	b662      	cpsie	i
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4ec:	4b16      	ldr	r3, [pc, #88]	; (800b548 <vTaskStartScheduler+0xd4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3354      	adds	r3, #84	; 0x54
 800b4f2:	4a16      	ldr	r2, [pc, #88]	; (800b54c <vTaskStartScheduler+0xd8>)
 800b4f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4f6:	4b16      	ldr	r3, [pc, #88]	; (800b550 <vTaskStartScheduler+0xdc>)
 800b4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4fe:	4b15      	ldr	r3, [pc, #84]	; (800b554 <vTaskStartScheduler+0xe0>)
 800b500:	2201      	movs	r2, #1
 800b502:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b504:	4b14      	ldr	r3, [pc, #80]	; (800b558 <vTaskStartScheduler+0xe4>)
 800b506:	2200      	movs	r2, #0
 800b508:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b50a:	f001 f8f1 	bl	800c6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b50e:	e010      	b.n	800b532 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b516:	d10c      	bne.n	800b532 <vTaskStartScheduler+0xbe>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	b672      	cpsid	i
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	b662      	cpsie	i
 800b52c:	60fb      	str	r3, [r7, #12]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <vTaskStartScheduler+0xbc>
}
 800b532:	bf00      	nop
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	0800dc9c 	.word	0x0800dc9c
 800b540:	0800bba1 	.word	0x0800bba1
 800b544:	2000190c 	.word	0x2000190c
 800b548:	20001414 	.word	0x20001414
 800b54c:	20000110 	.word	0x20000110
 800b550:	20001908 	.word	0x20001908
 800b554:	200018f4 	.word	0x200018f4
 800b558:	200018ec 	.word	0x200018ec

0800b55c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b560:	4b04      	ldr	r3, [pc, #16]	; (800b574 <vTaskSuspendAll+0x18>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a03      	ldr	r2, [pc, #12]	; (800b574 <vTaskSuspendAll+0x18>)
 800b568:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b56a:	bf00      	nop
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	20001910 	.word	0x20001910

0800b578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b582:	2300      	movs	r3, #0
 800b584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b586:	4b43      	ldr	r3, [pc, #268]	; (800b694 <xTaskResumeAll+0x11c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10c      	bne.n	800b5a8 <xTaskResumeAll+0x30>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	b672      	cpsid	i
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	b662      	cpsie	i
 800b5a2:	603b      	str	r3, [r7, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5a8:	f001 f920 	bl	800c7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5ac:	4b39      	ldr	r3, [pc, #228]	; (800b694 <xTaskResumeAll+0x11c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	4a38      	ldr	r2, [pc, #224]	; (800b694 <xTaskResumeAll+0x11c>)
 800b5b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b6:	4b37      	ldr	r3, [pc, #220]	; (800b694 <xTaskResumeAll+0x11c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d162      	bne.n	800b684 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5be:	4b36      	ldr	r3, [pc, #216]	; (800b698 <xTaskResumeAll+0x120>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d05e      	beq.n	800b684 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5c6:	e02f      	b.n	800b628 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c8:	4b34      	ldr	r3, [pc, #208]	; (800b69c <xTaskResumeAll+0x124>)
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3318      	adds	r3, #24
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff f823 	bl	800a620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff f81e 	bl	800a620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	4b2d      	ldr	r3, [pc, #180]	; (800b6a0 <xTaskResumeAll+0x128>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d903      	bls.n	800b5f8 <xTaskResumeAll+0x80>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	4a2a      	ldr	r2, [pc, #168]	; (800b6a0 <xTaskResumeAll+0x128>)
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4a27      	ldr	r2, [pc, #156]	; (800b6a4 <xTaskResumeAll+0x12c>)
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3304      	adds	r3, #4
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f7fe ffa9 	bl	800a566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4b23      	ldr	r3, [pc, #140]	; (800b6a8 <xTaskResumeAll+0x130>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	429a      	cmp	r2, r3
 800b620:	d302      	bcc.n	800b628 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b622:	4b22      	ldr	r3, [pc, #136]	; (800b6ac <xTaskResumeAll+0x134>)
 800b624:	2201      	movs	r2, #1
 800b626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b628:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <xTaskResumeAll+0x124>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1cb      	bne.n	800b5c8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b636:	f000 fb6f 	bl	800bd18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b63a:	4b1d      	ldr	r3, [pc, #116]	; (800b6b0 <xTaskResumeAll+0x138>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d010      	beq.n	800b668 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b646:	f000 f847 	bl	800b6d8 <xTaskIncrementTick>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b650:	4b16      	ldr	r3, [pc, #88]	; (800b6ac <xTaskResumeAll+0x134>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3b01      	subs	r3, #1
 800b65a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1f1      	bne.n	800b646 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b662:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <xTaskResumeAll+0x138>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b668:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <xTaskResumeAll+0x134>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d009      	beq.n	800b684 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b674:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <xTaskResumeAll+0x13c>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b684:	f001 f8e6 	bl	800c854 <vPortExitCritical>

	return xAlreadyYielded;
 800b688:	68bb      	ldr	r3, [r7, #8]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20001910 	.word	0x20001910
 800b698:	200018e8 	.word	0x200018e8
 800b69c:	200018a8 	.word	0x200018a8
 800b6a0:	200018f0 	.word	0x200018f0
 800b6a4:	20001418 	.word	0x20001418
 800b6a8:	20001414 	.word	0x20001414
 800b6ac:	200018fc 	.word	0x200018fc
 800b6b0:	200018f8 	.word	0x200018f8
 800b6b4:	e000ed04 	.word	0xe000ed04

0800b6b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <xTaskGetTickCount+0x1c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6c4:	687b      	ldr	r3, [r7, #4]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	200018ec 	.word	0x200018ec

0800b6d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6e2:	4b50      	ldr	r3, [pc, #320]	; (800b824 <xTaskIncrementTick+0x14c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f040 808b 	bne.w	800b802 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6ec:	4b4e      	ldr	r3, [pc, #312]	; (800b828 <xTaskIncrementTick+0x150>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6f4:	4a4c      	ldr	r2, [pc, #304]	; (800b828 <xTaskIncrementTick+0x150>)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d122      	bne.n	800b746 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b700:	4b4a      	ldr	r3, [pc, #296]	; (800b82c <xTaskIncrementTick+0x154>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00c      	beq.n	800b724 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	b672      	cpsid	i
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	b662      	cpsie	i
 800b71e:	603b      	str	r3, [r7, #0]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <xTaskIncrementTick+0x4a>
 800b724:	4b41      	ldr	r3, [pc, #260]	; (800b82c <xTaskIncrementTick+0x154>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	4b41      	ldr	r3, [pc, #260]	; (800b830 <xTaskIncrementTick+0x158>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a3f      	ldr	r2, [pc, #252]	; (800b82c <xTaskIncrementTick+0x154>)
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	4a3f      	ldr	r2, [pc, #252]	; (800b830 <xTaskIncrementTick+0x158>)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	4b3e      	ldr	r3, [pc, #248]	; (800b834 <xTaskIncrementTick+0x15c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3301      	adds	r3, #1
 800b73e:	4a3d      	ldr	r2, [pc, #244]	; (800b834 <xTaskIncrementTick+0x15c>)
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	f000 fae9 	bl	800bd18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b746:	4b3c      	ldr	r3, [pc, #240]	; (800b838 <xTaskIncrementTick+0x160>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d349      	bcc.n	800b7e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b750:	4b36      	ldr	r3, [pc, #216]	; (800b82c <xTaskIncrementTick+0x154>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d104      	bne.n	800b764 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b75a:	4b37      	ldr	r3, [pc, #220]	; (800b838 <xTaskIncrementTick+0x160>)
 800b75c:	f04f 32ff 	mov.w	r2, #4294967295
 800b760:	601a      	str	r2, [r3, #0]
					break;
 800b762:	e03f      	b.n	800b7e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b764:	4b31      	ldr	r3, [pc, #196]	; (800b82c <xTaskIncrementTick+0x154>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d203      	bcs.n	800b784 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b77c:	4a2e      	ldr	r2, [pc, #184]	; (800b838 <xTaskIncrementTick+0x160>)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b782:	e02f      	b.n	800b7e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	3304      	adds	r3, #4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe ff49 	bl	800a620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b792:	2b00      	cmp	r3, #0
 800b794:	d004      	beq.n	800b7a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	3318      	adds	r3, #24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe ff40 	bl	800a620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4b25      	ldr	r3, [pc, #148]	; (800b83c <xTaskIncrementTick+0x164>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d903      	bls.n	800b7b4 <xTaskIncrementTick+0xdc>
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	4a22      	ldr	r2, [pc, #136]	; (800b83c <xTaskIncrementTick+0x164>)
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4a1f      	ldr	r2, [pc, #124]	; (800b840 <xTaskIncrementTick+0x168>)
 800b7c2:	441a      	add	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	f7fe fecb 	bl	800a566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	4b1b      	ldr	r3, [pc, #108]	; (800b844 <xTaskIncrementTick+0x16c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d3b8      	bcc.n	800b750 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7e2:	e7b5      	b.n	800b750 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7e4:	4b17      	ldr	r3, [pc, #92]	; (800b844 <xTaskIncrementTick+0x16c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ea:	4915      	ldr	r1, [pc, #84]	; (800b840 <xTaskIncrementTick+0x168>)
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	440b      	add	r3, r1
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d907      	bls.n	800b80c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	e004      	b.n	800b80c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b802:	4b11      	ldr	r3, [pc, #68]	; (800b848 <xTaskIncrementTick+0x170>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3301      	adds	r3, #1
 800b808:	4a0f      	ldr	r2, [pc, #60]	; (800b848 <xTaskIncrementTick+0x170>)
 800b80a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b80c:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <xTaskIncrementTick+0x174>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b814:	2301      	movs	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b818:	697b      	ldr	r3, [r7, #20]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001910 	.word	0x20001910
 800b828:	200018ec 	.word	0x200018ec
 800b82c:	200018a0 	.word	0x200018a0
 800b830:	200018a4 	.word	0x200018a4
 800b834:	20001900 	.word	0x20001900
 800b838:	20001908 	.word	0x20001908
 800b83c:	200018f0 	.word	0x200018f0
 800b840:	20001418 	.word	0x20001418
 800b844:	20001414 	.word	0x20001414
 800b848:	200018f8 	.word	0x200018f8
 800b84c:	200018fc 	.word	0x200018fc

0800b850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b856:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <vTaskSwitchContext+0xb4>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b85e:	4b2a      	ldr	r3, [pc, #168]	; (800b908 <vTaskSwitchContext+0xb8>)
 800b860:	2201      	movs	r2, #1
 800b862:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b864:	e048      	b.n	800b8f8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b866:	4b28      	ldr	r3, [pc, #160]	; (800b908 <vTaskSwitchContext+0xb8>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86c:	4b27      	ldr	r3, [pc, #156]	; (800b90c <vTaskSwitchContext+0xbc>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	e012      	b.n	800b89a <vTaskSwitchContext+0x4a>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10c      	bne.n	800b894 <vTaskSwitchContext+0x44>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	b672      	cpsid	i
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	b662      	cpsie	i
 800b88e:	607b      	str	r3, [r7, #4]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <vTaskSwitchContext+0x42>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3b01      	subs	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	491d      	ldr	r1, [pc, #116]	; (800b910 <vTaskSwitchContext+0xc0>)
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	440b      	add	r3, r1
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d0e2      	beq.n	800b874 <vTaskSwitchContext+0x24>
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4a15      	ldr	r2, [pc, #84]	; (800b910 <vTaskSwitchContext+0xc0>)
 800b8ba:	4413      	add	r3, r2
 800b8bc:	60bb      	str	r3, [r7, #8]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	605a      	str	r2, [r3, #4]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d104      	bne.n	800b8de <vTaskSwitchContext+0x8e>
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	4a0b      	ldr	r2, [pc, #44]	; (800b914 <vTaskSwitchContext+0xc4>)
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	4a08      	ldr	r2, [pc, #32]	; (800b90c <vTaskSwitchContext+0xbc>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <vTaskSwitchContext+0xc4>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3354      	adds	r3, #84	; 0x54
 800b8f4:	4a08      	ldr	r2, [pc, #32]	; (800b918 <vTaskSwitchContext+0xc8>)
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20001910 	.word	0x20001910
 800b908:	200018fc 	.word	0x200018fc
 800b90c:	200018f0 	.word	0x200018f0
 800b910:	20001418 	.word	0x20001418
 800b914:	20001414 	.word	0x20001414
 800b918:	20000110 	.word	0x20000110

0800b91c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10c      	bne.n	800b946 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	b672      	cpsid	i
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	b662      	cpsie	i
 800b940:	60fb      	str	r3, [r7, #12]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b946:	4b07      	ldr	r3, [pc, #28]	; (800b964 <vTaskPlaceOnEventList+0x48>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3318      	adds	r3, #24
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7fe fe2d 	bl	800a5ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b954:	2101      	movs	r1, #1
 800b956:	6838      	ldr	r0, [r7, #0]
 800b958:	f000 fa8e 	bl	800be78 <prvAddCurrentTaskToDelayedList>
}
 800b95c:	bf00      	nop
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	20001414 	.word	0x20001414

0800b968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10c      	bne.n	800b994 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	b672      	cpsid	i
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	b662      	cpsie	i
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b994:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <vTaskPlaceOnEventListRestricted+0x58>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3318      	adds	r3, #24
 800b99a:	4619      	mov	r1, r3
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f7fe fde2 	bl	800a566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f000 fa61 	bl	800be78 <prvAddCurrentTaskToDelayedList>
	}
 800b9b6:	bf00      	nop
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20001414 	.word	0x20001414

0800b9c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	60fb      	str	r3, [r7, #12]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	3318      	adds	r3, #24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe fe11 	bl	800a620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fe:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d11d      	bne.n	800ba42 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fe08 	bl	800a620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba14:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d903      	bls.n	800ba24 <xTaskRemoveFromEventList+0x60>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4a13      	ldr	r2, [pc, #76]	; (800ba80 <xTaskRemoveFromEventList+0xbc>)
 800ba32:	441a      	add	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fe fd93 	bl	800a566 <vListInsertEnd>
 800ba40:	e005      	b.n	800ba4e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	3318      	adds	r3, #24
 800ba46:	4619      	mov	r1, r3
 800ba48:	480e      	ldr	r0, [pc, #56]	; (800ba84 <xTaskRemoveFromEventList+0xc0>)
 800ba4a:	f7fe fd8c 	bl	800a566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <xTaskRemoveFromEventList+0xc4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d905      	bls.n	800ba68 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <xTaskRemoveFromEventList+0xc8>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	e001      	b.n	800ba6c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba6c:	697b      	ldr	r3, [r7, #20]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20001910 	.word	0x20001910
 800ba7c:	200018f0 	.word	0x200018f0
 800ba80:	20001418 	.word	0x20001418
 800ba84:	200018a8 	.word	0x200018a8
 800ba88:	20001414 	.word	0x20001414
 800ba8c:	200018fc 	.word	0x200018fc

0800ba90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba98:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <vTaskInternalSetTimeOutState+0x24>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <vTaskInternalSetTimeOutState+0x28>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	605a      	str	r2, [r3, #4]
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	20001900 	.word	0x20001900
 800bab8:	200018ec 	.word	0x200018ec

0800babc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10c      	bne.n	800bae6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	b672      	cpsid	i
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	b662      	cpsie	i
 800bae0:	613b      	str	r3, [r7, #16]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10c      	bne.n	800bb06 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	b672      	cpsid	i
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	b662      	cpsie	i
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bb06:	f000 fe71 	bl	800c7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <xTaskCheckForTimeOut+0xc4>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d102      	bne.n	800bb2a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61fb      	str	r3, [r7, #28]
 800bb28:	e023      	b.n	800bb72 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	4b15      	ldr	r3, [pc, #84]	; (800bb84 <xTaskCheckForTimeOut+0xc8>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d007      	beq.n	800bb46 <xTaskCheckForTimeOut+0x8a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d302      	bcc.n	800bb46 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb40:	2301      	movs	r3, #1
 800bb42:	61fb      	str	r3, [r7, #28]
 800bb44:	e015      	b.n	800bb72 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d20b      	bcs.n	800bb68 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff ff97 	bl	800ba90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb62:	2300      	movs	r3, #0
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	e004      	b.n	800bb72 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb72:	f000 fe6f 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800bb76:	69fb      	ldr	r3, [r7, #28]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	200018ec 	.word	0x200018ec
 800bb84:	20001900 	.word	0x20001900

0800bb88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb8c:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <vTaskMissedYield+0x14>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	601a      	str	r2, [r3, #0]
}
 800bb92:	bf00      	nop
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	200018fc 	.word	0x200018fc

0800bba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bba8:	f000 f852 	bl	800bc50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <prvIdleTask+0x28>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d9f9      	bls.n	800bba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbb4:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <prvIdleTask+0x2c>)
 800bbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbc4:	e7f0      	b.n	800bba8 <prvIdleTask+0x8>
 800bbc6:	bf00      	nop
 800bbc8:	20001418 	.word	0x20001418
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	607b      	str	r3, [r7, #4]
 800bbda:	e00c      	b.n	800bbf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <prvInitialiseTaskLists+0x60>)
 800bbe8:	4413      	add	r3, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fc8e 	bl	800a50c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	607b      	str	r3, [r7, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b37      	cmp	r3, #55	; 0x37
 800bbfa:	d9ef      	bls.n	800bbdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbfc:	480d      	ldr	r0, [pc, #52]	; (800bc34 <prvInitialiseTaskLists+0x64>)
 800bbfe:	f7fe fc85 	bl	800a50c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc02:	480d      	ldr	r0, [pc, #52]	; (800bc38 <prvInitialiseTaskLists+0x68>)
 800bc04:	f7fe fc82 	bl	800a50c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc08:	480c      	ldr	r0, [pc, #48]	; (800bc3c <prvInitialiseTaskLists+0x6c>)
 800bc0a:	f7fe fc7f 	bl	800a50c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc0e:	480c      	ldr	r0, [pc, #48]	; (800bc40 <prvInitialiseTaskLists+0x70>)
 800bc10:	f7fe fc7c 	bl	800a50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc14:	480b      	ldr	r0, [pc, #44]	; (800bc44 <prvInitialiseTaskLists+0x74>)
 800bc16:	f7fe fc79 	bl	800a50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <prvInitialiseTaskLists+0x78>)
 800bc1c:	4a05      	ldr	r2, [pc, #20]	; (800bc34 <prvInitialiseTaskLists+0x64>)
 800bc1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc20:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <prvInitialiseTaskLists+0x7c>)
 800bc22:	4a05      	ldr	r2, [pc, #20]	; (800bc38 <prvInitialiseTaskLists+0x68>)
 800bc24:	601a      	str	r2, [r3, #0]
}
 800bc26:	bf00      	nop
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20001418 	.word	0x20001418
 800bc34:	20001878 	.word	0x20001878
 800bc38:	2000188c 	.word	0x2000188c
 800bc3c:	200018a8 	.word	0x200018a8
 800bc40:	200018bc 	.word	0x200018bc
 800bc44:	200018d4 	.word	0x200018d4
 800bc48:	200018a0 	.word	0x200018a0
 800bc4c:	200018a4 	.word	0x200018a4

0800bc50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc56:	e019      	b.n	800bc8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc58:	f000 fdc8 	bl	800c7ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5c:	4b10      	ldr	r3, [pc, #64]	; (800bca0 <prvCheckTasksWaitingTermination+0x50>)
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fcd9 	bl	800a620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc6e:	4b0d      	ldr	r3, [pc, #52]	; (800bca4 <prvCheckTasksWaitingTermination+0x54>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	4a0b      	ldr	r2, [pc, #44]	; (800bca4 <prvCheckTasksWaitingTermination+0x54>)
 800bc76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc78:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <prvCheckTasksWaitingTermination+0x58>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a0a      	ldr	r2, [pc, #40]	; (800bca8 <prvCheckTasksWaitingTermination+0x58>)
 800bc80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc82:	f000 fde7 	bl	800c854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f810 	bl	800bcac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <prvCheckTasksWaitingTermination+0x58>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e1      	bne.n	800bc58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	200018bc 	.word	0x200018bc
 800bca4:	200018e8 	.word	0x200018e8
 800bca8:	200018d0 	.word	0x200018d0

0800bcac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3354      	adds	r3, #84	; 0x54
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f001 ff47 	bl	800db4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d108      	bne.n	800bcda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 ff83 	bl	800cbd8 <vPortFree>
				vPortFree( pxTCB );
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 ff80 	bl	800cbd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcd8:	e01a      	b.n	800bd10 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d103      	bne.n	800bcec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 ff77 	bl	800cbd8 <vPortFree>
	}
 800bcea:	e011      	b.n	800bd10 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d00c      	beq.n	800bd10 <prvDeleteTCB+0x64>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	b672      	cpsid	i
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	b662      	cpsie	i
 800bd0a:	60fb      	str	r3, [r7, #12]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <prvDeleteTCB+0x62>
	}
 800bd10:	bf00      	nop
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <prvResetNextTaskUnblockTime+0x38>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd28:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <prvResetNextTaskUnblockTime+0x3c>)
 800bd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd30:	e008      	b.n	800bd44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd32:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <prvResetNextTaskUnblockTime+0x38>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4a04      	ldr	r2, [pc, #16]	; (800bd54 <prvResetNextTaskUnblockTime+0x3c>)
 800bd42:	6013      	str	r3, [r2, #0]
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	200018a0 	.word	0x200018a0
 800bd54:	20001908 	.word	0x20001908

0800bd58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd5e:	4b0b      	ldr	r3, [pc, #44]	; (800bd8c <xTaskGetSchedulerState+0x34>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd66:	2301      	movs	r3, #1
 800bd68:	607b      	str	r3, [r7, #4]
 800bd6a:	e008      	b.n	800bd7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd6c:	4b08      	ldr	r3, [pc, #32]	; (800bd90 <xTaskGetSchedulerState+0x38>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd74:	2302      	movs	r3, #2
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	e001      	b.n	800bd7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd7e:	687b      	ldr	r3, [r7, #4]
	}
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	200018f4 	.word	0x200018f4
 800bd90:	20001910 	.word	0x20001910

0800bd94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d05a      	beq.n	800be60 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdaa:	4b30      	ldr	r3, [pc, #192]	; (800be6c <xTaskPriorityDisinherit+0xd8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d00c      	beq.n	800bdce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	b672      	cpsid	i
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	b662      	cpsie	i
 800bdc8:	60fb      	str	r3, [r7, #12]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10c      	bne.n	800bdf0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdda:	b672      	cpsid	i
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	b662      	cpsie	i
 800bdea:	60bb      	str	r3, [r7, #8]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf4:	1e5a      	subs	r2, r3, #1
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be02:	429a      	cmp	r2, r3
 800be04:	d02c      	beq.n	800be60 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d128      	bne.n	800be60 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	3304      	adds	r3, #4
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fc04 	bl	800a620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <xTaskPriorityDisinherit+0xdc>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d903      	bls.n	800be40 <xTaskPriorityDisinherit+0xac>
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3c:	4a0c      	ldr	r2, [pc, #48]	; (800be70 <xTaskPriorityDisinherit+0xdc>)
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4a09      	ldr	r2, [pc, #36]	; (800be74 <xTaskPriorityDisinherit+0xe0>)
 800be4e:	441a      	add	r2, r3
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	3304      	adds	r3, #4
 800be54:	4619      	mov	r1, r3
 800be56:	4610      	mov	r0, r2
 800be58:	f7fe fb85 	bl	800a566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be5c:	2301      	movs	r3, #1
 800be5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be60:	697b      	ldr	r3, [r7, #20]
	}
 800be62:	4618      	mov	r0, r3
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	20001414 	.word	0x20001414
 800be70:	200018f0 	.word	0x200018f0
 800be74:	20001418 	.word	0x20001418

0800be78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be82:	4b21      	ldr	r3, [pc, #132]	; (800bf08 <prvAddCurrentTaskToDelayedList+0x90>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be88:	4b20      	ldr	r3, [pc, #128]	; (800bf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fbc6 	bl	800a620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9a:	d10a      	bne.n	800beb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d007      	beq.n	800beb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bea2:	4b1a      	ldr	r3, [pc, #104]	; (800bf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4619      	mov	r1, r3
 800beaa:	4819      	ldr	r0, [pc, #100]	; (800bf10 <prvAddCurrentTaskToDelayedList+0x98>)
 800beac:	f7fe fb5b 	bl	800a566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800beb0:	e026      	b.n	800bf00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4413      	add	r3, r2
 800beb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beba:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d209      	bcs.n	800bede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beca:	4b12      	ldr	r3, [pc, #72]	; (800bf14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3304      	adds	r3, #4
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7fe fb69 	bl	800a5ae <vListInsert>
}
 800bedc:	e010      	b.n	800bf00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bede:	4b0e      	ldr	r3, [pc, #56]	; (800bf18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f7fe fb5f 	bl	800a5ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d202      	bcs.n	800bf00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800befa:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	6013      	str	r3, [r2, #0]
}
 800bf00:	bf00      	nop
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	200018ec 	.word	0x200018ec
 800bf0c:	20001414 	.word	0x20001414
 800bf10:	200018d4 	.word	0x200018d4
 800bf14:	200018a4 	.word	0x200018a4
 800bf18:	200018a0 	.word	0x200018a0
 800bf1c:	20001908 	.word	0x20001908

0800bf20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf2a:	f000 fb15 	bl	800c558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf2e:	4b1d      	ldr	r3, [pc, #116]	; (800bfa4 <xTimerCreateTimerTask+0x84>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d021      	beq.n	800bf7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf3e:	1d3a      	adds	r2, r7, #4
 800bf40:	f107 0108 	add.w	r1, r7, #8
 800bf44:	f107 030c 	add.w	r3, r7, #12
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fac5 	bl	800a4d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	9202      	str	r2, [sp, #8]
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	2302      	movs	r3, #2
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	460a      	mov	r2, r1
 800bf60:	4911      	ldr	r1, [pc, #68]	; (800bfa8 <xTimerCreateTimerTask+0x88>)
 800bf62:	4812      	ldr	r0, [pc, #72]	; (800bfac <xTimerCreateTimerTask+0x8c>)
 800bf64:	f7ff f890 	bl	800b088 <xTaskCreateStatic>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	4a11      	ldr	r2, [pc, #68]	; (800bfb0 <xTimerCreateTimerTask+0x90>)
 800bf6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <xTimerCreateTimerTask+0x90>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf76:	2301      	movs	r3, #1
 800bf78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10c      	bne.n	800bf9a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	b672      	cpsid	i
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	b662      	cpsie	i
 800bf94:	613b      	str	r3, [r7, #16]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bf9a:	697b      	ldr	r3, [r7, #20]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20001944 	.word	0x20001944
 800bfa8:	0800dca4 	.word	0x0800dca4
 800bfac:	0800c0f1 	.word	0x0800c0f1
 800bfb0:	20001948 	.word	0x20001948

0800bfb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08a      	sub	sp, #40	; 0x28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10c      	bne.n	800bfe6 <xTimerGenericCommand+0x32>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	623b      	str	r3, [r7, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfe6:	4b1a      	ldr	r3, [pc, #104]	; (800c050 <xTimerGenericCommand+0x9c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d02a      	beq.n	800c044 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2b05      	cmp	r3, #5
 800bffe:	dc18      	bgt.n	800c032 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c000:	f7ff feaa 	bl	800bd58 <xTaskGetSchedulerState>
 800c004:	4603      	mov	r3, r0
 800c006:	2b02      	cmp	r3, #2
 800c008:	d109      	bne.n	800c01e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c00a:	4b11      	ldr	r3, [pc, #68]	; (800c050 <xTimerGenericCommand+0x9c>)
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	f107 0110 	add.w	r1, r7, #16
 800c012:	2300      	movs	r3, #0
 800c014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c016:	f7fe fc3d 	bl	800a894 <xQueueGenericSend>
 800c01a:	6278      	str	r0, [r7, #36]	; 0x24
 800c01c:	e012      	b.n	800c044 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c01e:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <xTimerGenericCommand+0x9c>)
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	f107 0110 	add.w	r1, r7, #16
 800c026:	2300      	movs	r3, #0
 800c028:	2200      	movs	r2, #0
 800c02a:	f7fe fc33 	bl	800a894 <xQueueGenericSend>
 800c02e:	6278      	str	r0, [r7, #36]	; 0x24
 800c030:	e008      	b.n	800c044 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c032:	4b07      	ldr	r3, [pc, #28]	; (800c050 <xTimerGenericCommand+0x9c>)
 800c034:	6818      	ldr	r0, [r3, #0]
 800c036:	f107 0110 	add.w	r1, r7, #16
 800c03a:	2300      	movs	r3, #0
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	f7fe fd2f 	bl	800aaa0 <xQueueGenericSendFromISR>
 800c042:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c046:	4618      	mov	r0, r3
 800c048:	3728      	adds	r7, #40	; 0x28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20001944 	.word	0x20001944

0800c054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af02      	add	r7, sp, #8
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c05e:	4b23      	ldr	r3, [pc, #140]	; (800c0ec <prvProcessExpiredTimer+0x98>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fad7 	bl	800a620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c078:	f003 0304 	and.w	r3, r3, #4
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d024      	beq.n	800c0ca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	699a      	ldr	r2, [r3, #24]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	18d1      	adds	r1, r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	6978      	ldr	r0, [r7, #20]
 800c08e:	f000 f8d3 	bl	800c238 <prvInsertTimerInActiveList>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d021      	beq.n	800c0dc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c098:	2300      	movs	r3, #0
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	2300      	movs	r3, #0
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	6978      	ldr	r0, [r7, #20]
 800c0a4:	f7ff ff86 	bl	800bfb4 <xTimerGenericCommand>
 800c0a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d115      	bne.n	800c0dc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	b672      	cpsid	i
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	b662      	cpsie	i
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	6978      	ldr	r0, [r7, #20]
 800c0e2:	4798      	blx	r3
}
 800c0e4:	bf00      	nop
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	2000193c 	.word	0x2000193c

0800c0f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f857 	bl	800c1b0 <prvGetNextExpireTime>
 800c102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4619      	mov	r1, r3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 f803 	bl	800c114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c10e:	f000 f8d5 	bl	800c2bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c112:	e7f1      	b.n	800c0f8 <prvTimerTask+0x8>

0800c114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c11e:	f7ff fa1d 	bl	800b55c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c122:	f107 0308 	add.w	r3, r7, #8
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f866 	bl	800c1f8 <prvSampleTimeNow>
 800c12c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d130      	bne.n	800c196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <prvProcessTimerOrBlockTask+0x3c>
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d806      	bhi.n	800c150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c142:	f7ff fa19 	bl	800b578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c146:	68f9      	ldr	r1, [r7, #12]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff ff83 	bl	800c054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c14e:	e024      	b.n	800c19a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d008      	beq.n	800c168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <prvProcessTimerOrBlockTask+0x90>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <prvProcessTimerOrBlockTask+0x50>
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <prvProcessTimerOrBlockTask+0x52>
 800c164:	2300      	movs	r3, #0
 800c166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c168:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <prvProcessTimerOrBlockTask+0x94>)
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	f7fe ff53 	bl	800b020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c17a:	f7ff f9fd 	bl	800b578 <xTaskResumeAll>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10a      	bne.n	800c19a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c184:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <prvProcessTimerOrBlockTask+0x98>)
 800c186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	f3bf 8f6f 	isb	sy
}
 800c194:	e001      	b.n	800c19a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c196:	f7ff f9ef 	bl	800b578 <xTaskResumeAll>
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20001940 	.word	0x20001940
 800c1a8:	20001944 	.word	0x20001944
 800c1ac:	e000ed04 	.word	0xe000ed04

0800c1b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1b8:	4b0e      	ldr	r3, [pc, #56]	; (800c1f4 <prvGetNextExpireTime+0x44>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <prvGetNextExpireTime+0x16>
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	e000      	b.n	800c1c8 <prvGetNextExpireTime+0x18>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1d4:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <prvGetNextExpireTime+0x44>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	e001      	b.n	800c1e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	2000193c 	.word	0x2000193c

0800c1f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c200:	f7ff fa5a 	bl	800b6b8 <xTaskGetTickCount>
 800c204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c206:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <prvSampleTimeNow+0x3c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d205      	bcs.n	800c21c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c210:	f000 f93c 	bl	800c48c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	e002      	b.n	800c222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c222:	4a04      	ldr	r2, [pc, #16]	; (800c234 <prvSampleTimeNow+0x3c>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c228:	68fb      	ldr	r3, [r7, #12]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	2000194c 	.word	0x2000194c

0800c238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d812      	bhi.n	800c284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d302      	bcc.n	800c272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	e01b      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c272:	4b10      	ldr	r3, [pc, #64]	; (800c2b4 <prvInsertTimerInActiveList+0x7c>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7fe f996 	bl	800a5ae <vListInsert>
 800c282:	e012      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d206      	bcs.n	800c29a <prvInsertTimerInActiveList+0x62>
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d302      	bcc.n	800c29a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c294:	2301      	movs	r3, #1
 800c296:	617b      	str	r3, [r7, #20]
 800c298:	e007      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c29a:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <prvInsertTimerInActiveList+0x80>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	f7fe f982 	bl	800a5ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2aa:	697b      	ldr	r3, [r7, #20]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20001940 	.word	0x20001940
 800c2b8:	2000193c 	.word	0x2000193c

0800c2bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08e      	sub	sp, #56	; 0x38
 800c2c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2c2:	e0d0      	b.n	800c466 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da1a      	bge.n	800c300 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2ca:	1d3b      	adds	r3, r7, #4
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10c      	bne.n	800c2f0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	61fb      	str	r3, [r7, #28]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f6:	6850      	ldr	r0, [r2, #4]
 800c2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2fa:	6892      	ldr	r2, [r2, #8]
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f2c0 80ae 	blt.w	800c464 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	3304      	adds	r3, #4
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe f981 	bl	800a620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c31e:	463b      	mov	r3, r7
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ff69 	bl	800c1f8 <prvSampleTimeNow>
 800c326:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b09      	cmp	r3, #9
 800c32c:	f200 809b 	bhi.w	800c466 <prvProcessReceivedCommands+0x1aa>
 800c330:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <prvProcessReceivedCommands+0x7c>)
 800c332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c336:	bf00      	nop
 800c338:	0800c361 	.word	0x0800c361
 800c33c:	0800c361 	.word	0x0800c361
 800c340:	0800c361 	.word	0x0800c361
 800c344:	0800c3d9 	.word	0x0800c3d9
 800c348:	0800c3ed 	.word	0x0800c3ed
 800c34c:	0800c43b 	.word	0x0800c43b
 800c350:	0800c361 	.word	0x0800c361
 800c354:	0800c361 	.word	0x0800c361
 800c358:	0800c3d9 	.word	0x0800c3d9
 800c35c:	0800c3ed 	.word	0x0800c3ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	18d1      	adds	r1, r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c380:	f7ff ff5a 	bl	800c238 <prvInsertTimerInActiveList>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d06d      	beq.n	800c466 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c390:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d062      	beq.n	800c466 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	441a      	add	r2, r3
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3b2:	f7ff fdff 	bl	800bfb4 <xTimerGenericCommand>
 800c3b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3b8:	6a3b      	ldr	r3, [r7, #32]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d153      	bne.n	800c466 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	b672      	cpsid	i
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	b662      	cpsie	i
 800c3d2:	61bb      	str	r3, [r7, #24]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3de:	f023 0301 	bic.w	r3, r3, #1
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3ea:	e03c      	b.n	800c466 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3f2:	f043 0301 	orr.w	r3, r3, #1
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c402:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10c      	bne.n	800c426 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	b672      	cpsid	i
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	b662      	cpsie	i
 800c420:	617b      	str	r3, [r7, #20]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	699a      	ldr	r2, [r3, #24]
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	18d1      	adds	r1, r2, r3
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c434:	f7ff ff00 	bl	800c238 <prvInsertTimerInActiveList>
					break;
 800c438:	e015      	b.n	800c466 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c440:	f003 0302 	and.w	r3, r3, #2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c44a:	f000 fbc5 	bl	800cbd8 <vPortFree>
 800c44e:	e00a      	b.n	800c466 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c456:	f023 0301 	bic.w	r3, r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c462:	e000      	b.n	800c466 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c466:	4b08      	ldr	r3, [pc, #32]	; (800c488 <prvProcessReceivedCommands+0x1cc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	1d39      	adds	r1, r7, #4
 800c46c:	2200      	movs	r2, #0
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe fbb6 	bl	800abe0 <xQueueReceive>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	f47f af24 	bne.w	800c2c4 <prvProcessReceivedCommands+0x8>
	}
}
 800c47c:	bf00      	nop
 800c47e:	bf00      	nop
 800c480:	3730      	adds	r7, #48	; 0x30
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20001944 	.word	0x20001944

0800c48c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c492:	e04a      	b.n	800c52a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c494:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c49e:	4b2c      	ldr	r3, [pc, #176]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe f8b7 	bl	800a620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d030      	beq.n	800c52a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d90e      	bls.n	800c4f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4e6:	4b1a      	ldr	r3, [pc, #104]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f7fe f85c 	bl	800a5ae <vListInsert>
 800c4f6:	e018      	b.n	800c52a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	2100      	movs	r1, #0
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f7ff fd56 	bl	800bfb4 <xTimerGenericCommand>
 800c508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	b672      	cpsid	i
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	b662      	cpsie	i
 800c524:	603b      	str	r3, [r7, #0]
}
 800c526:	bf00      	nop
 800c528:	e7fe      	b.n	800c528 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c52a:	4b09      	ldr	r3, [pc, #36]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1af      	bne.n	800c494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c534:	4b06      	ldr	r3, [pc, #24]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <prvSwitchTimerLists+0xc8>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a04      	ldr	r2, [pc, #16]	; (800c550 <prvSwitchTimerLists+0xc4>)
 800c540:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c542:	4a04      	ldr	r2, [pc, #16]	; (800c554 <prvSwitchTimerLists+0xc8>)
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	6013      	str	r3, [r2, #0]
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	2000193c 	.word	0x2000193c
 800c554:	20001940 	.word	0x20001940

0800c558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c55e:	f000 f945 	bl	800c7ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c562:	4b15      	ldr	r3, [pc, #84]	; (800c5b8 <prvCheckForValidListAndQueue+0x60>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d120      	bne.n	800c5ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c56a:	4814      	ldr	r0, [pc, #80]	; (800c5bc <prvCheckForValidListAndQueue+0x64>)
 800c56c:	f7fd ffce 	bl	800a50c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c570:	4813      	ldr	r0, [pc, #76]	; (800c5c0 <prvCheckForValidListAndQueue+0x68>)
 800c572:	f7fd ffcb 	bl	800a50c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <prvCheckForValidListAndQueue+0x6c>)
 800c578:	4a10      	ldr	r2, [pc, #64]	; (800c5bc <prvCheckForValidListAndQueue+0x64>)
 800c57a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c57c:	4b12      	ldr	r3, [pc, #72]	; (800c5c8 <prvCheckForValidListAndQueue+0x70>)
 800c57e:	4a10      	ldr	r2, [pc, #64]	; (800c5c0 <prvCheckForValidListAndQueue+0x68>)
 800c580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c582:	2300      	movs	r3, #0
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <prvCheckForValidListAndQueue+0x74>)
 800c588:	4a11      	ldr	r2, [pc, #68]	; (800c5d0 <prvCheckForValidListAndQueue+0x78>)
 800c58a:	2110      	movs	r1, #16
 800c58c:	200a      	movs	r0, #10
 800c58e:	f7fe f8db 	bl	800a748 <xQueueGenericCreateStatic>
 800c592:	4603      	mov	r3, r0
 800c594:	4a08      	ldr	r2, [pc, #32]	; (800c5b8 <prvCheckForValidListAndQueue+0x60>)
 800c596:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <prvCheckForValidListAndQueue+0x60>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5a0:	4b05      	ldr	r3, [pc, #20]	; (800c5b8 <prvCheckForValidListAndQueue+0x60>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	490b      	ldr	r1, [pc, #44]	; (800c5d4 <prvCheckForValidListAndQueue+0x7c>)
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe fd10 	bl	800afcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5ac:	f000 f952 	bl	800c854 <vPortExitCritical>
}
 800c5b0:	bf00      	nop
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20001944 	.word	0x20001944
 800c5bc:	20001914 	.word	0x20001914
 800c5c0:	20001928 	.word	0x20001928
 800c5c4:	2000193c 	.word	0x2000193c
 800c5c8:	20001940 	.word	0x20001940
 800c5cc:	200019f0 	.word	0x200019f0
 800c5d0:	20001950 	.word	0x20001950
 800c5d4:	0800dcac 	.word	0x0800dcac

0800c5d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3b04      	subs	r3, #4
 800c5e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	3b04      	subs	r3, #4
 800c5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f023 0201 	bic.w	r2, r3, #1
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3b04      	subs	r3, #4
 800c606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c608:	4a0c      	ldr	r2, [pc, #48]	; (800c63c <pxPortInitialiseStack+0x64>)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3b14      	subs	r3, #20
 800c612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3b04      	subs	r3, #4
 800c61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f06f 0202 	mvn.w	r2, #2
 800c626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	3b20      	subs	r3, #32
 800c62c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c62e:	68fb      	ldr	r3, [r7, #12]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3714      	adds	r7, #20
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	0800c641 	.word	0x0800c641

0800c640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c64a:	4b14      	ldr	r3, [pc, #80]	; (800c69c <prvTaskExitError+0x5c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c652:	d00c      	beq.n	800c66e <prvTaskExitError+0x2e>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	b672      	cpsid	i
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	b662      	cpsie	i
 800c668:	60fb      	str	r3, [r7, #12]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <prvTaskExitError+0x2c>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	b672      	cpsid	i
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	b662      	cpsie	i
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c686:	bf00      	nop
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0fc      	beq.n	800c688 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c68e:	bf00      	nop
 800c690:	bf00      	nop
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	20000098 	.word	0x20000098

0800c6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <pxCurrentTCBConst2>)
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	6808      	ldr	r0, [r1, #0]
 800c6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	f380 8809 	msr	PSP, r0
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f04f 0000 	mov.w	r0, #0
 800c6b6:	f380 8811 	msr	BASEPRI, r0
 800c6ba:	4770      	bx	lr
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <pxCurrentTCBConst2>:
 800c6c0:	20001414 	.word	0x20001414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <prvPortStartFirstTask+0x24>)
 800c6ca:	6800      	ldr	r0, [r0, #0]
 800c6cc:	6800      	ldr	r0, [r0, #0]
 800c6ce:	f380 8808 	msr	MSP, r0
 800c6d2:	f04f 0000 	mov.w	r0, #0
 800c6d6:	f380 8814 	msr	CONTROL, r0
 800c6da:	b662      	cpsie	i
 800c6dc:	b661      	cpsie	f
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	df00      	svc	0
 800c6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ea:	bf00      	nop
 800c6ec:	e000ed08 	.word	0xe000ed08

0800c6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6f6:	4b37      	ldr	r3, [pc, #220]	; (800c7d4 <xPortStartScheduler+0xe4>)
 800c6f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	22ff      	movs	r2, #255	; 0xff
 800c706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	4b2f      	ldr	r3, [pc, #188]	; (800c7d8 <xPortStartScheduler+0xe8>)
 800c71c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c71e:	4b2f      	ldr	r3, [pc, #188]	; (800c7dc <xPortStartScheduler+0xec>)
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c724:	e009      	b.n	800c73a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c726:	4b2d      	ldr	r3, [pc, #180]	; (800c7dc <xPortStartScheduler+0xec>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4a2b      	ldr	r2, [pc, #172]	; (800c7dc <xPortStartScheduler+0xec>)
 800c72e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	b2db      	uxtb	r3, r3
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	b2db      	uxtb	r3, r3
 800c738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c742:	2b80      	cmp	r3, #128	; 0x80
 800c744:	d0ef      	beq.n	800c726 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c746:	4b25      	ldr	r3, [pc, #148]	; (800c7dc <xPortStartScheduler+0xec>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f1c3 0307 	rsb	r3, r3, #7
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d00c      	beq.n	800c76c <xPortStartScheduler+0x7c>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	b672      	cpsid	i
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	b662      	cpsie	i
 800c766:	60bb      	str	r3, [r7, #8]
}
 800c768:	bf00      	nop
 800c76a:	e7fe      	b.n	800c76a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c76c:	4b1b      	ldr	r3, [pc, #108]	; (800c7dc <xPortStartScheduler+0xec>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	021b      	lsls	r3, r3, #8
 800c772:	4a1a      	ldr	r2, [pc, #104]	; (800c7dc <xPortStartScheduler+0xec>)
 800c774:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c776:	4b19      	ldr	r3, [pc, #100]	; (800c7dc <xPortStartScheduler+0xec>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c77e:	4a17      	ldr	r2, [pc, #92]	; (800c7dc <xPortStartScheduler+0xec>)
 800c780:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	b2da      	uxtb	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c78a:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <xPortStartScheduler+0xf0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a14      	ldr	r2, [pc, #80]	; (800c7e0 <xPortStartScheduler+0xf0>)
 800c790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c794:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c796:	4b12      	ldr	r3, [pc, #72]	; (800c7e0 <xPortStartScheduler+0xf0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a11      	ldr	r2, [pc, #68]	; (800c7e0 <xPortStartScheduler+0xf0>)
 800c79c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7a2:	f000 f8dd 	bl	800c960 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7a6:	4b0f      	ldr	r3, [pc, #60]	; (800c7e4 <xPortStartScheduler+0xf4>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7ac:	f000 f8fc 	bl	800c9a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7b0:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <xPortStartScheduler+0xf8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	; (800c7e8 <xPortStartScheduler+0xf8>)
 800c7b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7bc:	f7ff ff84 	bl	800c6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7c0:	f7ff f846 	bl	800b850 <vTaskSwitchContext>
	prvTaskExitError();
 800c7c4:	f7ff ff3c 	bl	800c640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	e000e400 	.word	0xe000e400
 800c7d8:	20001a40 	.word	0x20001a40
 800c7dc:	20001a44 	.word	0x20001a44
 800c7e0:	e000ed20 	.word	0xe000ed20
 800c7e4:	20000098 	.word	0x20000098
 800c7e8:	e000ef34 	.word	0xe000ef34

0800c7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	b672      	cpsid	i
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	b662      	cpsie	i
 800c806:	607b      	str	r3, [r7, #4]
}
 800c808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c80a:	4b10      	ldr	r3, [pc, #64]	; (800c84c <vPortEnterCritical+0x60>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	4a0e      	ldr	r2, [pc, #56]	; (800c84c <vPortEnterCritical+0x60>)
 800c812:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c814:	4b0d      	ldr	r3, [pc, #52]	; (800c84c <vPortEnterCritical+0x60>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d111      	bne.n	800c840 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c81c:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <vPortEnterCritical+0x64>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00c      	beq.n	800c840 <vPortEnterCritical+0x54>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	603b      	str	r3, [r7, #0]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <vPortEnterCritical+0x52>
	}
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	20000098 	.word	0x20000098
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c85a:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <vPortExitCritical+0x54>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10c      	bne.n	800c87c <vPortExitCritical+0x28>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	607b      	str	r3, [r7, #4]
}
 800c878:	bf00      	nop
 800c87a:	e7fe      	b.n	800c87a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c87c:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <vPortExitCritical+0x54>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3b01      	subs	r3, #1
 800c882:	4a09      	ldr	r2, [pc, #36]	; (800c8a8 <vPortExitCritical+0x54>)
 800c884:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c886:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <vPortExitCritical+0x54>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d105      	bne.n	800c89a <vPortExitCritical+0x46>
 800c88e:	2300      	movs	r3, #0
 800c890:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	f383 8811 	msr	BASEPRI, r3
}
 800c898:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c89a:	bf00      	nop
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	20000098 	.word	0x20000098
 800c8ac:	00000000 	.word	0x00000000

0800c8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8b0:	f3ef 8009 	mrs	r0, PSP
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	4b15      	ldr	r3, [pc, #84]	; (800c910 <pxCurrentTCBConst>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	f01e 0f10 	tst.w	lr, #16
 800c8c0:	bf08      	it	eq
 800c8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	6010      	str	r0, [r2, #0]
 800c8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8d4:	b672      	cpsid	i
 800c8d6:	f380 8811 	msr	BASEPRI, r0
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	b662      	cpsie	i
 800c8e4:	f7fe ffb4 	bl	800b850 <vTaskSwitchContext>
 800c8e8:	f04f 0000 	mov.w	r0, #0
 800c8ec:	f380 8811 	msr	BASEPRI, r0
 800c8f0:	bc09      	pop	{r0, r3}
 800c8f2:	6819      	ldr	r1, [r3, #0]
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f01e 0f10 	tst.w	lr, #16
 800c8fe:	bf08      	it	eq
 800c900:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c904:	f380 8809 	msr	PSP, r0
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop

0800c910 <pxCurrentTCBConst>:
 800c910:	20001414 	.word	0x20001414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	b672      	cpsid	i
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	b662      	cpsie	i
 800c932:	607b      	str	r3, [r7, #4]
}
 800c934:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c936:	f7fe fecf 	bl	800b6d8 <xTaskIncrementTick>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c940:	4b06      	ldr	r3, [pc, #24]	; (800c95c <SysTick_Handler+0x44>)
 800c942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	2300      	movs	r3, #0
 800c94a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	f383 8811 	msr	BASEPRI, r3
}
 800c952:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	e000ed04 	.word	0xe000ed04

0800c960 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c960:	b480      	push	{r7}
 800c962:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c964:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <vPortSetupTimerInterrupt+0x34>)
 800c966:	2200      	movs	r2, #0
 800c968:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c96a:	4b0b      	ldr	r3, [pc, #44]	; (800c998 <vPortSetupTimerInterrupt+0x38>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c970:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <vPortSetupTimerInterrupt+0x3c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a0a      	ldr	r2, [pc, #40]	; (800c9a0 <vPortSetupTimerInterrupt+0x40>)
 800c976:	fba2 2303 	umull	r2, r3, r2, r3
 800c97a:	099b      	lsrs	r3, r3, #6
 800c97c:	4a09      	ldr	r2, [pc, #36]	; (800c9a4 <vPortSetupTimerInterrupt+0x44>)
 800c97e:	3b01      	subs	r3, #1
 800c980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c982:	4b04      	ldr	r3, [pc, #16]	; (800c994 <vPortSetupTimerInterrupt+0x34>)
 800c984:	2207      	movs	r2, #7
 800c986:	601a      	str	r2, [r3, #0]
}
 800c988:	bf00      	nop
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	e000e010 	.word	0xe000e010
 800c998:	e000e018 	.word	0xe000e018
 800c99c:	20000000 	.word	0x20000000
 800c9a0:	10624dd3 	.word	0x10624dd3
 800c9a4:	e000e014 	.word	0xe000e014

0800c9a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9b8 <vPortEnableVFP+0x10>
 800c9ac:	6801      	ldr	r1, [r0, #0]
 800c9ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9b2:	6001      	str	r1, [r0, #0]
 800c9b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9b6:	bf00      	nop
 800c9b8:	e000ed88 	.word	0xe000ed88

0800c9bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9c2:	f3ef 8305 	mrs	r3, IPSR
 800c9c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b0f      	cmp	r3, #15
 800c9cc:	d916      	bls.n	800c9fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9ce:	4a19      	ldr	r2, [pc, #100]	; (800ca34 <vPortValidateInterruptPriority+0x78>)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9d8:	4b17      	ldr	r3, [pc, #92]	; (800ca38 <vPortValidateInterruptPriority+0x7c>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	7afa      	ldrb	r2, [r7, #11]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d20c      	bcs.n	800c9fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	b672      	cpsid	i
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	b662      	cpsie	i
 800c9f6:	607b      	str	r3, [r7, #4]
}
 800c9f8:	bf00      	nop
 800c9fa:	e7fe      	b.n	800c9fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <vPortValidateInterruptPriority+0x80>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca04:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <vPortValidateInterruptPriority+0x84>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d90c      	bls.n	800ca26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	b672      	cpsid	i
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	b662      	cpsie	i
 800ca20:	603b      	str	r3, [r7, #0]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <vPortValidateInterruptPriority+0x68>
	}
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	e000e3f0 	.word	0xe000e3f0
 800ca38:	20001a40 	.word	0x20001a40
 800ca3c:	e000ed0c 	.word	0xe000ed0c
 800ca40:	20001a44 	.word	0x20001a44

0800ca44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b08a      	sub	sp, #40	; 0x28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca50:	f7fe fd84 	bl	800b55c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca54:	4b5b      	ldr	r3, [pc, #364]	; (800cbc4 <pvPortMalloc+0x180>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca5c:	f000 f91a 	bl	800cc94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca60:	4b59      	ldr	r3, [pc, #356]	; (800cbc8 <pvPortMalloc+0x184>)
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f040 8092 	bne.w	800cb92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d01f      	beq.n	800cab4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ca74:	2208      	movs	r2, #8
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4413      	add	r3, r2
 800ca7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d016      	beq.n	800cab4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f023 0307 	bic.w	r3, r3, #7
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f003 0307 	and.w	r3, r3, #7
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00c      	beq.n	800cab4 <pvPortMalloc+0x70>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	b672      	cpsid	i
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	b662      	cpsie	i
 800caae:	617b      	str	r3, [r7, #20]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d06b      	beq.n	800cb92 <pvPortMalloc+0x14e>
 800caba:	4b44      	ldr	r3, [pc, #272]	; (800cbcc <pvPortMalloc+0x188>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d866      	bhi.n	800cb92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cac4:	4b42      	ldr	r3, [pc, #264]	; (800cbd0 <pvPortMalloc+0x18c>)
 800cac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cac8:	4b41      	ldr	r3, [pc, #260]	; (800cbd0 <pvPortMalloc+0x18c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cace:	e004      	b.n	800cada <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d903      	bls.n	800caec <pvPortMalloc+0xa8>
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1f1      	bne.n	800cad0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800caec:	4b35      	ldr	r3, [pc, #212]	; (800cbc4 <pvPortMalloc+0x180>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d04d      	beq.n	800cb92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2208      	movs	r2, #8
 800cafc:	4413      	add	r3, r2
 800cafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	2308      	movs	r3, #8
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d921      	bls.n	800cb5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00c      	beq.n	800cb44 <pvPortMalloc+0x100>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	b672      	cpsid	i
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	b662      	cpsie	i
 800cb3e:	613b      	str	r3, [r7, #16]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	1ad2      	subs	r2, r2, r3
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb56:	69b8      	ldr	r0, [r7, #24]
 800cb58:	f000 f8fe 	bl	800cd58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb5c:	4b1b      	ldr	r3, [pc, #108]	; (800cbcc <pvPortMalloc+0x188>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	4a19      	ldr	r2, [pc, #100]	; (800cbcc <pvPortMalloc+0x188>)
 800cb68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb6a:	4b18      	ldr	r3, [pc, #96]	; (800cbcc <pvPortMalloc+0x188>)
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <pvPortMalloc+0x190>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d203      	bcs.n	800cb7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb76:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <pvPortMalloc+0x188>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a16      	ldr	r2, [pc, #88]	; (800cbd4 <pvPortMalloc+0x190>)
 800cb7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	4b11      	ldr	r3, [pc, #68]	; (800cbc8 <pvPortMalloc+0x184>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	431a      	orrs	r2, r3
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb92:	f7fe fcf1 	bl	800b578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	f003 0307 	and.w	r3, r3, #7
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00c      	beq.n	800cbba <pvPortMalloc+0x176>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	b672      	cpsid	i
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	b662      	cpsie	i
 800cbb4:	60fb      	str	r3, [r7, #12]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <pvPortMalloc+0x174>
	return pvReturn;
 800cbba:	69fb      	ldr	r3, [r7, #28]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3728      	adds	r7, #40	; 0x28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20005650 	.word	0x20005650
 800cbc8:	2000565c 	.word	0x2000565c
 800cbcc:	20005654 	.word	0x20005654
 800cbd0:	20005648 	.word	0x20005648
 800cbd4:	20005658 	.word	0x20005658

0800cbd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b086      	sub	sp, #24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d04c      	beq.n	800cc84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbea:	2308      	movs	r3, #8
 800cbec:	425b      	negs	r3, r3
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	4b23      	ldr	r3, [pc, #140]	; (800cc8c <vPortFree+0xb4>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4013      	ands	r3, r2
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <vPortFree+0x48>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	60fb      	str	r3, [r7, #12]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00c      	beq.n	800cc42 <vPortFree+0x6a>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	b672      	cpsid	i
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	b662      	cpsie	i
 800cc3c:	60bb      	str	r3, [r7, #8]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <vPortFree+0xb4>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d019      	beq.n	800cc84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d115      	bne.n	800cc84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <vPortFree+0xb4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	43db      	mvns	r3, r3
 800cc62:	401a      	ands	r2, r3
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc68:	f7fe fc78 	bl	800b55c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <vPortFree+0xb8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4413      	add	r3, r2
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <vPortFree+0xb8>)
 800cc78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc7a:	6938      	ldr	r0, [r7, #16]
 800cc7c:	f000 f86c 	bl	800cd58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc80:	f7fe fc7a 	bl	800b578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc84:	bf00      	nop
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	2000565c 	.word	0x2000565c
 800cc90:	20005654 	.word	0x20005654

0800cc94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cca0:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <prvHeapInit+0xac>)
 800cca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00c      	beq.n	800ccc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3307      	adds	r3, #7
 800ccb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 0307 	bic.w	r3, r3, #7
 800ccba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	4a1f      	ldr	r2, [pc, #124]	; (800cd40 <prvHeapInit+0xac>)
 800ccc4:	4413      	add	r3, r2
 800ccc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cccc:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <prvHeapInit+0xb0>)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <prvHeapInit+0xb0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	4413      	add	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cce0:	2208      	movs	r2, #8
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f023 0307 	bic.w	r3, r3, #7
 800ccee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a15      	ldr	r2, [pc, #84]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccf6:	4b14      	ldr	r3, [pc, #80]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccfe:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <prvHeapInit+0xb4>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvHeapInit+0xb4>)
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <prvHeapInit+0xb8>)
 800cd22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <prvHeapInit+0xbc>)
 800cd2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <prvHeapInit+0xc0>)
 800cd2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd32:	601a      	str	r2, [r3, #0]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	20001a48 	.word	0x20001a48
 800cd44:	20005648 	.word	0x20005648
 800cd48:	20005650 	.word	0x20005650
 800cd4c:	20005658 	.word	0x20005658
 800cd50:	20005654 	.word	0x20005654
 800cd54:	2000565c 	.word	0x2000565c

0800cd58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd60:	4b28      	ldr	r3, [pc, #160]	; (800ce04 <prvInsertBlockIntoFreeList+0xac>)
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e002      	b.n	800cd6c <prvInsertBlockIntoFreeList+0x14>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d8f7      	bhi.n	800cd66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	4413      	add	r3, r2
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d108      	bne.n	800cd9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	441a      	add	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	441a      	add	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d118      	bne.n	800cde0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d00d      	beq.n	800cdd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	441a      	add	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e008      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	e003      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d002      	beq.n	800cdf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20005648 	.word	0x20005648
 800ce08:	20005650 	.word	0x20005650

0800ce0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce10:	2200      	movs	r2, #0
 800ce12:	4912      	ldr	r1, [pc, #72]	; (800ce5c <MX_USB_DEVICE_Init+0x50>)
 800ce14:	4812      	ldr	r0, [pc, #72]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce16:	f7fb fee3 	bl	8008be0 <USBD_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce20:	f7f4 f85a 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce24:	490f      	ldr	r1, [pc, #60]	; (800ce64 <MX_USB_DEVICE_Init+0x58>)
 800ce26:	480e      	ldr	r0, [pc, #56]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce28:	f7fb ff0a 	bl	8008c40 <USBD_RegisterClass>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce32:	f7f4 f851 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce36:	490c      	ldr	r1, [pc, #48]	; (800ce68 <MX_USB_DEVICE_Init+0x5c>)
 800ce38:	4809      	ldr	r0, [pc, #36]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce3a:	f7fb fe41 	bl	8008ac0 <USBD_CDC_RegisterInterface>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce44:	f7f4 f848 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce48:	4805      	ldr	r0, [pc, #20]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce4a:	f7fb ff2f 	bl	8008cac <USBD_Start>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce54:	f7f4 f840 	bl	8000ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce58:	bf00      	nop
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	200000b0 	.word	0x200000b0
 800ce60:	20005660 	.word	0x20005660
 800ce64:	20000018 	.word	0x20000018
 800ce68:	2000009c 	.word	0x2000009c

0800ce6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce70:	2200      	movs	r2, #0
 800ce72:	4905      	ldr	r1, [pc, #20]	; (800ce88 <CDC_Init_FS+0x1c>)
 800ce74:	4805      	ldr	r0, [pc, #20]	; (800ce8c <CDC_Init_FS+0x20>)
 800ce76:	f7fb fe3d 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce7a:	4905      	ldr	r1, [pc, #20]	; (800ce90 <CDC_Init_FS+0x24>)
 800ce7c:	4803      	ldr	r0, [pc, #12]	; (800ce8c <CDC_Init_FS+0x20>)
 800ce7e:	f7fb fe5b 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	2000613c 	.word	0x2000613c
 800ce8c:	20005660 	.word	0x20005660
 800ce90:	2000593c 	.word	0x2000593c

0800ce94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce94:	b480      	push	{r7}
 800ce96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b23      	cmp	r3, #35	; 0x23
 800ceb8:	d84a      	bhi.n	800cf50 <CDC_Control_FS+0xac>
 800ceba:	a201      	add	r2, pc, #4	; (adr r2, 800cec0 <CDC_Control_FS+0x1c>)
 800cebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec0:	0800cf51 	.word	0x0800cf51
 800cec4:	0800cf51 	.word	0x0800cf51
 800cec8:	0800cf51 	.word	0x0800cf51
 800cecc:	0800cf51 	.word	0x0800cf51
 800ced0:	0800cf51 	.word	0x0800cf51
 800ced4:	0800cf51 	.word	0x0800cf51
 800ced8:	0800cf51 	.word	0x0800cf51
 800cedc:	0800cf51 	.word	0x0800cf51
 800cee0:	0800cf51 	.word	0x0800cf51
 800cee4:	0800cf51 	.word	0x0800cf51
 800cee8:	0800cf51 	.word	0x0800cf51
 800ceec:	0800cf51 	.word	0x0800cf51
 800cef0:	0800cf51 	.word	0x0800cf51
 800cef4:	0800cf51 	.word	0x0800cf51
 800cef8:	0800cf51 	.word	0x0800cf51
 800cefc:	0800cf51 	.word	0x0800cf51
 800cf00:	0800cf51 	.word	0x0800cf51
 800cf04:	0800cf51 	.word	0x0800cf51
 800cf08:	0800cf51 	.word	0x0800cf51
 800cf0c:	0800cf51 	.word	0x0800cf51
 800cf10:	0800cf51 	.word	0x0800cf51
 800cf14:	0800cf51 	.word	0x0800cf51
 800cf18:	0800cf51 	.word	0x0800cf51
 800cf1c:	0800cf51 	.word	0x0800cf51
 800cf20:	0800cf51 	.word	0x0800cf51
 800cf24:	0800cf51 	.word	0x0800cf51
 800cf28:	0800cf51 	.word	0x0800cf51
 800cf2c:	0800cf51 	.word	0x0800cf51
 800cf30:	0800cf51 	.word	0x0800cf51
 800cf34:	0800cf51 	.word	0x0800cf51
 800cf38:	0800cf51 	.word	0x0800cf51
 800cf3c:	0800cf51 	.word	0x0800cf51
 800cf40:	0800cf51 	.word	0x0800cf51
 800cf44:	0800cf51 	.word	0x0800cf51
 800cf48:	0800cf51 	.word	0x0800cf51
 800cf4c:	0800cf51 	.word	0x0800cf51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf50:	bf00      	nop
  }

  return (USBD_OK);
 800cf52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	4805      	ldr	r0, [pc, #20]	; (800cf84 <CDC_Receive_FS+0x24>)
 800cf6e:	f7fb fde3 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf72:	4804      	ldr	r0, [pc, #16]	; (800cf84 <CDC_Receive_FS+0x24>)
 800cf74:	f7fb fdfe 	bl	8008b74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20005660 	.word	0x20005660

0800cf88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	4613      	mov	r3, r2
 800cf94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
	...

0800cfac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2212      	movs	r2, #18
 800cfbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfbe:	4b03      	ldr	r3, [pc, #12]	; (800cfcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	200000d0 	.word	0x200000d0

0800cfd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2204      	movs	r2, #4
 800cfe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	200000f0 	.word	0x200000f0

0800cff4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d000:	79fb      	ldrb	r3, [r7, #7]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d105      	bne.n	800d012 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	4907      	ldr	r1, [pc, #28]	; (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
 800d00a:	4808      	ldr	r0, [pc, #32]	; (800d02c <USBD_FS_ProductStrDescriptor+0x38>)
 800d00c:	f7fd f824 	bl	800a058 <USBD_GetString>
 800d010:	e004      	b.n	800d01c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	4904      	ldr	r1, [pc, #16]	; (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
 800d016:	4805      	ldr	r0, [pc, #20]	; (800d02c <USBD_FS_ProductStrDescriptor+0x38>)
 800d018:	f7fd f81e 	bl	800a058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d01c:	4b02      	ldr	r3, [pc, #8]	; (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	2000693c 	.word	0x2000693c
 800d02c:	0800dcb4 	.word	0x0800dcb4

0800d030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4904      	ldr	r1, [pc, #16]	; (800d050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d040:	4804      	ldr	r0, [pc, #16]	; (800d054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d042:	f7fd f809 	bl	800a058 <USBD_GetString>
  return USBD_StrDesc;
 800d046:	4b02      	ldr	r3, [pc, #8]	; (800d050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	2000693c 	.word	0x2000693c
 800d054:	0800dcc8 	.word	0x0800dcc8

0800d058 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	221a      	movs	r2, #26
 800d068:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d06a:	f000 f855 	bl	800d118 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d06e:	4b02      	ldr	r3, [pc, #8]	; (800d078 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	200000f4 	.word	0x200000f4

0800d07c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d105      	bne.n	800d09a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	4907      	ldr	r1, [pc, #28]	; (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d092:	4808      	ldr	r0, [pc, #32]	; (800d0b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d094:	f7fc ffe0 	bl	800a058 <USBD_GetString>
 800d098:	e004      	b.n	800d0a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	4904      	ldr	r1, [pc, #16]	; (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d09e:	4805      	ldr	r0, [pc, #20]	; (800d0b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0a0:	f7fc ffda 	bl	800a058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0a4:	4b02      	ldr	r3, [pc, #8]	; (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	2000693c 	.word	0x2000693c
 800d0b4:	0800dcdc 	.word	0x0800dcdc

0800d0b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6039      	str	r1, [r7, #0]
 800d0c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d105      	bne.n	800d0d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	4907      	ldr	r1, [pc, #28]	; (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ce:	4808      	ldr	r0, [pc, #32]	; (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0d0:	f7fc ffc2 	bl	800a058 <USBD_GetString>
 800d0d4:	e004      	b.n	800d0e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	4904      	ldr	r1, [pc, #16]	; (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0da:	4805      	ldr	r0, [pc, #20]	; (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0dc:	f7fc ffbc 	bl	800a058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0e0:	4b02      	ldr	r3, [pc, #8]	; (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	2000693c 	.word	0x2000693c
 800d0f0:	0800dce8 	.word	0x0800dce8

0800d0f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	220c      	movs	r2, #12
 800d104:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d106:	4b03      	ldr	r3, [pc, #12]	; (800d114 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	200000e4 	.word	0x200000e4

0800d118 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <Get_SerialNum+0x44>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d124:	4b0e      	ldr	r3, [pc, #56]	; (800d160 <Get_SerialNum+0x48>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d12a:	4b0e      	ldr	r3, [pc, #56]	; (800d164 <Get_SerialNum+0x4c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d13e:	2208      	movs	r2, #8
 800d140:	4909      	ldr	r1, [pc, #36]	; (800d168 <Get_SerialNum+0x50>)
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 f814 	bl	800d170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d148:	2204      	movs	r2, #4
 800d14a:	4908      	ldr	r1, [pc, #32]	; (800d16c <Get_SerialNum+0x54>)
 800d14c:	68b8      	ldr	r0, [r7, #8]
 800d14e:	f000 f80f 	bl	800d170 <IntToUnicode>
  }
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	1ff0f420 	.word	0x1ff0f420
 800d160:	1ff0f424 	.word	0x1ff0f424
 800d164:	1ff0f428 	.word	0x1ff0f428
 800d168:	200000f6 	.word	0x200000f6
 800d16c:	20000106 	.word	0x20000106

0800d170 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
 800d186:	e027      	b.n	800d1d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	0f1b      	lsrs	r3, r3, #28
 800d18c:	2b09      	cmp	r3, #9
 800d18e:	d80b      	bhi.n	800d1a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0f1b      	lsrs	r3, r3, #28
 800d194:	b2da      	uxtb	r2, r3
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4619      	mov	r1, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	440b      	add	r3, r1
 800d1a0:	3230      	adds	r2, #48	; 0x30
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	e00a      	b.n	800d1be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	0f1b      	lsrs	r3, r3, #28
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3237      	adds	r2, #55	; 0x37
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	75fb      	strb	r3, [r7, #23]
 800d1d8:	7dfa      	ldrb	r2, [r7, #23]
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d3d3      	bcc.n	800d188 <IntToUnicode+0x18>
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b0ae      	sub	sp, #184	; 0xb8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	609a      	str	r2, [r3, #8]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d208:	f107 0314 	add.w	r3, r7, #20
 800d20c:	2290      	movs	r2, #144	; 0x90
 800d20e:	2100      	movs	r1, #0
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fba5 	bl	800d960 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d21e:	d151      	bne.n	800d2c4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d224:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d226:	2300      	movs	r3, #0
 800d228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d22c:	f107 0314 	add.w	r3, r7, #20
 800d230:	4618      	mov	r0, r3
 800d232:	f7f7 fbd1 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d23c:	f7f3 fe4c 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d240:	4b22      	ldr	r3, [pc, #136]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d244:	4a21      	ldr	r2, [pc, #132]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	6313      	str	r3, [r2, #48]	; 0x30
 800d24c:	4b1f      	ldr	r3, [pc, #124]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	613b      	str	r3, [r7, #16]
 800d256:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d258:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d25c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d260:	2302      	movs	r3, #2
 800d262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d266:	2300      	movs	r3, #0
 800d268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d26c:	2303      	movs	r3, #3
 800d26e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d272:	230a      	movs	r3, #10
 800d274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d27c:	4619      	mov	r1, r3
 800d27e:	4814      	ldr	r0, [pc, #80]	; (800d2d0 <HAL_PCD_MspInit+0xe0>)
 800d280:	f7f5 f8ae 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d284:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d288:	4a10      	ldr	r2, [pc, #64]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d28e:	6353      	str	r3, [r2, #52]	; 0x34
 800d290:	4b0e      	ldr	r3, [pc, #56]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d298:	60fb      	str	r3, [r7, #12]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4b0b      	ldr	r3, [pc, #44]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a0:	4a0a      	ldr	r2, [pc, #40]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d2a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2a6:	6453      	str	r3, [r2, #68]	; 0x44
 800d2a8:	4b08      	ldr	r3, [pc, #32]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2b0:	60bb      	str	r3, [r7, #8]
 800d2b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2105      	movs	r1, #5
 800d2b8:	2043      	movs	r0, #67	; 0x43
 800d2ba:	f7f4 fc61 	bl	8001b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d2be:	2043      	movs	r0, #67	; 0x43
 800d2c0:	f7f4 fc7a 	bl	8001bb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d2c4:	bf00      	nop
 800d2c6:	37b8      	adds	r7, #184	; 0xb8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	40023800 	.word	0x40023800
 800d2d0:	40020000 	.word	0x40020000

0800d2d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	f7fb fd2b 	bl	8008d46 <USBD_LL_SetupStage>
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d30a:	78fa      	ldrb	r2, [r7, #3]
 800d30c:	6879      	ldr	r1, [r7, #4]
 800d30e:	4613      	mov	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	4413      	add	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	440b      	add	r3, r1
 800d318:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	78fb      	ldrb	r3, [r7, #3]
 800d320:	4619      	mov	r1, r3
 800d322:	f7fb fd65 	bl	8008df0 <USBD_LL_DataOutStage>
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	4613      	mov	r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	334c      	adds	r3, #76	; 0x4c
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	4619      	mov	r1, r3
 800d356:	f7fb fdfe 	bl	8008f56 <USBD_LL_DataInStage>
}
 800d35a:	bf00      	nop
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d370:	4618      	mov	r0, r3
 800d372:	f7fb ff32 	bl	80091da <USBD_LL_SOF>
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d386:	2301      	movs	r3, #1
 800d388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d102      	bne.n	800d398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d392:	2300      	movs	r3, #0
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e008      	b.n	800d3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d102      	bne.n	800d3a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	73fb      	strb	r3, [r7, #15]
 800d3a4:	e001      	b.n	800d3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d3a6:	f7f3 fd97 	bl	8000ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d3b0:	7bfa      	ldrb	r2, [r7, #15]
 800d3b2:	4611      	mov	r1, r2
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fb fed2 	bl	800915e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fb fe7a 	bl	80090ba <USBD_LL_Reset>
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fb fecd 	bl	800917e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	6812      	ldr	r2, [r2, #0]
 800d3f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d005      	beq.n	800d410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <HAL_PCD_SuspendCallback+0x48>)
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	4a03      	ldr	r2, [pc, #12]	; (800d418 <HAL_PCD_SuspendCallback+0x48>)
 800d40a:	f043 0306 	orr.w	r3, r3, #6
 800d40e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	e000ed00 	.word	0xe000ed00

0800d41c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fb febd 	bl	80091aa <USBD_LL_Resume>
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fb ff15 	bl	800927e <USBD_LL_IsoOUTIncomplete>
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d46e:	78fa      	ldrb	r2, [r7, #3]
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7fb fed1 	bl	800921a <USBD_LL_IsoINIncomplete>
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fb ff27 	bl	80092e2 <USBD_LL_DevConnected>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fb ff24 	bl	80092f8 <USBD_LL_DevDisconnected>
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d13c      	bne.n	800d542 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d4c8:	4a20      	ldr	r2, [pc, #128]	; (800d54c <USBD_LL_Init+0x94>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <USBD_LL_Init+0x94>)
 800d4d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4d8:	4b1c      	ldr	r3, [pc, #112]	; (800d54c <USBD_LL_Init+0x94>)
 800d4da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d4de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d4e0:	4b1a      	ldr	r3, [pc, #104]	; (800d54c <USBD_LL_Init+0x94>)
 800d4e2:	2206      	movs	r2, #6
 800d4e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4e6:	4b19      	ldr	r3, [pc, #100]	; (800d54c <USBD_LL_Init+0x94>)
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4ec:	4b17      	ldr	r3, [pc, #92]	; (800d54c <USBD_LL_Init+0x94>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4f2:	4b16      	ldr	r3, [pc, #88]	; (800d54c <USBD_LL_Init+0x94>)
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4f8:	4b14      	ldr	r3, [pc, #80]	; (800d54c <USBD_LL_Init+0x94>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4fe:	4b13      	ldr	r3, [pc, #76]	; (800d54c <USBD_LL_Init+0x94>)
 800d500:	2200      	movs	r2, #0
 800d502:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d504:	4b11      	ldr	r3, [pc, #68]	; (800d54c <USBD_LL_Init+0x94>)
 800d506:	2200      	movs	r2, #0
 800d508:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d50a:	4b10      	ldr	r3, [pc, #64]	; (800d54c <USBD_LL_Init+0x94>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d510:	4b0e      	ldr	r3, [pc, #56]	; (800d54c <USBD_LL_Init+0x94>)
 800d512:	2200      	movs	r2, #0
 800d514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d516:	480d      	ldr	r0, [pc, #52]	; (800d54c <USBD_LL_Init+0x94>)
 800d518:	f7f5 fa4f 	bl	80029ba <HAL_PCD_Init>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d522:	f7f3 fcd9 	bl	8000ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d526:	2180      	movs	r1, #128	; 0x80
 800d528:	4808      	ldr	r0, [pc, #32]	; (800d54c <USBD_LL_Init+0x94>)
 800d52a:	f7f6 fcca 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d52e:	2240      	movs	r2, #64	; 0x40
 800d530:	2100      	movs	r1, #0
 800d532:	4806      	ldr	r0, [pc, #24]	; (800d54c <USBD_LL_Init+0x94>)
 800d534:	f7f6 fc7e 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d538:	2280      	movs	r2, #128	; 0x80
 800d53a:	2101      	movs	r1, #1
 800d53c:	4803      	ldr	r0, [pc, #12]	; (800d54c <USBD_LL_Init+0x94>)
 800d53e:	f7f6 fc79 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	20006b3c 	.word	0x20006b3c

0800d550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d566:	4618      	mov	r0, r3
 800d568:	f7f5 fb4b 	bl	8002c02 <HAL_PCD_Start>
 800d56c:	4603      	mov	r3, r0
 800d56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	4618      	mov	r0, r3
 800d574:	f000 f97e 	bl	800d874 <USBD_Get_USB_Status>
 800d578:	4603      	mov	r3, r0
 800d57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	4608      	mov	r0, r1
 800d590:	4611      	mov	r1, r2
 800d592:	461a      	mov	r2, r3
 800d594:	4603      	mov	r3, r0
 800d596:	70fb      	strb	r3, [r7, #3]
 800d598:	460b      	mov	r3, r1
 800d59a:	70bb      	strb	r3, [r7, #2]
 800d59c:	4613      	mov	r3, r2
 800d59e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5ae:	78bb      	ldrb	r3, [r7, #2]
 800d5b0:	883a      	ldrh	r2, [r7, #0]
 800d5b2:	78f9      	ldrb	r1, [r7, #3]
 800d5b4:	f7f6 f838 	bl	8003628 <HAL_PCD_EP_Open>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 f958 	bl	800d874 <USBD_Get_USB_Status>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5ec:	78fa      	ldrb	r2, [r7, #3]
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7f6 f881 	bl	80036f8 <HAL_PCD_EP_Close>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 f939 	bl	800d874 <USBD_Get_USB_Status>
 800d602:	4603      	mov	r3, r0
 800d604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d606:	7bbb      	ldrb	r3, [r7, #14]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7f6 f959 	bl	80038e6 <HAL_PCD_EP_SetStall>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 f91a 	bl	800d874 <USBD_Get_USB_Status>
 800d640:	4603      	mov	r3, r0
 800d642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d644:	7bbb      	ldrb	r3, [r7, #14]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d668:	78fa      	ldrb	r2, [r7, #3]
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f6 f99e 	bl	80039ae <HAL_PCD_EP_ClrStall>
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 f8fb 	bl	800d874 <USBD_Get_USB_Status>
 800d67e:	4603      	mov	r3, r0
 800d680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d682:	7bbb      	ldrb	r3, [r7, #14]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d69e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	da0b      	bge.n	800d6c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6a8:	78fb      	ldrb	r3, [r7, #3]
 800d6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	4413      	add	r3, r2
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	440b      	add	r3, r1
 800d6ba:	333e      	adds	r3, #62	; 0x3e
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	e00b      	b.n	800d6d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6c0:	78fb      	ldrb	r3, [r7, #3]
 800d6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6c6:	68f9      	ldr	r1, [r7, #12]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	440b      	add	r3, r1
 800d6d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d6d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6fe:	78fa      	ldrb	r2, [r7, #3]
 800d700:	4611      	mov	r1, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7f5 ff6b 	bl	80035de <HAL_PCD_SetAddress>
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 f8b0 	bl	800d874 <USBD_Get_USB_Status>
 800d714:	4603      	mov	r3, r0
 800d716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d718:	7bbb      	ldrb	r3, [r7, #14]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b086      	sub	sp, #24
 800d726:	af00      	add	r7, sp, #0
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
 800d72e:	460b      	mov	r3, r1
 800d730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d740:	7af9      	ldrb	r1, [r7, #11]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	f7f6 f884 	bl	8003852 <HAL_PCD_EP_Transmit>
 800d74a:	4603      	mov	r3, r0
 800d74c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	4618      	mov	r0, r3
 800d752:	f000 f88f 	bl	800d874 <USBD_Get_USB_Status>
 800d756:	4603      	mov	r3, r0
 800d758:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d75a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3718      	adds	r7, #24
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	460b      	mov	r3, r1
 800d772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d782:	7af9      	ldrb	r1, [r7, #11]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	f7f6 f800 	bl	800378c <HAL_PCD_EP_Receive>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	4618      	mov	r0, r3
 800d794:	f000 f86e 	bl	800d874 <USBD_Get_USB_Status>
 800d798:	4603      	mov	r3, r0
 800d79a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d79c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7b8:	78fa      	ldrb	r2, [r7, #3]
 800d7ba:	4611      	mov	r1, r2
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f6 f830 	bl	8003822 <HAL_PCD_EP_GetRxCount>
 800d7c2:	4603      	mov	r3, r0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_PCDEx_LPM_Callback+0x18>
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d01f      	beq.n	800d822 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d7e2:	e03b      	b.n	800d85c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a1b      	ldr	r3, [r3, #32]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d007      	beq.n	800d7fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d7ec:	f000 f83c 	bl	800d868 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7f0:	4b1c      	ldr	r3, [pc, #112]	; (800d864 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	4a1b      	ldr	r2, [pc, #108]	; (800d864 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7f6:	f023 0306 	bic.w	r3, r3, #6
 800d7fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6812      	ldr	r2, [r2, #0]
 800d80a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d80e:	f023 0301 	bic.w	r3, r3, #1
 800d812:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fb fcc5 	bl	80091aa <USBD_LL_Resume>
    break;
 800d820:	e01c      	b.n	800d85c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	6812      	ldr	r2, [r2, #0]
 800d830:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d834:	f043 0301 	orr.w	r3, r3, #1
 800d838:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d840:	4618      	mov	r0, r3
 800d842:	f7fb fc9c 	bl	800917e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d005      	beq.n	800d85a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d84e:	4b05      	ldr	r3, [pc, #20]	; (800d864 <HAL_PCDEx_LPM_Callback+0x98>)
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	4a04      	ldr	r2, [pc, #16]	; (800d864 <HAL_PCDEx_LPM_Callback+0x98>)
 800d854:	f043 0306 	orr.w	r3, r3, #6
 800d858:	6113      	str	r3, [r2, #16]
    break;
 800d85a:	bf00      	nop
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	e000ed00 	.word	0xe000ed00

0800d868 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d86c:	f7f2 ff3c 	bl	80006e8 <SystemClock_Config>
}
 800d870:	bf00      	nop
 800d872:	bd80      	pop	{r7, pc}

0800d874 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	2b03      	cmp	r3, #3
 800d886:	d817      	bhi.n	800d8b8 <USBD_Get_USB_Status+0x44>
 800d888:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <USBD_Get_USB_Status+0x1c>)
 800d88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88e:	bf00      	nop
 800d890:	0800d8a1 	.word	0x0800d8a1
 800d894:	0800d8a7 	.word	0x0800d8a7
 800d898:	0800d8ad 	.word	0x0800d8ad
 800d89c:	0800d8b3 	.word	0x0800d8b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a4:	e00b      	b.n	800d8be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8aa:	e008      	b.n	800d8be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b0:	e005      	b.n	800d8be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b6:	e002      	b.n	800d8be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d8bc:	bf00      	nop
  }
  return usb_status;
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3714      	adds	r7, #20
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <__errno>:
 800d8cc:	4b01      	ldr	r3, [pc, #4]	; (800d8d4 <__errno+0x8>)
 800d8ce:	6818      	ldr	r0, [r3, #0]
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	20000110 	.word	0x20000110

0800d8d8 <__libc_init_array>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	4d0d      	ldr	r5, [pc, #52]	; (800d910 <__libc_init_array+0x38>)
 800d8dc:	4c0d      	ldr	r4, [pc, #52]	; (800d914 <__libc_init_array+0x3c>)
 800d8de:	1b64      	subs	r4, r4, r5
 800d8e0:	10a4      	asrs	r4, r4, #2
 800d8e2:	2600      	movs	r6, #0
 800d8e4:	42a6      	cmp	r6, r4
 800d8e6:	d109      	bne.n	800d8fc <__libc_init_array+0x24>
 800d8e8:	4d0b      	ldr	r5, [pc, #44]	; (800d918 <__libc_init_array+0x40>)
 800d8ea:	4c0c      	ldr	r4, [pc, #48]	; (800d91c <__libc_init_array+0x44>)
 800d8ec:	f000 f9a6 	bl	800dc3c <_init>
 800d8f0:	1b64      	subs	r4, r4, r5
 800d8f2:	10a4      	asrs	r4, r4, #2
 800d8f4:	2600      	movs	r6, #0
 800d8f6:	42a6      	cmp	r6, r4
 800d8f8:	d105      	bne.n	800d906 <__libc_init_array+0x2e>
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}
 800d8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d900:	4798      	blx	r3
 800d902:	3601      	adds	r6, #1
 800d904:	e7ee      	b.n	800d8e4 <__libc_init_array+0xc>
 800d906:	f855 3b04 	ldr.w	r3, [r5], #4
 800d90a:	4798      	blx	r3
 800d90c:	3601      	adds	r6, #1
 800d90e:	e7f2      	b.n	800d8f6 <__libc_init_array+0x1e>
 800d910:	0800de2c 	.word	0x0800de2c
 800d914:	0800de2c 	.word	0x0800de2c
 800d918:	0800de2c 	.word	0x0800de2c
 800d91c:	0800de30 	.word	0x0800de30

0800d920 <__retarget_lock_acquire_recursive>:
 800d920:	4770      	bx	lr

0800d922 <__retarget_lock_release_recursive>:
 800d922:	4770      	bx	lr

0800d924 <malloc>:
 800d924:	4b02      	ldr	r3, [pc, #8]	; (800d930 <malloc+0xc>)
 800d926:	4601      	mov	r1, r0
 800d928:	6818      	ldr	r0, [r3, #0]
 800d92a:	f000 b88d 	b.w	800da48 <_malloc_r>
 800d92e:	bf00      	nop
 800d930:	20000110 	.word	0x20000110

0800d934 <free>:
 800d934:	4b02      	ldr	r3, [pc, #8]	; (800d940 <free+0xc>)
 800d936:	4601      	mov	r1, r0
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f000 b819 	b.w	800d970 <_free_r>
 800d93e:	bf00      	nop
 800d940:	20000110 	.word	0x20000110

0800d944 <memcpy>:
 800d944:	440a      	add	r2, r1
 800d946:	4291      	cmp	r1, r2
 800d948:	f100 33ff 	add.w	r3, r0, #4294967295
 800d94c:	d100      	bne.n	800d950 <memcpy+0xc>
 800d94e:	4770      	bx	lr
 800d950:	b510      	push	{r4, lr}
 800d952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d95a:	4291      	cmp	r1, r2
 800d95c:	d1f9      	bne.n	800d952 <memcpy+0xe>
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <memset>:
 800d960:	4402      	add	r2, r0
 800d962:	4603      	mov	r3, r0
 800d964:	4293      	cmp	r3, r2
 800d966:	d100      	bne.n	800d96a <memset+0xa>
 800d968:	4770      	bx	lr
 800d96a:	f803 1b01 	strb.w	r1, [r3], #1
 800d96e:	e7f9      	b.n	800d964 <memset+0x4>

0800d970 <_free_r>:
 800d970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d972:	2900      	cmp	r1, #0
 800d974:	d044      	beq.n	800da00 <_free_r+0x90>
 800d976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d97a:	9001      	str	r0, [sp, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f1a1 0404 	sub.w	r4, r1, #4
 800d982:	bfb8      	it	lt
 800d984:	18e4      	addlt	r4, r4, r3
 800d986:	f000 f94d 	bl	800dc24 <__malloc_lock>
 800d98a:	4a1e      	ldr	r2, [pc, #120]	; (800da04 <_free_r+0x94>)
 800d98c:	9801      	ldr	r0, [sp, #4]
 800d98e:	6813      	ldr	r3, [r2, #0]
 800d990:	b933      	cbnz	r3, 800d9a0 <_free_r+0x30>
 800d992:	6063      	str	r3, [r4, #4]
 800d994:	6014      	str	r4, [r2, #0]
 800d996:	b003      	add	sp, #12
 800d998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d99c:	f000 b948 	b.w	800dc30 <__malloc_unlock>
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	d908      	bls.n	800d9b6 <_free_r+0x46>
 800d9a4:	6825      	ldr	r5, [r4, #0]
 800d9a6:	1961      	adds	r1, r4, r5
 800d9a8:	428b      	cmp	r3, r1
 800d9aa:	bf01      	itttt	eq
 800d9ac:	6819      	ldreq	r1, [r3, #0]
 800d9ae:	685b      	ldreq	r3, [r3, #4]
 800d9b0:	1949      	addeq	r1, r1, r5
 800d9b2:	6021      	streq	r1, [r4, #0]
 800d9b4:	e7ed      	b.n	800d992 <_free_r+0x22>
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	b10b      	cbz	r3, 800d9c0 <_free_r+0x50>
 800d9bc:	42a3      	cmp	r3, r4
 800d9be:	d9fa      	bls.n	800d9b6 <_free_r+0x46>
 800d9c0:	6811      	ldr	r1, [r2, #0]
 800d9c2:	1855      	adds	r5, r2, r1
 800d9c4:	42a5      	cmp	r5, r4
 800d9c6:	d10b      	bne.n	800d9e0 <_free_r+0x70>
 800d9c8:	6824      	ldr	r4, [r4, #0]
 800d9ca:	4421      	add	r1, r4
 800d9cc:	1854      	adds	r4, r2, r1
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	6011      	str	r1, [r2, #0]
 800d9d2:	d1e0      	bne.n	800d996 <_free_r+0x26>
 800d9d4:	681c      	ldr	r4, [r3, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	6053      	str	r3, [r2, #4]
 800d9da:	4421      	add	r1, r4
 800d9dc:	6011      	str	r1, [r2, #0]
 800d9de:	e7da      	b.n	800d996 <_free_r+0x26>
 800d9e0:	d902      	bls.n	800d9e8 <_free_r+0x78>
 800d9e2:	230c      	movs	r3, #12
 800d9e4:	6003      	str	r3, [r0, #0]
 800d9e6:	e7d6      	b.n	800d996 <_free_r+0x26>
 800d9e8:	6825      	ldr	r5, [r4, #0]
 800d9ea:	1961      	adds	r1, r4, r5
 800d9ec:	428b      	cmp	r3, r1
 800d9ee:	bf04      	itt	eq
 800d9f0:	6819      	ldreq	r1, [r3, #0]
 800d9f2:	685b      	ldreq	r3, [r3, #4]
 800d9f4:	6063      	str	r3, [r4, #4]
 800d9f6:	bf04      	itt	eq
 800d9f8:	1949      	addeq	r1, r1, r5
 800d9fa:	6021      	streq	r1, [r4, #0]
 800d9fc:	6054      	str	r4, [r2, #4]
 800d9fe:	e7ca      	b.n	800d996 <_free_r+0x26>
 800da00:	b003      	add	sp, #12
 800da02:	bd30      	pop	{r4, r5, pc}
 800da04:	20007048 	.word	0x20007048

0800da08 <sbrk_aligned>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	4e0e      	ldr	r6, [pc, #56]	; (800da44 <sbrk_aligned+0x3c>)
 800da0c:	460c      	mov	r4, r1
 800da0e:	6831      	ldr	r1, [r6, #0]
 800da10:	4605      	mov	r5, r0
 800da12:	b911      	cbnz	r1, 800da1a <sbrk_aligned+0x12>
 800da14:	f000 f8f6 	bl	800dc04 <_sbrk_r>
 800da18:	6030      	str	r0, [r6, #0]
 800da1a:	4621      	mov	r1, r4
 800da1c:	4628      	mov	r0, r5
 800da1e:	f000 f8f1 	bl	800dc04 <_sbrk_r>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	d00a      	beq.n	800da3c <sbrk_aligned+0x34>
 800da26:	1cc4      	adds	r4, r0, #3
 800da28:	f024 0403 	bic.w	r4, r4, #3
 800da2c:	42a0      	cmp	r0, r4
 800da2e:	d007      	beq.n	800da40 <sbrk_aligned+0x38>
 800da30:	1a21      	subs	r1, r4, r0
 800da32:	4628      	mov	r0, r5
 800da34:	f000 f8e6 	bl	800dc04 <_sbrk_r>
 800da38:	3001      	adds	r0, #1
 800da3a:	d101      	bne.n	800da40 <sbrk_aligned+0x38>
 800da3c:	f04f 34ff 	mov.w	r4, #4294967295
 800da40:	4620      	mov	r0, r4
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	2000704c 	.word	0x2000704c

0800da48 <_malloc_r>:
 800da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4c:	1ccd      	adds	r5, r1, #3
 800da4e:	f025 0503 	bic.w	r5, r5, #3
 800da52:	3508      	adds	r5, #8
 800da54:	2d0c      	cmp	r5, #12
 800da56:	bf38      	it	cc
 800da58:	250c      	movcc	r5, #12
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	4607      	mov	r7, r0
 800da5e:	db01      	blt.n	800da64 <_malloc_r+0x1c>
 800da60:	42a9      	cmp	r1, r5
 800da62:	d905      	bls.n	800da70 <_malloc_r+0x28>
 800da64:	230c      	movs	r3, #12
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	2600      	movs	r6, #0
 800da6a:	4630      	mov	r0, r6
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	4e2e      	ldr	r6, [pc, #184]	; (800db2c <_malloc_r+0xe4>)
 800da72:	f000 f8d7 	bl	800dc24 <__malloc_lock>
 800da76:	6833      	ldr	r3, [r6, #0]
 800da78:	461c      	mov	r4, r3
 800da7a:	bb34      	cbnz	r4, 800daca <_malloc_r+0x82>
 800da7c:	4629      	mov	r1, r5
 800da7e:	4638      	mov	r0, r7
 800da80:	f7ff ffc2 	bl	800da08 <sbrk_aligned>
 800da84:	1c43      	adds	r3, r0, #1
 800da86:	4604      	mov	r4, r0
 800da88:	d14d      	bne.n	800db26 <_malloc_r+0xde>
 800da8a:	6834      	ldr	r4, [r6, #0]
 800da8c:	4626      	mov	r6, r4
 800da8e:	2e00      	cmp	r6, #0
 800da90:	d140      	bne.n	800db14 <_malloc_r+0xcc>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	4631      	mov	r1, r6
 800da96:	4638      	mov	r0, r7
 800da98:	eb04 0803 	add.w	r8, r4, r3
 800da9c:	f000 f8b2 	bl	800dc04 <_sbrk_r>
 800daa0:	4580      	cmp	r8, r0
 800daa2:	d13a      	bne.n	800db1a <_malloc_r+0xd2>
 800daa4:	6821      	ldr	r1, [r4, #0]
 800daa6:	3503      	adds	r5, #3
 800daa8:	1a6d      	subs	r5, r5, r1
 800daaa:	f025 0503 	bic.w	r5, r5, #3
 800daae:	3508      	adds	r5, #8
 800dab0:	2d0c      	cmp	r5, #12
 800dab2:	bf38      	it	cc
 800dab4:	250c      	movcc	r5, #12
 800dab6:	4629      	mov	r1, r5
 800dab8:	4638      	mov	r0, r7
 800daba:	f7ff ffa5 	bl	800da08 <sbrk_aligned>
 800dabe:	3001      	adds	r0, #1
 800dac0:	d02b      	beq.n	800db1a <_malloc_r+0xd2>
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	442b      	add	r3, r5
 800dac6:	6023      	str	r3, [r4, #0]
 800dac8:	e00e      	b.n	800dae8 <_malloc_r+0xa0>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	1b52      	subs	r2, r2, r5
 800dace:	d41e      	bmi.n	800db0e <_malloc_r+0xc6>
 800dad0:	2a0b      	cmp	r2, #11
 800dad2:	d916      	bls.n	800db02 <_malloc_r+0xba>
 800dad4:	1961      	adds	r1, r4, r5
 800dad6:	42a3      	cmp	r3, r4
 800dad8:	6025      	str	r5, [r4, #0]
 800dada:	bf18      	it	ne
 800dadc:	6059      	strne	r1, [r3, #4]
 800dade:	6863      	ldr	r3, [r4, #4]
 800dae0:	bf08      	it	eq
 800dae2:	6031      	streq	r1, [r6, #0]
 800dae4:	5162      	str	r2, [r4, r5]
 800dae6:	604b      	str	r3, [r1, #4]
 800dae8:	4638      	mov	r0, r7
 800daea:	f104 060b 	add.w	r6, r4, #11
 800daee:	f000 f89f 	bl	800dc30 <__malloc_unlock>
 800daf2:	f026 0607 	bic.w	r6, r6, #7
 800daf6:	1d23      	adds	r3, r4, #4
 800daf8:	1af2      	subs	r2, r6, r3
 800dafa:	d0b6      	beq.n	800da6a <_malloc_r+0x22>
 800dafc:	1b9b      	subs	r3, r3, r6
 800dafe:	50a3      	str	r3, [r4, r2]
 800db00:	e7b3      	b.n	800da6a <_malloc_r+0x22>
 800db02:	6862      	ldr	r2, [r4, #4]
 800db04:	42a3      	cmp	r3, r4
 800db06:	bf0c      	ite	eq
 800db08:	6032      	streq	r2, [r6, #0]
 800db0a:	605a      	strne	r2, [r3, #4]
 800db0c:	e7ec      	b.n	800dae8 <_malloc_r+0xa0>
 800db0e:	4623      	mov	r3, r4
 800db10:	6864      	ldr	r4, [r4, #4]
 800db12:	e7b2      	b.n	800da7a <_malloc_r+0x32>
 800db14:	4634      	mov	r4, r6
 800db16:	6876      	ldr	r6, [r6, #4]
 800db18:	e7b9      	b.n	800da8e <_malloc_r+0x46>
 800db1a:	230c      	movs	r3, #12
 800db1c:	603b      	str	r3, [r7, #0]
 800db1e:	4638      	mov	r0, r7
 800db20:	f000 f886 	bl	800dc30 <__malloc_unlock>
 800db24:	e7a1      	b.n	800da6a <_malloc_r+0x22>
 800db26:	6025      	str	r5, [r4, #0]
 800db28:	e7de      	b.n	800dae8 <_malloc_r+0xa0>
 800db2a:	bf00      	nop
 800db2c:	20007048 	.word	0x20007048

0800db30 <cleanup_glue>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	460c      	mov	r4, r1
 800db34:	6809      	ldr	r1, [r1, #0]
 800db36:	4605      	mov	r5, r0
 800db38:	b109      	cbz	r1, 800db3e <cleanup_glue+0xe>
 800db3a:	f7ff fff9 	bl	800db30 <cleanup_glue>
 800db3e:	4621      	mov	r1, r4
 800db40:	4628      	mov	r0, r5
 800db42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db46:	f7ff bf13 	b.w	800d970 <_free_r>
	...

0800db4c <_reclaim_reent>:
 800db4c:	4b2c      	ldr	r3, [pc, #176]	; (800dc00 <_reclaim_reent+0xb4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4283      	cmp	r3, r0
 800db52:	b570      	push	{r4, r5, r6, lr}
 800db54:	4604      	mov	r4, r0
 800db56:	d051      	beq.n	800dbfc <_reclaim_reent+0xb0>
 800db58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800db5a:	b143      	cbz	r3, 800db6e <_reclaim_reent+0x22>
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d14a      	bne.n	800dbf8 <_reclaim_reent+0xac>
 800db62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db64:	6819      	ldr	r1, [r3, #0]
 800db66:	b111      	cbz	r1, 800db6e <_reclaim_reent+0x22>
 800db68:	4620      	mov	r0, r4
 800db6a:	f7ff ff01 	bl	800d970 <_free_r>
 800db6e:	6961      	ldr	r1, [r4, #20]
 800db70:	b111      	cbz	r1, 800db78 <_reclaim_reent+0x2c>
 800db72:	4620      	mov	r0, r4
 800db74:	f7ff fefc 	bl	800d970 <_free_r>
 800db78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db7a:	b111      	cbz	r1, 800db82 <_reclaim_reent+0x36>
 800db7c:	4620      	mov	r0, r4
 800db7e:	f7ff fef7 	bl	800d970 <_free_r>
 800db82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db84:	b111      	cbz	r1, 800db8c <_reclaim_reent+0x40>
 800db86:	4620      	mov	r0, r4
 800db88:	f7ff fef2 	bl	800d970 <_free_r>
 800db8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800db8e:	b111      	cbz	r1, 800db96 <_reclaim_reent+0x4a>
 800db90:	4620      	mov	r0, r4
 800db92:	f7ff feed 	bl	800d970 <_free_r>
 800db96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db98:	b111      	cbz	r1, 800dba0 <_reclaim_reent+0x54>
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7ff fee8 	bl	800d970 <_free_r>
 800dba0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dba2:	b111      	cbz	r1, 800dbaa <_reclaim_reent+0x5e>
 800dba4:	4620      	mov	r0, r4
 800dba6:	f7ff fee3 	bl	800d970 <_free_r>
 800dbaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dbac:	b111      	cbz	r1, 800dbb4 <_reclaim_reent+0x68>
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f7ff fede 	bl	800d970 <_free_r>
 800dbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbb6:	b111      	cbz	r1, 800dbbe <_reclaim_reent+0x72>
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f7ff fed9 	bl	800d970 <_free_r>
 800dbbe:	69a3      	ldr	r3, [r4, #24]
 800dbc0:	b1e3      	cbz	r3, 800dbfc <_reclaim_reent+0xb0>
 800dbc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	4798      	blx	r3
 800dbc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dbca:	b1b9      	cbz	r1, 800dbfc <_reclaim_reent+0xb0>
 800dbcc:	4620      	mov	r0, r4
 800dbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbd2:	f7ff bfad 	b.w	800db30 <cleanup_glue>
 800dbd6:	5949      	ldr	r1, [r1, r5]
 800dbd8:	b941      	cbnz	r1, 800dbec <_reclaim_reent+0xa0>
 800dbda:	3504      	adds	r5, #4
 800dbdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbde:	2d80      	cmp	r5, #128	; 0x80
 800dbe0:	68d9      	ldr	r1, [r3, #12]
 800dbe2:	d1f8      	bne.n	800dbd6 <_reclaim_reent+0x8a>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f7ff fec3 	bl	800d970 <_free_r>
 800dbea:	e7ba      	b.n	800db62 <_reclaim_reent+0x16>
 800dbec:	680e      	ldr	r6, [r1, #0]
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7ff febe 	bl	800d970 <_free_r>
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	e7ef      	b.n	800dbd8 <_reclaim_reent+0x8c>
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	e7ef      	b.n	800dbdc <_reclaim_reent+0x90>
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	bf00      	nop
 800dc00:	20000110 	.word	0x20000110

0800dc04 <_sbrk_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d06      	ldr	r5, [pc, #24]	; (800dc20 <_sbrk_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	f7f3 fd36 	bl	8001680 <_sbrk>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_sbrk_r+0x1a>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_sbrk_r+0x1a>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20007050 	.word	0x20007050

0800dc24 <__malloc_lock>:
 800dc24:	4801      	ldr	r0, [pc, #4]	; (800dc2c <__malloc_lock+0x8>)
 800dc26:	f7ff be7b 	b.w	800d920 <__retarget_lock_acquire_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	20007044 	.word	0x20007044

0800dc30 <__malloc_unlock>:
 800dc30:	4801      	ldr	r0, [pc, #4]	; (800dc38 <__malloc_unlock+0x8>)
 800dc32:	f7ff be76 	b.w	800d922 <__retarget_lock_release_recursive>
 800dc36:	bf00      	nop
 800dc38:	20007044 	.word	0x20007044

0800dc3c <_init>:
 800dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3e:	bf00      	nop
 800dc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc42:	bc08      	pop	{r3}
 800dc44:	469e      	mov	lr, r3
 800dc46:	4770      	bx	lr

0800dc48 <_fini>:
 800dc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4a:	bf00      	nop
 800dc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4e:	bc08      	pop	{r3}
 800dc50:	469e      	mov	lr, r3
 800dc52:	4770      	bx	lr

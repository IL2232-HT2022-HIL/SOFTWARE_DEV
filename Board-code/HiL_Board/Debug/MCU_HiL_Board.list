
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b90  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007d88  08007d88  00017d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ddc  08007ddc  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007ddc  08007ddc  00017ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de4  08007de4  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a5c  20000170  08007f5c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bcc  08007f5c  00021bcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001016a  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1b  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00033028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00033c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029789  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bbb  00000000  00000000  0005df19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0058  00000000  00000000  0006ead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015eb2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f0  00000000  00000000  0015eb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000170 	.word	0x20000170
 8000214:	00000000 	.word	0x00000000
 8000218:	08007d70 	.word	0x08007d70

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000174 	.word	0x20000174
 8000234:	08007d70 	.word	0x08007d70

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 f99f 	bl	8000882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f814 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f882 	bl	8000650 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800054c:	f006 fd20 	bl	8006f90 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CDC_Transmit_FS((uint8_t *) buffer, sizeof(buffer));		//Transmit what's been recieved in our own buffer
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <main+0x30>)
 8000554:	f006 fdf6 	bl	8007144 <CDC_Transmit_FS>
	  memset(buffer, 0, sizeof(buffer));						// Set rx memory to 0 to stop repetitive sending.
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	2100      	movs	r1, #0
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <main+0x30>)
 800055e:	f007 fb01 	bl	8007b64 <memset>
	  HAL_Delay(500);
 8000562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000566:	f000 f9e9 	bl	800093c <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *) buffer, sizeof(buffer));		//Transmit what's been recieved in our own buffer
 800056a:	e7f1      	b.n	8000550 <main+0x14>
 800056c:	2000018c 	.word	0x2000018c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 faf0 	bl	8007b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemClock_Config+0xd8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <SystemClock_Config+0xd8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xdc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <SystemClock_Config+0xdc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ffbf 	bl	8002578 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 f870 	bl	80006e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000604:	f001 ff68 	bl	80024d8 <HAL_PWREx_EnableOverDrive>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800060e:	f000 f869 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fa50 	bl	8002ad4 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800063a:	f000 f853 	bl	80006e4 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0x8c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_GPIO_Init+0x8c>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_GPIO_Init+0x8c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_GPIO_Init+0x8c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <MX_GPIO_Init+0x8c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_GPIO_Init+0x8c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_GPIO_Init+0x8c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <MX_GPIO_Init+0x8c>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_GPIO_Init+0x8c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x90>)
 80006b4:	f000 fc24 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0x90>)
 80006d0:	f000 fa6a 	bl	8000ba8 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x44>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f8ba 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <OTG_FS_IRQHandler+0x10>)
 8000792:	f000 fd2e 	bl	80011f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200016b4 	.word	0x200016b4

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f007 f980 	bl	8007ad4 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20080000 	.word	0x20080000
 8000800:	00000400 	.word	0x00000400
 8000804:	200001cc 	.word	0x200001cc
 8000808:	20001bd0 	.word	0x20001bd0

0800080c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800084c:	4c0b      	ldr	r4, [pc, #44]	; (800087c <LoopFillZerobss+0x26>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085a:	f7ff ffd7 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f007 f93f 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe6b 	bl	800053c <main>
  bx  lr    
 8000866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000874:	08007dec 	.word	0x08007dec
  ldr r2, =_sbss
 8000878:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800087c:	20001bcc 	.word	0x20001bcc

08000880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>

08000882 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000886:	2003      	movs	r0, #3
 8000888:	f000 f94c 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f805 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000892:	f7ff ff2d 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f967 	bl	8000b8e <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f92f 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	200001d0 	.word	0x200001d0

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200001d0 	.word	0x200001d0

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff ffee 	bl	8000924 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffde 	bl	8000924 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	05fa0000 	.word	0x05fa0000

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <__NVIC_EnableIRQ+0x38>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff29 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff3e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff8e 	bl	8000a78 <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff31 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffa2 	bl	8000ae0 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e175      	b.n	8000eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 8164 	bne.w	8000eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d005      	beq.n	8000bfe <HAL_GPIO_Init+0x56>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d017      	beq.n	8000c9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80be 	beq.w	8000eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b66      	ldr	r3, [pc, #408]	; (8000ecc <HAL_GPIO_Init+0x324>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a65      	ldr	r2, [pc, #404]	; (8000ecc <HAL_GPIO_Init+0x324>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <HAL_GPIO_Init+0x324>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d4a:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <HAL_GPIO_Init+0x328>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a58      	ldr	r2, [pc, #352]	; (8000ed4 <HAL_GPIO_Init+0x32c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d037      	beq.n	8000de6 <HAL_GPIO_Init+0x23e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d031      	beq.n	8000de2 <HAL_GPIO_Init+0x23a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a56      	ldr	r2, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x334>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d02b      	beq.n	8000dde <HAL_GPIO_Init+0x236>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <HAL_GPIO_Init+0x338>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d025      	beq.n	8000dda <HAL_GPIO_Init+0x232>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <HAL_GPIO_Init+0x33c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01f      	beq.n	8000dd6 <HAL_GPIO_Init+0x22e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a53      	ldr	r2, [pc, #332]	; (8000ee8 <HAL_GPIO_Init+0x340>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x22a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x344>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x226>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <HAL_GPIO_Init+0x348>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x222>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a50      	ldr	r2, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x34c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x21e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x350>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x21a>
 8000dbe:	2309      	movs	r3, #9
 8000dc0:	e012      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	e010      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	e00e      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x240>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x328>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a34      	ldr	r2, [pc, #208]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a29      	ldr	r2, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_GPIO_Init+0x354>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae86 	bls.w	8000bc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	40022400 	.word	0x40022400
 8000efc:	40013c00 	.word	0x40013c00

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	041a      	lsls	r2, r3, #16
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	400b      	ands	r3, r1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f68:	b08f      	sub	sp, #60	; 0x3c
 8000f6a:	af0a      	add	r7, sp, #40	; 0x28
 8000f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e116      	b.n	80011a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f006 fa30 	bl	80073f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fcbd 	bl	8003936 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	687e      	ldr	r6, [r7, #4]
 8000fc4:	466d      	mov	r5, sp
 8000fc6:	f106 0410 	add.w	r4, r6, #16
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fda:	1d33      	adds	r3, r6, #4
 8000fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f002 fb9e 	bl	8003720 <USB_CoreInit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2202      	movs	r2, #2
 8000fee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0d7      	b.n	80011a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fcab 	bl	8003958 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e04a      	b.n	800109e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	333d      	adds	r3, #61	; 0x3d
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	333c      	adds	r3, #60	; 0x3c
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	b298      	uxth	r0, r3
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3344      	adds	r3, #68	; 0x44
 8001044:	4602      	mov	r2, r0
 8001046:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3340      	adds	r3, #64	; 0x40
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3348      	adds	r3, #72	; 0x48
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	334c      	adds	r3, #76	; 0x4c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3354      	adds	r3, #84	; 0x54
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3301      	adds	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d3af      	bcc.n	8001008 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e044      	b.n	8001138 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3b5      	bcc.n	80010ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	687e      	ldr	r6, [r7, #4]
 800114a:	466d      	mov	r5, sp
 800114c:	f106 0410 	add.w	r4, r6, #16
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001160:	1d33      	adds	r3, r6, #4
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f002 fc43 	bl	80039f0 <USB_DevInit>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e014      	b.n	80011a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	2b01      	cmp	r3, #1
 8001192:	d102      	bne.n	800119a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 f97b 	bl	8002490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fd91 	bl	8004cc6 <USB_DevDisconnect>

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_PCD_Start+0x16>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e012      	b.n	80011ea <HAL_PCD_Start+0x3c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fb9f 	bl	8003914 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fd52 	bl	8004c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b08d      	sub	sp, #52	; 0x34
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fe10 	bl	8004e2e <USB_GetMode>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 84b7 	bne.w	8001b84 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fd74 	bl	8004d08 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 84ad 	beq.w	8001b82 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fd61 	bl	8004d08 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d107      	bne.n	8001260 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f002 0202 	and.w	r2, r2, #2
 800125e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fd4f 	bl	8004d08 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b10      	cmp	r3, #16
 8001272:	d161      	bne.n	8001338 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0210 	bic.w	r2, r2, #16
 8001282:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f003 020f 	and.w	r2, r3, #15
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	0c5b      	lsrs	r3, r3, #17
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d124      	bne.n	80012fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d035      	beq.n	8001328 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f003 fb86 	bl	80049e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e0:	441a      	add	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	621a      	str	r2, [r3, #32]
 80012f8:	e016      	b.n	8001328 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	0c5b      	lsrs	r3, r3, #17
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	2b06      	cmp	r3, #6
 8001304:	d110      	bne.n	8001328 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f003 fb65 	bl	80049e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	441a      	add	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0210 	orr.w	r2, r2, #16
 8001336:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fce3 	bl	8004d08 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800134c:	f040 80a7 	bne.w	800149e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fce8 	bl	8004d2e <USB_ReadDevAllOutEpInterrupt>
 800135e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001360:	e099      	b.n	8001496 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 808e 	beq.w	800148a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fd0c 	bl	8004d96 <USB_ReadDevOutEPInterrupt>
 800137e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	2301      	movs	r3, #1
 800139a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fef0 	bl	8002184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ffc6 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013de:	461a      	mov	r2, r3
 80013e0:	2310      	movs	r3, #16
 80013e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	2b80      	cmp	r3, #128	; 0x80
 80013f8:	d109      	bne.n	800140e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f006 f901 	bl	8007640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2302      	movs	r3, #2
 800144e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001466:	461a      	mov	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f af62 	bne.w	8001362 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fc30 	bl	8004d08 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b2:	f040 80db 	bne.w	800166c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fc51 	bl	8004d62 <USB_ReadDevAllInEpInterrupt>
 80014c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014c6:	e0cd      	b.n	8001664 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80c2 	beq.w	8001658 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fc77 	bl	8004dd2 <USB_ReadDevInEPInterrupt>
 80014e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d057      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	2201      	movs	r2, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001510:	4013      	ands	r3, r2
 8001512:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d132      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	334c      	adds	r3, #76	; 0x4c
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4403      	add	r3, r0
 800154e:	3348      	adds	r3, #72	; 0x48
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4419      	add	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3354      	adds	r3, #84	; 0x54
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800158c:	461a      	mov	r2, r3
 800158e:	2101      	movs	r1, #1
 8001590:	f003 fc80 	bl	8004e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 ffcb 	bl	8007536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b6:	461a      	mov	r2, r3
 80015b8:	2308      	movs	r3, #8
 80015ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d2:	461a      	mov	r2, r3
 80015d4:	2310      	movs	r3, #16
 80015d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f002 fb53 	bl	8003cac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	3304      	adds	r3, #4
 8001618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2200      	movs	r2, #0
 8001626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f006 f818 	bl	8007664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2302      	movs	r3, #2
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fd08 	bl	8002068 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	3301      	adds	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	2b00      	cmp	r3, #0
 8001668:	f47f af2e 	bne.w	80014c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fb49 	bl	8004d08 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800167c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001680:	d122      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 f992 	bl	80079d4 <HAL_PCDEx_LPM_Callback>
 80016b0:	e002      	b.n	80016b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 ffb6 	bl	8007624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb1b 	bl	8004d08 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016dc:	d112      	bne.n	8001704 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f005 ff72 	bl	80075d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001702:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fafd 	bl	8004d08 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001718:	d121      	bne.n	800175e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001728:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	f003 020f 	and.w	r2, r3, #15
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800174e:	2101      	movs	r1, #1
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f006 f93f 	bl	80079d4 <HAL_PCDEx_LPM_Callback>
 8001756:	e002      	b.n	800175e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 ff3d 	bl	80075d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fad0 	bl	8004d08 <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	f040 80b7 	bne.w	80018e4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2110      	movs	r1, #16
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fa8b 	bl	8003cac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179a:	e046      	b.n	800182a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a8:	461a      	mov	r2, r3
 80017aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c0:	0151      	lsls	r1, r2, #5
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	440a      	add	r2, r1
 80017c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017dc:	461a      	mov	r2, r3
 80017de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f4:	0151      	lsls	r1, r2, #5
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	440a      	add	r2, r1
 80017fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001802:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	440a      	add	r2, r1
 800181a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800181e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001822:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	3301      	adds	r3, #1
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001830:	429a      	cmp	r2, r3
 8001832:	d3b3      	bcc.n	800179c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001842:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001846:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	f043 030b 	orr.w	r3, r3, #11
 8001864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	6453      	str	r3, [r2, #68]	; 0x44
 800187c:	e015      	b.n	80018aa <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188c:	4619      	mov	r1, r3
 800188e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001892:	4313      	orrs	r3, r2
 8001894:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a4:	f043 030b 	orr.w	r3, r3, #11
 80018a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ce:	461a      	mov	r2, r3
 80018d0:	f003 fae0 	bl	8004e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fa0d 	bl	8004d08 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f8:	d124      	bne.n	8001944 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 faa4 	bl	8004e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fa4c 	bl	8003da6 <USB_GetDevSpeed>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681c      	ldr	r4, [r3, #0]
 800191a:	f001 facd 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 800191e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4620      	mov	r0, r4
 800192a:	f001 ff51 	bl	80037d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f005 fe29 	bl	8007586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001942:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 f9dd 	bl	8004d08 <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b08      	cmp	r3, #8
 8001956:	d10a      	bne.n	800196e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f005 fe06 	bl	800756a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f002 0208 	and.w	r2, r2, #8
 800196c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f9c8 	bl	8004d08 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b80      	cmp	r3, #128	; 0x80
 8001980:	d122      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e014      	b.n	80019be <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fb27 	bl	8002006 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3e5      	bcc.n	8001994 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f99b 	bl	8004d08 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019dc:	d13b      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e02b      	b.n	8001a3c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3340      	adds	r3, #64	; 0x40
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d115      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da12      	bge.n	8001a36 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333f      	adds	r3, #63	; 0x3f
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fae8 	bl	8002006 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3301      	adds	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3ce      	bcc.n	80019e4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 f954 	bl	8004d08 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a6a:	d155      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	e045      	b.n	8001afe <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d12e      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da2b      	bge.n	8001af8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d121      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af4:	6053      	str	r3, [r2, #4]
            break;
 8001af6:	e007      	b.n	8001b08 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3b4      	bcc.n	8001a72 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 f8f3 	bl	8004d08 <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d10a      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f005 fdaa 	bl	8007688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f8dd 	bl	8004d08 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d115      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f005 fd9a 	bl	80076a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	e000      	b.n	8001b84 <HAL_PCD_IRQHandler+0x992>
      return;
 8001b82:	bf00      	nop
    }
  }
}
 8001b84:	3734      	adds	r7, #52	; 0x34
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}

08001b8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_PCD_SetAddress+0x1a>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e013      	b.n	8001bcc <HAL_PCD_SetAddress+0x42>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f83b 	bl	8004c38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	70fb      	strb	r3, [r7, #3]
 8001be6:	460b      	mov	r3, r1
 8001be8:	803b      	strh	r3, [r7, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da0f      	bge.n	8001c1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3338      	adds	r3, #56	; 0x38
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00f      	b.n	8001c3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c46:	883a      	ldrh	r2, [r7, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	78ba      	ldrb	r2, [r7, #2]
 8001c50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d102      	bne.n	8001c70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_EP_Open+0xaa>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e00e      	b.n	8001c9c <HAL_PCD_EP_Open+0xc8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 f8af 	bl	8003df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da0f      	bge.n	8001cd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3338      	adds	r3, #56	; 0x38
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	705a      	strb	r2, [r3, #1]
 8001cd6:	e00f      	b.n	8001cf8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 020f 	and.w	r2, r3, #15
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_PCD_EP_Close+0x6e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e00e      	b.n	8001d30 <HAL_PCD_EP_Close+0x8c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 f8ed 	bl	8003f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	460b      	mov	r3, r1
 8001d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	6979      	ldr	r1, [r7, #20]
 8001dac:	f002 fbd4 	bl	8004558 <USB_EP0StartXfer>
 8001db0:	e008      	b.n	8001dc4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6979      	ldr	r1, [r7, #20]
 8001dc0:	f002 f97a 	bl	80040b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001df0:	681b      	ldr	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6979      	ldr	r1, [r7, #20]
 8001e70:	f002 fb72 	bl	8004558 <USB_EP0StartXfer>
 8001e74:	e008      	b.n	8001e88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6979      	ldr	r1, [r7, #20]
 8001e84:	f002 f918 	bl	80040b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d901      	bls.n	8001eb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e050      	b.n	8001f52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da0f      	bge.n	8001ed8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	3338      	adds	r3, #56	; 0x38
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	705a      	strb	r2, [r3, #1]
 8001ed6:	e00d      	b.n	8001ef4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_PCD_EP_SetStall+0x82>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e01e      	b.n	8001f52 <HAL_PCD_EP_SetStall+0xc0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fdb4 	bl	8004a90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	b2d9      	uxtb	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f42:	461a      	mov	r2, r3
 8001f44:	f002 ffa6 	bl	8004e94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d901      	bls.n	8001f78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e042      	b.n	8001ffe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da0f      	bge.n	8001fa0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	705a      	strb	r2, [r3, #1]
 8001f9e:	e00f      	b.n	8001fc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_EP_ClrStall+0x86>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e00e      	b.n	8001ffe <HAL_PCD_EP_ClrStall+0xa4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fdbc 	bl	8004b6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da0c      	bge.n	8002034 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 020f 	and.w	r2, r3, #15
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3338      	adds	r3, #56	; 0x38
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00c      	b.n	800204e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 020f 	and.w	r2, r3, #15
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fbdb 	bl	8004810 <USB_EPStopXfer>
 800205a:	4603      	mov	r3, r0
 800205c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800205e:	7afb      	ldrb	r3, [r7, #11]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3338      	adds	r3, #56	; 0x38
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	d901      	bls.n	80020a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e06c      	b.n	800217a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d902      	bls.n	80020bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3303      	adds	r3, #3
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c4:	e02b      	b.n	800211e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d902      	bls.n	80020e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3303      	adds	r3, #3
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f002 fc2f 	bl	8004964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	441a      	add	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	b29b      	uxth	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	429a      	cmp	r2, r3
 8002132:	d809      	bhi.n	8002148 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213c:	429a      	cmp	r2, r3
 800213e:	d203      	bcs.n	8002148 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1be      	bne.n	80020c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d811      	bhi.n	8002178 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	43db      	mvns	r3, r3
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002174:	4013      	ands	r3, r2
 8002176:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d17b      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80b9 	bls.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a7      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e098      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8093 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d90f      	bls.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e07e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	440b      	add	r3, r1
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	f002 fe00 	bl	8004e94 <USB_EP0_OutStart>
 8002294:	e006      	b.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f005 f928 	bl	8007500 <HAL_PCD_DataOutStageCallback>
 80022b0:	e046      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d124      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e032      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 f8ff 	bl	8007500 <HAL_PCD_DataOutStageCallback>
 8002302:	e01d      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f002 fdb0 	bl	8004e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f005 f8e0 	bl	8007500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f005 f897 	bl	80074dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f002 fd62 	bl	8004e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	; 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	10000003 	.word	0x10000003

080024d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002506:	f7fe fa0d 	bl	8000924 <HAL_GetTick>
 800250a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800250c:	e009      	b.n	8002522 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800250e:	f7fe fa09 	bl	8000924 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251c:	d901      	bls.n	8002522 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e022      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d1ee      	bne.n	800250e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7fe f9f2 	bl	8000924 <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002542:	e009      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002544:	f7fe f9ee 	bl	8000924 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002552:	d901      	bls.n	8002558 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e007      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002564:	d1ee      	bne.n	8002544 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000

08002578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e29b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800259c:	4b96      	ldr	r3, [pc, #600]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a8:	4b93      	ldr	r3, [pc, #588]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d112      	bne.n	80025da <HAL_RCC_OscConfig+0x62>
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d06c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x130>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d168      	bne.n	80026a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e275      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x7a>
 80025e4:	4b84      	ldr	r3, [pc, #528]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a83      	ldr	r2, [pc, #524]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e02e      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x9c>
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7b      	ldr	r2, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0xc0>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6b      	ldr	r2, [pc, #428]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe f964 	bl	8000924 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe f960 	bl	8000924 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e229      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe f950 	bl	8000924 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe f94c 	bl	8000924 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e215      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x110>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d069      	beq.n	800278a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x190>
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1e9      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	493d      	ldr	r1, [pc, #244]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e040      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a38      	ldr	r2, [pc, #224]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe f902 	bl	8000924 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe f8fe 	bl	8000924 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1c7      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4929      	ldr	r1, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe f8de 	bl	8000924 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe f8da 	bl	8000924 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1a3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d038      	beq.n	8002808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d019      	beq.n	80027d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe f8bb 	bl	8000924 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b2:	f7fe f8b7 	bl	8000924 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e180      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x23a>
 80027d0:	e01a      	b.n	8002808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe f8a1 	bl	8000924 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe f89d 	bl	8000924 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d903      	bls.n	80027fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e166      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
 80027f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b92      	ldr	r3, [pc, #584]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a4 	beq.w	800295e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a88      	ldr	r2, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b86      	ldr	r3, [pc, #536]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800284a:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7fe f865 	bl	8000924 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe f861 	bl	8000924 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e12a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x31a>
 8002884:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	; 0x70
 8002890:	e02d      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x33c>
 800289a:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x35e>
 80028bc:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a61      	ldr	r2, [pc, #388]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b5f      	ldr	r3, [pc, #380]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a5e      	ldr	r2, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe f815 	bl	8000924 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe f811 	bl	8000924 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0d8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x386>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fd ffff 	bl	8000924 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fd fffb 	bl	8000924 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0c2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80ae 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d06d      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d14b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fd ffcc 	bl	8000924 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fd ffc8 	bl	8000924 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e091      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fd ff9a 	bl	8000924 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fd ff96 	bl	8000924 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e05f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x47c>
 8002a12:	e057      	b.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fd ff80 	bl	8000924 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fd ff7c 	bl	8000924 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e045      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4b0>
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_RCC_OscConfig+0x558>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d030      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d129      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d122      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d119      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fd feac 	bl	8000924 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fd fea8 	bl	8000924 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 020f 	bic.w	r2, r3, #15
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fe08 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08007dcc 	.word	0x08007dcc
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b094      	sub	sp, #80	; 0x50
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb8:	2300      	movs	r3, #0
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b79      	ldr	r3, [pc, #484]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80e1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e0db      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce4:	e0db      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cea:	e0d8      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4621      	mov	r1, r4
 8002d38:	1a51      	subs	r1, r2, r1
 8002d3a:	6139      	str	r1, [r7, #16]
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d50:	4659      	mov	r1, fp
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	4651      	mov	r1, sl
 8002d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	018a      	lsls	r2, r1, #6
 8002d5e:	4651      	mov	r1, sl
 8002d60:	ebb2 0801 	subs.w	r8, r2, r1
 8002d64:	4659      	mov	r1, fp
 8002d66:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7e:	4690      	mov	r8, r2
 8002d80:	4699      	mov	r9, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	eb18 0303 	adds.w	r3, r8, r3
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	eb49 0303 	adc.w	r3, r9, r3
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d9e:	4629      	mov	r1, r5
 8002da0:	024b      	lsls	r3, r1, #9
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da8:	4621      	mov	r1, r4
 8002daa:	024a      	lsls	r2, r1, #9
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dbc:	f7fd fa3c 	bl	8000238 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc8:	e058      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	0159      	lsls	r1, r3, #5
 8002df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df6:	0150      	lsls	r0, r2, #5
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e02:	4649      	mov	r1, r9
 8002e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e20:	eb63 050b 	sbc.w	r5, r3, fp
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	00eb      	lsls	r3, r5, #3
 8002e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e32:	00e2      	lsls	r2, r4, #3
 8002e34:	4614      	mov	r4, r2
 8002e36:	461d      	mov	r5, r3
 8002e38:	4643      	mov	r3, r8
 8002e3a:	18e3      	adds	r3, r4, r3
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	464b      	mov	r3, r9
 8002e40:	eb45 0303 	adc.w	r3, r5, r3
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	2200      	movs	r2, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	61fa      	str	r2, [r7, #28]
 8002e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e70:	f7fd f9e2 	bl	8000238 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3750      	adds	r7, #80	; 0x50
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ef8:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f02:	6093      	str	r3, [r2, #8]
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	4964      	ldr	r1, [pc, #400]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d017      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	4959      	ldr	r1, [pc, #356]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f48:	d101      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	494a      	ldr	r1, [pc, #296]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f84:	d101      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 808b 	beq.w	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a39      	ldr	r2, [pc, #228]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc0:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a34      	ldr	r2, [pc, #208]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fd fca4 	bl	8000924 <HAL_GetTick>
 8002fdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fd fca0 	bl	8000924 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e38f      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d035      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	429a      	cmp	r2, r3
 800301a:	d02e      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800303e:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d114      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fd fc68 	bl	8000924 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fd fc64 	bl	8000924 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e351      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003086:	d111      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003096:	400b      	ands	r3, r1
 8003098:	4901      	ldr	r1, [pc, #4]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
 800309e:	e00b      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
 80030a8:	0ffffcff 	.word	0x0ffffcff
 80030ac:	4bac      	ldr	r3, [pc, #688]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4aab      	ldr	r2, [pc, #684]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030b6:	6093      	str	r3, [r2, #8]
 80030b8:	4ba9      	ldr	r3, [pc, #676]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	49a6      	ldr	r1, [pc, #664]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030d6:	4ba2      	ldr	r3, [pc, #648]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030dc:	4aa0      	ldr	r2, [pc, #640]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030e6:	4b9e      	ldr	r3, [pc, #632]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	499b      	ldr	r1, [pc, #620]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003104:	4b96      	ldr	r3, [pc, #600]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003112:	4993      	ldr	r1, [pc, #588]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003126:	4b8e      	ldr	r3, [pc, #568]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003134:	498a      	ldr	r1, [pc, #552]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003148:	4b85      	ldr	r3, [pc, #532]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003156:	4982      	ldr	r1, [pc, #520]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4979      	ldr	r1, [pc, #484]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318c:	4b74      	ldr	r3, [pc, #464]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4971      	ldr	r1, [pc, #452]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ae:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f023 020c 	bic.w	r2, r3, #12
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	4968      	ldr	r1, [pc, #416]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d0:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	4960      	ldr	r1, [pc, #384]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031f2:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	4957      	ldr	r1, [pc, #348]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	494f      	ldr	r1, [pc, #316]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003236:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	4946      	ldr	r1, [pc, #280]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003258:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	493e      	ldr	r1, [pc, #248]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800327a:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	4935      	ldr	r1, [pc, #212]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800329c:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032aa:	492d      	ldr	r1, [pc, #180]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d011      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032cc:	4924      	ldr	r1, [pc, #144]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	4914      	ldr	r1, [pc, #80]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003330:	490b      	ldr	r1, [pc, #44]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00f      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	4902      	ldr	r1, [pc, #8]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335c:	e002      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003370:	4b8a      	ldr	r3, [pc, #552]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003376:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	4986      	ldr	r1, [pc, #536]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003394:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	497d      	ldr	r1, [pc, #500]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d006      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80d6 	beq.w	800356c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a75      	ldr	r2, [pc, #468]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd faaa 	bl	8000924 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033d4:	f7fd faa6 	bl	8000924 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e195      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033e6:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d021      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11d      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003406:	4b65      	ldr	r3, [pc, #404]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	0e1b      	lsrs	r3, r3, #24
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	019a      	lsls	r2, r3, #6
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	071b      	lsls	r3, r3, #28
 800343a:	4958      	ldr	r1, [pc, #352]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02e      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d129      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800346e:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800347c:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	0f1b      	lsrs	r3, r3, #28
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	019a      	lsls	r2, r3, #6
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	493e      	ldr	r1, [pc, #248]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	f023 021f 	bic.w	r2, r3, #31
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	3b01      	subs	r3, #1
 80034ba:	4938      	ldr	r1, [pc, #224]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01d      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ce:	4b33      	ldr	r3, [pc, #204]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d4:	0e1b      	lsrs	r3, r3, #24
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034dc:	4b2f      	ldr	r3, [pc, #188]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e2:	0f1b      	lsrs	r3, r3, #28
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	019a      	lsls	r2, r3, #6
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	071b      	lsls	r3, r3, #28
 8003502:	4926      	ldr	r1, [pc, #152]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d011      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	019a      	lsls	r2, r3, #6
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	491a      	ldr	r1, [pc, #104]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003546:	f7fd f9ed 	bl	8000924 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800354e:	f7fd f9e9 	bl	8000924 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0d8      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b01      	cmp	r3, #1
 8003570:	f040 80ce 	bne.w	8003710 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fd f9d0 	bl	8000924 <HAL_GetTick>
 8003584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003586:	e00b      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003588:	f7fd f9cc 	bl	8000924 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d904      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0bb      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035a0:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ac:	d0ec      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02e      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d12a      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035e4:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	0f1b      	lsrs	r3, r3, #28
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	019a      	lsls	r2, r3, #6
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	4944      	ldr	r1, [pc, #272]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	493d      	ldr	r1, [pc, #244]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003640:	d11d      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	0e1b      	lsrs	r3, r3, #24
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	0f1b      	lsrs	r3, r3, #28
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	019a      	lsls	r2, r3, #6
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	071b      	lsls	r3, r3, #28
 8003676:	4929      	ldr	r1, [pc, #164]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d028      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	0e1b      	lsrs	r3, r3, #24
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	019a      	lsls	r2, r3, #6
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	4917      	ldr	r1, [pc, #92]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4911      	ldr	r1, [pc, #68]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fd f91c 	bl	8000924 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036f0:	f7fd f918 	bl	8000924 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e007      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800370e:	d1ef      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003720:	b084      	sub	sp, #16
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	f107 001c 	add.w	r0, r7, #28
 800372e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	2b01      	cmp	r3, #1
 8003736:	d120      	bne.n	800377a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <USB_CoreInit+0xac>)
 800374a:	4013      	ands	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800375c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d105      	bne.n	800376e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 fbee 	bl	8004f50 <USB_CoreReset>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e010      	b.n	800379c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 fbe2 	bl	8004f50 <USB_CoreReset>
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10b      	bne.n	80037ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f043 0206 	orr.w	r2, r3, #6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c6:	b004      	add	sp, #16
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	ffbdffbf 	.word	0xffbdffbf

080037d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d165      	bne.n	80038b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a41      	ldr	r2, [pc, #260]	; (80038ec <USB_SetTurnaroundTime+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d906      	bls.n	80037fa <USB_SetTurnaroundTime+0x2a>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <USB_SetTurnaroundTime+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d202      	bcs.n	80037fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037f4:	230f      	movs	r3, #15
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e062      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <USB_SetTurnaroundTime+0x120>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d306      	bcc.n	8003810 <USB_SetTurnaroundTime+0x40>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <USB_SetTurnaroundTime+0x124>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d202      	bcs.n	8003810 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800380a:	230e      	movs	r3, #14
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e057      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <USB_SetTurnaroundTime+0x124>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d306      	bcc.n	8003826 <USB_SetTurnaroundTime+0x56>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a37      	ldr	r2, [pc, #220]	; (80038f8 <USB_SetTurnaroundTime+0x128>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d202      	bcs.n	8003826 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003820:	230d      	movs	r3, #13
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e04c      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <USB_SetTurnaroundTime+0x128>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d306      	bcc.n	800383c <USB_SetTurnaroundTime+0x6c>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a32      	ldr	r2, [pc, #200]	; (80038fc <USB_SetTurnaroundTime+0x12c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d802      	bhi.n	800383c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003836:	230c      	movs	r3, #12
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e041      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a2f      	ldr	r2, [pc, #188]	; (80038fc <USB_SetTurnaroundTime+0x12c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d906      	bls.n	8003852 <USB_SetTurnaroundTime+0x82>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <USB_SetTurnaroundTime+0x130>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d802      	bhi.n	8003852 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800384c:	230b      	movs	r3, #11
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e036      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <USB_SetTurnaroundTime+0x130>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d906      	bls.n	8003868 <USB_SetTurnaroundTime+0x98>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <USB_SetTurnaroundTime+0x134>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d802      	bhi.n	8003868 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003862:	230a      	movs	r3, #10
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e02b      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a26      	ldr	r2, [pc, #152]	; (8003904 <USB_SetTurnaroundTime+0x134>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d906      	bls.n	800387e <USB_SetTurnaroundTime+0xae>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <USB_SetTurnaroundTime+0x138>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d202      	bcs.n	800387e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003878:	2309      	movs	r3, #9
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e020      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <USB_SetTurnaroundTime+0x138>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d306      	bcc.n	8003894 <USB_SetTurnaroundTime+0xc4>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <USB_SetTurnaroundTime+0x13c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800388e:	2308      	movs	r3, #8
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e015      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <USB_SetTurnaroundTime+0x13c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d906      	bls.n	80038aa <USB_SetTurnaroundTime+0xda>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <USB_SetTurnaroundTime+0x140>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d202      	bcs.n	80038aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038a4:	2307      	movs	r3, #7
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e00a      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038aa:	2306      	movs	r3, #6
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e007      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038b6:	2309      	movs	r3, #9
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e001      	b.n	80038c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038bc:	2309      	movs	r3, #9
 80038be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	00d8acbf 	.word	0x00d8acbf
 80038f0:	00e4e1c0 	.word	0x00e4e1c0
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	01067380 	.word	0x01067380
 80038fc:	011a499f 	.word	0x011a499f
 8003900:	01312cff 	.word	0x01312cff
 8003904:	014ca43f 	.word	0x014ca43f
 8003908:	016e3600 	.word	0x016e3600
 800390c:	01a6ab1f 	.word	0x01a6ab1f
 8003910:	01e84800 	.word	0x01e84800

08003914 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d115      	bne.n	80039a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003986:	2001      	movs	r0, #1
 8003988:	f7fc ffd8 	bl	800093c <HAL_Delay>
      ms++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 fa4b 	bl	8004e2e <USB_GetMode>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d01e      	beq.n	80039dc <USB_SetCurrentMode+0x84>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b31      	cmp	r3, #49	; 0x31
 80039a2:	d9f0      	bls.n	8003986 <USB_SetCurrentMode+0x2e>
 80039a4:	e01a      	b.n	80039dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d115      	bne.n	80039d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b8:	2001      	movs	r0, #1
 80039ba:	f7fc ffbf 	bl	800093c <HAL_Delay>
      ms++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f001 fa32 	bl	8004e2e <USB_GetMode>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <USB_SetCurrentMode+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b31      	cmp	r3, #49	; 0x31
 80039d4:	d9f0      	bls.n	80039b8 <USB_SetCurrentMode+0x60>
 80039d6:	e001      	b.n	80039dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e005      	b.n	80039e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b32      	cmp	r3, #50	; 0x32
 80039e0:	d101      	bne.n	80039e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f0:	b084      	sub	sp, #16
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e009      	b.n	8003a24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3340      	adds	r3, #64	; 0x40
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3301      	adds	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0e      	cmp	r3, #14
 8003a28:	d9f2      	bls.n	8003a10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11c      	bne.n	8003a6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3e:	f043 0302 	orr.w	r3, r3, #2
 8003a42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e005      	b.n	8003a76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	461a      	mov	r2, r3
 8003a92:	680b      	ldr	r3, [r1, #0]
 8003a94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f965 	bl	8003d74 <USB_SetDevSpeed>
 8003aaa:	e008      	b.n	8003abe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003aac:	2101      	movs	r1, #1
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f960 	bl	8003d74 <USB_SetDevSpeed>
 8003ab4:	e003      	b.n	8003abe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ab6:	2103      	movs	r1, #3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f95b 	bl	8003d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003abe:	2110      	movs	r1, #16
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8f3 	bl	8003cac <USB_FlushTxFifo>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f91f 	bl	8003d14 <USB_FlushRxFifo>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	461a      	mov	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e043      	b.n	8003b92 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b20:	d118      	bne.n	8003b54 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e013      	b.n	8003b66 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e008      	b.n	8003b66 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	2300      	movs	r3, #0
 8003b64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	461a      	mov	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	461a      	mov	r2, r3
 8003b86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3b7      	bcc.n	8003b0a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e043      	b.n	8003c28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb6:	d118      	bne.n	8003bea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e013      	b.n	8003bfc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e008      	b.n	8003bfc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	3301      	adds	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3b7      	bcc.n	8003ba0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f043 0210 	orr.w	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <USB_DevInit+0x2b4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f043 0208 	orr.w	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <USB_DevInit+0x2b8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ca0:	b004      	add	sp, #16
 8003ca2:	4770      	bx	lr
 8003ca4:	803c3800 	.word	0x803c3800
 8003ca8:	40000004 	.word	0x40000004

08003cac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <USB_FlushTxFifo+0x64>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e01b      	b.n	8003d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	daf2      	bge.n	8003cba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <USB_FlushTxFifo+0x64>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e006      	b.n	8003d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d0f0      	beq.n	8003ce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	00030d40 	.word	0x00030d40

08003d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3301      	adds	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <USB_FlushRxFifo+0x5c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e018      	b.n	8003d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	daf2      	bge.n	8003d20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2210      	movs	r2, #16
 8003d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <USB_FlushRxFifo+0x5c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e006      	b.n	8003d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d0f0      	beq.n	8003d44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	00030d40 	.word	0x00030d40

08003d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0306 	and.w	r3, r3, #6
 8003dbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
 8003dca:	e00a      	b.n	8003de2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d002      	beq.n	8003dd8 <USB_GetDevSpeed+0x32>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d102      	bne.n	8003dde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	75fb      	strb	r3, [r7, #23]
 8003ddc:	e001      	b.n	8003de2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dde:	230f      	movs	r3, #15
 8003de0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d139      	bne.n	8003e80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d153      	bne.n	8003eec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	059b      	lsls	r3, r3, #22
 8003e66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b20      	ldr	r3, [pc, #128]	; (8003efc <USB_ActivateEndpoint+0x10c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
 8003e7e:	e035      	b.n	8003eec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d119      	bne.n	8003eec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	791b      	ldrb	r3, [r3, #4]
 8003ed2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0159      	lsls	r1, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <USB_ActivateEndpoint+0x10c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	10008000 	.word	0x10008000

08003f00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d161      	bne.n	8003fe0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f32:	d11f      	bne.n	8003f74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0159      	lsls	r1, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <USB_DeactivateEndpoint+0x1b0>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
 8003fde:	e060      	b.n	80040a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff6:	d11f      	bne.n	8004038 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	440a      	add	r2, r1
 800400e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004016:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	43db      	mvns	r3, r3
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004058:	4013      	ands	r3, r2
 800405a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	43db      	mvns	r3, r3
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800407c:	4013      	ands	r3, r2
 800407e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	440b      	add	r3, r1
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	4619      	mov	r1, r3
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <USB_DeactivateEndpoint+0x1b4>)
 800409e:	4013      	ands	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	ec337800 	.word	0xec337800
 80040b4:	eff37800 	.word	0xeff37800

080040b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f040 8163 	bne.w	80043a0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d132      	bne.n	8004148 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	4619      	mov	r1, r3
 80040fe:	4ba5      	ldr	r3, [pc, #660]	; (8004394 <USB_EPStartXfer+0x2dc>)
 8004100:	4013      	ands	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	0159      	lsls	r1, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	440b      	add	r3, r1
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	4619      	mov	r1, r3
 8004140:	4b95      	ldr	r3, [pc, #596]	; (8004398 <USB_EPStartXfer+0x2e0>)
 8004142:	4013      	ands	r3, r2
 8004144:	610b      	str	r3, [r1, #16]
 8004146:	e074      	b.n	8004232 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	0159      	lsls	r1, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	440b      	add	r3, r1
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	4619      	mov	r1, r3
 8004164:	4b8c      	ldr	r3, [pc, #560]	; (8004398 <USB_EPStartXfer+0x2e0>)
 8004166:	4013      	ands	r3, r2
 8004168:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	0159      	lsls	r1, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	440b      	add	r3, r1
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	4619      	mov	r1, r3
 8004186:	4b83      	ldr	r3, [pc, #524]	; (8004394 <USB_EPStartXfer+0x2dc>)
 8004188:	4013      	ands	r3, r2
 800418a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	440b      	add	r3, r1
 80041a4:	1e59      	subs	r1, r3, #1
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041b0:	4b7a      	ldr	r3, [pc, #488]	; (800439c <USB_EPStartXfer+0x2e4>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	0148      	lsls	r0, r1, #5
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	4401      	add	r1, r0
 80041bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	0148      	lsls	r0, r1, #5
 80041de:	69f9      	ldr	r1, [r7, #28]
 80041e0:	4401      	add	r1, r0
 80041e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	791b      	ldrb	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11f      	bne.n	8004232 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004210:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004230:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d14b      	bne.n	80042d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	791b      	ldrb	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d128      	bne.n	80042ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d110      	bne.n	800428e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e00f      	b.n	80042ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e137      	b.n	8004540 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	791b      	ldrb	r3, [r3, #4]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d015      	beq.n	8004324 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 811f 	beq.w	8004540 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	69f9      	ldr	r1, [r7, #28]
 800431a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800431e:	4313      	orrs	r3, r2
 8004320:	634b      	str	r3, [r1, #52]	; 0x34
 8004322:	e10d      	b.n	8004540 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d110      	bne.n	8004356 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e00f      	b.n	8004376 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6919      	ldr	r1, [r3, #16]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	b298      	uxth	r0, r3
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4603      	mov	r3, r0
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 faea 	bl	8004964 <USB_WritePacket>
 8004390:	e0d6      	b.n	8004540 <USB_EPStartXfer+0x488>
 8004392:	bf00      	nop
 8004394:	e007ffff 	.word	0xe007ffff
 8004398:	fff80000 	.word	0xfff80000
 800439c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	0159      	lsls	r1, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b63      	ldr	r3, [pc, #396]	; (800454c <USB_EPStartXfer+0x494>)
 80043be:	4013      	ands	r3, r2
 80043c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	4619      	mov	r1, r3
 80043de:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <USB_EPStartXfer+0x498>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d123      	bne.n	8004434 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	0148      	lsls	r0, r1, #5
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	4401      	add	r1, r0
 800440a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004430:	6113      	str	r3, [r2, #16]
 8004432:	e037      	b.n	80044a4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4413      	add	r3, r2
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	8afa      	ldrh	r2, [r7, #22]
 8004450:	fb03 f202 	mul.w	r2, r3, r2
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	8afb      	ldrh	r3, [r7, #22]
 8004468:	04d9      	lsls	r1, r3, #19
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <USB_EPStartXfer+0x49c>)
 800446c:	400b      	ands	r3, r1
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	0148      	lsls	r0, r1, #5
 8004472:	69f9      	ldr	r1, [r7, #28]
 8004474:	4401      	add	r1, r0
 8004476:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	0148      	lsls	r0, r1, #5
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	4401      	add	r1, r0
 800449c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044a0:	4313      	orrs	r3, r2
 80044a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10d      	bne.n	80044c6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	460a      	mov	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	791b      	ldrb	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d128      	bne.n	8004520 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d110      	bne.n	8004500 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00f      	b.n	8004520 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	fff80000 	.word	0xfff80000
 8004550:	e007ffff 	.word	0xe007ffff
 8004554:	1ff80000 	.word	0x1ff80000

08004558 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 80ce 	bne.w	8004716 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d132      	bne.n	80045e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	0159      	lsls	r1, r3, #5
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	440b      	add	r3, r1
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	4619      	mov	r1, r3
 800459e:	4b9a      	ldr	r3, [pc, #616]	; (8004808 <USB_EP0StartXfer+0x2b0>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	0159      	lsls	r1, r3, #5
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	440b      	add	r3, r1
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	4619      	mov	r1, r3
 80045e0:	4b8a      	ldr	r3, [pc, #552]	; (800480c <USB_EP0StartXfer+0x2b4>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]
 80045e6:	e04e      	b.n	8004686 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	0159      	lsls	r1, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	4619      	mov	r1, r3
 8004604:	4b81      	ldr	r3, [pc, #516]	; (800480c <USB_EP0StartXfer+0x2b4>)
 8004606:	4013      	ands	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	440b      	add	r3, r1
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	4619      	mov	r1, r3
 8004626:	4b78      	ldr	r3, [pc, #480]	; (8004808 <USB_EP0StartXfer+0x2b0>)
 8004628:	4013      	ands	r3, r2
 800462a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d903      	bls.n	8004640 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800465e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	0148      	lsls	r0, r1, #5
 800467a:	6979      	ldr	r1, [r7, #20]
 800467c:	4401      	add	r1, r0
 800467e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d11e      	bne.n	80046ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e097      	b.n	80047fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8083 	beq.w	80047fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	6979      	ldr	r1, [r7, #20]
 800470c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004710:	4313      	orrs	r3, r2
 8004712:	634b      	str	r3, [r1, #52]	; 0x34
 8004714:	e071      	b.n	80047fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	440b      	add	r3, r1
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	4619      	mov	r1, r3
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <USB_EP0StartXfer+0x2b4>)
 8004734:	4013      	ands	r3, r2
 8004736:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	0159      	lsls	r1, r3, #5
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	440b      	add	r3, r1
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	4619      	mov	r1, r3
 8004754:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <USB_EP0StartXfer+0x2b0>)
 8004756:	4013      	ands	r3, r2
 8004758:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	0148      	lsls	r0, r1, #5
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	4401      	add	r1, r0
 80047b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047b4:	4313      	orrs	r3, r2
 80047b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10d      	bne.n	80047da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6919      	ldr	r1, [r3, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	460a      	mov	r2, r1
 80047d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e007ffff 	.word	0xe007ffff
 800480c:	fff80000 	.word	0xfff80000

08004810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d14a      	bne.n	80048c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004846:	f040 8086 	bne.w	8004956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800486c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f242 7210 	movw	r2, #10000	; 0x2710
 800489e:	4293      	cmp	r3, r2
 80048a0:	d902      	bls.n	80048a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
          break;
 80048a6:	e056      	b.n	8004956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c0:	d0e7      	beq.n	8004892 <USB_EPStopXfer+0x82>
 80048c2:	e048      	b.n	8004956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048dc:	d13b      	bne.n	8004956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3301      	adds	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004932:	4293      	cmp	r3, r2
 8004934:	d902      	bls.n	800493c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
          break;
 800493a:	e00c      	b.n	8004956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004954:	d0e7      	beq.n	8004926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004956:	7dfb      	ldrb	r3, [r7, #23]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	460b      	mov	r3, r1
 8004974:	71fb      	strb	r3, [r7, #7]
 8004976:	4613      	mov	r3, r2
 8004978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d123      	bne.n	80049d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800498a:	88bb      	ldrh	r3, [r7, #4]
 800498c:	3303      	adds	r3, #3
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e018      	b.n	80049ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	031a      	lsls	r2, r3, #12
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3e2      	bcc.n	8004998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3724      	adds	r7, #36	; 0x24
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b08b      	sub	sp, #44	; 0x2c
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e014      	b.n	8004a36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	3301      	adds	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	3301      	adds	r3, #1
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	3301      	adds	r3, #1
 8004a34:	623b      	str	r3, [r7, #32]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3e6      	bcc.n	8004a0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a3e:	8bfb      	ldrh	r3, [r7, #30]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01e      	beq.n	8004a82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f107 0310 	add.w	r3, r7, #16
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	701a      	strb	r2, [r3, #0]
      i++;
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	3301      	adds	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a76:	8bfb      	ldrh	r3, [r7, #30]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a7c:	8bfb      	ldrh	r3, [r7, #30]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ea      	bne.n	8004a58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	372c      	adds	r7, #44	; 0x2c
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d12c      	bne.n	8004b06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db12      	blt.n	8004ae4 <USB_EPSetStall+0x54>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00f      	beq.n	8004ae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e02b      	b.n	8004b5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db12      	blt.n	8004b3e <USB_EPSetStall+0xae>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d128      	bne.n	8004bda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	791b      	ldrb	r3, [r3, #4]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <USB_EPClearStall+0x4c>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d138      	bne.n	8004c2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e027      	b.n	8004c2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	791b      	ldrb	r3, [r3, #4]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d003      	beq.n	8004c0a <USB_EPClearStall+0x9e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d10f      	bne.n	8004c2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb2:	f023 0302 	bic.w	r3, r3, #2
 8004cb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ce0:	f023 0303 	bic.w	r3, r3, #3
 8004ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d20:	68fb      	ldr	r3, [r7, #12]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0c1b      	lsrs	r3, r3, #16
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	b29b      	uxth	r3, r3
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	01db      	lsls	r3, r3, #7
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e20:	68bb      	ldr	r3, [r7, #8]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	4619      	mov	r1, r3
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <USB_ActivateSetup+0x44>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	fffff800 	.word	0xfffff800

08004e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	333c      	adds	r3, #60	; 0x3c
 8004eaa:	3304      	adds	r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <USB_EP0_OutStart+0xb8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d90a      	bls.n	8004ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec8:	d101      	bne.n	8004ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e037      	b.n	8004f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	f043 0318 	orr.w	r3, r3, #24
 8004f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f16:	7afb      	ldrb	r3, [r7, #11]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10f      	bne.n	8004f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	4f54300a 	.word	0x4f54300a

08004f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <USB_CoreReset+0x64>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e01b      	b.n	8004fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	daf2      	bge.n	8004f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f043 0201 	orr.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <USB_CoreReset+0x64>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d0f0      	beq.n	8004f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	00030d40 	.word	0x00030d40

08004fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004fc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004fc8:	f002 fdae 	bl	8007b28 <malloc>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	32b0      	adds	r2, #176	; 0xb0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0d4      	b.n	8005194 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004fea:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004fee:	2100      	movs	r1, #0
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f002 fdb7 	bl	8007b64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	32b0      	adds	r2, #176	; 0xb0
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	; 0xb0
 8005010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7c1b      	ldrb	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d138      	bne.n	8005094 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005022:	4b5e      	ldr	r3, [pc, #376]	; (800519c <USBD_CDC_Init+0x1e4>)
 8005024:	7819      	ldrb	r1, [r3, #0]
 8005026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502a:	2202      	movs	r2, #2
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f002 fbae 	bl	800778e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005032:	4b5a      	ldr	r3, [pc, #360]	; (800519c <USBD_CDC_Init+0x1e4>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	2201      	movs	r2, #1
 800504a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800504c:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 800504e:	7819      	ldrb	r1, [r3, #0]
 8005050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005054:	2202      	movs	r2, #2
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fb99 	bl	800778e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800505c:	4b50      	ldr	r3, [pc, #320]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005074:	2201      	movs	r2, #1
 8005076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <USBD_CDC_Init+0x1ec>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3326      	adds	r3, #38	; 0x26
 800508e:	2210      	movs	r2, #16
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e035      	b.n	8005100 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005094:	4b41      	ldr	r3, [pc, #260]	; (800519c <USBD_CDC_Init+0x1e4>)
 8005096:	7819      	ldrb	r1, [r3, #0]
 8005098:	2340      	movs	r3, #64	; 0x40
 800509a:	2202      	movs	r2, #2
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f002 fb76 	bl	800778e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050a2:	4b3e      	ldr	r3, [pc, #248]	; (800519c <USBD_CDC_Init+0x1e4>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f003 020f 	and.w	r2, r3, #15
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3324      	adds	r3, #36	; 0x24
 80050b8:	2201      	movs	r2, #1
 80050ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 80050be:	7819      	ldrb	r1, [r3, #0]
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	2202      	movs	r2, #2
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f002 fb62 	bl	800778e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050ca:	4b35      	ldr	r3, [pc, #212]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050e2:	2201      	movs	r2, #1
 80050e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <USBD_CDC_Init+0x1ec>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3326      	adds	r3, #38	; 0x26
 80050fc:	2210      	movs	r2, #16
 80050fe:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <USBD_CDC_Init+0x1ec>)
 8005102:	7819      	ldrb	r1, [r3, #0]
 8005104:	2308      	movs	r3, #8
 8005106:	2203      	movs	r2, #3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f002 fb40 	bl	800778e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800510e:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <USBD_CDC_Init+0x1ec>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	2201      	movs	r2, #1
 8005126:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	33b0      	adds	r3, #176	; 0xb0
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800515e:	2302      	movs	r3, #2
 8005160:	e018      	b.n	8005194 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7c1b      	ldrb	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 800516c:	7819      	ldrb	r1, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f002 fbf7 	bl	800796c <USBD_LL_PrepareReceive>
 800517e:	e008      	b.n	8005192 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <USBD_CDC_Init+0x1e8>)
 8005182:	7819      	ldrb	r1, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800518a:	2340      	movs	r3, #64	; 0x40
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f002 fbed 	bl	800796c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000093 	.word	0x20000093
 80051a0:	20000094 	.word	0x20000094
 80051a4:	20000095 	.word	0x20000095

080051a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80051b4:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <USBD_CDC_DeInit+0xf8>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f002 fb0d 	bl	80077da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <USBD_CDC_DeInit+0xf8>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 020f 	and.w	r2, r3, #15
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3324      	adds	r3, #36	; 0x24
 80051d6:	2200      	movs	r2, #0
 80051d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051da:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <USBD_CDC_DeInit+0xfc>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 fafa 	bl	80077da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <USBD_CDC_DeInit+0xfc>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051fe:	2200      	movs	r2, #0
 8005200:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005202:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <USBD_CDC_DeInit+0x100>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f002 fae6 	bl	80077da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <USBD_CDC_DeInit+0x100>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3324      	adds	r3, #36	; 0x24
 8005224:	2200      	movs	r2, #0
 8005226:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005228:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <USBD_CDC_DeInit+0x100>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f003 020f 	and.w	r2, r3, #15
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3326      	adds	r3, #38	; 0x26
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	32b0      	adds	r2, #176	; 0xb0
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	33b0      	adds	r3, #176	; 0xb0
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	32b0      	adds	r2, #176	; 0xb0
 8005272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005276:	4618      	mov	r0, r3
 8005278:	f002 fc5e 	bl	8007b38 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	32b0      	adds	r2, #176	; 0xb0
 8005286:	2100      	movs	r1, #0
 8005288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000093 	.word	0x20000093
 80052a4:	20000094 	.word	0x20000094
 80052a8:	20000095 	.word	0x20000095

080052ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	32b0      	adds	r2, #176	; 0xb0
 80052c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0bf      	b.n	800545c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d050      	beq.n	800538a <USBD_CDC_Setup+0xde>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 80af 	bne.w	800544c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d03a      	beq.n	800536c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da1b      	bge.n	8005338 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	33b0      	adds	r3, #176	; 0xb0
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005316:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	88d2      	ldrh	r2, [r2, #6]
 800531c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	88db      	ldrh	r3, [r3, #6]
 8005322:	2b07      	cmp	r3, #7
 8005324:	bf28      	it	cs
 8005326:	2307      	movcs	r3, #7
 8005328:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	89fa      	ldrh	r2, [r7, #14]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f001 fdad 	bl	8006e90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005336:	e090      	b.n	800545a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	785a      	ldrb	r2, [r3, #1]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	88db      	ldrh	r3, [r3, #6]
 8005346:	2b3f      	cmp	r3, #63	; 0x3f
 8005348:	d803      	bhi.n	8005352 <USBD_CDC_Setup+0xa6>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	88db      	ldrh	r3, [r3, #6]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	e000      	b.n	8005354 <USBD_CDC_Setup+0xa8>
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005362:	461a      	mov	r2, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fdbf 	bl	8006ee8 <USBD_CtlPrepareRx>
      break;
 800536a:	e076      	b.n	800545a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	33b0      	adds	r3, #176	; 0xb0
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	7850      	ldrb	r0, [r2, #1]
 8005382:	2200      	movs	r2, #0
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4798      	blx	r3
      break;
 8005388:	e067      	b.n	800545a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b0b      	cmp	r3, #11
 8005390:	d851      	bhi.n	8005436 <USBD_CDC_Setup+0x18a>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <USBD_CDC_Setup+0xec>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053c9 	.word	0x080053c9
 800539c:	08005445 	.word	0x08005445
 80053a0:	08005437 	.word	0x08005437
 80053a4:	08005437 	.word	0x08005437
 80053a8:	08005437 	.word	0x08005437
 80053ac:	08005437 	.word	0x08005437
 80053b0:	08005437 	.word	0x08005437
 80053b4:	08005437 	.word	0x08005437
 80053b8:	08005437 	.word	0x08005437
 80053bc:	08005437 	.word	0x08005437
 80053c0:	080053f3 	.word	0x080053f3
 80053c4:	0800541d 	.word	0x0800541d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d107      	bne.n	80053e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053d4:	f107 030a 	add.w	r3, r7, #10
 80053d8:	2202      	movs	r2, #2
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 fd57 	bl	8006e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053e2:	e032      	b.n	800544a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 fce1 	bl	8006dae <USBD_CtlError>
            ret = USBD_FAIL;
 80053ec:	2303      	movs	r3, #3
 80053ee:	75fb      	strb	r3, [r7, #23]
          break;
 80053f0:	e02b      	b.n	800544a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d107      	bne.n	800540e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053fe:	f107 030d 	add.w	r3, r7, #13
 8005402:	2201      	movs	r2, #1
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fd42 	bl	8006e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800540c:	e01d      	b.n	800544a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 fccc 	bl	8006dae <USBD_CtlError>
            ret = USBD_FAIL;
 8005416:	2303      	movs	r3, #3
 8005418:	75fb      	strb	r3, [r7, #23]
          break;
 800541a:	e016      	b.n	800544a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b03      	cmp	r3, #3
 8005426:	d00f      	beq.n	8005448 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fcbf 	bl	8006dae <USBD_CtlError>
            ret = USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005434:	e008      	b.n	8005448 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fcb8 	bl	8006dae <USBD_CtlError>
          ret = USBD_FAIL;
 800543e:	2303      	movs	r3, #3
 8005440:	75fb      	strb	r3, [r7, #23]
          break;
 8005442:	e002      	b.n	800544a <USBD_CDC_Setup+0x19e>
          break;
 8005444:	bf00      	nop
 8005446:	e008      	b.n	800545a <USBD_CDC_Setup+0x1ae>
          break;
 8005448:	bf00      	nop
      }
      break;
 800544a:	e006      	b.n	800545a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fcad 	bl	8006dae <USBD_CtlError>
      ret = USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	bf00      	nop
  }

  return (uint8_t)ret;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	32b0      	adds	r2, #176	; 0xb0
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800548a:	2303      	movs	r3, #3
 800548c:	e065      	b.n	800555a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	32b0      	adds	r2, #176	; 0xb0
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	3318      	adds	r3, #24
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d02f      	beq.n	8005518 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	f003 020f 	and.w	r2, r3, #15
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	3318      	adds	r3, #24
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	f003 010f 	and.w	r1, r3, #15
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	460b      	mov	r3, r1
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4403      	add	r3, r0
 80054e0:	3348      	adds	r3, #72	; 0x48
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d112      	bne.n	8005518 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3318      	adds	r3, #24
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800550a:	78f9      	ldrb	r1, [r7, #3]
 800550c:	2300      	movs	r3, #0
 800550e:	2200      	movs	r2, #0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 fa0a 	bl	800792a <USBD_LL_Transmit>
 8005516:	e01f      	b.n	8005558 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	33b0      	adds	r3, #176	; 0xb0
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	33b0      	adds	r3, #176	; 0xb0
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32b0      	adds	r2, #176	; 0xb0
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	32b0      	adds	r2, #176	; 0xb0
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e01a      	b.n	80055ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f002 fa08 	bl	80079ae <USBD_LL_GetRxDataSize>
 800559e:	4602      	mov	r2, r0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	33b0      	adds	r3, #176	; 0xb0
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055c4:	4611      	mov	r1, r2
 80055c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	32b0      	adds	r2, #176	; 0xb0
 80055e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e025      	b.n	8005640 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	33b0      	adds	r3, #176	; 0xb0
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <USBD_CDC_EP0_RxReady+0x6c>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d015      	beq.n	800563e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	33b0      	adds	r3, #176	; 0xb0
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800562a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005632:	b292      	uxth	r2, r2
 8005634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	22ff      	movs	r2, #255	; 0xff
 800563a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005650:	2182      	movs	r1, #130	; 0x82
 8005652:	4818      	ldr	r0, [pc, #96]	; (80056b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005654:	f000 fd49 	bl	80060ea <USBD_GetEpDesc>
 8005658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800565a:	2101      	movs	r1, #1
 800565c:	4815      	ldr	r0, [pc, #84]	; (80056b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800565e:	f000 fd44 	bl	80060ea <USBD_GetEpDesc>
 8005662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005664:	2181      	movs	r1, #129	; 0x81
 8005666:	4813      	ldr	r0, [pc, #76]	; (80056b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005668:	f000 fd3f 	bl	80060ea <USBD_GetEpDesc>
 800566c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2210      	movs	r2, #16
 8005678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d006      	beq.n	800568e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2200      	movs	r2, #0
 8005684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005688:	711a      	strb	r2, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569c:	711a      	strb	r2, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2243      	movs	r2, #67	; 0x43
 80056a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056a8:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000050 	.word	0x20000050

080056b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056c0:	2182      	movs	r1, #130	; 0x82
 80056c2:	4818      	ldr	r0, [pc, #96]	; (8005724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056c4:	f000 fd11 	bl	80060ea <USBD_GetEpDesc>
 80056c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056ca:	2101      	movs	r1, #1
 80056cc:	4815      	ldr	r0, [pc, #84]	; (8005724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056ce:	f000 fd0c 	bl	80060ea <USBD_GetEpDesc>
 80056d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056d4:	2181      	movs	r1, #129	; 0x81
 80056d6:	4813      	ldr	r0, [pc, #76]	; (8005724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056d8:	f000 fd07 	bl	80060ea <USBD_GetEpDesc>
 80056dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2210      	movs	r2, #16
 80056e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2200      	movs	r2, #0
 80056f4:	711a      	strb	r2, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f042 0202 	orr.w	r2, r2, #2
 80056fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	711a      	strb	r2, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f042 0202 	orr.w	r2, r2, #2
 8005710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2243      	movs	r2, #67	; 0x43
 8005716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000050 	.word	0x20000050

08005728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005730:	2182      	movs	r1, #130	; 0x82
 8005732:	4818      	ldr	r0, [pc, #96]	; (8005794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005734:	f000 fcd9 	bl	80060ea <USBD_GetEpDesc>
 8005738:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800573a:	2101      	movs	r1, #1
 800573c:	4815      	ldr	r0, [pc, #84]	; (8005794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800573e:	f000 fcd4 	bl	80060ea <USBD_GetEpDesc>
 8005742:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005744:	2181      	movs	r1, #129	; 0x81
 8005746:	4813      	ldr	r0, [pc, #76]	; (8005794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005748:	f000 fccf 	bl	80060ea <USBD_GetEpDesc>
 800574c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2210      	movs	r2, #16
 8005758:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2200      	movs	r2, #0
 8005764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005768:	711a      	strb	r2, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577c:	711a      	strb	r2, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2243      	movs	r2, #67	; 0x43
 8005786:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000050 	.word	0x20000050

08005798 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	220a      	movs	r2, #10
 80057a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	2000000c 	.word	0x2000000c

080057b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e009      	b.n	80057e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	33b0      	adds	r3, #176	; 0xb0
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	32b0      	adds	r2, #176	; 0xb0
 8005802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005806:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800580e:	2303      	movs	r3, #3
 8005810:	e008      	b.n	8005824 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	32b0      	adds	r2, #176	; 0xb0
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e004      	b.n	800585e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	32b0      	adds	r2, #176	; 0xb0
 800587e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005882:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800588e:	2303      	movs	r3, #3
 8005890:	e025      	b.n	80058de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005898:	2b00      	cmp	r3, #0
 800589a:	d11f      	bne.n	80058dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <USBD_CDC_TransmitPacket+0x7c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4403      	add	r3, r0
 80058be:	3318      	adds	r3, #24
 80058c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <USBD_CDC_TransmitPacket+0x7c>)
 80058c4:	7819      	ldrb	r1, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 f829 	bl	800792a <USBD_LL_Transmit>

    ret = USBD_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000093 	.word	0x20000093

080058ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	32b0      	adds	r2, #176	; 0xb0
 80058fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005902:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	32b0      	adds	r2, #176	; 0xb0
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005916:	2303      	movs	r3, #3
 8005918:	e018      	b.n	800594c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7c1b      	ldrb	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005922:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <USBD_CDC_ReceivePacket+0x68>)
 8005924:	7819      	ldrb	r1, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800592c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f002 f81b 	bl	800796c <USBD_LL_PrepareReceive>
 8005936:	e008      	b.n	800594a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <USBD_CDC_ReceivePacket+0x68>)
 800593a:	7819      	ldrb	r1, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f002 f811 	bl	800796c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000094 	.word	0x20000094

08005958 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800596c:	2303      	movs	r3, #3
 800596e:	e01f      	b.n	80059b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f001 fe8b 	bl	80076c0 <USBD_LL_Init>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e025      	b.n	8005a1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	32ae      	adds	r2, #174	; 0xae
 80059e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00f      	beq.n	8005a0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	32ae      	adds	r2, #174	; 0xae
 80059f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	f107 020e 	add.w	r2, r7, #14
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fe93 	bl	8007758 <USBD_LL_Start>
 8005a32:	4603      	mov	r3, r0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d009      	beq.n	8005a80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	4611      	mov	r1, r2
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f932 	bl	8006d3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d01a      	beq.n	8005b30 <USBD_LL_SetupStage+0x72>
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d822      	bhi.n	8005b44 <USBD_LL_SetupStage+0x86>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USBD_LL_SetupStage+0x4a>
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d00a      	beq.n	8005b1c <USBD_LL_SetupStage+0x5e>
 8005b06:	e01d      	b.n	8005b44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb5f 	bl	80061d4 <USBD_StdDevReq>
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1a:	e020      	b.n	8005b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fbc7 	bl	80062b8 <USBD_StdItfReq>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2e:	e016      	b.n	8005b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fc29 	bl	8006390 <USBD_StdEPReq>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73fb      	strb	r3, [r7, #15]
      break;
 8005b42:	e00c      	b.n	8005b5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fe60 	bl	8007818 <USBD_LL_StallEP>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	bf00      	nop
  }

  return ret;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	460b      	mov	r3, r1
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d16e      	bne.n	8005c5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	f040 8098 	bne.w	8005cc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d913      	bls.n	8005bc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bf28      	it	cs
 8005bba:	4613      	movcs	r3, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f001 f9ae 	bl	8006f22 <USBD_CtlContinueRx>
 8005bc6:	e07d      	b.n	8005cc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d014      	beq.n	8005c00 <USBD_LL_DataOutStage+0x98>
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d81d      	bhi.n	8005c16 <USBD_LL_DataOutStage+0xae>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <USBD_LL_DataOutStage+0x7c>
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d003      	beq.n	8005bea <USBD_LL_DataOutStage+0x82>
 8005be2:	e018      	b.n	8005c16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	75bb      	strb	r3, [r7, #22]
            break;
 8005be8:	e018      	b.n	8005c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fa5e 	bl	80060b6 <USBD_CoreFindIF>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75bb      	strb	r3, [r7, #22]
            break;
 8005bfe:	e00d      	b.n	8005c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa60 	bl	80060d0 <USBD_CoreFindEP>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75bb      	strb	r3, [r7, #22]
            break;
 8005c14:	e002      	b.n	8005c1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75bb      	strb	r3, [r7, #22]
            break;
 8005c1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c1c:	7dbb      	ldrb	r3, [r7, #22]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d119      	bne.n	8005c56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d113      	bne.n	8005c56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c2e:	7dba      	ldrb	r2, [r7, #22]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	32ae      	adds	r2, #174	; 0xae
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c3e:	7dba      	ldrb	r2, [r7, #22]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c46:	7dba      	ldrb	r2, [r7, #22]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	32ae      	adds	r2, #174	; 0xae
 8005c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 f974 	bl	8006f44 <USBD_CtlSendStatus>
 8005c5c:	e032      	b.n	8005cc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	4619      	mov	r1, r3
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fa31 	bl	80060d0 <USBD_CoreFindEP>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c72:	7dbb      	ldrb	r3, [r7, #22]
 8005c74:	2bff      	cmp	r3, #255	; 0xff
 8005c76:	d025      	beq.n	8005cc4 <USBD_LL_DataOutStage+0x15c>
 8005c78:	7dbb      	ldrb	r3, [r7, #22]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d122      	bne.n	8005cc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d117      	bne.n	8005cba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c8a:	7dba      	ldrb	r2, [r7, #22]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	32ae      	adds	r2, #174	; 0xae
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00f      	beq.n	8005cba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c9a:	7dba      	ldrb	r2, [r7, #22]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ca2:	7dba      	ldrb	r2, [r7, #22]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	32ae      	adds	r2, #174	; 0xae
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	7afa      	ldrb	r2, [r7, #11]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	4798      	blx	r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	e000      	b.n	8005cc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d16f      	bne.n	8005dc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d15a      	bne.n	8005da8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d914      	bls.n	8005d28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f001 f8d6 	bl	8006ec6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2100      	movs	r1, #0
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f001 fe23 	bl	800796c <USBD_LL_PrepareReceive>
 8005d26:	e03f      	b.n	8005da8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d11c      	bne.n	8005d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d316      	bcc.n	8005d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d20f      	bcs.n	8005d6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f001 f8b7 	bl	8006ec6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d60:	2300      	movs	r3, #0
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f001 fe00 	bl	800796c <USBD_LL_PrepareReceive>
 8005d6c:	e01c      	b.n	8005da8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d10f      	bne.n	8005d9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fd3b 	bl	8007818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f001 f8e1 	bl	8006f6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d03a      	beq.n	8005e28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fe42 	bl	8005a3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005dc0:	e032      	b.n	8005e28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f97f 	bl	80060d0 <USBD_CoreFindEP>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2bff      	cmp	r3, #255	; 0xff
 8005dda:	d025      	beq.n	8005e28 <USBD_LL_DataInStage+0x15a>
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d122      	bne.n	8005e28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d11c      	bne.n	8005e28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dee:	7dfa      	ldrb	r2, [r7, #23]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	32ae      	adds	r2, #174	; 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d014      	beq.n	8005e28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005dfe:	7dfa      	ldrb	r2, [r7, #23]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e06:	7dfa      	ldrb	r2, [r7, #23]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	32ae      	adds	r2, #174	; 0xae
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	7afa      	ldrb	r2, [r7, #11]
 8005e14:	4611      	mov	r1, r2
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	4798      	blx	r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e1e:	7dbb      	ldrb	r3, [r7, #22]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e24:	7dbb      	ldrb	r3, [r7, #22]
 8005e26:	e000      	b.n	8005e2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fc75 	bl	800778e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fc67 	bl	800778e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	621a      	str	r2, [r3, #32]

  return ret;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d106      	bne.n	8005f44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d110      	bne.n	8005f88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	32ae      	adds	r2, #174	; 0xae
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e01c      	b.n	8005fee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d115      	bne.n	8005fec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	; 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	32ae      	adds	r2, #174	; 0xae
 8005fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	32ae      	adds	r2, #174	; 0xae
 800600c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	e01c      	b.n	8006052 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b03      	cmp	r3, #3
 8006022:	d115      	bne.n	8006050 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	32ae      	adds	r2, #174	; 0xae
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32ae      	adds	r2, #174	; 0xae
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	4611      	mov	r1, r2
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	4611      	mov	r1, r2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80060a8:	2303      	movs	r3, #3
 80060aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	885b      	ldrh	r3, [r3, #2]
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	429a      	cmp	r2, r3
 8006110:	d920      	bls.n	8006154 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800611a:	e013      	b.n	8006144 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800611c:	f107 030a 	add.w	r3, r7, #10
 8006120:	4619      	mov	r1, r3
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f000 f81b 	bl	800615e <USBD_GetNextDesc>
 8006128:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b05      	cmp	r3, #5
 8006130:	d108      	bne.n	8006144 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	789b      	ldrb	r3, [r3, #2]
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	429a      	cmp	r2, r3
 800613e:	d008      	beq.n	8006152 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	885b      	ldrh	r3, [r3, #2]
 8006148:	b29a      	uxth	r2, r3
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	429a      	cmp	r2, r3
 800614e:	d8e5      	bhi.n	800611c <USBD_GetEpDesc+0x32>
 8006150:	e000      	b.n	8006154 <USBD_GetEpDesc+0x6a>
          break;
 8006152:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006154:	693b      	ldr	r3, [r7, #16]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	4413      	add	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3301      	adds	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061b6:	8a3b      	ldrh	r3, [r7, #16]
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	b21a      	sxth	r2, r3
 80061bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061c6:	89fb      	ldrh	r3, [r7, #14]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d005      	beq.n	80061fa <USBD_StdDevReq+0x26>
 80061ee:	2b40      	cmp	r3, #64	; 0x40
 80061f0:	d857      	bhi.n	80062a2 <USBD_StdDevReq+0xce>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00f      	beq.n	8006216 <USBD_StdDevReq+0x42>
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d153      	bne.n	80062a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	32ae      	adds	r2, #174	; 0xae
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
      break;
 8006214:	e04a      	b.n	80062ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b09      	cmp	r3, #9
 800621c:	d83b      	bhi.n	8006296 <USBD_StdDevReq+0xc2>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <USBD_StdDevReq+0x50>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006279 	.word	0x08006279
 8006228:	0800628d 	.word	0x0800628d
 800622c:	08006297 	.word	0x08006297
 8006230:	08006283 	.word	0x08006283
 8006234:	08006297 	.word	0x08006297
 8006238:	08006257 	.word	0x08006257
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006297 	.word	0x08006297
 8006244:	0800626f 	.word	0x0800626f
 8006248:	08006261 	.word	0x08006261
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa3c 	bl	80066cc <USBD_GetDescriptor>
          break;
 8006254:	e024      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fbcb 	bl	80069f4 <USBD_SetAddress>
          break;
 800625e:	e01f      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fc0a 	bl	8006a7c <USBD_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
          break;
 800626c:	e018      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fcad 	bl	8006bd0 <USBD_GetConfig>
          break;
 8006276:	e013      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fcde 	bl	8006c3c <USBD_GetStatus>
          break;
 8006280:	e00e      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fd0d 	bl	8006ca4 <USBD_SetFeature>
          break;
 800628a:	e009      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fd31 	bl	8006cf6 <USBD_ClrFeature>
          break;
 8006294:	e004      	b.n	80062a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fd88 	bl	8006dae <USBD_CtlError>
          break;
 800629e:	bf00      	nop
      }
      break;
 80062a0:	e004      	b.n	80062ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fd82 	bl	8006dae <USBD_CtlError>
      break;
 80062aa:	bf00      	nop
  }

  return ret;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d005      	beq.n	80062de <USBD_StdItfReq+0x26>
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d852      	bhi.n	800637c <USBD_StdItfReq+0xc4>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <USBD_StdItfReq+0x26>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d14e      	bne.n	800637c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d840      	bhi.n	800636e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	889b      	ldrh	r3, [r3, #4]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d836      	bhi.n	8006364 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	889b      	ldrh	r3, [r3, #4]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fed9 	bl	80060b6 <USBD_CoreFindIF>
 8006304:	4603      	mov	r3, r0
 8006306:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d01d      	beq.n	800634a <USBD_StdItfReq+0x92>
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d11a      	bne.n	800634a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006314:	7bba      	ldrb	r2, [r7, #14]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32ae      	adds	r2, #174	; 0xae
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006324:	7bba      	ldrb	r2, [r7, #14]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800632c:	7bba      	ldrb	r2, [r7, #14]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	32ae      	adds	r2, #174	; 0xae
 8006332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006342:	e004      	b.n	800634e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006348:	e001      	b.n	800634e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800634a:	2303      	movs	r3, #3
 800634c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <USBD_StdItfReq+0xc0>
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10d      	bne.n	8006378 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fdf1 	bl	8006f44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006362:	e009      	b.n	8006378 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fd21 	bl	8006dae <USBD_CtlError>
          break;
 800636c:	e004      	b.n	8006378 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fd1c 	bl	8006dae <USBD_CtlError>
          break;
 8006376:	e000      	b.n	800637a <USBD_StdItfReq+0xc2>
          break;
 8006378:	bf00      	nop
      }
      break;
 800637a:	e004      	b.n	8006386 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fd15 	bl	8006dae <USBD_CtlError>
      break;
 8006384:	bf00      	nop
  }

  return ret;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	889b      	ldrh	r3, [r3, #4]
 80063a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d007      	beq.n	80063c0 <USBD_StdEPReq+0x30>
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	f200 817f 	bhi.w	80066b4 <USBD_StdEPReq+0x324>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02a      	beq.n	8006410 <USBD_StdEPReq+0x80>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	f040 817a 	bne.w	80066b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fe83 	bl	80060d0 <USBD_CoreFindEP>
 80063ca:	4603      	mov	r3, r0
 80063cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063ce:	7b7b      	ldrb	r3, [r7, #13]
 80063d0:	2bff      	cmp	r3, #255	; 0xff
 80063d2:	f000 8174 	beq.w	80066be <USBD_StdEPReq+0x32e>
 80063d6:	7b7b      	ldrb	r3, [r7, #13]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 8170 	bne.w	80066be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063de:	7b7a      	ldrb	r2, [r7, #13]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063e6:	7b7a      	ldrb	r2, [r7, #13]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	32ae      	adds	r2, #174	; 0xae
 80063ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8163 	beq.w	80066be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063f8:	7b7a      	ldrb	r2, [r7, #13]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	32ae      	adds	r2, #174	; 0xae
 80063fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800640e:	e156      	b.n	80066be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d008      	beq.n	800642a <USBD_StdEPReq+0x9a>
 8006418:	2b03      	cmp	r3, #3
 800641a:	f300 8145 	bgt.w	80066a8 <USBD_StdEPReq+0x318>
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 809b 	beq.w	800655a <USBD_StdEPReq+0x1ca>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d03c      	beq.n	80064a2 <USBD_StdEPReq+0x112>
 8006428:	e13e      	b.n	80066a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d002      	beq.n	800643c <USBD_StdEPReq+0xac>
 8006436:	2b03      	cmp	r3, #3
 8006438:	d016      	beq.n	8006468 <USBD_StdEPReq+0xd8>
 800643a:	e02c      	b.n	8006496 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <USBD_StdEPReq+0xce>
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b80      	cmp	r3, #128	; 0x80
 8006446:	d00a      	beq.n	800645e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f9e3 	bl	8007818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 f9df 	bl	8007818 <USBD_LL_StallEP>
 800645a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800645c:	e020      	b.n	80064a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fca4 	bl	8006dae <USBD_CtlError>
              break;
 8006466:	e01b      	b.n	80064a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	885b      	ldrh	r3, [r3, #2]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10e      	bne.n	800648e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <USBD_StdEPReq+0xfe>
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d008      	beq.n	800648e <USBD_StdEPReq+0xfe>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	88db      	ldrh	r3, [r3, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 f9c5 	bl	8007818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fd58 	bl	8006f44 <USBD_CtlSendStatus>

              break;
 8006494:	e004      	b.n	80064a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc88 	bl	8006dae <USBD_CtlError>
              break;
 800649e:	bf00      	nop
          }
          break;
 80064a0:	e107      	b.n	80066b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d002      	beq.n	80064b4 <USBD_StdEPReq+0x124>
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d016      	beq.n	80064e0 <USBD_StdEPReq+0x150>
 80064b2:	e04b      	b.n	800654c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <USBD_StdEPReq+0x146>
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	2b80      	cmp	r3, #128	; 0x80
 80064be:	d00a      	beq.n	80064d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 f9a7 	bl	8007818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f9a3 	bl	8007818 <USBD_LL_StallEP>
 80064d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064d4:	e040      	b.n	8006558 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc68 	bl	8006dae <USBD_CtlError>
              break;
 80064de:	e03b      	b.n	8006558 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d136      	bne.n	8006556 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f9ad 	bl	8007856 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fd21 	bl	8006f44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fde2 	bl	80060d0 <USBD_CoreFindEP>
 800650c:	4603      	mov	r3, r0
 800650e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006510:	7b7b      	ldrb	r3, [r7, #13]
 8006512:	2bff      	cmp	r3, #255	; 0xff
 8006514:	d01f      	beq.n	8006556 <USBD_StdEPReq+0x1c6>
 8006516:	7b7b      	ldrb	r3, [r7, #13]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11c      	bne.n	8006556 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800651c:	7b7a      	ldrb	r2, [r7, #13]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006524:	7b7a      	ldrb	r2, [r7, #13]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32ae      	adds	r2, #174	; 0xae
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d010      	beq.n	8006556 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006534:	7b7a      	ldrb	r2, [r7, #13]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32ae      	adds	r2, #174	; 0xae
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800654a:	e004      	b.n	8006556 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fc2d 	bl	8006dae <USBD_CtlError>
              break;
 8006554:	e000      	b.n	8006558 <USBD_StdEPReq+0x1c8>
              break;
 8006556:	bf00      	nop
          }
          break;
 8006558:	e0ab      	b.n	80066b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d002      	beq.n	800656c <USBD_StdEPReq+0x1dc>
 8006566:	2b03      	cmp	r3, #3
 8006568:	d032      	beq.n	80065d0 <USBD_StdEPReq+0x240>
 800656a:	e097      	b.n	800669c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <USBD_StdEPReq+0x1f2>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d004      	beq.n	8006582 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fc17 	bl	8006dae <USBD_CtlError>
                break;
 8006580:	e091      	b.n	80066a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da0b      	bge.n	80065a2 <USBD_StdEPReq+0x212>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	3310      	adds	r3, #16
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	3304      	adds	r3, #4
 80065a0:	e00b      	b.n	80065ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	3304      	adds	r3, #4
 80065ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2202      	movs	r2, #2
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc61 	bl	8006e90 <USBD_CtlSendData>
              break;
 80065ce:	e06a      	b.n	80066a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da11      	bge.n	80065fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3324      	adds	r3, #36	; 0x24
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d117      	bne.n	8006622 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fbda 	bl	8006dae <USBD_CtlError>
                  break;
 80065fa:	e054      	b.n	80066a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fbc7 	bl	8006dae <USBD_CtlError>
                  break;
 8006620:	e041      	b.n	80066a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da0b      	bge.n	8006642 <USBD_StdEPReq+0x2b2>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	3310      	adds	r3, #16
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	3304      	adds	r3, #4
 8006640:	e00b      	b.n	800665a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	3304      	adds	r3, #4
 800665a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <USBD_StdEPReq+0x2d8>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d103      	bne.n	8006670 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e00e      	b.n	800668e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f90d 	bl	8007894 <USBD_LL_IsStallEP>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e002      	b.n	800668e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2202      	movs	r2, #2
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fbfb 	bl	8006e90 <USBD_CtlSendData>
              break;
 800669a:	e004      	b.n	80066a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fb85 	bl	8006dae <USBD_CtlError>
              break;
 80066a4:	bf00      	nop
          }
          break;
 80066a6:	e004      	b.n	80066b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fb7f 	bl	8006dae <USBD_CtlError>
          break;
 80066b0:	bf00      	nop
      }
      break;
 80066b2:	e005      	b.n	80066c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fb79 	bl	8006dae <USBD_CtlError>
      break;
 80066bc:	e000      	b.n	80066c0 <USBD_StdEPReq+0x330>
      break;
 80066be:	bf00      	nop
  }

  return ret;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	885b      	ldrh	r3, [r3, #2]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b0e      	cmp	r3, #14
 80066ee:	f200 8152 	bhi.w	8006996 <USBD_GetDescriptor+0x2ca>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <USBD_GetDescriptor+0x2c>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006769 	.word	0x08006769
 80066fc:	08006781 	.word	0x08006781
 8006700:	080067c1 	.word	0x080067c1
 8006704:	08006997 	.word	0x08006997
 8006708:	08006997 	.word	0x08006997
 800670c:	08006937 	.word	0x08006937
 8006710:	08006963 	.word	0x08006963
 8006714:	08006997 	.word	0x08006997
 8006718:	08006997 	.word	0x08006997
 800671c:	08006997 	.word	0x08006997
 8006720:	08006997 	.word	0x08006997
 8006724:	08006997 	.word	0x08006997
 8006728:	08006997 	.word	0x08006997
 800672c:	08006997 	.word	0x08006997
 8006730:	08006735 	.word	0x08006735
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7c12      	ldrb	r2, [r2, #16]
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006756:	e126      	b.n	80069a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb27 	bl	8006dae <USBD_CtlError>
        err++;
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	3301      	adds	r3, #1
 8006764:	72fb      	strb	r3, [r7, #11]
      break;
 8006766:	e11e      	b.n	80069a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
      break;
 800677e:	e112      	b.n	80069a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	7c1b      	ldrb	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10d      	bne.n	80067a4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	f107 0208 	add.w	r2, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	2202      	movs	r2, #2
 80067a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067a2:	e100      	b.n	80069a6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	f107 0208 	add.w	r2, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	2202      	movs	r2, #2
 80067bc:	701a      	strb	r2, [r3, #0]
      break;
 80067be:	e0f2      	b.n	80069a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	f200 80ac 	bhi.w	8006924 <USBD_GetDescriptor+0x258>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USBD_GetDescriptor+0x108>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067ed 	.word	0x080067ed
 80067d8:	08006821 	.word	0x08006821
 80067dc:	08006855 	.word	0x08006855
 80067e0:	08006889 	.word	0x08006889
 80067e4:	080068bd 	.word	0x080068bd
 80067e8:	080068f1 	.word	0x080068f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	7c12      	ldrb	r2, [r2, #16]
 8006804:	f107 0108 	add.w	r1, r7, #8
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
 800680c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680e:	e091      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 facb 	bl	8006dae <USBD_CtlError>
            err++;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	3301      	adds	r3, #1
 800681c:	72fb      	strb	r3, [r7, #11]
          break;
 800681e:	e089      	b.n	8006934 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7c12      	ldrb	r2, [r2, #16]
 8006838:	f107 0108 	add.w	r1, r7, #8
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
 8006840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006842:	e077      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fab1 	bl	8006dae <USBD_CtlError>
            err++;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	3301      	adds	r3, #1
 8006850:	72fb      	strb	r3, [r7, #11]
          break;
 8006852:	e06f      	b.n	8006934 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7c12      	ldrb	r2, [r2, #16]
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006876:	e05d      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa97 	bl	8006dae <USBD_CtlError>
            err++;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	3301      	adds	r3, #1
 8006884:	72fb      	strb	r3, [r7, #11]
          break;
 8006886:	e055      	b.n	8006934 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7c12      	ldrb	r2, [r2, #16]
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068aa:	e043      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa7d 	bl	8006dae <USBD_CtlError>
            err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ba:	e03b      	b.n	8006934 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7c12      	ldrb	r2, [r2, #16]
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068de:	e029      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa63 	bl	8006dae <USBD_CtlError>
            err++;
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	3301      	adds	r3, #1
 80068ec:	72fb      	strb	r3, [r7, #11]
          break;
 80068ee:	e021      	b.n	8006934 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006912:	e00f      	b.n	8006934 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa49 	bl	8006dae <USBD_CtlError>
            err++;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	3301      	adds	r3, #1
 8006920:	72fb      	strb	r3, [r7, #11]
          break;
 8006922:	e007      	b.n	8006934 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa41 	bl	8006dae <USBD_CtlError>
          err++;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	3301      	adds	r3, #1
 8006930:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006932:	bf00      	nop
      }
      break;
 8006934:	e037      	b.n	80069a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	7c1b      	ldrb	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	f107 0208 	add.w	r2, r7, #8
 800694a:	4610      	mov	r0, r2
 800694c:	4798      	blx	r3
 800694e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006950:	e029      	b.n	80069a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa2a 	bl	8006dae <USBD_CtlError>
        err++;
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	3301      	adds	r3, #1
 800695e:	72fb      	strb	r3, [r7, #11]
      break;
 8006960:	e021      	b.n	80069a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7c1b      	ldrb	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10d      	bne.n	8006986 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	f107 0208 	add.w	r2, r7, #8
 8006976:	4610      	mov	r0, r2
 8006978:	4798      	blx	r3
 800697a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	2207      	movs	r2, #7
 8006982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006984:	e00f      	b.n	80069a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa10 	bl	8006dae <USBD_CtlError>
        err++;
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	3301      	adds	r3, #1
 8006992:	72fb      	strb	r3, [r7, #11]
      break;
 8006994:	e007      	b.n	80069a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa08 	bl	8006dae <USBD_CtlError>
      err++;
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	3301      	adds	r3, #1
 80069a2:	72fb      	strb	r3, [r7, #11]
      break;
 80069a4:	bf00      	nop
  }

  if (err != 0U)
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11e      	bne.n	80069ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d016      	beq.n	80069e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80069b4:	893b      	ldrh	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	88da      	ldrh	r2, [r3, #6]
 80069be:	893b      	ldrh	r3, [r7, #8]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	bf28      	it	cs
 80069c4:	4613      	movcs	r3, r2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069ca:	893b      	ldrh	r3, [r7, #8]
 80069cc:	461a      	mov	r2, r3
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa5d 	bl	8006e90 <USBD_CtlSendData>
 80069d6:	e009      	b.n	80069ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9e7 	bl	8006dae <USBD_CtlError>
 80069e0:	e004      	b.n	80069ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 faae 	bl	8006f44 <USBD_CtlSendStatus>
 80069e8:	e000      	b.n	80069ec <USBD_GetDescriptor+0x320>
    return;
 80069ea:	bf00      	nop
  }
}
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop

080069f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	889b      	ldrh	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d131      	bne.n	8006a6a <USBD_SetAddress+0x76>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d12d      	bne.n	8006a6a <USBD_SetAddress+0x76>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	885b      	ldrh	r3, [r3, #2]
 8006a12:	2b7f      	cmp	r3, #127	; 0x7f
 8006a14:	d829      	bhi.n	8006a6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d104      	bne.n	8006a38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9bc 	bl	8006dae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	e01d      	b.n	8006a74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 ff51 	bl	80078ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa7a 	bl	8006f44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5e:	e009      	b.n	8006a74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a68:	e004      	b.n	8006a74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f99e 	bl	8006dae <USBD_CtlError>
  }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	885b      	ldrh	r3, [r3, #2]
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <USBD_SetConfig+0x150>)
 8006a92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a94:	4b4d      	ldr	r3, [pc, #308]	; (8006bcc <USBD_SetConfig+0x150>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d905      	bls.n	8006aa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f985 	bl	8006dae <USBD_CtlError>
    return USBD_FAIL;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e08c      	b.n	8006bc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d002      	beq.n	8006aba <USBD_SetConfig+0x3e>
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d029      	beq.n	8006b0c <USBD_SetConfig+0x90>
 8006ab8:	e075      	b.n	8006ba6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006aba:	4b44      	ldr	r3, [pc, #272]	; (8006bcc <USBD_SetConfig+0x150>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d020      	beq.n	8006b04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006ac2:	4b42      	ldr	r3, [pc, #264]	; (8006bcc <USBD_SetConfig+0x150>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <USBD_SetConfig+0x150>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fe ffbd 	bl	8005a52 <USBD_SetClassConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f962 	bl	8006dae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006af2:	e065      	b.n	8006bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa25 	bl	8006f44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b02:	e05d      	b.n	8006bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa1d 	bl	8006f44 <USBD_CtlSendStatus>
      break;
 8006b0a:	e059      	b.n	8006bc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d112      	bne.n	8006b3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7fe ffac 	bl	8005a8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa06 	bl	8006f44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b38:	e042      	b.n	8006bc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d02a      	beq.n	8006b9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fe ff9a 	bl	8005a8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b60:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <USBD_SetConfig+0x150>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe ff73 	bl	8005a52 <USBD_SetClassConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00f      	beq.n	8006b96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f918 	bl	8006dae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fe ff7f 	bl	8005a8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b94:	e014      	b.n	8006bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9d4 	bl	8006f44 <USBD_CtlSendStatus>
      break;
 8006b9c:	e010      	b.n	8006bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f9d0 	bl	8006f44 <USBD_CtlSendStatus>
      break;
 8006ba4:	e00c      	b.n	8006bc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f900 	bl	8006dae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <USBD_SetConfig+0x150>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fe ff68 	bl	8005a8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbe:	bf00      	nop
  }

  return ret;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200001d4 	.word	0x200001d4

08006bd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d004      	beq.n	8006bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8e2 	bl	8006dae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bea:	e023      	b.n	8006c34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	dc02      	bgt.n	8006bfe <USBD_GetConfig+0x2e>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc03      	bgt.n	8006c04 <USBD_GetConfig+0x34>
 8006bfc:	e015      	b.n	8006c2a <USBD_GetConfig+0x5a>
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d00b      	beq.n	8006c1a <USBD_GetConfig+0x4a>
 8006c02:	e012      	b.n	8006c2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f93c 	bl	8006e90 <USBD_CtlSendData>
        break;
 8006c18:	e00c      	b.n	8006c34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f934 	bl	8006e90 <USBD_CtlSendData>
        break;
 8006c28:	e004      	b.n	8006c34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8be 	bl	8006dae <USBD_CtlError>
        break;
 8006c32:	bf00      	nop
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d81e      	bhi.n	8006c92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	88db      	ldrh	r3, [r3, #6]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d004      	beq.n	8006c66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8a5 	bl	8006dae <USBD_CtlError>
        break;
 8006c64:	e01a      	b.n	8006c9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f043 0202 	orr.w	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	330c      	adds	r3, #12
 8006c86:	2202      	movs	r2, #2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f900 	bl	8006e90 <USBD_CtlSendData>
      break;
 8006c90:	e004      	b.n	8006c9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f88a 	bl	8006dae <USBD_CtlError>
      break;
 8006c9a:	bf00      	nop
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f940 	bl	8006f44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006cc4:	e013      	b.n	8006cee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	885b      	ldrh	r3, [r3, #2]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d10b      	bne.n	8006ce6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	889b      	ldrh	r3, [r3, #4]
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f930 	bl	8006f44 <USBD_CtlSendStatus>
}
 8006ce4:	e003      	b.n	8006cee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f860 	bl	8006dae <USBD_CtlError>
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d80b      	bhi.n	8006d26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10c      	bne.n	8006d30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f910 	bl	8006f44 <USBD_CtlSendStatus>
      }
      break;
 8006d24:	e004      	b.n	8006d30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f840 	bl	8006dae <USBD_CtlError>
      break;
 8006d2e:	e000      	b.n	8006d32 <USBD_ClrFeature+0x3c>
      break;
 8006d30:	bf00      	nop
  }
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fa17 	bl	8006198 <SWAPBYTE>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fa0a 	bl	8006198 <SWAPBYTE>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff f9fd 	bl	8006198 <SWAPBYTE>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	80da      	strh	r2, [r3, #6]
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fd2c 	bl	8007818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd28 	bl	8007818 <USBD_LL_StallEP>
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d036      	beq.n	8006e54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f000 f836 	bl	8006e5c <USBD_GetLen>
 8006df0:	4603      	mov	r3, r0
 8006df2:	3301      	adds	r3, #1
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	4413      	add	r3, r2
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4413      	add	r3, r2
 8006e16:	2203      	movs	r2, #3
 8006e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e20:	e013      	b.n	8006e4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	4413      	add	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	7812      	ldrb	r2, [r2, #0]
 8006e2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	3301      	adds	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]
    idx++;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	3301      	adds	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	4413      	add	r3, r2
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	3301      	adds	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e7      	bne.n	8006e22 <USBD_GetString+0x52>
 8006e52:	e000      	b.n	8006e56 <USBD_GetString+0x86>
    return;
 8006e54:	bf00      	nop
  }
}
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e6c:	e005      	b.n	8006e7a <USBD_GetLen+0x1e>
  {
    len++;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3301      	adds	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f5      	bne.n	8006e6e <USBD_GetLen+0x12>
  }

  return len;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fd37 	bl	800792a <USBD_LL_Transmit>

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fd26 	bl	800792a <USBD_LL_Transmit>

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	2100      	movs	r1, #0
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fd2a 	bl	800796c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fd19 	bl	800796c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f54:	2300      	movs	r3, #0
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fce5 	bl	800792a <USBD_LL_Transmit>

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2205      	movs	r2, #5
 8006f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fcf3 	bl	800796c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f94:	2200      	movs	r2, #0
 8006f96:	4912      	ldr	r1, [pc, #72]	; (8006fe0 <MX_USB_DEVICE_Init+0x50>)
 8006f98:	4812      	ldr	r0, [pc, #72]	; (8006fe4 <MX_USB_DEVICE_Init+0x54>)
 8006f9a:	f7fe fcdd 	bl	8005958 <USBD_Init>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fa4:	f7f9 fb9e 	bl	80006e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fa8:	490f      	ldr	r1, [pc, #60]	; (8006fe8 <MX_USB_DEVICE_Init+0x58>)
 8006faa:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <MX_USB_DEVICE_Init+0x54>)
 8006fac:	f7fe fd04 	bl	80059b8 <USBD_RegisterClass>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fb6:	f7f9 fb95 	bl	80006e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fba:	490c      	ldr	r1, [pc, #48]	; (8006fec <MX_USB_DEVICE_Init+0x5c>)
 8006fbc:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <MX_USB_DEVICE_Init+0x54>)
 8006fbe:	f7fe fbfb 	bl	80057b8 <USBD_CDC_RegisterInterface>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fc8:	f7f9 fb8c 	bl	80006e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fcc:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <MX_USB_DEVICE_Init+0x54>)
 8006fce:	f7fe fd29 	bl	8005a24 <USBD_Start>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006fd8:	f7f9 fb84 	bl	80006e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fdc:	bf00      	nop
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	200000ac 	.word	0x200000ac
 8006fe4:	200001d8 	.word	0x200001d8
 8006fe8:	20000018 	.word	0x20000018
 8006fec:	20000098 	.word	0x20000098

08006ff0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4905      	ldr	r1, [pc, #20]	; (800700c <CDC_Init_FS+0x1c>)
 8006ff8:	4805      	ldr	r0, [pc, #20]	; (8007010 <CDC_Init_FS+0x20>)
 8006ffa:	f7fe fbf7 	bl	80057ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ffe:	4905      	ldr	r1, [pc, #20]	; (8007014 <CDC_Init_FS+0x24>)
 8007000:	4803      	ldr	r0, [pc, #12]	; (8007010 <CDC_Init_FS+0x20>)
 8007002:	f7fe fc15 	bl	8005830 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007006:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007008:	4618      	mov	r0, r3
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000cb4 	.word	0x20000cb4
 8007010:	200001d8 	.word	0x200001d8
 8007014:	200004b4 	.word	0x200004b4

08007018 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800701c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800701e:	4618      	mov	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	71fb      	strb	r3, [r7, #7]
 8007034:	4613      	mov	r3, r2
 8007036:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b23      	cmp	r3, #35	; 0x23
 800703c:	d84a      	bhi.n	80070d4 <CDC_Control_FS+0xac>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <CDC_Control_FS+0x1c>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	080070d5 	.word	0x080070d5
 8007048:	080070d5 	.word	0x080070d5
 800704c:	080070d5 	.word	0x080070d5
 8007050:	080070d5 	.word	0x080070d5
 8007054:	080070d5 	.word	0x080070d5
 8007058:	080070d5 	.word	0x080070d5
 800705c:	080070d5 	.word	0x080070d5
 8007060:	080070d5 	.word	0x080070d5
 8007064:	080070d5 	.word	0x080070d5
 8007068:	080070d5 	.word	0x080070d5
 800706c:	080070d5 	.word	0x080070d5
 8007070:	080070d5 	.word	0x080070d5
 8007074:	080070d5 	.word	0x080070d5
 8007078:	080070d5 	.word	0x080070d5
 800707c:	080070d5 	.word	0x080070d5
 8007080:	080070d5 	.word	0x080070d5
 8007084:	080070d5 	.word	0x080070d5
 8007088:	080070d5 	.word	0x080070d5
 800708c:	080070d5 	.word	0x080070d5
 8007090:	080070d5 	.word	0x080070d5
 8007094:	080070d5 	.word	0x080070d5
 8007098:	080070d5 	.word	0x080070d5
 800709c:	080070d5 	.word	0x080070d5
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	080070d5 	.word	0x080070d5
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070d5 	.word	0x080070d5
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	080070d5 	.word	0x080070d5
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070d5 	.word	0x080070d5
 80070cc:	080070d5 	.word	0x080070d5
 80070d0:	080070d5 	.word	0x080070d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070d4:	bf00      	nop
  }

  return (USBD_OK);
 80070d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4811      	ldr	r0, [pc, #68]	; (8007138 <CDC_Receive_FS+0x54>)
 80070f2:	f7fe fb9d 	bl	8005830 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070f6:	4810      	ldr	r0, [pc, #64]	; (8007138 <CDC_Receive_FS+0x54>)
 80070f8:	f7fe fbf8 	bl	80058ec <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);			//These 3 lines clear our own rx buffer, copies USB buffer to our own rx buffer
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	2100      	movs	r1, #0
 8007106:	480d      	ldr	r0, [pc, #52]	; (800713c <CDC_Receive_FS+0x58>)
 8007108:	f000 fd2c 	bl	8007b64 <memset>
  memcpy (buffer, Buf, len);			// and then clears the USB buffer.
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	461a      	mov	r2, r3
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	480a      	ldr	r0, [pc, #40]	; (800713c <CDC_Receive_FS+0x58>)
 8007114:	f000 fd18 	bl	8007b48 <memcpy>
  memset (Buf, '\0', len);
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	461a      	mov	r2, r3
 800711c:	2100      	movs	r1, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fd20 	bl	8007b64 <memset>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	//Toggle indicator LED, to show RTOS communication / interrupt possibilities.
 8007124:	2180      	movs	r1, #128	; 0x80
 8007126:	4806      	ldr	r0, [pc, #24]	; (8007140 <CDC_Receive_FS+0x5c>)
 8007128:	f7f9 ff03 	bl	8000f32 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 800712c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200001d8 	.word	0x200001d8
 800713c:	2000018c 	.word	0x2000018c
 8007140:	40020400 	.word	0x40020400

08007144 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <CDC_Transmit_FS+0x48>)
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007166:	2301      	movs	r3, #1
 8007168:	e00b      	b.n	8007182 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	461a      	mov	r2, r3
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4806      	ldr	r0, [pc, #24]	; (800718c <CDC_Transmit_FS+0x48>)
 8007172:	f7fe fb3b 	bl	80057ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <CDC_Transmit_FS+0x48>)
 8007178:	f7fe fb78 	bl	800586c <USBD_CDC_TransmitPacket>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200001d8 	.word	0x200001d8

08007190 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2212      	movs	r2, #18
 80071c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071c6:	4b03      	ldr	r3, [pc, #12]	; (80071d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200000cc 	.word	0x200000cc

080071d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2204      	movs	r2, #4
 80071e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071ea:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	200000ec 	.word	0x200000ec

080071fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4907      	ldr	r1, [pc, #28]	; (8007230 <USBD_FS_ProductStrDescriptor+0x34>)
 8007212:	4808      	ldr	r0, [pc, #32]	; (8007234 <USBD_FS_ProductStrDescriptor+0x38>)
 8007214:	f7ff fddc 	bl	8006dd0 <USBD_GetString>
 8007218:	e004      	b.n	8007224 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	4904      	ldr	r1, [pc, #16]	; (8007230 <USBD_FS_ProductStrDescriptor+0x34>)
 800721e:	4805      	ldr	r0, [pc, #20]	; (8007234 <USBD_FS_ProductStrDescriptor+0x38>)
 8007220:	f7ff fdd6 	bl	8006dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007224:	4b02      	ldr	r3, [pc, #8]	; (8007230 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200014b4 	.word	0x200014b4
 8007234:	08007d88 	.word	0x08007d88

08007238 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	4904      	ldr	r1, [pc, #16]	; (8007258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007248:	4804      	ldr	r0, [pc, #16]	; (800725c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800724a:	f7ff fdc1 	bl	8006dd0 <USBD_GetString>
  return USBD_StrDesc;
 800724e:	4b02      	ldr	r3, [pc, #8]	; (8007258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	200014b4 	.word	0x200014b4
 800725c:	08007d9c 	.word	0x08007d9c

08007260 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	6039      	str	r1, [r7, #0]
 800726a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	221a      	movs	r2, #26
 8007270:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007272:	f000 f855 	bl	8007320 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007276:	4b02      	ldr	r3, [pc, #8]	; (8007280 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200000f0 	.word	0x200000f0

08007284 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4907      	ldr	r1, [pc, #28]	; (80072b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800729a:	4808      	ldr	r0, [pc, #32]	; (80072bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800729c:	f7ff fd98 	bl	8006dd0 <USBD_GetString>
 80072a0:	e004      	b.n	80072ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80072a8:	f7ff fd92 	bl	8006dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200014b4 	.word	0x200014b4
 80072bc:	08007db0 	.word	0x08007db0

080072c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4907      	ldr	r1, [pc, #28]	; (80072f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072d6:	4808      	ldr	r0, [pc, #32]	; (80072f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072d8:	f7ff fd7a 	bl	8006dd0 <USBD_GetString>
 80072dc:	e004      	b.n	80072e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072e4:	f7ff fd74 	bl	8006dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200014b4 	.word	0x200014b4
 80072f8:	08007dbc 	.word	0x08007dbc

080072fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	220c      	movs	r2, #12
 800730c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800730e:	4b03      	ldr	r3, [pc, #12]	; (800731c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	200000e0 	.word	0x200000e0

08007320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <Get_SerialNum+0x44>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <Get_SerialNum+0x48>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <Get_SerialNum+0x4c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007346:	2208      	movs	r2, #8
 8007348:	4909      	ldr	r1, [pc, #36]	; (8007370 <Get_SerialNum+0x50>)
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f814 	bl	8007378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007350:	2204      	movs	r2, #4
 8007352:	4908      	ldr	r1, [pc, #32]	; (8007374 <Get_SerialNum+0x54>)
 8007354:	68b8      	ldr	r0, [r7, #8]
 8007356:	f000 f80f 	bl	8007378 <IntToUnicode>
  }
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	1ff0f420 	.word	0x1ff0f420
 8007368:	1ff0f424 	.word	0x1ff0f424
 800736c:	1ff0f428 	.word	0x1ff0f428
 8007370:	200000f2 	.word	0x200000f2
 8007374:	20000102 	.word	0x20000102

08007378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
 800738e:	e027      	b.n	80073e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	0f1b      	lsrs	r3, r3, #28
 8007394:	2b09      	cmp	r3, #9
 8007396:	d80b      	bhi.n	80073b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0f1b      	lsrs	r3, r3, #28
 800739c:	b2da      	uxtb	r2, r3
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4619      	mov	r1, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	440b      	add	r3, r1
 80073a8:	3230      	adds	r2, #48	; 0x30
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e00a      	b.n	80073c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0f1b      	lsrs	r3, r3, #28
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4619      	mov	r1, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	440b      	add	r3, r1
 80073c0:	3237      	adds	r2, #55	; 0x37
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	3301      	adds	r3, #1
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4413      	add	r3, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	3301      	adds	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
 80073e0:	7dfa      	ldrb	r2, [r7, #23]
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3d3      	bcc.n	8007390 <IntToUnicode+0x18>
  }
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b0ae      	sub	sp, #184	; 0xb8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	2290      	movs	r2, #144	; 0x90
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fba3 	bl	8007b64 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007426:	d151      	bne.n	80074cc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800742c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800742e:	2300      	movs	r3, #0
 8007430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007434:	f107 0314 	add.w	r3, r7, #20
 8007438:	4618      	mov	r0, r3
 800743a:	f7fb fd49 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007444:	f7f9 f94e 	bl	80006e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007448:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6313      	str	r3, [r2, #48]	; 0x30
 8007454:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007460:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007468:	2302      	movs	r3, #2
 800746a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800746e:	2300      	movs	r3, #0
 8007470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007474:	2303      	movs	r3, #3
 8007476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800747a:	230a      	movs	r3, #10
 800747c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007480:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007484:	4619      	mov	r1, r3
 8007486:	4814      	ldr	r0, [pc, #80]	; (80074d8 <HAL_PCD_MspInit+0xe0>)
 8007488:	f7f9 fb8e 	bl	8000ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800748c:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 800748e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007490:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 8007492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007496:	6353      	str	r3, [r2, #52]	; 0x34
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 80074aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ae:	6453      	str	r3, [r2, #68]	; 0x44
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <HAL_PCD_MspInit+0xdc>)
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	2043      	movs	r0, #67	; 0x43
 80074c2:	f7f9 fb3a 	bl	8000b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074c6:	2043      	movs	r0, #67	; 0x43
 80074c8:	f7f9 fb53 	bl	8000b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074cc:	bf00      	nop
 80074ce:	37b8      	adds	r7, #184	; 0xb8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40020000 	.word	0x40020000

080074dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe fae3 	bl	8005abe <USBD_LL_SetupStage>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	4619      	mov	r1, r3
 800752a:	f7fe fb1d 	bl	8005b68 <USBD_LL_DataOutStage>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	334c      	adds	r3, #76	; 0x4c
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	4619      	mov	r1, r3
 800755e:	f7fe fbb6 	bl	8005cce <USBD_LL_DataInStage>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fcea 	bl	8005f52 <USBD_LL_SOF>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800758e:	2301      	movs	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
 800759e:	e008      	b.n	80075b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d102      	bne.n	80075ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	e001      	b.n	80075b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80075ae:	f7f9 f899 	bl	80006e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fc8a 	bl	8005ed6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fc32 	bl	8005e32 <USBD_LL_Reset>
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fc85 	bl	8005ef6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <HAL_PCD_SuspendCallback+0x48>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	4a03      	ldr	r2, [pc, #12]	; (8007620 <HAL_PCD_SuspendCallback+0x48>)
 8007612:	f043 0306 	orr.w	r3, r3, #6
 8007616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fc75 	bl	8005f22 <USBD_LL_Resume>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	4611      	mov	r1, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fccd 	bl	8005ff6 <USBD_LL_IsoOUTIncomplete>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fc89 	bl	8005f92 <USBD_LL_IsoINIncomplete>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fcdf 	bl	800605a <USBD_LL_DevConnected>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fcdc 	bl	8006070 <USBD_LL_DevDisconnected>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d13c      	bne.n	800774a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076d0:	4a20      	ldr	r2, [pc, #128]	; (8007754 <USBD_LL_Init+0x94>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1e      	ldr	r2, [pc, #120]	; (8007754 <USBD_LL_Init+0x94>)
 80076dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076e0:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <USBD_LL_Init+0x94>)
 80076e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <USBD_LL_Init+0x94>)
 80076ea:	2206      	movs	r2, #6
 80076ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076ee:	4b19      	ldr	r3, [pc, #100]	; (8007754 <USBD_LL_Init+0x94>)
 80076f0:	2202      	movs	r2, #2
 80076f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076f4:	4b17      	ldr	r3, [pc, #92]	; (8007754 <USBD_LL_Init+0x94>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076fa:	4b16      	ldr	r3, [pc, #88]	; (8007754 <USBD_LL_Init+0x94>)
 80076fc:	2202      	movs	r2, #2
 80076fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007700:	4b14      	ldr	r3, [pc, #80]	; (8007754 <USBD_LL_Init+0x94>)
 8007702:	2200      	movs	r2, #0
 8007704:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <USBD_LL_Init+0x94>)
 8007708:	2200      	movs	r2, #0
 800770a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <USBD_LL_Init+0x94>)
 800770e:	2200      	movs	r2, #0
 8007710:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <USBD_LL_Init+0x94>)
 8007714:	2200      	movs	r2, #0
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <USBD_LL_Init+0x94>)
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800771e:	480d      	ldr	r0, [pc, #52]	; (8007754 <USBD_LL_Init+0x94>)
 8007720:	f7f9 fc21 	bl	8000f66 <HAL_PCD_Init>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800772a:	f7f8 ffdb 	bl	80006e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800772e:	2180      	movs	r1, #128	; 0x80
 8007730:	4808      	ldr	r0, [pc, #32]	; (8007754 <USBD_LL_Init+0x94>)
 8007732:	f7fa fe9c 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007736:	2240      	movs	r2, #64	; 0x40
 8007738:	2100      	movs	r1, #0
 800773a:	4806      	ldr	r0, [pc, #24]	; (8007754 <USBD_LL_Init+0x94>)
 800773c:	f7fa fe50 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007740:	2280      	movs	r2, #128	; 0x80
 8007742:	2101      	movs	r1, #1
 8007744:	4803      	ldr	r0, [pc, #12]	; (8007754 <USBD_LL_Init+0x94>)
 8007746:	f7fa fe4b 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200016b4 	.word	0x200016b4

08007758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800776e:	4618      	mov	r0, r3
 8007770:	f7f9 fd1d 	bl	80011ae <HAL_PCD_Start>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f97e 	bl	8007a7c <USBD_Get_USB_Status>
 8007780:	4603      	mov	r3, r0
 8007782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007784:	7bbb      	ldrb	r3, [r7, #14]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	4608      	mov	r0, r1
 8007798:	4611      	mov	r1, r2
 800779a:	461a      	mov	r2, r3
 800779c:	4603      	mov	r3, r0
 800779e:	70fb      	strb	r3, [r7, #3]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70bb      	strb	r3, [r7, #2]
 80077a4:	4613      	mov	r3, r2
 80077a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077b6:	78bb      	ldrb	r3, [r7, #2]
 80077b8:	883a      	ldrh	r2, [r7, #0]
 80077ba:	78f9      	ldrb	r1, [r7, #3]
 80077bc:	f7fa fa0a 	bl	8001bd4 <HAL_PCD_EP_Open>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f958 	bl	8007a7c <USBD_Get_USB_Status>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077f4:	78fa      	ldrb	r2, [r7, #3]
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fa fa53 	bl	8001ca4 <HAL_PCD_EP_Close>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f939 	bl	8007a7c <USBD_Get_USB_Status>
 800780a:	4603      	mov	r3, r0
 800780c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fa fb2b 	bl	8001e92 <HAL_PCD_EP_SetStall>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f91a 	bl	8007a7c <USBD_Get_USB_Status>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784c:	7bbb      	ldrb	r3, [r7, #14]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f7fa fb70 	bl	8001f5a <HAL_PCD_EP_ClrStall>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f8fb 	bl	8007a7c <USBD_Get_USB_Status>
 8007886:	4603      	mov	r3, r0
 8007888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800788a:	7bbb      	ldrb	r3, [r7, #14]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da0b      	bge.n	80078c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	4613      	mov	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	333e      	adds	r3, #62	; 0x3e
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	e00b      	b.n	80078e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80078de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7fa f93d 	bl	8001b8a <HAL_PCD_SetAddress>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f8b0 	bl	8007a7c <USBD_Get_USB_Status>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007920:	7bbb      	ldrb	r3, [r7, #14]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	460b      	mov	r3, r1
 8007938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007948:	7af9      	ldrb	r1, [r7, #11]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	f7fa fa56 	bl	8001dfe <HAL_PCD_EP_Transmit>
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 f88f 	bl	8007a7c <USBD_Get_USB_Status>
 800795e:	4603      	mov	r3, r0
 8007960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007962:	7dbb      	ldrb	r3, [r7, #22]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	607a      	str	r2, [r7, #4]
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	460b      	mov	r3, r1
 800797a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800798a:	7af9      	ldrb	r1, [r7, #11]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	f7fa f9d2 	bl	8001d38 <HAL_PCD_EP_Receive>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f86e 	bl	8007a7c <USBD_Get_USB_Status>
 80079a0:	4603      	mov	r3, r0
 80079a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa fa02 	bl	8001dce <HAL_PCD_EP_GetRxCount>
 80079ca:	4603      	mov	r3, r0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_PCDEx_LPM_Callback+0x18>
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d01f      	beq.n	8007a2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80079ea:	e03b      	b.n	8007a64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80079f4:	f000 f83c 	bl	8007a70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <HAL_PCDEx_LPM_Callback+0x98>)
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_PCDEx_LPM_Callback+0x98>)
 80079fe:	f023 0306 	bic.w	r3, r3, #6
 8007a02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fa7d 	bl	8005f22 <USBD_LL_Resume>
    break;
 8007a28:	e01c      	b.n	8007a64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fa54 	bl	8005ef6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_PCDEx_LPM_Callback+0x98>)
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <HAL_PCDEx_LPM_Callback+0x98>)
 8007a5c:	f043 0306 	orr.w	r3, r3, #6
 8007a60:	6113      	str	r3, [r2, #16]
    break;
 8007a62:	bf00      	nop
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	e000ed00 	.word	0xe000ed00

08007a70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007a74:	f7f8 fd7c 	bl	8000570 <SystemClock_Config>
}
 8007a78:	bf00      	nop
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d817      	bhi.n	8007ac0 <USBD_Get_USB_Status+0x44>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <USBD_Get_USB_Status+0x1c>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007aaf 	.word	0x08007aaf
 8007aa0:	08007ab5 	.word	0x08007ab5
 8007aa4:	08007abb 	.word	0x08007abb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8007aac:	e00b      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab2:	e008      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e005      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e002      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	bf00      	nop
  }
  return usb_status;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	; (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000010c 	.word	0x2000010c

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4d0d      	ldr	r5, [pc, #52]	; (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	; (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2600      	movs	r6, #0
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4d0b      	ldr	r5, [pc, #44]	; (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	; (8007b24 <__libc_init_array+0x44>)
 8007af4:	f000 f93c 	bl	8007d70 <_init>
 8007af8:	1b64      	subs	r4, r4, r5
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2600      	movs	r6, #0
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	08007de4 	.word	0x08007de4
 8007b1c:	08007de4 	.word	0x08007de4
 8007b20:	08007de4 	.word	0x08007de4
 8007b24:	08007de8 	.word	0x08007de8

08007b28 <malloc>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <malloc+0xc>)
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f000 b88d 	b.w	8007c4c <_malloc_r>
 8007b32:	bf00      	nop
 8007b34:	2000010c 	.word	0x2000010c

08007b38 <free>:
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <free+0xc>)
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	f000 b819 	b.w	8007b74 <_free_r>
 8007b42:	bf00      	nop
 8007b44:	2000010c 	.word	0x2000010c

08007b48 <memcpy>:
 8007b48:	440a      	add	r2, r1
 8007b4a:	4291      	cmp	r1, r2
 8007b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b50:	d100      	bne.n	8007b54 <memcpy+0xc>
 8007b52:	4770      	bx	lr
 8007b54:	b510      	push	{r4, lr}
 8007b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	d1f9      	bne.n	8007b56 <memcpy+0xe>
 8007b62:	bd10      	pop	{r4, pc}

08007b64 <memset>:
 8007b64:	4402      	add	r2, r0
 8007b66:	4603      	mov	r3, r0
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d100      	bne.n	8007b6e <memset+0xa>
 8007b6c:	4770      	bx	lr
 8007b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b72:	e7f9      	b.n	8007b68 <memset+0x4>

08007b74 <_free_r>:
 8007b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d044      	beq.n	8007c04 <_free_r+0x90>
 8007b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7e:	9001      	str	r0, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f1a1 0404 	sub.w	r4, r1, #4
 8007b86:	bfb8      	it	lt
 8007b88:	18e4      	addlt	r4, r4, r3
 8007b8a:	f000 f8e3 	bl	8007d54 <__malloc_lock>
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <_free_r+0x94>)
 8007b90:	9801      	ldr	r0, [sp, #4]
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	b933      	cbnz	r3, 8007ba4 <_free_r+0x30>
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	6014      	str	r4, [r2, #0]
 8007b9a:	b003      	add	sp, #12
 8007b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba0:	f000 b8de 	b.w	8007d60 <__malloc_unlock>
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d908      	bls.n	8007bba <_free_r+0x46>
 8007ba8:	6825      	ldr	r5, [r4, #0]
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf01      	itttt	eq
 8007bb0:	6819      	ldreq	r1, [r3, #0]
 8007bb2:	685b      	ldreq	r3, [r3, #4]
 8007bb4:	1949      	addeq	r1, r1, r5
 8007bb6:	6021      	streq	r1, [r4, #0]
 8007bb8:	e7ed      	b.n	8007b96 <_free_r+0x22>
 8007bba:	461a      	mov	r2, r3
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	b10b      	cbz	r3, 8007bc4 <_free_r+0x50>
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d9fa      	bls.n	8007bba <_free_r+0x46>
 8007bc4:	6811      	ldr	r1, [r2, #0]
 8007bc6:	1855      	adds	r5, r2, r1
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	d10b      	bne.n	8007be4 <_free_r+0x70>
 8007bcc:	6824      	ldr	r4, [r4, #0]
 8007bce:	4421      	add	r1, r4
 8007bd0:	1854      	adds	r4, r2, r1
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	6011      	str	r1, [r2, #0]
 8007bd6:	d1e0      	bne.n	8007b9a <_free_r+0x26>
 8007bd8:	681c      	ldr	r4, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	6053      	str	r3, [r2, #4]
 8007bde:	4421      	add	r1, r4
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	e7da      	b.n	8007b9a <_free_r+0x26>
 8007be4:	d902      	bls.n	8007bec <_free_r+0x78>
 8007be6:	230c      	movs	r3, #12
 8007be8:	6003      	str	r3, [r0, #0]
 8007bea:	e7d6      	b.n	8007b9a <_free_r+0x26>
 8007bec:	6825      	ldr	r5, [r4, #0]
 8007bee:	1961      	adds	r1, r4, r5
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	bf04      	itt	eq
 8007bf4:	6819      	ldreq	r1, [r3, #0]
 8007bf6:	685b      	ldreq	r3, [r3, #4]
 8007bf8:	6063      	str	r3, [r4, #4]
 8007bfa:	bf04      	itt	eq
 8007bfc:	1949      	addeq	r1, r1, r5
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	6054      	str	r4, [r2, #4]
 8007c02:	e7ca      	b.n	8007b9a <_free_r+0x26>
 8007c04:	b003      	add	sp, #12
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	20001bbc 	.word	0x20001bbc

08007c0c <sbrk_aligned>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4e0e      	ldr	r6, [pc, #56]	; (8007c48 <sbrk_aligned+0x3c>)
 8007c10:	460c      	mov	r4, r1
 8007c12:	6831      	ldr	r1, [r6, #0]
 8007c14:	4605      	mov	r5, r0
 8007c16:	b911      	cbnz	r1, 8007c1e <sbrk_aligned+0x12>
 8007c18:	f000 f88c 	bl	8007d34 <_sbrk_r>
 8007c1c:	6030      	str	r0, [r6, #0]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f887 	bl	8007d34 <_sbrk_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d00a      	beq.n	8007c40 <sbrk_aligned+0x34>
 8007c2a:	1cc4      	adds	r4, r0, #3
 8007c2c:	f024 0403 	bic.w	r4, r4, #3
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d007      	beq.n	8007c44 <sbrk_aligned+0x38>
 8007c34:	1a21      	subs	r1, r4, r0
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 f87c 	bl	8007d34 <_sbrk_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d101      	bne.n	8007c44 <sbrk_aligned+0x38>
 8007c40:	f04f 34ff 	mov.w	r4, #4294967295
 8007c44:	4620      	mov	r0, r4
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	20001bc0 	.word	0x20001bc0

08007c4c <_malloc_r>:
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	1ccd      	adds	r5, r1, #3
 8007c52:	f025 0503 	bic.w	r5, r5, #3
 8007c56:	3508      	adds	r5, #8
 8007c58:	2d0c      	cmp	r5, #12
 8007c5a:	bf38      	it	cc
 8007c5c:	250c      	movcc	r5, #12
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	4607      	mov	r7, r0
 8007c62:	db01      	blt.n	8007c68 <_malloc_r+0x1c>
 8007c64:	42a9      	cmp	r1, r5
 8007c66:	d905      	bls.n	8007c74 <_malloc_r+0x28>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	4e2e      	ldr	r6, [pc, #184]	; (8007d30 <_malloc_r+0xe4>)
 8007c76:	f000 f86d 	bl	8007d54 <__malloc_lock>
 8007c7a:	6833      	ldr	r3, [r6, #0]
 8007c7c:	461c      	mov	r4, r3
 8007c7e:	bb34      	cbnz	r4, 8007cce <_malloc_r+0x82>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ffc2 	bl	8007c0c <sbrk_aligned>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	d14d      	bne.n	8007d2a <_malloc_r+0xde>
 8007c8e:	6834      	ldr	r4, [r6, #0]
 8007c90:	4626      	mov	r6, r4
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d140      	bne.n	8007d18 <_malloc_r+0xcc>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	eb04 0803 	add.w	r8, r4, r3
 8007ca0:	f000 f848 	bl	8007d34 <_sbrk_r>
 8007ca4:	4580      	cmp	r8, r0
 8007ca6:	d13a      	bne.n	8007d1e <_malloc_r+0xd2>
 8007ca8:	6821      	ldr	r1, [r4, #0]
 8007caa:	3503      	adds	r5, #3
 8007cac:	1a6d      	subs	r5, r5, r1
 8007cae:	f025 0503 	bic.w	r5, r5, #3
 8007cb2:	3508      	adds	r5, #8
 8007cb4:	2d0c      	cmp	r5, #12
 8007cb6:	bf38      	it	cc
 8007cb8:	250c      	movcc	r5, #12
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff ffa5 	bl	8007c0c <sbrk_aligned>
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d02b      	beq.n	8007d1e <_malloc_r+0xd2>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	442b      	add	r3, r5
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	e00e      	b.n	8007cec <_malloc_r+0xa0>
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	1b52      	subs	r2, r2, r5
 8007cd2:	d41e      	bmi.n	8007d12 <_malloc_r+0xc6>
 8007cd4:	2a0b      	cmp	r2, #11
 8007cd6:	d916      	bls.n	8007d06 <_malloc_r+0xba>
 8007cd8:	1961      	adds	r1, r4, r5
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	6025      	str	r5, [r4, #0]
 8007cde:	bf18      	it	ne
 8007ce0:	6059      	strne	r1, [r3, #4]
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	bf08      	it	eq
 8007ce6:	6031      	streq	r1, [r6, #0]
 8007ce8:	5162      	str	r2, [r4, r5]
 8007cea:	604b      	str	r3, [r1, #4]
 8007cec:	4638      	mov	r0, r7
 8007cee:	f104 060b 	add.w	r6, r4, #11
 8007cf2:	f000 f835 	bl	8007d60 <__malloc_unlock>
 8007cf6:	f026 0607 	bic.w	r6, r6, #7
 8007cfa:	1d23      	adds	r3, r4, #4
 8007cfc:	1af2      	subs	r2, r6, r3
 8007cfe:	d0b6      	beq.n	8007c6e <_malloc_r+0x22>
 8007d00:	1b9b      	subs	r3, r3, r6
 8007d02:	50a3      	str	r3, [r4, r2]
 8007d04:	e7b3      	b.n	8007c6e <_malloc_r+0x22>
 8007d06:	6862      	ldr	r2, [r4, #4]
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	bf0c      	ite	eq
 8007d0c:	6032      	streq	r2, [r6, #0]
 8007d0e:	605a      	strne	r2, [r3, #4]
 8007d10:	e7ec      	b.n	8007cec <_malloc_r+0xa0>
 8007d12:	4623      	mov	r3, r4
 8007d14:	6864      	ldr	r4, [r4, #4]
 8007d16:	e7b2      	b.n	8007c7e <_malloc_r+0x32>
 8007d18:	4634      	mov	r4, r6
 8007d1a:	6876      	ldr	r6, [r6, #4]
 8007d1c:	e7b9      	b.n	8007c92 <_malloc_r+0x46>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4638      	mov	r0, r7
 8007d24:	f000 f81c 	bl	8007d60 <__malloc_unlock>
 8007d28:	e7a1      	b.n	8007c6e <_malloc_r+0x22>
 8007d2a:	6025      	str	r5, [r4, #0]
 8007d2c:	e7de      	b.n	8007cec <_malloc_r+0xa0>
 8007d2e:	bf00      	nop
 8007d30:	20001bbc 	.word	0x20001bbc

08007d34 <_sbrk_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d06      	ldr	r5, [pc, #24]	; (8007d50 <_sbrk_r+0x1c>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	602b      	str	r3, [r5, #0]
 8007d40:	f7f8 fd2e 	bl	80007a0 <_sbrk>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_sbrk_r+0x1a>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_sbrk_r+0x1a>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	20001bc4 	.word	0x20001bc4

08007d54 <__malloc_lock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__malloc_lock+0x8>)
 8007d56:	f000 b809 	b.w	8007d6c <__retarget_lock_acquire_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20001bc8 	.word	0x20001bc8

08007d60 <__malloc_unlock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	; (8007d68 <__malloc_unlock+0x8>)
 8007d62:	f000 b804 	b.w	8007d6e <__retarget_lock_release_recursive>
 8007d66:	bf00      	nop
 8007d68:	20001bc8 	.word	0x20001bc8

08007d6c <__retarget_lock_acquire_recursive>:
 8007d6c:	4770      	bx	lr

08007d6e <__retarget_lock_release_recursive>:
 8007d6e:	4770      	bx	lr

08007d70 <_init>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr

08007d7c <_fini>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr
